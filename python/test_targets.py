# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.core.exceptions import HttpResponseError
from azure.mgmt.workloadorchestration import WorkloadOrchestrationMgmtClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"


class TestWorkloadOrchestrationMgmtTargetsOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(WorkloadOrchestrationMgmtClient)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_targets_begin_create_or_update(self, resource_group):
        response = self.client.targets.begin_create_or_update(
            resource_group_name=resource_group.name,
            target_name="my-target",
            resource={
                "location": AZURE_LOCATION,
                "properties": {
                    "displayName": "My Target",
                    "description": "This is a test target.",
                },
            },
        ).result()

        assert response.name == "my-target"
        assert response.location == AZURE_LOCATION
        assert response.properties.displayName == "My Target"

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_targets_get(self, resource_group):
        target_name = "my-target-for-get"
        self.client.targets.begin_create_or_update(
            resource_group_name=resource_group.name,
            target_name=target_name,
            resource={
                "location": AZURE_LOCATION,
                "properties": {
                    "displayName": "My Target for Get",
                },
            },
        ).result()

        response = self.client.targets.get(
            resource_group_name=resource_group.name,
            target_name=target_name,
        )

        assert response.name == target_name
        assert response.properties.displayName == "My Target for Get"

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_targets_begin_delete(self, resource_group):
        target_name = "my-target-for-delete"
        self.client.targets.begin_create_or_update(
            resource_group_name=resource_group.name,
            target_name=target_name,
            resource={
                "location": AZURE_LOCATION,
                "properties": {
                    "displayName": "My Target for Delete",
                },
            },
        ).result()

        response = self.client.targets.begin_delete(
            resource_group_name=resource_group.name,
            target_name=target_name,
        ).result()

        assert response is None

        with pytest.raises(HttpResponseError) as e:
            self.client.targets.get(
                resource_group_name=resource_group.name,
                target_name=target_name,
            )
        assert e.value.status_code == 404

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_targets_list_by_resource_group(self, resource_group):
        target_name = "my-target-for-list-rg"
        self.client.targets.begin_create_or_update(
            resource_group_name=resource_group.name,
            target_name=target_name,
            resource={
                "location": AZURE_LOCATION,
                "properties": {
                    "displayName": "My Target for List by RG",
                },
            },
        ).result()

        response = self.client.targets.list_by_resource_group(
            resource_group_name=resource_group.name,
        )
        result = [r for r in response]
        assert len(result) > 0
        assert any(r.name == target_name for r in result)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_targets_list_by_subscription(self, resource_group):
        target_name = "my-target-for-list-sub"
        self.client.targets.begin_create_or_update(
            resource_group_name=resource_group.name,
            target_name=target_name,
            resource={
                "location": AZURE_LOCATION,
                "properties": {
                    "displayName": "My Target for List by Sub",
                },
            },
        ).result()

        response = self.client.targets.list_by_subscription()
        result = [r for r in response]
        assert len(result) > 0
        assert any(r.name == target_name for r in result)