// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
export function dynamicSchemaSerializer(item) {
    return {
        properties: !item["properties"]
            ? item["properties"]
            : dynamicSchemaPropertiesSerializer(item["properties"]),
    };
}
export function dynamicSchemaDeserializer(item) {
    return {
        id: item["id"],
        name: item["name"],
        type: item["type"],
        systemData: !item["systemData"]
            ? item["systemData"]
            : systemDataDeserializer(item["systemData"]),
        properties: !item["properties"]
            ? item["properties"]
            : dynamicSchemaPropertiesDeserializer(item["properties"]),
        eTag: item["eTag"],
    };
}
export function dynamicSchemaPropertiesSerializer(item) {
    return item;
}
export function dynamicSchemaPropertiesDeserializer(item) {
    return {
        configurationType: item["configurationType"],
        configurationModel: item["configurationModel"],
        provisioningState: item["provisioningState"],
    };
}
/** Available configuration types */
export var KnownConfigurationType;
(function (KnownConfigurationType) {
    /** Configuration type Shared */
    KnownConfigurationType["Shared"] = "Shared";
    /** Configuration type Hierarchy */
    KnownConfigurationType["Hierarchy"] = "Hierarchy";
})(KnownConfigurationType || (KnownConfigurationType = {}));
/** Available configuration models */
export var KnownConfigurationModel;
(function (KnownConfigurationModel) {
    /** Configuration model Application */
    KnownConfigurationModel["Application"] = "Application";
    /** Configuration model Common */
    KnownConfigurationModel["Common"] = "Common";
})(KnownConfigurationModel || (KnownConfigurationModel = {}));
/** Provisioning state of resource */
export var KnownProvisioningState;
(function (KnownProvisioningState) {
    /** Resource has been created. */
    KnownProvisioningState["Succeeded"] = "Succeeded";
    /** Resource creation failed. */
    KnownProvisioningState["Failed"] = "Failed";
    /** Resource creation was canceled. */
    KnownProvisioningState["Canceled"] = "Canceled";
    /** Resource Provisioning is initialized */
    KnownProvisioningState["Initialized"] = "Initialized";
    /** Resource Provisioning is in progress */
    KnownProvisioningState["Inprogress"] = "InProgress";
    /** Resource Provisioning is deleting */
    KnownProvisioningState["Deleting"] = "Deleting";
})(KnownProvisioningState || (KnownProvisioningState = {}));
export function proxyResourceSerializer(item) {
    return item;
}
export function proxyResourceDeserializer(item) {
    return {
        id: item["id"],
        name: item["name"],
        type: item["type"],
        systemData: !item["systemData"]
            ? item["systemData"]
            : systemDataDeserializer(item["systemData"]),
    };
}
export function resourceSerializer(item) {
    return item;
}
export function resourceDeserializer(item) {
    return {
        id: item["id"],
        name: item["name"],
        type: item["type"],
        systemData: !item["systemData"]
            ? item["systemData"]
            : systemDataDeserializer(item["systemData"]),
    };
}
export function systemDataDeserializer(item) {
    return {
        createdBy: item["createdBy"],
        createdByType: item["createdByType"],
        createdAt: !item["createdAt"] ? item["createdAt"] : new Date(item["createdAt"]),
        lastModifiedBy: item["lastModifiedBy"],
        lastModifiedByType: item["lastModifiedByType"],
        lastModifiedAt: !item["lastModifiedAt"]
            ? item["lastModifiedAt"]
            : new Date(item["lastModifiedAt"]),
    };
}
/** The kind of entity that created the resource. */
export var KnownCreatedByType;
(function (KnownCreatedByType) {
    /** The entity was created by a user. */
    KnownCreatedByType["User"] = "User";
    /** The entity was created by an application. */
    KnownCreatedByType["Application"] = "Application";
    /** The entity was created by a managed identity. */
    KnownCreatedByType["ManagedIdentity"] = "ManagedIdentity";
    /** The entity was created by a key. */
    KnownCreatedByType["Key"] = "Key";
})(KnownCreatedByType || (KnownCreatedByType = {}));
export function errorResponseDeserializer(item) {
    return {
        error: !item["error"] ? item["error"] : errorDetailDeserializer(item["error"]),
    };
}
export function errorDetailSerializer(item) {
    return item;
}
export function errorDetailDeserializer(item) {
    return {
        code: item["code"],
        message: item["message"],
        target: item["target"],
        details: !item["details"] ? item["details"] : errorDetailArrayDeserializer(item["details"]),
        additionalInfo: !item["additionalInfo"]
            ? item["additionalInfo"]
            : errorAdditionalInfoArrayDeserializer(item["additionalInfo"]),
    };
}
export function errorDetailArraySerializer(result) {
    return result.map((item) => {
        return errorDetailSerializer(item);
    });
}
export function errorDetailArrayDeserializer(result) {
    return result.map((item) => {
        return errorDetailDeserializer(item);
    });
}
export function errorAdditionalInfoArrayDeserializer(result) {
    return result.map((item) => {
        return errorAdditionalInfoDeserializer(item);
    });
}
export function errorAdditionalInfoDeserializer(item) {
    return {
        type: item["type"],
        info: item["info"],
    };
}
export function _dynamicSchemaListResultDeserializer(item) {
    return {
        value: dynamicSchemaArrayDeserializer(item["value"]),
        nextLink: item["nextLink"],
    };
}
export function dynamicSchemaArraySerializer(result) {
    return result.map((item) => {
        return dynamicSchemaSerializer(item);
    });
}
export function dynamicSchemaArrayDeserializer(result) {
    return result.map((item) => {
        return dynamicSchemaDeserializer(item);
    });
}
export function schemaSerializer(item) {
    return {
        tags: item["tags"],
        location: item["location"],
        properties: !item["properties"]
            ? item["properties"]
            : schemaPropertiesSerializer(item["properties"]),
    };
}
export function schemaDeserializer(item) {
    return {
        tags: item["tags"],
        location: item["location"],
        id: item["id"],
        name: item["name"],
        type: item["type"],
        systemData: !item["systemData"]
            ? item["systemData"]
            : systemDataDeserializer(item["systemData"]),
        properties: !item["properties"]
            ? item["properties"]
            : schemaPropertiesDeserializer(item["properties"]),
        eTag: item["eTag"],
    };
}
export function schemaPropertiesSerializer(item) {
    return item;
}
export function schemaPropertiesDeserializer(item) {
    return {
        currentVersion: item["currentVersion"],
        provisioningState: item["provisioningState"],
    };
}
export function trackedResourceSerializer(item) {
    return { tags: item["tags"], location: item["location"] };
}
export function trackedResourceDeserializer(item) {
    return {
        id: item["id"],
        name: item["name"],
        type: item["type"],
        systemData: !item["systemData"]
            ? item["systemData"]
            : systemDataDeserializer(item["systemData"]),
        tags: item["tags"],
        location: item["location"],
    };
}
export function schemaUpdateSerializer(item) {
    return {
        properties: !item["properties"]
            ? item["properties"]
            : schemaUpdatePropertiesSerializer(item["properties"]),
        tags: item["tags"],
    };
}
export function schemaUpdatePropertiesSerializer(item) {
    return item;
}
export function schemaVersionWithUpdateTypeSerializer(item) {
    return {
        updateType: item["updateType"],
        version: item["version"],
        schemaVersion: schemaVersionSerializer(item["schemaVersion"]),
    };
}
/** Denotes which part of the version number will be updated */
export var KnownUpdateType;
(function (KnownUpdateType) {
    /** Major version */
    KnownUpdateType["Major"] = "Major";
    /** Minor version */
    KnownUpdateType["Minor"] = "Minor";
    /** Patch version */
    KnownUpdateType["Patch"] = "Patch";
})(KnownUpdateType || (KnownUpdateType = {}));
export function schemaVersionSerializer(item) {
    return {
        properties: !item["properties"]
            ? item["properties"]
            : schemaVersionPropertiesSerializer(item["properties"]),
    };
}
export function schemaVersionDeserializer(item) {
    return {
        id: item["id"],
        name: item["name"],
        type: item["type"],
        systemData: !item["systemData"]
            ? item["systemData"]
            : systemDataDeserializer(item["systemData"]),
        properties: !item["properties"]
            ? item["properties"]
            : schemaVersionPropertiesDeserializer(item["properties"]),
        eTag: item["eTag"],
    };
}
export function schemaVersionPropertiesSerializer(item) {
    return { value: item["value"] };
}
export function schemaVersionPropertiesDeserializer(item) {
    return {
        value: item["value"],
        provisioningState: item["provisioningState"],
    };
}
export function versionParameterSerializer(item) {
    return { version: item["version"] };
}
export function removeVersionResponseDeserializer(item) {
    return {
        status: item["status"],
    };
}
export function _schemaListResultDeserializer(item) {
    return {
        value: schemaArrayDeserializer(item["value"]),
        nextLink: item["nextLink"],
    };
}
export function schemaArraySerializer(result) {
    return result.map((item) => {
        return schemaSerializer(item);
    });
}
export function schemaArrayDeserializer(result) {
    return result.map((item) => {
        return schemaDeserializer(item);
    });
}
export function _schemaVersionListResultDeserializer(item) {
    return {
        value: schemaVersionArrayDeserializer(item["value"]),
        nextLink: item["nextLink"],
    };
}
export function schemaVersionArraySerializer(result) {
    return result.map((item) => {
        return schemaVersionSerializer(item);
    });
}
export function schemaVersionArrayDeserializer(result) {
    return result.map((item) => {
        return schemaVersionDeserializer(item);
    });
}
export function solutionVersionSerializer(item) {
    return {
        properties: !item["properties"]
            ? item["properties"]
            : solutionVersionPropertiesSerializer(item["properties"]),
        extendedLocation: !item["extendedLocation"]
            ? item["extendedLocation"]
            : extendedLocationSerializer(item["extendedLocation"]),
    };
}
export function solutionVersionDeserializer(item) {
    return {
        id: item["id"],
        name: item["name"],
        type: item["type"],
        systemData: !item["systemData"]
            ? item["systemData"]
            : systemDataDeserializer(item["systemData"]),
        properties: !item["properties"]
            ? item["properties"]
            : solutionVersionPropertiesDeserializer(item["properties"]),
        extendedLocation: !item["extendedLocation"]
            ? item["extendedLocation"]
            : extendedLocationDeserializer(item["extendedLocation"]),
        eTag: item["eTag"],
    };
}
export function solutionVersionPropertiesSerializer(item) {
    return { specification: item["specification"] };
}
export function solutionVersionPropertiesDeserializer(item) {
    return {
        solutionTemplateVersionId: item["solutionTemplateVersionId"],
        revision: item["revision"],
        targetDisplayName: item["targetDisplayName"],
        configuration: item["configuration"],
        targetLevelConfiguration: item["targetLevelConfiguration"],
        specification: item["specification"],
        reviewId: item["reviewId"],
        externalValidationId: item["externalValidationId"],
        state: item["state"],
        solutionInstanceName: item["solutionInstanceName"],
        solutionDependencies: !item["solutionDependencies"]
            ? item["solutionDependencies"]
            : solutionDependencyArrayDeserializer(item["solutionDependencies"]),
        errorDetails: !item["errorDetails"]
            ? item["errorDetails"]
            : errorDetailDeserializer(item["errorDetails"]),
        latestActionTrackingUri: item["latestActionTrackingUri"],
        actionType: item["actionType"],
        provisioningState: item["provisioningState"],
    };
}
/** Solution Instance State */
export var KnownState;
(function (KnownState) {
    /** Solution Instance is in review */
    KnownState["InReview"] = "InReview";
    /** Solution Instance upgrade is in review */
    KnownState["UpgradeInReview"] = "UpgradeInReview";
    /** Solution Instance is ready to deploy */
    KnownState["ReadyToDeploy"] = "ReadyToDeploy";
    /** Solution Instance is ready to upgrade */
    KnownState["ReadyToUpgrade"] = "ReadyToUpgrade";
    /** Solution Instance is deploying */
    KnownState["Deploying"] = "Deploying";
    /** Solution Instance is deployed */
    KnownState["Deployed"] = "Deployed";
    /** Solution Instance failed to deploy */
    KnownState["Failed"] = "Failed";
    /** Solution Instance is undeployed */
    KnownState["Undeployed"] = "Undeployed";
    /** Solution Instance is pending external validation */
    KnownState["PendingExternalValidation"] = "PendingExternalValidation";
    /** Solution Instance failed external validation */
    KnownState["ExternalValidationFailed"] = "ExternalValidationFailed";
    /** Solution Instance is staging the images */
    KnownState["Staging"] = "Staging";
})(KnownState || (KnownState = {}));
export function solutionDependencyArrayDeserializer(result) {
    return result.map((item) => {
        return solutionDependencyDeserializer(item);
    });
}
export function solutionDependencyDeserializer(item) {
    return {
        solutionVersionId: item["solutionVersionId"],
        solutionInstanceName: item["solutionInstanceName"],
        solutionTemplateVersionId: item["solutionTemplateVersionId"],
        targetId: item["targetId"],
        dependencies: !item["dependencies"]
            ? item["dependencies"]
            : solutionDependencyArrayDeserializer(item["dependencies"]),
    };
}
/** JobType for the job. Supports extensibility via string values. */
export var KnownJobType;
(function (KnownJobType) {
    /** A deployment job. */
    KnownJobType["Deploy"] = "deploy";
    /** A staging job. */
    KnownJobType["Staging"] = "staging";
    /** A validation job. */
    KnownJobType["ExternalValidation"] = "externalValidation";
})(KnownJobType || (KnownJobType = {}));
export function extendedLocationSerializer(item) {
    return { name: item["name"], type: item["type"] };
}
export function extendedLocationDeserializer(item) {
    return {
        name: item["name"],
        type: item["type"],
    };
}
/** The supported ExtendedLocation types. */
export var KnownExtendedLocationType;
(function (KnownExtendedLocationType) {
    /** Azure Edge Zones location type */
    KnownExtendedLocationType["EdgeZone"] = "EdgeZone";
    /** Azure Custom Locations type */
    KnownExtendedLocationType["CustomLocation"] = "CustomLocation";
})(KnownExtendedLocationType || (KnownExtendedLocationType = {}));
export function _solutionVersionListResultDeserializer(item) {
    return {
        value: solutionVersionArrayDeserializer(item["value"]),
        nextLink: item["nextLink"],
    };
}
export function solutionVersionArraySerializer(result) {
    return result.map((item) => {
        return solutionVersionSerializer(item);
    });
}
export function solutionVersionArrayDeserializer(result) {
    return result.map((item) => {
        return solutionVersionDeserializer(item);
    });
}
export function jobDeserializer(item) {
    return {
        id: item["id"],
        name: item["name"],
        type: item["type"],
        systemData: !item["systemData"]
            ? item["systemData"]
            : systemDataDeserializer(item["systemData"]),
        properties: !item["properties"]
            ? item["properties"]
            : jobPropertiesDeserializer(item["properties"]),
        eTag: item["eTag"],
    };
}
export function jobPropertiesDeserializer(item) {
    return {
        jobType: item["jobType"],
        startTime: !item["startTime"] ? item["startTime"] : new Date(item["startTime"]),
        endTime: !item["endTime"] ? item["endTime"] : new Date(item["endTime"]),
        status: item["status"],
        jobParameter: !item["jobParameter"]
            ? item["jobParameter"]
            : jobParameterBaseUnionDeserializer(item["jobParameter"]),
        correlationId: item["correlationId"],
        steps: !item["steps"] ? item["steps"] : jobStepArrayDeserializer(item["steps"]),
        triggeredBy: item["triggeredBy"],
        provisioningState: item["provisioningState"],
        errorDetails: !item["errorDetails"]
            ? item["errorDetails"]
            : errorDetailDeserializer(item["errorDetails"]),
    };
}
/** Status of a job or job step. */
export var KnownJobStatus;
(function (KnownJobStatus) {
    /** The job or step is not started. */
    KnownJobStatus["NotStarted"] = "NotStarted";
    /** The job or step is in progress. */
    KnownJobStatus["InProgress"] = "InProgress";
    /** The job or step succeeded. */
    KnownJobStatus["Succeeded"] = "Succeeded";
    /** The job or step failed. */
    KnownJobStatus["Failed"] = "Failed";
})(KnownJobStatus || (KnownJobStatus = {}));
export function jobParameterBaseDeserializer(item) {
    return {
        jobType: item["jobType"],
    };
}
export function jobParameterBaseUnionDeserializer(item) {
    switch (item.jobType) {
        case "deploy":
            return deployJobParameterDeserializer(item);
        default:
            return jobParameterBaseDeserializer(item);
    }
}
export function deployJobParameterDeserializer(item) {
    return {
        jobType: item["jobType"],
        parameter: !item["parameter"]
            ? item["parameter"]
            : installSolutionParameterDeserializer(item["parameter"]),
    };
}
export function installSolutionParameterSerializer(item) {
    return { solutionVersionId: item["solutionVersionId"] };
}
export function installSolutionParameterDeserializer(item) {
    return {
        solutionVersionId: item["solutionVersionId"],
    };
}
export function jobStepArrayDeserializer(result) {
    return result.map((item) => {
        return jobStepDeserializer(item);
    });
}
export function jobStepDeserializer(item) {
    return {
        name: item["name"],
        status: item["status"],
        startTime: !item["startTime"] ? item["startTime"] : new Date(item["startTime"]),
        endTime: !item["endTime"] ? item["endTime"] : new Date(item["endTime"]),
        message: item["message"],
        statistics: !item["statistics"]
            ? item["statistics"]
            : jobStepStatisticsBaseUnionDeserializer(item["statistics"]),
        steps: !item["steps"] ? item["steps"] : jobStepArrayDeserializer(item["steps"]),
        errorDetails: !item["errorDetails"]
            ? item["errorDetails"]
            : errorDetailDeserializer(item["errorDetails"]),
    };
}
export function jobStepStatisticsBaseDeserializer(item) {
    return {
        statisticsType: item["statisticsType"],
    };
}
export function jobStepStatisticsBaseUnionDeserializer(item) {
    switch (item.statisticsType) {
        case "deploy":
            return deployJobStepStatisticsDeserializer(item);
        default:
            return jobStepStatisticsBaseDeserializer(item);
    }
}
export function deployJobStepStatisticsDeserializer(item) {
    return {
        statisticsType: item["statisticsType"],
        totalCount: item["totalCount"],
        successCount: item["successCount"],
        failedCount: item["failedCount"],
    };
}
export function extensionResourceDeserializer(item) {
    return {
        id: item["id"],
        name: item["name"],
        type: item["type"],
        systemData: !item["systemData"]
            ? item["systemData"]
            : systemDataDeserializer(item["systemData"]),
    };
}
export function _jobListResultDeserializer(item) {
    return {
        value: jobArrayDeserializer(item["value"]),
        nextLink: item["nextLink"],
    };
}
export function jobArrayDeserializer(result) {
    return result.map((item) => {
        return jobDeserializer(item);
    });
}
export function targetSerializer(item) {
    return {
        tags: item["tags"],
        location: item["location"],
        properties: !item["properties"]
            ? item["properties"]
            : targetPropertiesSerializer(item["properties"]),
        extendedLocation: !item["extendedLocation"]
            ? item["extendedLocation"]
            : extendedLocationSerializer(item["extendedLocation"]),
    };
}
export function targetDeserializer(item) {
    return {
        tags: item["tags"],
        location: item["location"],
        id: item["id"],
        name: item["name"],
        type: item["type"],
        systemData: !item["systemData"]
            ? item["systemData"]
            : systemDataDeserializer(item["systemData"]),
        properties: !item["properties"]
            ? item["properties"]
            : targetPropertiesDeserializer(item["properties"]),
        eTag: item["eTag"],
        extendedLocation: !item["extendedLocation"]
            ? item["extendedLocation"]
            : extendedLocationDeserializer(item["extendedLocation"]),
    };
}
export function targetPropertiesSerializer(item) {
    return {
        description: item["description"],
        displayName: item["displayName"],
        contextId: item["contextId"],
        targetSpecification: item["targetSpecification"],
        capabilities: item["capabilities"].map((p) => {
            return p;
        }),
        hierarchyLevel: item["hierarchyLevel"],
        solutionScope: item["solutionScope"],
        state: item["state"],
    };
}
export function targetPropertiesDeserializer(item) {
    return {
        description: item["description"],
        displayName: item["displayName"],
        contextId: item["contextId"],
        targetSpecification: item["targetSpecification"],
        capabilities: item["capabilities"].map((p) => {
            return p;
        }),
        hierarchyLevel: item["hierarchyLevel"],
        status: !item["status"] ? item["status"] : deploymentStatusDeserializer(item["status"]),
        solutionScope: item["solutionScope"],
        state: item["state"],
        provisioningState: item["provisioningState"],
    };
}
export function deploymentStatusDeserializer(item) {
    return {
        lastModified: !item["lastModified"] ? item["lastModified"] : new Date(item["lastModified"]),
        deployed: item["deployed"],
        expectedRunningJobId: item["expectedRunningJobId"],
        runningJobId: item["runningJobId"],
        status: item["status"],
        statusDetails: item["statusDetails"],
        generation: item["generation"],
        targetStatuses: !item["targetStatuses"]
            ? item["targetStatuses"]
            : targetStatusArrayDeserializer(item["targetStatuses"]),
    };
}
export function targetStatusArrayDeserializer(result) {
    return result.map((item) => {
        return targetStatusDeserializer(item);
    });
}
export function targetStatusDeserializer(item) {
    return {
        name: item["name"],
        status: item["status"],
        componentStatuses: !item["componentStatuses"]
            ? item["componentStatuses"]
            : componentStatusArrayDeserializer(item["componentStatuses"]),
    };
}
export function componentStatusArrayDeserializer(result) {
    return result.map((item) => {
        return componentStatusDeserializer(item);
    });
}
export function componentStatusDeserializer(item) {
    return {
        name: item["name"],
        status: item["status"],
    };
}
/** Resource Type State */
export var KnownResourceState;
(function (KnownResourceState) {
    /** Resource is active */
    KnownResourceState["Active"] = "active";
    /** Resource is inactive */
    KnownResourceState["Inactive"] = "inactive";
})(KnownResourceState || (KnownResourceState = {}));
export function targetUpdateSerializer(item) {
    return {
        tags: item["tags"],
        properties: !item["properties"]
            ? item["properties"]
            : targetUpdatePropertiesSerializer(item["properties"]),
    };
}
export function targetUpdatePropertiesSerializer(item) {
    return {
        description: item["description"],
        displayName: item["displayName"],
        contextId: item["contextId"],
        targetSpecification: item["targetSpecification"],
        capabilities: !item["capabilities"]
            ? item["capabilities"]
            : item["capabilities"].map((p) => {
                return p;
            }),
        hierarchyLevel: item["hierarchyLevel"],
        solutionScope: item["solutionScope"],
        state: item["state"],
    };
}
export function _targetListResultDeserializer(item) {
    return {
        value: targetArrayDeserializer(item["value"]),
        nextLink: item["nextLink"],
    };
}
export function targetArraySerializer(result) {
    return result.map((item) => {
        return targetSerializer(item);
    });
}
export function targetArrayDeserializer(result) {
    return result.map((item) => {
        return targetDeserializer(item);
    });
}
export function uninstallSolutionParameterSerializer(item) {
    return {
        solutionTemplateId: item["solutionTemplateId"],
        solutionInstanceName: item["solutionInstanceName"],
    };
}
export function removeRevisionParameterSerializer(item) {
    return {
        solutionTemplateId: item["solutionTemplateId"],
        solutionVersion: item["solutionVersion"],
    };
}
export function solutionTemplateParameterSerializer(item) {
    return {
        solutionTemplateVersionId: item["solutionTemplateVersionId"],
        solutionInstanceName: item["solutionInstanceName"],
        solutionDependencies: !item["solutionDependencies"]
            ? item["solutionDependencies"]
            : solutionDependencyParameterArraySerializer(item["solutionDependencies"]),
    };
}
export function solutionDependencyParameterArraySerializer(result) {
    return result.map((item) => {
        return solutionDependencyParameterSerializer(item);
    });
}
export function solutionDependencyParameterSerializer(item) {
    return {
        solutionVersionId: item["solutionVersionId"],
        solutionTemplateId: item["solutionTemplateId"],
        solutionTemplateVersion: item["solutionTemplateVersion"],
        solutionInstanceName: item["solutionInstanceName"],
        targetId: item["targetId"],
        dependencies: !item["dependencies"]
            ? item["dependencies"]
            : solutionDependencyParameterArraySerializer(item["dependencies"]),
    };
}
export function resolvedConfigurationDeserializer(item) {
    return {
        configuration: item["configuration"],
    };
}
export function solutionVersionParameterSerializer(item) {
    return { solutionVersionId: item["solutionVersionId"] };
}
export function updateExternalValidationStatusParameterSerializer(item) {
    return {
        solutionVersionId: item["solutionVersionId"],
        errorDetails: !item["errorDetails"]
            ? item["errorDetails"]
            : errorDetailSerializer(item["errorDetails"]),
        externalValidationId: item["externalValidationId"],
        validationStatus: item["validationStatus"],
    };
}
/** Solution Instance Validation Status */
export var KnownValidationStatus;
(function (KnownValidationStatus) {
    /** Solution Instance is valid */
    KnownValidationStatus["Valid"] = "Valid";
    /** Solution Instance is invalid */
    KnownValidationStatus["Invalid"] = "Invalid";
})(KnownValidationStatus || (KnownValidationStatus = {}));
export function dynamicSchemaVersionSerializer(item) {
    return {
        properties: !item["properties"]
            ? item["properties"]
            : schemaVersionPropertiesSerializer(item["properties"]),
    };
}
export function dynamicSchemaVersionDeserializer(item) {
    return {
        id: item["id"],
        name: item["name"],
        type: item["type"],
        systemData: !item["systemData"]
            ? item["systemData"]
            : systemDataDeserializer(item["systemData"]),
        properties: !item["properties"]
            ? item["properties"]
            : schemaVersionPropertiesDeserializer(item["properties"]),
        eTag: item["eTag"],
    };
}
export function _dynamicSchemaVersionListResultDeserializer(item) {
    return {
        value: dynamicSchemaVersionArrayDeserializer(item["value"]),
        nextLink: item["nextLink"],
    };
}
export function dynamicSchemaVersionArraySerializer(result) {
    return result.map((item) => {
        return dynamicSchemaVersionSerializer(item);
    });
}
export function dynamicSchemaVersionArrayDeserializer(result) {
    return result.map((item) => {
        return dynamicSchemaVersionDeserializer(item);
    });
}
export function schemaReferenceDeserializer(item) {
    return {
        id: item["id"],
        name: item["name"],
        type: item["type"],
        systemData: !item["systemData"]
            ? item["systemData"]
            : systemDataDeserializer(item["systemData"]),
        properties: !item["properties"]
            ? item["properties"]
            : schemaReferencePropertiesDeserializer(item["properties"]),
        eTag: item["eTag"],
    };
}
export function schemaReferencePropertiesDeserializer(item) {
    return {
        schemaId: item["schemaId"],
        provisioningState: item["provisioningState"],
    };
}
export function _schemaReferenceListResultDeserializer(item) {
    return {
        value: schemaReferenceArrayDeserializer(item["value"]),
        nextLink: item["nextLink"],
    };
}
export function schemaReferenceArrayDeserializer(result) {
    return result.map((item) => {
        return schemaReferenceDeserializer(item);
    });
}
export function solutionSerializer(item) {
    return {
        properties: !item["properties"]
            ? item["properties"]
            : solutionPropertiesSerializer(item["properties"]),
        extendedLocation: !item["extendedLocation"]
            ? item["extendedLocation"]
            : extendedLocationSerializer(item["extendedLocation"]),
    };
}
export function solutionDeserializer(item) {
    return {
        id: item["id"],
        name: item["name"],
        type: item["type"],
        systemData: !item["systemData"]
            ? item["systemData"]
            : systemDataDeserializer(item["systemData"]),
        properties: !item["properties"]
            ? item["properties"]
            : solutionPropertiesDeserializer(item["properties"]),
        extendedLocation: !item["extendedLocation"]
            ? item["extendedLocation"]
            : extendedLocationDeserializer(item["extendedLocation"]),
        eTag: item["eTag"],
    };
}
export function solutionPropertiesSerializer(item) {
    return item;
}
export function solutionPropertiesDeserializer(item) {
    return {
        solutionTemplateId: item["solutionTemplateId"],
        availableSolutionTemplateVersions: !item["availableSolutionTemplateVersions"]
            ? item["availableSolutionTemplateVersions"]
            : availableSolutionTemplateVersionArrayDeserializer(item["availableSolutionTemplateVersions"]),
        provisioningState: item["provisioningState"],
    };
}
export function availableSolutionTemplateVersionArrayDeserializer(result) {
    return result.map((item) => {
        return availableSolutionTemplateVersionDeserializer(item);
    });
}
export function availableSolutionTemplateVersionDeserializer(item) {
    return {
        solutionTemplateVersion: item["solutionTemplateVersion"],
        latestConfigRevision: item["latestConfigRevision"],
        isConfigured: item["isConfigured"],
    };
}
export function solutionUpdateSerializer(item) {
    return {
        properties: !item["properties"]
            ? item["properties"]
            : solutionUpdatePropertiesSerializer(item["properties"]),
    };
}
export function solutionUpdatePropertiesSerializer(item) {
    return item;
}
export function _solutionListResultDeserializer(item) {
    return {
        value: solutionArrayDeserializer(item["value"]),
        nextLink: item["nextLink"],
    };
}
export function solutionArraySerializer(result) {
    return result.map((item) => {
        return solutionSerializer(item);
    });
}
export function solutionArrayDeserializer(result) {
    return result.map((item) => {
        return solutionDeserializer(item);
    });
}
export function solutionTemplateVersionSerializer(item) {
    return {
        properties: !item["properties"]
            ? item["properties"]
            : solutionTemplateVersionPropertiesSerializer(item["properties"]),
    };
}
export function solutionTemplateVersionDeserializer(item) {
    return {
        id: item["id"],
        name: item["name"],
        type: item["type"],
        systemData: !item["systemData"]
            ? item["systemData"]
            : systemDataDeserializer(item["systemData"]),
        properties: !item["properties"]
            ? item["properties"]
            : solutionTemplateVersionPropertiesDeserializer(item["properties"]),
        eTag: item["eTag"],
    };
}
export function solutionTemplateVersionPropertiesSerializer(item) {
    return {
        configurations: item["configurations"],
        specification: item["specification"],
        orchestratorType: item["orchestratorType"],
    };
}
export function solutionTemplateVersionPropertiesDeserializer(item) {
    return {
        configurations: item["configurations"],
        specification: item["specification"],
        orchestratorType: item["orchestratorType"],
        provisioningState: item["provisioningState"],
    };
}
/** Available Orchestrator types */
export var KnownOrchestratorType;
(function (KnownOrchestratorType) {
    /** Default type */
    KnownOrchestratorType["TO"] = "TO";
})(KnownOrchestratorType || (KnownOrchestratorType = {}));
export function _solutionTemplateVersionListResultDeserializer(item) {
    return {
        value: solutionTemplateVersionArrayDeserializer(item["value"]),
        nextLink: item["nextLink"],
    };
}
export function solutionTemplateVersionArraySerializer(result) {
    return result.map((item) => {
        return solutionTemplateVersionSerializer(item);
    });
}
export function solutionTemplateVersionArrayDeserializer(result) {
    return result.map((item) => {
        return solutionTemplateVersionDeserializer(item);
    });
}
export function bulkDeploySolutionParameterSerializer(item) {
    return { targets: bulkDeployTargetDetailsArraySerializer(item["targets"]) };
}
export function bulkDeployTargetDetailsArraySerializer(result) {
    return result.map((item) => {
        return bulkDeployTargetDetailsSerializer(item);
    });
}
export function bulkDeployTargetDetailsSerializer(item) {
    return { solutionVersionId: item["solutionVersionId"] };
}
export function bulkPublishSolutionParameterSerializer(item) {
    return {
        targets: bulkPublishTargetDetailsArraySerializer(item["targets"]),
        solutionInstanceName: item["solutionInstanceName"],
        solutionDependencies: !item["solutionDependencies"]
            ? item["solutionDependencies"]
            : solutionDependencyParameterArraySerializer(item["solutionDependencies"]),
    };
}
export function bulkPublishTargetDetailsArraySerializer(result) {
    return result.map((item) => {
        return bulkPublishTargetDetailsSerializer(item);
    });
}
export function bulkPublishTargetDetailsSerializer(item) {
    return {
        targetId: item["targetId"],
        solutionInstanceName: item["solutionInstanceName"],
    };
}
export function solutionTemplateSerializer(item) {
    return {
        tags: item["tags"],
        location: item["location"],
        properties: !item["properties"]
            ? item["properties"]
            : solutionTemplatePropertiesSerializer(item["properties"]),
    };
}
export function solutionTemplateDeserializer(item) {
    return {
        tags: item["tags"],
        location: item["location"],
        id: item["id"],
        name: item["name"],
        type: item["type"],
        systemData: !item["systemData"]
            ? item["systemData"]
            : systemDataDeserializer(item["systemData"]),
        properties: !item["properties"]
            ? item["properties"]
            : solutionTemplatePropertiesDeserializer(item["properties"]),
        eTag: item["eTag"],
    };
}
export function solutionTemplatePropertiesSerializer(item) {
    return {
        description: item["description"],
        capabilities: item["capabilities"].map((p) => {
            return p;
        }),
        state: item["state"],
        enableExternalValidation: item["enableExternalValidation"],
    };
}
export function solutionTemplatePropertiesDeserializer(item) {
    return {
        description: item["description"],
        capabilities: item["capabilities"].map((p) => {
            return p;
        }),
        latestVersion: item["latestVersion"],
        state: item["state"],
        enableExternalValidation: item["enableExternalValidation"],
        provisioningState: item["provisioningState"],
    };
}
export function solutionTemplateUpdateSerializer(item) {
    return {
        tags: item["tags"],
        properties: !item["properties"]
            ? item["properties"]
            : solutionTemplateUpdatePropertiesSerializer(item["properties"]),
    };
}
export function solutionTemplateUpdatePropertiesSerializer(item) {
    return {
        description: item["description"],
        capabilities: !item["capabilities"]
            ? item["capabilities"]
            : item["capabilities"].map((p) => {
                return p;
            }),
        state: item["state"],
        enableExternalValidation: item["enableExternalValidation"],
    };
}
export function solutionTemplateVersionWithUpdateTypeSerializer(item) {
    return {
        updateType: item["updateType"],
        version: item["version"],
        solutionTemplateVersion: solutionTemplateVersionSerializer(item["solutionTemplateVersion"]),
    };
}
export function _solutionTemplateListResultDeserializer(item) {
    return {
        value: solutionTemplateArrayDeserializer(item["value"]),
        nextLink: item["nextLink"],
    };
}
export function solutionTemplateArraySerializer(result) {
    return result.map((item) => {
        return solutionTemplateSerializer(item);
    });
}
export function solutionTemplateArrayDeserializer(result) {
    return result.map((item) => {
        return solutionTemplateDeserializer(item);
    });
}
export function instanceSerializer(item) {
    return {
        properties: !item["properties"]
            ? item["properties"]
            : instancePropertiesSerializer(item["properties"]),
        extendedLocation: !item["extendedLocation"]
            ? item["extendedLocation"]
            : extendedLocationSerializer(item["extendedLocation"]),
    };
}
export function instanceDeserializer(item) {
    return {
        id: item["id"],
        name: item["name"],
        type: item["type"],
        systemData: !item["systemData"]
            ? item["systemData"]
            : systemDataDeserializer(item["systemData"]),
        properties: !item["properties"]
            ? item["properties"]
            : instancePropertiesDeserializer(item["properties"]),
        extendedLocation: !item["extendedLocation"]
            ? item["extendedLocation"]
            : extendedLocationDeserializer(item["extendedLocation"]),
        eTag: item["eTag"],
    };
}
export function instancePropertiesSerializer(item) {
    return {
        solutionVersionId: item["solutionVersionId"],
        targetId: item["targetId"],
        activeState: item["activeState"],
        reconciliationPolicy: !item["reconciliationPolicy"]
            ? item["reconciliationPolicy"]
            : reconciliationPolicyPropertiesSerializer(item["reconciliationPolicy"]),
        solutionScope: item["solutionScope"],
    };
}
export function instancePropertiesDeserializer(item) {
    return {
        solutionVersionId: item["solutionVersionId"],
        targetId: item["targetId"],
        activeState: item["activeState"],
        reconciliationPolicy: !item["reconciliationPolicy"]
            ? item["reconciliationPolicy"]
            : reconciliationPolicyPropertiesDeserializer(item["reconciliationPolicy"]),
        solutionScope: item["solutionScope"],
        status: !item["status"] ? item["status"] : deploymentStatusDeserializer(item["status"]),
        deploymentTimestampEpoch: item["deploymentTimestampEpoch"],
        provisioningState: item["provisioningState"],
    };
}
/** Instance State */
export var KnownActiveState;
(function (KnownActiveState) {
    /** Instance is active */
    KnownActiveState["Active"] = "active";
    /** Instance is inactive */
    KnownActiveState["Inactive"] = "inactive";
})(KnownActiveState || (KnownActiveState = {}));
export function reconciliationPolicyPropertiesSerializer(item) {
    return { state: item["state"], interval: item["interval"] };
}
export function reconciliationPolicyPropertiesDeserializer(item) {
    return {
        state: item["state"],
        interval: item["interval"],
    };
}
/** Defines a state of the reconciliation policy. */
export var KnownReconciliationState;
(function (KnownReconciliationState) {
    /** Reconciliation is inactive */
    KnownReconciliationState["Inactive"] = "inactive";
    /** Reconciliation is active */
    KnownReconciliationState["Active"] = "active";
})(KnownReconciliationState || (KnownReconciliationState = {}));
export function _instanceListResultDeserializer(item) {
    return {
        value: instanceArrayDeserializer(item["value"]),
        nextLink: item["nextLink"],
    };
}
export function instanceArraySerializer(result) {
    return result.map((item) => {
        return instanceSerializer(item);
    });
}
export function instanceArrayDeserializer(result) {
    return result.map((item) => {
        return instanceDeserializer(item);
    });
}
export function instanceHistoryDeserializer(item) {
    return {
        id: item["id"],
        name: item["name"],
        type: item["type"],
        systemData: !item["systemData"]
            ? item["systemData"]
            : systemDataDeserializer(item["systemData"]),
        properties: !item["properties"]
            ? item["properties"]
            : instanceHistoryPropertiesDeserializer(item["properties"]),
        extendedLocation: !item["extendedLocation"]
            ? item["extendedLocation"]
            : extendedLocationDeserializer(item["extendedLocation"]),
        eTag: item["eTag"],
    };
}
export function instanceHistoryPropertiesDeserializer(item) {
    return {
        solutionVersion: solutionVersionSnapshotDeserializer(item["solutionVersion"]),
        target: targetSnapshotDeserializer(item["target"]),
        solutionScope: item["solutionScope"],
        activeState: item["activeState"],
        reconciliationPolicy: !item["reconciliationPolicy"]
            ? item["reconciliationPolicy"]
            : reconciliationPolicyPropertiesDeserializer(item["reconciliationPolicy"]),
        status: !item["status"] ? item["status"] : deploymentStatusDeserializer(item["status"]),
        provisioningState: item["provisioningState"],
    };
}
export function solutionVersionSnapshotDeserializer(item) {
    return {
        solutionVersionId: item["solutionVersionId"],
        specification: item["specification"],
    };
}
export function targetSnapshotDeserializer(item) {
    return {
        targetId: item["targetId"],
        targetSpecification: item["targetSpecification"],
        solutionScope: item["solutionScope"],
    };
}
export function _instanceHistoryListResultDeserializer(item) {
    return {
        value: instanceHistoryArrayDeserializer(item["value"]),
        nextLink: item["nextLink"],
    };
}
export function instanceHistoryArrayDeserializer(result) {
    return result.map((item) => {
        return instanceHistoryDeserializer(item);
    });
}
export function configTemplateSerializer(item) {
    return {
        tags: item["tags"],
        location: item["location"],
        properties: !item["properties"]
            ? item["properties"]
            : configTemplatePropertiesSerializer(item["properties"]),
    };
}
export function configTemplateDeserializer(item) {
    return {
        tags: item["tags"],
        location: item["location"],
        id: item["id"],
        name: item["name"],
        type: item["type"],
        systemData: !item["systemData"]
            ? item["systemData"]
            : systemDataDeserializer(item["systemData"]),
        properties: !item["properties"]
            ? item["properties"]
            : configTemplatePropertiesDeserializer(item["properties"]),
        eTag: item["eTag"],
    };
}
export function configTemplatePropertiesSerializer(item) {
    return { description: item["description"] };
}
export function configTemplatePropertiesDeserializer(item) {
    return {
        description: item["description"],
        latestVersion: item["latestVersion"],
        provisioningState: item["provisioningState"],
    };
}
export function configTemplateUpdateSerializer(item) {
    return {
        tags: item["tags"],
        properties: !item["properties"]
            ? item["properties"]
            : configTemplateUpdatePropertiesSerializer(item["properties"]),
    };
}
export function configTemplateUpdatePropertiesSerializer(item) {
    return { description: item["description"] };
}
export function configTemplateVersionWithUpdateTypeSerializer(item) {
    return {
        updateType: item["updateType"],
        version: item["version"],
        configTemplateVersion: configTemplateVersionSerializer(item["configTemplateVersion"]),
    };
}
export function configTemplateVersionSerializer(item) {
    return {
        properties: !item["properties"]
            ? item["properties"]
            : configTemplateVersionPropertiesSerializer(item["properties"]),
    };
}
export function configTemplateVersionDeserializer(item) {
    return {
        id: item["id"],
        name: item["name"],
        type: item["type"],
        systemData: !item["systemData"]
            ? item["systemData"]
            : systemDataDeserializer(item["systemData"]),
        properties: !item["properties"]
            ? item["properties"]
            : configTemplateVersionPropertiesDeserializer(item["properties"]),
        eTag: item["eTag"],
    };
}
export function configTemplateVersionPropertiesSerializer(item) {
    return { configurations: item["configurations"] };
}
export function configTemplateVersionPropertiesDeserializer(item) {
    return {
        configurations: item["configurations"],
        provisioningState: item["provisioningState"],
    };
}
export function _configTemplateListResultDeserializer(item) {
    return {
        value: configTemplateArrayDeserializer(item["value"]),
        nextLink: item["nextLink"],
    };
}
export function configTemplateArraySerializer(result) {
    return result.map((item) => {
        return configTemplateSerializer(item);
    });
}
export function configTemplateArrayDeserializer(result) {
    return result.map((item) => {
        return configTemplateDeserializer(item);
    });
}
export function _configTemplateVersionListResultDeserializer(item) {
    return {
        value: configTemplateVersionArrayDeserializer(item["value"]),
        nextLink: item["nextLink"],
    };
}
export function configTemplateVersionArraySerializer(result) {
    return result.map((item) => {
        return configTemplateVersionSerializer(item);
    });
}
export function configTemplateVersionArrayDeserializer(result) {
    return result.map((item) => {
        return configTemplateVersionDeserializer(item);
    });
}
export function workflowSerializer(item) {
    return {
        properties: !item["properties"]
            ? item["properties"]
            : workflowPropertiesSerializer(item["properties"]),
        extendedLocation: !item["extendedLocation"]
            ? item["extendedLocation"]
            : extendedLocationSerializer(item["extendedLocation"]),
    };
}
export function workflowDeserializer(item) {
    return {
        id: item["id"],
        name: item["name"],
        type: item["type"],
        systemData: !item["systemData"]
            ? item["systemData"]
            : systemDataDeserializer(item["systemData"]),
        properties: !item["properties"]
            ? item["properties"]
            : workflowPropertiesDeserializer(item["properties"]),
        extendedLocation: !item["extendedLocation"]
            ? item["extendedLocation"]
            : extendedLocationDeserializer(item["extendedLocation"]),
        eTag: item["eTag"],
    };
}
export function workflowPropertiesSerializer(item) {
    return item;
}
export function workflowPropertiesDeserializer(item) {
    return {
        workflowTemplateId: item["workflowTemplateId"],
        provisioningState: item["provisioningState"],
    };
}
export function _workflowListResultDeserializer(item) {
    return {
        value: workflowArrayDeserializer(item["value"]),
        nextLink: item["nextLink"],
    };
}
export function workflowArraySerializer(result) {
    return result.map((item) => {
        return workflowSerializer(item);
    });
}
export function workflowArrayDeserializer(result) {
    return result.map((item) => {
        return workflowDeserializer(item);
    });
}
export function workflowVersionSerializer(item) {
    return {
        properties: !item["properties"]
            ? item["properties"]
            : workflowVersionPropertiesSerializer(item["properties"]),
        extendedLocation: !item["extendedLocation"]
            ? item["extendedLocation"]
            : extendedLocationSerializer(item["extendedLocation"]),
    };
}
export function workflowVersionDeserializer(item) {
    return {
        id: item["id"],
        name: item["name"],
        type: item["type"],
        systemData: !item["systemData"]
            ? item["systemData"]
            : systemDataDeserializer(item["systemData"]),
        properties: !item["properties"]
            ? item["properties"]
            : workflowVersionPropertiesDeserializer(item["properties"]),
        extendedLocation: !item["extendedLocation"]
            ? item["extendedLocation"]
            : extendedLocationDeserializer(item["extendedLocation"]),
        eTag: item["eTag"],
    };
}
export function workflowVersionPropertiesSerializer(item) {
    return {
        stageSpec: stageSpecArraySerializer(item["stageSpec"]),
        specification: item["specification"],
    };
}
export function workflowVersionPropertiesDeserializer(item) {
    return {
        revision: item["revision"],
        configuration: item["configuration"],
        stageSpec: stageSpecArrayDeserializer(item["stageSpec"]),
        reviewId: item["reviewId"],
        state: item["state"],
        specification: item["specification"],
        provisioningState: item["provisioningState"],
    };
}
export function stageSpecArraySerializer(result) {
    return result.map((item) => {
        return stageSpecSerializer(item);
    });
}
export function stageSpecArrayDeserializer(result) {
    return result.map((item) => {
        return stageSpecDeserializer(item);
    });
}
export function stageSpecSerializer(item) {
    return {
        name: item["name"],
        specification: item["specification"],
        tasks: !item["tasks"] ? item["tasks"] : taskSpecArraySerializer(item["tasks"]),
        taskOption: !item["taskOption"] ? item["taskOption"] : taskOptionSerializer(item["taskOption"]),
    };
}
export function stageSpecDeserializer(item) {
    return {
        name: item["name"],
        specification: item["specification"],
        tasks: !item["tasks"] ? item["tasks"] : taskSpecArrayDeserializer(item["tasks"]),
        taskOption: !item["taskOption"]
            ? item["taskOption"]
            : taskOptionDeserializer(item["taskOption"]),
    };
}
export function taskSpecArraySerializer(result) {
    return result.map((item) => {
        return taskSpecSerializer(item);
    });
}
export function taskSpecArrayDeserializer(result) {
    return result.map((item) => {
        return taskSpecDeserializer(item);
    });
}
export function taskSpecSerializer(item) {
    return {
        name: item["name"],
        targetId: item["targetId"],
        specification: item["specification"],
    };
}
export function taskSpecDeserializer(item) {
    return {
        name: item["name"],
        targetId: item["targetId"],
        specification: item["specification"],
    };
}
export function taskOptionSerializer(item) {
    return {
        concurrency: item["concurrency"],
        errorAction: !item["errorAction"]
            ? item["errorAction"]
            : errorActionSerializer(item["errorAction"]),
    };
}
export function taskOptionDeserializer(item) {
    return {
        concurrency: item["concurrency"],
        errorAction: !item["errorAction"]
            ? item["errorAction"]
            : errorActionDeserializer(item["errorAction"]),
    };
}
export function errorActionSerializer(item) {
    return {
        mode: item["mode"],
        maxToleratedFailures: item["maxToleratedFailures"],
    };
}
export function errorActionDeserializer(item) {
    return {
        mode: item["mode"],
        maxToleratedFailures: item["maxToleratedFailures"],
    };
}
/** Error Action Mode */
export var KnownErrorActionMode;
(function (KnownErrorActionMode) {
    /** Stop on any failure */
    KnownErrorActionMode["StopOnAnyFailure"] = "stopOnAnyFailure";
    /** Stop after N cumulative failures */
    KnownErrorActionMode["StopOnNFailures"] = "stopOnNFailures";
    /** Continue silently despite errors */
    KnownErrorActionMode["SilentlyContinue"] = "silentlyContinue";
})(KnownErrorActionMode || (KnownErrorActionMode = {}));
export function _workflowVersionListResultDeserializer(item) {
    return {
        value: workflowVersionArrayDeserializer(item["value"]),
        nextLink: item["nextLink"],
    };
}
export function workflowVersionArraySerializer(result) {
    return result.map((item) => {
        return workflowVersionSerializer(item);
    });
}
export function workflowVersionArrayDeserializer(result) {
    return result.map((item) => {
        return workflowVersionDeserializer(item);
    });
}
export function executionSerializer(item) {
    return {
        properties: !item["properties"]
            ? item["properties"]
            : executionPropertiesSerializer(item["properties"]),
        extendedLocation: !item["extendedLocation"]
            ? item["extendedLocation"]
            : extendedLocationSerializer(item["extendedLocation"]),
    };
}
export function executionDeserializer(item) {
    return {
        id: item["id"],
        name: item["name"],
        type: item["type"],
        systemData: !item["systemData"]
            ? item["systemData"]
            : systemDataDeserializer(item["systemData"]),
        properties: !item["properties"]
            ? item["properties"]
            : executionPropertiesDeserializer(item["properties"]),
        extendedLocation: !item["extendedLocation"]
            ? item["extendedLocation"]
            : extendedLocationDeserializer(item["extendedLocation"]),
        eTag: item["eTag"],
    };
}
export function executionPropertiesSerializer(item) {
    return {
        workflowVersionId: item["workflowVersionId"],
        specification: item["specification"],
    };
}
export function executionPropertiesDeserializer(item) {
    return {
        workflowVersionId: item["workflowVersionId"],
        specification: item["specification"],
        status: !item["status"] ? item["status"] : executionStatusDeserializer(item["status"]),
        provisioningState: item["provisioningState"],
    };
}
export function executionStatusDeserializer(item) {
    return {
        updateTime: !item["updateTime"] ? item["updateTime"] : new Date(item["updateTime"]),
        status: item["status"],
        statusMessage: item["statusMessage"],
        stageHistory: !item["stageHistory"]
            ? item["stageHistory"]
            : stageStatusArrayDeserializer(item["stageHistory"]),
    };
}
export function stageStatusArrayDeserializer(result) {
    return result.map((item) => {
        return stageStatusDeserializer(item);
    });
}
export function stageStatusDeserializer(item) {
    return {
        status: item["status"],
        statusMessage: item["statusMessage"],
        stage: item["stage"],
        nextstage: item["nextstage"],
        errorMessage: item["errorMessage"],
        isActive: item["isActive"],
        inputs: item["inputs"],
        outputs: item["outputs"],
    };
}
export function _executionListResultDeserializer(item) {
    return {
        value: executionArrayDeserializer(item["value"]),
        nextLink: item["nextLink"],
    };
}
export function executionArraySerializer(result) {
    return result.map((item) => {
        return executionSerializer(item);
    });
}
export function executionArrayDeserializer(result) {
    return result.map((item) => {
        return executionDeserializer(item);
    });
}
export function diagnosticSerializer(item) {
    return {
        tags: item["tags"],
        location: item["location"],
        properties: !item["properties"]
            ? item["properties"]
            : diagnosticPropertiesSerializer(item["properties"]),
        extendedLocation: !item["extendedLocation"]
            ? item["extendedLocation"]
            : extendedLocationSerializer(item["extendedLocation"]),
    };
}
export function diagnosticDeserializer(item) {
    return {
        tags: item["tags"],
        location: item["location"],
        id: item["id"],
        name: item["name"],
        type: item["type"],
        systemData: !item["systemData"]
            ? item["systemData"]
            : systemDataDeserializer(item["systemData"]),
        properties: !item["properties"]
            ? item["properties"]
            : diagnosticPropertiesDeserializer(item["properties"]),
        extendedLocation: !item["extendedLocation"]
            ? item["extendedLocation"]
            : extendedLocationDeserializer(item["extendedLocation"]),
        eTag: item["eTag"],
    };
}
export function diagnosticPropertiesSerializer(item) {
    return item;
}
export function diagnosticPropertiesDeserializer(item) {
    return {
        provisioningState: item["provisioningState"],
    };
}
export function diagnosticUpdateSerializer(item) {
    return {
        properties: !item["properties"]
            ? item["properties"]
            : diagnosticUpdatePropertiesSerializer(item["properties"]),
        tags: item["tags"],
    };
}
export function diagnosticUpdatePropertiesSerializer(item) {
    return item;
}
export function _diagnosticListResultDeserializer(item) {
    return {
        value: diagnosticArrayDeserializer(item["value"]),
        nextLink: item["nextLink"],
    };
}
export function diagnosticArraySerializer(result) {
    return result.map((item) => {
        return diagnosticSerializer(item);
    });
}
export function diagnosticArrayDeserializer(result) {
    return result.map((item) => {
        return diagnosticDeserializer(item);
    });
}
export function contextSerializer(item) {
    return {
        tags: item["tags"],
        location: item["location"],
        properties: !item["properties"]
            ? item["properties"]
            : contextPropertiesSerializer(item["properties"]),
    };
}
export function contextDeserializer(item) {
    return {
        tags: item["tags"],
        location: item["location"],
        id: item["id"],
        name: item["name"],
        type: item["type"],
        systemData: !item["systemData"]
            ? item["systemData"]
            : systemDataDeserializer(item["systemData"]),
        properties: !item["properties"]
            ? item["properties"]
            : contextPropertiesDeserializer(item["properties"]),
    };
}
export function contextPropertiesSerializer(item) {
    return {
        capabilities: capabilityArraySerializer(item["capabilities"]),
        hierarchies: hierarchyArraySerializer(item["hierarchies"]),
    };
}
export function contextPropertiesDeserializer(item) {
    return {
        capabilities: capabilityArrayDeserializer(item["capabilities"]),
        hierarchies: hierarchyArrayDeserializer(item["hierarchies"]),
        provisioningState: item["provisioningState"],
    };
}
export function capabilityArraySerializer(result) {
    return result.map((item) => {
        return capabilitySerializer(item);
    });
}
export function capabilityArrayDeserializer(result) {
    return result.map((item) => {
        return capabilityDeserializer(item);
    });
}
export function capabilitySerializer(item) {
    return {
        name: item["name"],
        description: item["description"],
        state: item["state"],
    };
}
export function capabilityDeserializer(item) {
    return {
        name: item["name"],
        description: item["description"],
        state: item["state"],
    };
}
export function hierarchyArraySerializer(result) {
    return result.map((item) => {
        return hierarchySerializer(item);
    });
}
export function hierarchyArrayDeserializer(result) {
    return result.map((item) => {
        return hierarchyDeserializer(item);
    });
}
export function hierarchySerializer(item) {
    return { name: item["name"], description: item["description"] };
}
export function hierarchyDeserializer(item) {
    return {
        name: item["name"],
        description: item["description"],
    };
}
export function contextUpdateSerializer(item) {
    return {
        tags: item["tags"],
        properties: !item["properties"]
            ? item["properties"]
            : contextUpdatePropertiesSerializer(item["properties"]),
    };
}
export function contextUpdatePropertiesSerializer(item) {
    return {
        capabilities: !item["capabilities"]
            ? item["capabilities"]
            : capabilityArraySerializer(item["capabilities"]),
        hierarchies: !item["hierarchies"]
            ? item["hierarchies"]
            : hierarchyArraySerializer(item["hierarchies"]),
    };
}
export function _contextListResultDeserializer(item) {
    return {
        value: contextArrayDeserializer(item["value"]),
        nextLink: item["nextLink"],
    };
}
export function contextArraySerializer(result) {
    return result.map((item) => {
        return contextSerializer(item);
    });
}
export function contextArrayDeserializer(result) {
    return result.map((item) => {
        return contextDeserializer(item);
    });
}
export function siteReferenceSerializer(item) {
    return {
        properties: !item["properties"]
            ? item["properties"]
            : siteReferencePropertiesSerializer(item["properties"]),
    };
}
export function siteReferenceDeserializer(item) {
    return {
        id: item["id"],
        name: item["name"],
        type: item["type"],
        systemData: !item["systemData"]
            ? item["systemData"]
            : systemDataDeserializer(item["systemData"]),
        properties: !item["properties"]
            ? item["properties"]
            : siteReferencePropertiesDeserializer(item["properties"]),
    };
}
export function siteReferencePropertiesSerializer(item) {
    return { siteId: item["siteId"] };
}
export function siteReferencePropertiesDeserializer(item) {
    return {
        siteId: item["siteId"],
        provisioningState: item["provisioningState"],
    };
}
export function _siteReferenceListResultDeserializer(item) {
    return {
        value: siteReferenceArrayDeserializer(item["value"]),
        nextLink: item["nextLink"],
    };
}
export function siteReferenceArraySerializer(result) {
    return result.map((item) => {
        return siteReferenceSerializer(item);
    });
}
export function siteReferenceArrayDeserializer(result) {
    return result.map((item) => {
        return siteReferenceDeserializer(item);
    });
}
/** The available API versions. */
export var KnownVersions;
(function (KnownVersions) {
    KnownVersions["V20250601"] = "2025-06-01";
})(KnownVersions || (KnownVersions = {}));
//# sourceMappingURL=models.js.map