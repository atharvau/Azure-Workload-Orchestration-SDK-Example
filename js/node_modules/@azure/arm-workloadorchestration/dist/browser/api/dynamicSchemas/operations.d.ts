import { WorkloadOrchestrationManagementContext as Client } from "../index.js";
import { DynamicSchema, _DynamicSchemaListResult } from "../../models/models.js";
import { PagedAsyncIterableIterator } from "../../static-helpers/pagingHelpers.js";
import { DynamicSchemasListBySchemaOptionalParams, DynamicSchemasDeleteOptionalParams, DynamicSchemasUpdateOptionalParams, DynamicSchemasCreateOrUpdateOptionalParams, DynamicSchemasGetOptionalParams } from "./options.js";
import { StreamableMethod, PathUncheckedResponse } from "@azure-rest/core-client";
import { PollerLike, OperationState } from "@azure/core-lro";
export declare function _listBySchemaSend(context: Client, resourceGroupName: string, schemaName: string, options?: DynamicSchemasListBySchemaOptionalParams): StreamableMethod;
export declare function _listBySchemaDeserialize(result: PathUncheckedResponse): Promise<_DynamicSchemaListResult>;
/** List by Schema */
export declare function listBySchema(context: Client, resourceGroupName: string, schemaName: string, options?: DynamicSchemasListBySchemaOptionalParams): PagedAsyncIterableIterator<DynamicSchema>;
export declare function _$deleteSend(context: Client, resourceGroupName: string, schemaName: string, dynamicSchemaName: string, options?: DynamicSchemasDeleteOptionalParams): StreamableMethod;
export declare function _$deleteDeserialize(result: PathUncheckedResponse): Promise<void>;
/** Delete a DynamicSchema Resource */
/**
 *  @fixme delete is a reserved word that cannot be used as an operation name.
 *         Please add @clientName("clientName") or @clientName("<JS-Specific-Name>", "javascript")
 *         to the operation to override the generated name.
 */
export declare function $delete(context: Client, resourceGroupName: string, schemaName: string, dynamicSchemaName: string, options?: DynamicSchemasDeleteOptionalParams): PollerLike<OperationState<void>, void>;
export declare function _updateSend(context: Client, resourceGroupName: string, schemaName: string, dynamicSchemaName: string, properties: DynamicSchema, options?: DynamicSchemasUpdateOptionalParams): StreamableMethod;
export declare function _updateDeserialize(result: PathUncheckedResponse): Promise<DynamicSchema>;
/** update a DynamicSchema Resource */
export declare function update(context: Client, resourceGroupName: string, schemaName: string, dynamicSchemaName: string, properties: DynamicSchema, options?: DynamicSchemasUpdateOptionalParams): Promise<DynamicSchema>;
export declare function _createOrUpdateSend(context: Client, resourceGroupName: string, schemaName: string, dynamicSchemaName: string, resource: DynamicSchema, options?: DynamicSchemasCreateOrUpdateOptionalParams): StreamableMethod;
export declare function _createOrUpdateDeserialize(result: PathUncheckedResponse): Promise<DynamicSchema>;
/** Create or update a DynamicSchema Resource */
export declare function createOrUpdate(context: Client, resourceGroupName: string, schemaName: string, dynamicSchemaName: string, resource: DynamicSchema, options?: DynamicSchemasCreateOrUpdateOptionalParams): PollerLike<OperationState<DynamicSchema>, DynamicSchema>;
export declare function _getSend(context: Client, resourceGroupName: string, schemaName: string, dynamicSchemaName: string, options?: DynamicSchemasGetOptionalParams): StreamableMethod;
export declare function _getDeserialize(result: PathUncheckedResponse): Promise<DynamicSchema>;
/** Get a DynamicSchema Resource */
export declare function get(context: Client, resourceGroupName: string, schemaName: string, dynamicSchemaName: string, options?: DynamicSchemasGetOptionalParams): Promise<DynamicSchema>;
//# sourceMappingURL=operations.d.ts.map