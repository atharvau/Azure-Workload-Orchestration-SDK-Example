// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { errorResponseDeserializer, configTemplateVersionDeserializer, _configTemplateVersionListResultDeserializer, } from "../../models/models.js";
import { buildPagedAsyncIterator, } from "../../static-helpers/pagingHelpers.js";
import { expandUrlTemplate } from "../../static-helpers/urlTemplate.js";
import { createRestError, operationOptionsToRequestParameters, } from "@azure-rest/core-client";
export function _listByConfigTemplateSend(context, resourceGroupName, configTemplateName, options = {
    requestOptions: {},
}) {
    const path = expandUrlTemplate("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}/versions{?api%2Dversion}", {
        subscriptionId: context.subscriptionId,
        resourceGroupName: resourceGroupName,
        configTemplateName: configTemplateName,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).get({
        ...operationOptionsToRequestParameters(options),
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
    });
}
export async function _listByConfigTemplateDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = createRestError(result);
        error.details = errorResponseDeserializer(result.body);
        throw error;
    }
    return _configTemplateVersionListResultDeserializer(result.body);
}
/** List Config Template Version Resources */
export function listByConfigTemplate(context, resourceGroupName, configTemplateName, options = {
    requestOptions: {},
}) {
    return buildPagedAsyncIterator(context, () => _listByConfigTemplateSend(context, resourceGroupName, configTemplateName, options), _listByConfigTemplateDeserialize, ["200"], { itemName: "value", nextLinkName: "nextLink" });
}
export function _getSend(context, resourceGroupName, configTemplateName, configTemplateVersionName, options = { requestOptions: {} }) {
    const path = expandUrlTemplate("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}/versions/{configTemplateVersionName}{?api%2Dversion}", {
        subscriptionId: context.subscriptionId,
        resourceGroupName: resourceGroupName,
        configTemplateName: configTemplateName,
        configTemplateVersionName: configTemplateVersionName,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).get({
        ...operationOptionsToRequestParameters(options),
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
    });
}
export async function _getDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = createRestError(result);
        error.details = errorResponseDeserializer(result.body);
        throw error;
    }
    return configTemplateVersionDeserializer(result.body);
}
/** Get a Config Template Version Resource */
export async function get(context, resourceGroupName, configTemplateName, configTemplateVersionName, options = { requestOptions: {} }) {
    const result = await _getSend(context, resourceGroupName, configTemplateName, configTemplateVersionName, options);
    return _getDeserialize(result);
}
//# sourceMappingURL=operations.js.map