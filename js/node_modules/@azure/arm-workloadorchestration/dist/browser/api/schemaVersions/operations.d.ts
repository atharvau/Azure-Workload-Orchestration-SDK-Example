import { WorkloadOrchestrationManagementContext as Client } from "../index.js";
import { SchemaVersion, _SchemaVersionListResult } from "../../models/models.js";
import { PagedAsyncIterableIterator } from "../../static-helpers/pagingHelpers.js";
import { SchemaVersionsListBySchemaOptionalParams, SchemaVersionsDeleteOptionalParams, SchemaVersionsUpdateOptionalParams, SchemaVersionsCreateOrUpdateOptionalParams, SchemaVersionsGetOptionalParams } from "./options.js";
import { StreamableMethod, PathUncheckedResponse } from "@azure-rest/core-client";
import { PollerLike, OperationState } from "@azure/core-lro";
export declare function _listBySchemaSend(context: Client, resourceGroupName: string, schemaName: string, options?: SchemaVersionsListBySchemaOptionalParams): StreamableMethod;
export declare function _listBySchemaDeserialize(result: PathUncheckedResponse): Promise<_SchemaVersionListResult>;
/** List by specified resource group */
export declare function listBySchema(context: Client, resourceGroupName: string, schemaName: string, options?: SchemaVersionsListBySchemaOptionalParams): PagedAsyncIterableIterator<SchemaVersion>;
export declare function _$deleteSend(context: Client, resourceGroupName: string, schemaName: string, schemaVersionName: string, options?: SchemaVersionsDeleteOptionalParams): StreamableMethod;
export declare function _$deleteDeserialize(result: PathUncheckedResponse): Promise<void>;
/** Delete a Schema Version Resource */
/**
 *  @fixme delete is a reserved word that cannot be used as an operation name.
 *         Please add @clientName("clientName") or @clientName("<JS-Specific-Name>", "javascript")
 *         to the operation to override the generated name.
 */
export declare function $delete(context: Client, resourceGroupName: string, schemaName: string, schemaVersionName: string, options?: SchemaVersionsDeleteOptionalParams): PollerLike<OperationState<void>, void>;
export declare function _updateSend(context: Client, resourceGroupName: string, schemaName: string, schemaVersionName: string, properties: SchemaVersion, options?: SchemaVersionsUpdateOptionalParams): StreamableMethod;
export declare function _updateDeserialize(result: PathUncheckedResponse): Promise<SchemaVersion>;
/** update a Schema Version Resource */
export declare function update(context: Client, resourceGroupName: string, schemaName: string, schemaVersionName: string, properties: SchemaVersion, options?: SchemaVersionsUpdateOptionalParams): Promise<SchemaVersion>;
export declare function _createOrUpdateSend(context: Client, resourceGroupName: string, schemaName: string, schemaVersionName: string, resource: SchemaVersion, options?: SchemaVersionsCreateOrUpdateOptionalParams): StreamableMethod;
export declare function _createOrUpdateDeserialize(result: PathUncheckedResponse): Promise<SchemaVersion>;
/** Create or update a Schema Version Resource */
export declare function createOrUpdate(context: Client, resourceGroupName: string, schemaName: string, schemaVersionName: string, resource: SchemaVersion, options?: SchemaVersionsCreateOrUpdateOptionalParams): PollerLike<OperationState<SchemaVersion>, SchemaVersion>;
export declare function _getSend(context: Client, resourceGroupName: string, schemaName: string, schemaVersionName: string, options?: SchemaVersionsGetOptionalParams): StreamableMethod;
export declare function _getDeserialize(result: PathUncheckedResponse): Promise<SchemaVersion>;
/** Get a Schema Version Resource */
export declare function get(context: Client, resourceGroupName: string, schemaName: string, schemaVersionName: string, options?: SchemaVersionsGetOptionalParams): Promise<SchemaVersion>;
//# sourceMappingURL=operations.d.ts.map