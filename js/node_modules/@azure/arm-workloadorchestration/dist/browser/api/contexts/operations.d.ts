import { WorkloadOrchestrationManagementContext as Client } from "../index.js";
import { Context, ContextUpdate, _ContextListResult } from "../../models/models.js";
import { PagedAsyncIterableIterator } from "../../static-helpers/pagingHelpers.js";
import { ContextsDeleteOptionalParams, ContextsListBySubscriptionOptionalParams, ContextsListByResourceGroupOptionalParams, ContextsUpdateOptionalParams, ContextsCreateOrUpdateOptionalParams, ContextsGetOptionalParams } from "./options.js";
import { StreamableMethod, PathUncheckedResponse } from "@azure-rest/core-client";
import { PollerLike, OperationState } from "@azure/core-lro";
export declare function _$deleteSend(context: Client, resourceGroupName: string, contextName: string, options?: ContextsDeleteOptionalParams): StreamableMethod;
export declare function _$deleteDeserialize(result: PathUncheckedResponse): Promise<void>;
/** Delete Context Resource */
/**
 *  @fixme delete is a reserved word that cannot be used as an operation name.
 *         Please add @clientName("clientName") or @clientName("<JS-Specific-Name>", "javascript")
 *         to the operation to override the generated name.
 */
export declare function $delete(context: Client, resourceGroupName: string, contextName: string, options?: ContextsDeleteOptionalParams): PollerLike<OperationState<void>, void>;
export declare function _listBySubscriptionSend(context: Client, options?: ContextsListBySubscriptionOptionalParams): StreamableMethod;
export declare function _listBySubscriptionDeserialize(result: PathUncheckedResponse): Promise<_ContextListResult>;
/** List by subscription */
export declare function listBySubscription(context: Client, options?: ContextsListBySubscriptionOptionalParams): PagedAsyncIterableIterator<Context>;
export declare function _listByResourceGroupSend(context: Client, resourceGroupName: string, options?: ContextsListByResourceGroupOptionalParams): StreamableMethod;
export declare function _listByResourceGroupDeserialize(result: PathUncheckedResponse): Promise<_ContextListResult>;
/** List by specified resource group */
export declare function listByResourceGroup(context: Client, resourceGroupName: string, options?: ContextsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<Context>;
export declare function _updateSend(context: Client, resourceGroupName: string, contextName: string, properties: ContextUpdate, options?: ContextsUpdateOptionalParams): StreamableMethod;
export declare function _updateDeserialize(result: PathUncheckedResponse): Promise<Context>;
/** update an Context Resource */
export declare function update(context: Client, resourceGroupName: string, contextName: string, properties: ContextUpdate, options?: ContextsUpdateOptionalParams): PollerLike<OperationState<Context>, Context>;
export declare function _createOrUpdateSend(context: Client, resourceGroupName: string, contextName: string, resource: Context, options?: ContextsCreateOrUpdateOptionalParams): StreamableMethod;
export declare function _createOrUpdateDeserialize(result: PathUncheckedResponse): Promise<Context>;
/** Create or update Context Resource */
export declare function createOrUpdate(context: Client, resourceGroupName: string, contextName: string, resource: Context, options?: ContextsCreateOrUpdateOptionalParams): PollerLike<OperationState<Context>, Context>;
export declare function _getSend(context: Client, resourceGroupName: string, contextName: string, options?: ContextsGetOptionalParams): StreamableMethod;
export declare function _getDeserialize(result: PathUncheckedResponse): Promise<Context>;
/** Get Context Resource */
export declare function get(context: Client, resourceGroupName: string, contextName: string, options?: ContextsGetOptionalParams): Promise<Context>;
//# sourceMappingURL=operations.d.ts.map