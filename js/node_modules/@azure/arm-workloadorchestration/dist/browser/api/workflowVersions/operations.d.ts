import { WorkloadOrchestrationManagementContext as Client } from "../index.js";
import { WorkflowVersion, _WorkflowVersionListResult } from "../../models/models.js";
import { PagedAsyncIterableIterator } from "../../static-helpers/pagingHelpers.js";
import { WorkflowVersionsListByWorkflowOptionalParams, WorkflowVersionsDeleteOptionalParams, WorkflowVersionsUpdateOptionalParams, WorkflowVersionsCreateOrUpdateOptionalParams, WorkflowVersionsGetOptionalParams } from "./options.js";
import { StreamableMethod, PathUncheckedResponse } from "@azure-rest/core-client";
import { PollerLike, OperationState } from "@azure/core-lro";
export declare function _listByWorkflowSend(context: Client, resourceGroupName: string, contextName: string, workflowName: string, options?: WorkflowVersionsListByWorkflowOptionalParams): StreamableMethod;
export declare function _listByWorkflowDeserialize(result: PathUncheckedResponse): Promise<_WorkflowVersionListResult>;
/** List Workflow Version Resources */
export declare function listByWorkflow(context: Client, resourceGroupName: string, contextName: string, workflowName: string, options?: WorkflowVersionsListByWorkflowOptionalParams): PagedAsyncIterableIterator<WorkflowVersion>;
export declare function _$deleteSend(context: Client, resourceGroupName: string, contextName: string, workflowName: string, versionName: string, options?: WorkflowVersionsDeleteOptionalParams): StreamableMethod;
export declare function _$deleteDeserialize(result: PathUncheckedResponse): Promise<void>;
/** Delete a Workflow Version Resource */
/**
 *  @fixme delete is a reserved word that cannot be used as an operation name.
 *         Please add @clientName("clientName") or @clientName("<JS-Specific-Name>", "javascript")
 *         to the operation to override the generated name.
 */
export declare function $delete(context: Client, resourceGroupName: string, contextName: string, workflowName: string, versionName: string, options?: WorkflowVersionsDeleteOptionalParams): PollerLike<OperationState<void>, void>;
export declare function _updateSend(context: Client, resourceGroupName: string, contextName: string, workflowName: string, versionName: string, properties: WorkflowVersion, options?: WorkflowVersionsUpdateOptionalParams): StreamableMethod;
export declare function _updateDeserialize(result: PathUncheckedResponse): Promise<WorkflowVersion>;
/** update an WorkflowVersion Resource */
export declare function update(context: Client, resourceGroupName: string, contextName: string, workflowName: string, versionName: string, properties: WorkflowVersion, options?: WorkflowVersionsUpdateOptionalParams): PollerLike<OperationState<WorkflowVersion>, WorkflowVersion>;
export declare function _createOrUpdateSend(context: Client, resourceGroupName: string, contextName: string, workflowName: string, versionName: string, resource: WorkflowVersion, options?: WorkflowVersionsCreateOrUpdateOptionalParams): StreamableMethod;
export declare function _createOrUpdateDeserialize(result: PathUncheckedResponse): Promise<WorkflowVersion>;
/** Create or update a Workflow Version Resource */
export declare function createOrUpdate(context: Client, resourceGroupName: string, contextName: string, workflowName: string, versionName: string, resource: WorkflowVersion, options?: WorkflowVersionsCreateOrUpdateOptionalParams): PollerLike<OperationState<WorkflowVersion>, WorkflowVersion>;
export declare function _getSend(context: Client, resourceGroupName: string, contextName: string, workflowName: string, versionName: string, options?: WorkflowVersionsGetOptionalParams): StreamableMethod;
export declare function _getDeserialize(result: PathUncheckedResponse): Promise<WorkflowVersion>;
/** Get a Workflow Version Resource */
export declare function get(context: Client, resourceGroupName: string, contextName: string, workflowName: string, versionName: string, options?: WorkflowVersionsGetOptionalParams): Promise<WorkflowVersion>;
//# sourceMappingURL=operations.d.ts.map