{"version":3,"file":"operations.js","sourceRoot":"","sources":["../../../../src/api/solutionTemplateVersions/operations.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { WorkloadOrchestrationManagementContext as Client } from \"../index.js\";\nimport {\n  errorResponseDeserializer,\n  SolutionTemplateVersion,\n  solutionTemplateVersionDeserializer,\n  _SolutionTemplateVersionListResult,\n  _solutionTemplateVersionListResultDeserializer,\n  BulkDeploySolutionParameter,\n  bulkDeploySolutionParameterSerializer,\n  BulkPublishSolutionParameter,\n  bulkPublishSolutionParameterSerializer,\n} from \"../../models/models.js\";\nimport {\n  PagedAsyncIterableIterator,\n  buildPagedAsyncIterator,\n} from \"../../static-helpers/pagingHelpers.js\";\nimport { getLongRunningPoller } from \"../../static-helpers/pollingHelpers.js\";\nimport { expandUrlTemplate } from \"../../static-helpers/urlTemplate.js\";\nimport {\n  SolutionTemplateVersionsBulkPublishSolutionOptionalParams,\n  SolutionTemplateVersionsBulkDeploySolutionOptionalParams,\n  SolutionTemplateVersionsListBySolutionTemplateOptionalParams,\n  SolutionTemplateVersionsGetOptionalParams,\n} from \"./options.js\";\nimport {\n  StreamableMethod,\n  PathUncheckedResponse,\n  createRestError,\n  operationOptionsToRequestParameters,\n} from \"@azure-rest/core-client\";\nimport { PollerLike, OperationState } from \"@azure/core-lro\";\n\nexport function _bulkPublishSolutionSend(\n  context: Client,\n  resourceGroupName: string,\n  solutionTemplateName: string,\n  solutionTemplateVersionName: string,\n  body: BulkPublishSolutionParameter,\n  options: SolutionTemplateVersionsBulkPublishSolutionOptionalParams = {\n    requestOptions: {},\n  },\n): StreamableMethod {\n  const path = expandUrlTemplate(\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}/versions/{solutionTemplateVersionName}/bulkPublishSolution{?api%2Dversion}\",\n    {\n      subscriptionId: context.subscriptionId,\n      resourceGroupName: resourceGroupName,\n      solutionTemplateName: solutionTemplateName,\n      solutionTemplateVersionName: solutionTemplateVersionName,\n      \"api%2Dversion\": context.apiVersion,\n    },\n    {\n      allowReserved: options?.requestOptions?.skipUrlEncoding,\n    },\n  );\n  return context.path(path).post({\n    ...operationOptionsToRequestParameters(options),\n    contentType: \"application/json\",\n    body: bulkPublishSolutionParameterSerializer(body),\n  });\n}\n\nexport async function _bulkPublishSolutionDeserialize(\n  result: PathUncheckedResponse,\n): Promise<void> {\n  const expectedStatuses = [\"202\", \"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    const error = createRestError(result);\n    error.details = errorResponseDeserializer(result.body);\n    throw error;\n  }\n\n  return;\n}\n\n/** Post request for bulk publish */\nexport function bulkPublishSolution(\n  context: Client,\n  resourceGroupName: string,\n  solutionTemplateName: string,\n  solutionTemplateVersionName: string,\n  body: BulkPublishSolutionParameter,\n  options: SolutionTemplateVersionsBulkPublishSolutionOptionalParams = {\n    requestOptions: {},\n  },\n): PollerLike<OperationState<void>, void> {\n  return getLongRunningPoller(context, _bulkPublishSolutionDeserialize, [\"202\", \"200\"], {\n    updateIntervalInMs: options?.updateIntervalInMs,\n    abortSignal: options?.abortSignal,\n    getInitialResponse: () =>\n      _bulkPublishSolutionSend(\n        context,\n        resourceGroupName,\n        solutionTemplateName,\n        solutionTemplateVersionName,\n        body,\n        options,\n      ),\n    resourceLocationConfig: \"location\",\n  }) as PollerLike<OperationState<void>, void>;\n}\n\nexport function _bulkDeploySolutionSend(\n  context: Client,\n  resourceGroupName: string,\n  solutionTemplateName: string,\n  solutionTemplateVersionName: string,\n  body: BulkDeploySolutionParameter,\n  options: SolutionTemplateVersionsBulkDeploySolutionOptionalParams = {\n    requestOptions: {},\n  },\n): StreamableMethod {\n  const path = expandUrlTemplate(\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}/versions/{solutionTemplateVersionName}/bulkDeploySolution{?api%2Dversion}\",\n    {\n      subscriptionId: context.subscriptionId,\n      resourceGroupName: resourceGroupName,\n      solutionTemplateName: solutionTemplateName,\n      solutionTemplateVersionName: solutionTemplateVersionName,\n      \"api%2Dversion\": context.apiVersion,\n    },\n    {\n      allowReserved: options?.requestOptions?.skipUrlEncoding,\n    },\n  );\n  return context.path(path).post({\n    ...operationOptionsToRequestParameters(options),\n    contentType: \"application/json\",\n    body: bulkDeploySolutionParameterSerializer(body),\n  });\n}\n\nexport async function _bulkDeploySolutionDeserialize(result: PathUncheckedResponse): Promise<void> {\n  const expectedStatuses = [\"202\", \"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    const error = createRestError(result);\n    error.details = errorResponseDeserializer(result.body);\n    throw error;\n  }\n\n  return;\n}\n\n/** Post request for bulk deploy */\nexport function bulkDeploySolution(\n  context: Client,\n  resourceGroupName: string,\n  solutionTemplateName: string,\n  solutionTemplateVersionName: string,\n  body: BulkDeploySolutionParameter,\n  options: SolutionTemplateVersionsBulkDeploySolutionOptionalParams = {\n    requestOptions: {},\n  },\n): PollerLike<OperationState<void>, void> {\n  return getLongRunningPoller(context, _bulkDeploySolutionDeserialize, [\"202\", \"200\"], {\n    updateIntervalInMs: options?.updateIntervalInMs,\n    abortSignal: options?.abortSignal,\n    getInitialResponse: () =>\n      _bulkDeploySolutionSend(\n        context,\n        resourceGroupName,\n        solutionTemplateName,\n        solutionTemplateVersionName,\n        body,\n        options,\n      ),\n    resourceLocationConfig: \"location\",\n  }) as PollerLike<OperationState<void>, void>;\n}\n\nexport function _listBySolutionTemplateSend(\n  context: Client,\n  resourceGroupName: string,\n  solutionTemplateName: string,\n  options: SolutionTemplateVersionsListBySolutionTemplateOptionalParams = {\n    requestOptions: {},\n  },\n): StreamableMethod {\n  const path = expandUrlTemplate(\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}/versions{?api%2Dversion}\",\n    {\n      subscriptionId: context.subscriptionId,\n      resourceGroupName: resourceGroupName,\n      solutionTemplateName: solutionTemplateName,\n      \"api%2Dversion\": context.apiVersion,\n    },\n    {\n      allowReserved: options?.requestOptions?.skipUrlEncoding,\n    },\n  );\n  return context.path(path).get({\n    ...operationOptionsToRequestParameters(options),\n    headers: {\n      accept: \"application/json\",\n      ...options.requestOptions?.headers,\n    },\n  });\n}\n\nexport async function _listBySolutionTemplateDeserialize(\n  result: PathUncheckedResponse,\n): Promise<_SolutionTemplateVersionListResult> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    const error = createRestError(result);\n    error.details = errorResponseDeserializer(result.body);\n    throw error;\n  }\n\n  return _solutionTemplateVersionListResultDeserializer(result.body);\n}\n\n/** List Solution Template Version Resources */\nexport function listBySolutionTemplate(\n  context: Client,\n  resourceGroupName: string,\n  solutionTemplateName: string,\n  options: SolutionTemplateVersionsListBySolutionTemplateOptionalParams = {\n    requestOptions: {},\n  },\n): PagedAsyncIterableIterator<SolutionTemplateVersion> {\n  return buildPagedAsyncIterator(\n    context,\n    () => _listBySolutionTemplateSend(context, resourceGroupName, solutionTemplateName, options),\n    _listBySolutionTemplateDeserialize,\n    [\"200\"],\n    { itemName: \"value\", nextLinkName: \"nextLink\" },\n  );\n}\n\nexport function _getSend(\n  context: Client,\n  resourceGroupName: string,\n  solutionTemplateName: string,\n  solutionTemplateVersionName: string,\n  options: SolutionTemplateVersionsGetOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  const path = expandUrlTemplate(\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}/versions/{solutionTemplateVersionName}{?api%2Dversion}\",\n    {\n      subscriptionId: context.subscriptionId,\n      resourceGroupName: resourceGroupName,\n      solutionTemplateName: solutionTemplateName,\n      solutionTemplateVersionName: solutionTemplateVersionName,\n      \"api%2Dversion\": context.apiVersion,\n    },\n    {\n      allowReserved: options?.requestOptions?.skipUrlEncoding,\n    },\n  );\n  return context.path(path).get({\n    ...operationOptionsToRequestParameters(options),\n    headers: {\n      accept: \"application/json\",\n      ...options.requestOptions?.headers,\n    },\n  });\n}\n\nexport async function _getDeserialize(\n  result: PathUncheckedResponse,\n): Promise<SolutionTemplateVersion> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    const error = createRestError(result);\n    error.details = errorResponseDeserializer(result.body);\n    throw error;\n  }\n\n  return solutionTemplateVersionDeserializer(result.body);\n}\n\n/** Get a Solution Template Version Resource */\nexport async function get(\n  context: Client,\n  resourceGroupName: string,\n  solutionTemplateName: string,\n  solutionTemplateVersionName: string,\n  options: SolutionTemplateVersionsGetOptionalParams = { requestOptions: {} },\n): Promise<SolutionTemplateVersion> {\n  const result = await _getSend(\n    context,\n    resourceGroupName,\n    solutionTemplateName,\n    solutionTemplateVersionName,\n    options,\n  );\n  return _getDeserialize(result);\n}\n"]}