// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { createWorkloadOrchestrationManagement, } from "./api/index.js";
import { _getConfigTemplateVersionsOperations, } from "./classic/configTemplateVersions/index.js";
import { _getConfigTemplatesOperations, } from "./classic/configTemplates/index.js";
import { _getContextsOperations } from "./classic/contexts/index.js";
import { _getDiagnosticsOperations } from "./classic/diagnostics/index.js";
import { _getDynamicSchemaVersionsOperations, } from "./classic/dynamicSchemaVersions/index.js";
import { _getDynamicSchemasOperations, } from "./classic/dynamicSchemas/index.js";
import { _getExecutionsOperations } from "./classic/executions/index.js";
import { _getInstanceHistoriesOperations, } from "./classic/instanceHistories/index.js";
import { _getInstancesOperations } from "./classic/instances/index.js";
import { _getJobsOperations } from "./classic/jobs/index.js";
import { _getSchemaReferencesOperations, } from "./classic/schemaReferences/index.js";
import { _getSchemaVersionsOperations, } from "./classic/schemaVersions/index.js";
import { _getSchemasOperations } from "./classic/schemas/index.js";
import { _getSiteReferencesOperations, } from "./classic/siteReferences/index.js";
import { _getSolutionTemplateVersionsOperations, } from "./classic/solutionTemplateVersions/index.js";
import { _getSolutionTemplatesOperations, } from "./classic/solutionTemplates/index.js";
import { _getSolutionVersionsOperations, } from "./classic/solutionVersions/index.js";
import { _getSolutionsOperations } from "./classic/solutions/index.js";
import { _getTargetsOperations } from "./classic/targets/index.js";
import { _getWorkflowVersionsOperations, } from "./classic/workflowVersions/index.js";
import { _getWorkflowsOperations } from "./classic/workflows/index.js";
export class WorkloadOrchestrationManagementClient {
    _client;
    /** The pipeline used by this client to make requests */
    pipeline;
    /** Microsoft.Edge Resource Provider management API. */
    constructor(credential, subscriptionId, options = {}) {
        const prefixFromOptions = options?.userAgentOptions?.userAgentPrefix;
        const userAgentPrefix = prefixFromOptions
            ? `${prefixFromOptions} azsdk-js-client`
            : `azsdk-js-client`;
        this._client = createWorkloadOrchestrationManagement(credential, subscriptionId, {
            ...options,
            userAgentOptions: { userAgentPrefix },
        });
        this.pipeline = this._client.pipeline;
        this.siteReferences = _getSiteReferencesOperations(this._client);
        this.contexts = _getContextsOperations(this._client);
        this.diagnostics = _getDiagnosticsOperations(this._client);
        this.executions = _getExecutionsOperations(this._client);
        this.workflowVersions = _getWorkflowVersionsOperations(this._client);
        this.workflows = _getWorkflowsOperations(this._client);
        this.configTemplateVersions = _getConfigTemplateVersionsOperations(this._client);
        this.configTemplates = _getConfigTemplatesOperations(this._client);
        this.instanceHistories = _getInstanceHistoriesOperations(this._client);
        this.instances = _getInstancesOperations(this._client);
        this.solutionTemplates = _getSolutionTemplatesOperations(this._client);
        this.solutionTemplateVersions = _getSolutionTemplateVersionsOperations(this._client);
        this.solutions = _getSolutionsOperations(this._client);
        this.schemaReferences = _getSchemaReferencesOperations(this._client);
        this.dynamicSchemaVersions = _getDynamicSchemaVersionsOperations(this._client);
        this.targets = _getTargetsOperations(this._client);
        this.jobs = _getJobsOperations(this._client);
        this.solutionVersions = _getSolutionVersionsOperations(this._client);
        this.schemaVersions = _getSchemaVersionsOperations(this._client);
        this.schemas = _getSchemasOperations(this._client);
        this.dynamicSchemas = _getDynamicSchemasOperations(this._client);
    }
    /** The operation groups for siteReferences */
    siteReferences;
    /** The operation groups for contexts */
    contexts;
    /** The operation groups for diagnostics */
    diagnostics;
    /** The operation groups for executions */
    executions;
    /** The operation groups for workflowVersions */
    workflowVersions;
    /** The operation groups for workflows */
    workflows;
    /** The operation groups for configTemplateVersions */
    configTemplateVersions;
    /** The operation groups for configTemplates */
    configTemplates;
    /** The operation groups for instanceHistories */
    instanceHistories;
    /** The operation groups for instances */
    instances;
    /** The operation groups for solutionTemplates */
    solutionTemplates;
    /** The operation groups for solutionTemplateVersions */
    solutionTemplateVersions;
    /** The operation groups for solutions */
    solutions;
    /** The operation groups for schemaReferences */
    schemaReferences;
    /** The operation groups for dynamicSchemaVersions */
    dynamicSchemaVersions;
    /** The operation groups for targets */
    targets;
    /** The operation groups for jobs */
    jobs;
    /** The operation groups for solutionVersions */
    solutionVersions;
    /** The operation groups for schemaVersions */
    schemaVersions;
    /** The operation groups for schemas */
    schemas;
    /** The operation groups for dynamicSchemas */
    dynamicSchemas;
}
//# sourceMappingURL=workloadOrchestrationManagementClient.js.map