{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/classic/solutionVersions/index.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAGlC,OAAO,EACL,cAAc,EACd,OAAO,EACP,MAAM,EACN,cAAc,EACd,GAAG,GACJ,MAAM,0CAA0C,CAAC;AA8DlD,SAAS,oBAAoB,CAAC,OAA+C;IAC3E,OAAO;QACL,cAAc,EAAE,CACd,iBAAyB,EACzB,UAAkB,EAClB,YAAoB,EACpB,OAAsD,EACtD,EAAE,CAAC,cAAc,CAAC,OAAO,EAAE,iBAAiB,EAAE,UAAU,EAAE,YAAY,EAAE,OAAO,CAAC;QAClF,MAAM,EAAE,CACN,iBAAyB,EACzB,UAAkB,EAClB,YAAoB,EACpB,mBAA2B,EAC3B,OAA8C,EAC9C,EAAE,CACF,OAAO,CAAC,OAAO,EAAE,iBAAiB,EAAE,UAAU,EAAE,YAAY,EAAE,mBAAmB,EAAE,OAAO,CAAC;QAC7F,MAAM,EAAE,CACN,iBAAyB,EACzB,UAAkB,EAClB,YAAoB,EACpB,mBAA2B,EAC3B,UAA2B,EAC3B,OAA8C,EAC9C,EAAE,CACF,MAAM,CACJ,OAAO,EACP,iBAAiB,EACjB,UAAU,EACV,YAAY,EACZ,mBAAmB,EACnB,UAAU,EACV,OAAO,CACR;QACH,cAAc,EAAE,CACd,iBAAyB,EACzB,UAAkB,EAClB,YAAoB,EACpB,mBAA2B,EAC3B,QAAyB,EACzB,OAAsD,EACtD,EAAE,CACF,cAAc,CACZ,OAAO,EACP,iBAAiB,EACjB,UAAU,EACV,YAAY,EACZ,mBAAmB,EACnB,QAAQ,EACR,OAAO,CACR;QACH,GAAG,EAAE,CACH,iBAAyB,EACzB,UAAkB,EAClB,YAAoB,EACpB,mBAA2B,EAC3B,OAA2C,EAC3C,EAAE,CAAC,GAAG,CAAC,OAAO,EAAE,iBAAiB,EAAE,UAAU,EAAE,YAAY,EAAE,mBAAmB,EAAE,OAAO,CAAC;KAC7F,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,8BAA8B,CAC5C,OAA+C;IAE/C,OAAO;QACL,GAAG,oBAAoB,CAAC,OAAO,CAAC;KACjC,CAAC;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { WorkloadOrchestrationManagementContext } from \"../../api/workloadOrchestrationManagementContext.js\";\nimport {\n  listBySolution,\n  $delete,\n  update,\n  createOrUpdate,\n  get,\n} from \"../../api/solutionVersions/operations.js\";\nimport {\n  SolutionVersionsListBySolutionOptionalParams,\n  SolutionVersionsDeleteOptionalParams,\n  SolutionVersionsUpdateOptionalParams,\n  SolutionVersionsCreateOrUpdateOptionalParams,\n  SolutionVersionsGetOptionalParams,\n} from \"../../api/solutionVersions/options.js\";\nimport { SolutionVersion } from \"../../models/models.js\";\nimport { PagedAsyncIterableIterator } from \"../../static-helpers/pagingHelpers.js\";\nimport { PollerLike, OperationState } from \"@azure/core-lro\";\n\n/** Interface representing a SolutionVersions operations. */\nexport interface SolutionVersionsOperations {\n  /** List Solution Version Resources */\n  listBySolution: (\n    resourceGroupName: string,\n    targetName: string,\n    solutionName: string,\n    options?: SolutionVersionsListBySolutionOptionalParams,\n  ) => PagedAsyncIterableIterator<SolutionVersion>;\n  /** Delete a Solution Version Resource */\n  /**\n   *  @fixme delete is a reserved word that cannot be used as an operation name.\n   *         Please add @clientName(\"clientName\") or @clientName(\"<JS-Specific-Name>\", \"javascript\")\n   *         to the operation to override the generated name.\n   */\n  delete: (\n    resourceGroupName: string,\n    targetName: string,\n    solutionName: string,\n    solutionVersionName: string,\n    options?: SolutionVersionsDeleteOptionalParams,\n  ) => PollerLike<OperationState<void>, void>;\n  /** Update a Solution Version Resource */\n  update: (\n    resourceGroupName: string,\n    targetName: string,\n    solutionName: string,\n    solutionVersionName: string,\n    properties: SolutionVersion,\n    options?: SolutionVersionsUpdateOptionalParams,\n  ) => PollerLike<OperationState<SolutionVersion>, SolutionVersion>;\n  /** Create or update a Solution Version Resource */\n  createOrUpdate: (\n    resourceGroupName: string,\n    targetName: string,\n    solutionName: string,\n    solutionVersionName: string,\n    resource: SolutionVersion,\n    options?: SolutionVersionsCreateOrUpdateOptionalParams,\n  ) => PollerLike<OperationState<SolutionVersion>, SolutionVersion>;\n  /** Get a Solution Version Resource */\n  get: (\n    resourceGroupName: string,\n    targetName: string,\n    solutionName: string,\n    solutionVersionName: string,\n    options?: SolutionVersionsGetOptionalParams,\n  ) => Promise<SolutionVersion>;\n}\n\nfunction _getSolutionVersions(context: WorkloadOrchestrationManagementContext) {\n  return {\n    listBySolution: (\n      resourceGroupName: string,\n      targetName: string,\n      solutionName: string,\n      options?: SolutionVersionsListBySolutionOptionalParams,\n    ) => listBySolution(context, resourceGroupName, targetName, solutionName, options),\n    delete: (\n      resourceGroupName: string,\n      targetName: string,\n      solutionName: string,\n      solutionVersionName: string,\n      options?: SolutionVersionsDeleteOptionalParams,\n    ) =>\n      $delete(context, resourceGroupName, targetName, solutionName, solutionVersionName, options),\n    update: (\n      resourceGroupName: string,\n      targetName: string,\n      solutionName: string,\n      solutionVersionName: string,\n      properties: SolutionVersion,\n      options?: SolutionVersionsUpdateOptionalParams,\n    ) =>\n      update(\n        context,\n        resourceGroupName,\n        targetName,\n        solutionName,\n        solutionVersionName,\n        properties,\n        options,\n      ),\n    createOrUpdate: (\n      resourceGroupName: string,\n      targetName: string,\n      solutionName: string,\n      solutionVersionName: string,\n      resource: SolutionVersion,\n      options?: SolutionVersionsCreateOrUpdateOptionalParams,\n    ) =>\n      createOrUpdate(\n        context,\n        resourceGroupName,\n        targetName,\n        solutionName,\n        solutionVersionName,\n        resource,\n        options,\n      ),\n    get: (\n      resourceGroupName: string,\n      targetName: string,\n      solutionName: string,\n      solutionVersionName: string,\n      options?: SolutionVersionsGetOptionalParams,\n    ) => get(context, resourceGroupName, targetName, solutionName, solutionVersionName, options),\n  };\n}\n\nexport function _getSolutionVersionsOperations(\n  context: WorkloadOrchestrationManagementContext,\n): SolutionVersionsOperations {\n  return {\n    ..._getSolutionVersions(context),\n  };\n}\n"]}