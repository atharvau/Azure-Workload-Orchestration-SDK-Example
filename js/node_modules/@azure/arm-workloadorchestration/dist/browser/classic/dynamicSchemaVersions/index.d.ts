import { WorkloadOrchestrationManagementContext } from "../../api/workloadOrchestrationManagementContext.js";
import { DynamicSchemaVersionsListByDynamicSchemaOptionalParams, DynamicSchemaVersionsDeleteOptionalParams, DynamicSchemaVersionsUpdateOptionalParams, DynamicSchemaVersionsCreateOrUpdateOptionalParams, DynamicSchemaVersionsGetOptionalParams } from "../../api/dynamicSchemaVersions/options.js";
import { DynamicSchemaVersion } from "../../models/models.js";
import { PagedAsyncIterableIterator } from "../../static-helpers/pagingHelpers.js";
import { PollerLike, OperationState } from "@azure/core-lro";
/** Interface representing a DynamicSchemaVersions operations. */
export interface DynamicSchemaVersionsOperations {
    /** List by Dynamic Schema */
    listByDynamicSchema: (resourceGroupName: string, schemaName: string, dynamicSchemaName: string, options?: DynamicSchemaVersionsListByDynamicSchemaOptionalParams) => PagedAsyncIterableIterator<DynamicSchemaVersion>;
    /** Delete a Dynamic Schema Version Resource */
    /**
     *  @fixme delete is a reserved word that cannot be used as an operation name.
     *         Please add @clientName("clientName") or @clientName("<JS-Specific-Name>", "javascript")
     *         to the operation to override the generated name.
     */
    delete: (resourceGroupName: string, schemaName: string, dynamicSchemaName: string, dynamicSchemaVersionName: string, options?: DynamicSchemaVersionsDeleteOptionalParams) => PollerLike<OperationState<void>, void>;
    /** update a Dynamic Schema Version Resource */
    update: (resourceGroupName: string, schemaName: string, dynamicSchemaName: string, dynamicSchemaVersionName: string, properties: DynamicSchemaVersion, options?: DynamicSchemaVersionsUpdateOptionalParams) => Promise<DynamicSchemaVersion>;
    /** Create or update a Dynamic Schema Version Resource */
    createOrUpdate: (resourceGroupName: string, schemaName: string, dynamicSchemaName: string, dynamicSchemaVersionName: string, resource: DynamicSchemaVersion, options?: DynamicSchemaVersionsCreateOrUpdateOptionalParams) => PollerLike<OperationState<DynamicSchemaVersion>, DynamicSchemaVersion>;
    /** Get a Dynamic Schema Version Resource */
    get: (resourceGroupName: string, schemaName: string, dynamicSchemaName: string, dynamicSchemaVersionName: string, options?: DynamicSchemaVersionsGetOptionalParams) => Promise<DynamicSchemaVersion>;
}
export declare function _getDynamicSchemaVersionsOperations(context: WorkloadOrchestrationManagementContext): DynamicSchemaVersionsOperations;
//# sourceMappingURL=index.d.ts.map