// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { updateExternalValidationStatus, publishSolutionVersion, reviewSolutionVersion, resolveConfiguration, removeRevision, uninstallSolution, installSolution, listBySubscription, listByResourceGroup, $delete, update, createOrUpdate, get, } from "../../api/targets/operations.js";
function _getTargets(context) {
    return {
        updateExternalValidationStatus: (resourceGroupName, targetName, body, options) => updateExternalValidationStatus(context, resourceGroupName, targetName, body, options),
        publishSolutionVersion: (resourceGroupName, targetName, body, options) => publishSolutionVersion(context, resourceGroupName, targetName, body, options),
        reviewSolutionVersion: (resourceGroupName, targetName, body, options) => reviewSolutionVersion(context, resourceGroupName, targetName, body, options),
        resolveConfiguration: (resourceGroupName, targetName, body, options) => resolveConfiguration(context, resourceGroupName, targetName, body, options),
        removeRevision: (resourceGroupName, targetName, body, options) => removeRevision(context, resourceGroupName, targetName, body, options),
        uninstallSolution: (resourceGroupName, targetName, body, options) => uninstallSolution(context, resourceGroupName, targetName, body, options),
        installSolution: (resourceGroupName, targetName, body, options) => installSolution(context, resourceGroupName, targetName, body, options),
        listBySubscription: (options) => listBySubscription(context, options),
        listByResourceGroup: (resourceGroupName, options) => listByResourceGroup(context, resourceGroupName, options),
        delete: (resourceGroupName, targetName, options) => $delete(context, resourceGroupName, targetName, options),
        update: (resourceGroupName, targetName, properties, options) => update(context, resourceGroupName, targetName, properties, options),
        createOrUpdate: (resourceGroupName, targetName, resource, options) => createOrUpdate(context, resourceGroupName, targetName, resource, options),
        get: (resourceGroupName, targetName, options) => get(context, resourceGroupName, targetName, options),
    };
}
export function _getTargetsOperations(context) {
    return {
        ..._getTargets(context),
    };
}
//# sourceMappingURL=index.js.map