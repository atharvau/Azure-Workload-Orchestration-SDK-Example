{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/classic/executions/index.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAGlC,OAAO,EACL,qBAAqB,EACrB,OAAO,EACP,MAAM,EACN,cAAc,EACd,GAAG,GACJ,MAAM,oCAAoC,CAAC;AAmE5C,SAAS,cAAc,CAAC,OAA+C;IACrE,OAAO;QACL,qBAAqB,EAAE,CACrB,iBAAyB,EACzB,WAAmB,EACnB,YAAoB,EACpB,WAAmB,EACnB,OAAuD,EACvD,EAAE,CACF,qBAAqB,CACnB,OAAO,EACP,iBAAiB,EACjB,WAAW,EACX,YAAY,EACZ,WAAW,EACX,OAAO,CACR;QACH,MAAM,EAAE,CACN,iBAAyB,EACzB,WAAmB,EACnB,YAAoB,EACpB,WAAmB,EACnB,aAAqB,EACrB,OAAwC,EACxC,EAAE,CACF,OAAO,CACL,OAAO,EACP,iBAAiB,EACjB,WAAW,EACX,YAAY,EACZ,WAAW,EACX,aAAa,EACb,OAAO,CACR;QACH,MAAM,EAAE,CACN,iBAAyB,EACzB,WAAmB,EACnB,YAAoB,EACpB,WAAmB,EACnB,aAAqB,EACrB,UAAqB,EACrB,OAAwC,EACxC,EAAE,CACF,MAAM,CACJ,OAAO,EACP,iBAAiB,EACjB,WAAW,EACX,YAAY,EACZ,WAAW,EACX,aAAa,EACb,UAAU,EACV,OAAO,CACR;QACH,cAAc,EAAE,CACd,iBAAyB,EACzB,WAAmB,EACnB,YAAoB,EACpB,WAAmB,EACnB,aAAqB,EACrB,QAAmB,EACnB,OAAgD,EAChD,EAAE,CACF,cAAc,CACZ,OAAO,EACP,iBAAiB,EACjB,WAAW,EACX,YAAY,EACZ,WAAW,EACX,aAAa,EACb,QAAQ,EACR,OAAO,CACR;QACH,GAAG,EAAE,CACH,iBAAyB,EACzB,WAAmB,EACnB,YAAoB,EACpB,WAAmB,EACnB,aAAqB,EACrB,OAAqC,EACrC,EAAE,CACF,GAAG,CACD,OAAO,EACP,iBAAiB,EACjB,WAAW,EACX,YAAY,EACZ,WAAW,EACX,aAAa,EACb,OAAO,CACR;KACJ,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,wBAAwB,CACtC,OAA+C;IAE/C,OAAO;QACL,GAAG,cAAc,CAAC,OAAO,CAAC;KAC3B,CAAC;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { WorkloadOrchestrationManagementContext } from \"../../api/workloadOrchestrationManagementContext.js\";\nimport {\n  listByWorkflowVersion,\n  $delete,\n  update,\n  createOrUpdate,\n  get,\n} from \"../../api/executions/operations.js\";\nimport {\n  ExecutionsListByWorkflowVersionOptionalParams,\n  ExecutionsDeleteOptionalParams,\n  ExecutionsUpdateOptionalParams,\n  ExecutionsCreateOrUpdateOptionalParams,\n  ExecutionsGetOptionalParams,\n} from \"../../api/executions/options.js\";\nimport { Execution } from \"../../models/models.js\";\nimport { PagedAsyncIterableIterator } from \"../../static-helpers/pagingHelpers.js\";\nimport { PollerLike, OperationState } from \"@azure/core-lro\";\n\n/** Interface representing a Executions operations. */\nexport interface ExecutionsOperations {\n  /** List Execution Resources */\n  listByWorkflowVersion: (\n    resourceGroupName: string,\n    contextName: string,\n    workflowName: string,\n    versionName: string,\n    options?: ExecutionsListByWorkflowVersionOptionalParams,\n  ) => PagedAsyncIterableIterator<Execution>;\n  /** Delete Execution Resource */\n  /**\n   *  @fixme delete is a reserved word that cannot be used as an operation name.\n   *         Please add @clientName(\"clientName\") or @clientName(\"<JS-Specific-Name>\", \"javascript\")\n   *         to the operation to override the generated name.\n   */\n  delete: (\n    resourceGroupName: string,\n    contextName: string,\n    workflowName: string,\n    versionName: string,\n    executionName: string,\n    options?: ExecutionsDeleteOptionalParams,\n  ) => PollerLike<OperationState<void>, void>;\n  /** update an Execution Resource */\n  update: (\n    resourceGroupName: string,\n    contextName: string,\n    workflowName: string,\n    versionName: string,\n    executionName: string,\n    properties: Execution,\n    options?: ExecutionsUpdateOptionalParams,\n  ) => PollerLike<OperationState<Execution>, Execution>;\n  /** Create or update Execution Resource */\n  createOrUpdate: (\n    resourceGroupName: string,\n    contextName: string,\n    workflowName: string,\n    versionName: string,\n    executionName: string,\n    resource: Execution,\n    options?: ExecutionsCreateOrUpdateOptionalParams,\n  ) => PollerLike<OperationState<Execution>, Execution>;\n  /** Get Execution Resource */\n  get: (\n    resourceGroupName: string,\n    contextName: string,\n    workflowName: string,\n    versionName: string,\n    executionName: string,\n    options?: ExecutionsGetOptionalParams,\n  ) => Promise<Execution>;\n}\n\nfunction _getExecutions(context: WorkloadOrchestrationManagementContext) {\n  return {\n    listByWorkflowVersion: (\n      resourceGroupName: string,\n      contextName: string,\n      workflowName: string,\n      versionName: string,\n      options?: ExecutionsListByWorkflowVersionOptionalParams,\n    ) =>\n      listByWorkflowVersion(\n        context,\n        resourceGroupName,\n        contextName,\n        workflowName,\n        versionName,\n        options,\n      ),\n    delete: (\n      resourceGroupName: string,\n      contextName: string,\n      workflowName: string,\n      versionName: string,\n      executionName: string,\n      options?: ExecutionsDeleteOptionalParams,\n    ) =>\n      $delete(\n        context,\n        resourceGroupName,\n        contextName,\n        workflowName,\n        versionName,\n        executionName,\n        options,\n      ),\n    update: (\n      resourceGroupName: string,\n      contextName: string,\n      workflowName: string,\n      versionName: string,\n      executionName: string,\n      properties: Execution,\n      options?: ExecutionsUpdateOptionalParams,\n    ) =>\n      update(\n        context,\n        resourceGroupName,\n        contextName,\n        workflowName,\n        versionName,\n        executionName,\n        properties,\n        options,\n      ),\n    createOrUpdate: (\n      resourceGroupName: string,\n      contextName: string,\n      workflowName: string,\n      versionName: string,\n      executionName: string,\n      resource: Execution,\n      options?: ExecutionsCreateOrUpdateOptionalParams,\n    ) =>\n      createOrUpdate(\n        context,\n        resourceGroupName,\n        contextName,\n        workflowName,\n        versionName,\n        executionName,\n        resource,\n        options,\n      ),\n    get: (\n      resourceGroupName: string,\n      contextName: string,\n      workflowName: string,\n      versionName: string,\n      executionName: string,\n      options?: ExecutionsGetOptionalParams,\n    ) =>\n      get(\n        context,\n        resourceGroupName,\n        contextName,\n        workflowName,\n        versionName,\n        executionName,\n        options,\n      ),\n  };\n}\n\nexport function _getExecutionsOperations(\n  context: WorkloadOrchestrationManagementContext,\n): ExecutionsOperations {\n  return {\n    ..._getExecutions(context),\n  };\n}\n"]}