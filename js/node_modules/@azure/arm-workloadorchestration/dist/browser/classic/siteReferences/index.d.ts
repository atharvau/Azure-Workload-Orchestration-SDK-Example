import { WorkloadOrchestrationManagementContext } from "../../api/workloadOrchestrationManagementContext.js";
import { SiteReferencesListByContextOptionalParams, SiteReferencesDeleteOptionalParams, SiteReferencesUpdateOptionalParams, SiteReferencesCreateOrUpdateOptionalParams, SiteReferencesGetOptionalParams } from "../../api/siteReferences/options.js";
import { SiteReference } from "../../models/models.js";
import { PagedAsyncIterableIterator } from "../../static-helpers/pagingHelpers.js";
import { PollerLike, OperationState } from "@azure/core-lro";
/** Interface representing a SiteReferences operations. */
export interface SiteReferencesOperations {
    /** List Site Reference Resources */
    listByContext: (resourceGroupName: string, contextName: string, options?: SiteReferencesListByContextOptionalParams) => PagedAsyncIterableIterator<SiteReference>;
    /** Get Site Reference Resource */
    /**
     *  @fixme delete is a reserved word that cannot be used as an operation name.
     *         Please add @clientName("clientName") or @clientName("<JS-Specific-Name>", "javascript")
     *         to the operation to override the generated name.
     */
    delete: (resourceGroupName: string, contextName: string, siteReferenceName: string, options?: SiteReferencesDeleteOptionalParams) => PollerLike<OperationState<void>, void>;
    /** Get Site Reference Resource */
    update: (resourceGroupName: string, contextName: string, siteReferenceName: string, properties: SiteReference, options?: SiteReferencesUpdateOptionalParams) => PollerLike<OperationState<SiteReference>, SiteReference>;
    /** Get Site Reference Resource */
    createOrUpdate: (resourceGroupName: string, contextName: string, siteReferenceName: string, resource: SiteReference, options?: SiteReferencesCreateOrUpdateOptionalParams) => PollerLike<OperationState<SiteReference>, SiteReference>;
    /** Get Site Reference Resource */
    get: (resourceGroupName: string, contextName: string, siteReferenceName: string, options?: SiteReferencesGetOptionalParams) => Promise<SiteReference>;
}
export declare function _getSiteReferencesOperations(context: WorkloadOrchestrationManagementContext): SiteReferencesOperations;
//# sourceMappingURL=index.d.ts.map