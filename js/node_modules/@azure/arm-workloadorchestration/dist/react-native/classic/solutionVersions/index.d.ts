import { WorkloadOrchestrationManagementContext } from "../../api/workloadOrchestrationManagementContext.js";
import { SolutionVersionsListBySolutionOptionalParams, SolutionVersionsDeleteOptionalParams, SolutionVersionsUpdateOptionalParams, SolutionVersionsCreateOrUpdateOptionalParams, SolutionVersionsGetOptionalParams } from "../../api/solutionVersions/options.js";
import { SolutionVersion } from "../../models/models.js";
import { PagedAsyncIterableIterator } from "../../static-helpers/pagingHelpers.js";
import { PollerLike, OperationState } from "@azure/core-lro";
/** Interface representing a SolutionVersions operations. */
export interface SolutionVersionsOperations {
    /** List Solution Version Resources */
    listBySolution: (resourceGroupName: string, targetName: string, solutionName: string, options?: SolutionVersionsListBySolutionOptionalParams) => PagedAsyncIterableIterator<SolutionVersion>;
    /** Delete a Solution Version Resource */
    /**
     *  @fixme delete is a reserved word that cannot be used as an operation name.
     *         Please add @clientName("clientName") or @clientName("<JS-Specific-Name>", "javascript")
     *         to the operation to override the generated name.
     */
    delete: (resourceGroupName: string, targetName: string, solutionName: string, solutionVersionName: string, options?: SolutionVersionsDeleteOptionalParams) => PollerLike<OperationState<void>, void>;
    /** Update a Solution Version Resource */
    update: (resourceGroupName: string, targetName: string, solutionName: string, solutionVersionName: string, properties: SolutionVersion, options?: SolutionVersionsUpdateOptionalParams) => PollerLike<OperationState<SolutionVersion>, SolutionVersion>;
    /** Create or update a Solution Version Resource */
    createOrUpdate: (resourceGroupName: string, targetName: string, solutionName: string, solutionVersionName: string, resource: SolutionVersion, options?: SolutionVersionsCreateOrUpdateOptionalParams) => PollerLike<OperationState<SolutionVersion>, SolutionVersion>;
    /** Get a Solution Version Resource */
    get: (resourceGroupName: string, targetName: string, solutionName: string, solutionVersionName: string, options?: SolutionVersionsGetOptionalParams) => Promise<SolutionVersion>;
}
export declare function _getSolutionVersionsOperations(context: WorkloadOrchestrationManagementContext): SolutionVersionsOperations;
//# sourceMappingURL=index.d.ts.map