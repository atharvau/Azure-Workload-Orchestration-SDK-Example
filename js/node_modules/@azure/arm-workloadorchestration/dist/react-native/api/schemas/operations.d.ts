import { WorkloadOrchestrationManagementContext as Client } from "../index.js";
import { Schema, SchemaUpdate, SchemaVersionWithUpdateType, SchemaVersion, VersionParameter, RemoveVersionResponse, _SchemaListResult } from "../../models/models.js";
import { PagedAsyncIterableIterator } from "../../static-helpers/pagingHelpers.js";
import { SchemasListBySubscriptionOptionalParams, SchemasListByResourceGroupOptionalParams, SchemasRemoveVersionOptionalParams, SchemasCreateVersionOptionalParams, SchemasDeleteOptionalParams, SchemasUpdateOptionalParams, SchemasCreateOrUpdateOptionalParams, SchemasGetOptionalParams } from "./options.js";
import { StreamableMethod, PathUncheckedResponse } from "@azure-rest/core-client";
import { PollerLike, OperationState } from "@azure/core-lro";
export declare function _listBySubscriptionSend(context: Client, options?: SchemasListBySubscriptionOptionalParams): StreamableMethod;
export declare function _listBySubscriptionDeserialize(result: PathUncheckedResponse): Promise<_SchemaListResult>;
/** List by subscription */
export declare function listBySubscription(context: Client, options?: SchemasListBySubscriptionOptionalParams): PagedAsyncIterableIterator<Schema>;
export declare function _listByResourceGroupSend(context: Client, resourceGroupName: string, options?: SchemasListByResourceGroupOptionalParams): StreamableMethod;
export declare function _listByResourceGroupDeserialize(result: PathUncheckedResponse): Promise<_SchemaListResult>;
/** List by specified resource group */
export declare function listByResourceGroup(context: Client, resourceGroupName: string, options?: SchemasListByResourceGroupOptionalParams): PagedAsyncIterableIterator<Schema>;
export declare function _removeVersionSend(context: Client, resourceGroupName: string, schemaName: string, body: VersionParameter, options?: SchemasRemoveVersionOptionalParams): StreamableMethod;
export declare function _removeVersionDeserialize(result: PathUncheckedResponse): Promise<RemoveVersionResponse>;
/** Remove Schema Version Resource */
export declare function removeVersion(context: Client, resourceGroupName: string, schemaName: string, body: VersionParameter, options?: SchemasRemoveVersionOptionalParams): Promise<RemoveVersionResponse>;
export declare function _createVersionSend(context: Client, resourceGroupName: string, schemaName: string, body: SchemaVersionWithUpdateType, options?: SchemasCreateVersionOptionalParams): StreamableMethod;
export declare function _createVersionDeserialize(result: PathUncheckedResponse): Promise<SchemaVersion>;
/** Create a Schema Version Resource */
export declare function createVersion(context: Client, resourceGroupName: string, schemaName: string, body: SchemaVersionWithUpdateType, options?: SchemasCreateVersionOptionalParams): PollerLike<OperationState<SchemaVersion>, SchemaVersion>;
export declare function _$deleteSend(context: Client, resourceGroupName: string, schemaName: string, options?: SchemasDeleteOptionalParams): StreamableMethod;
export declare function _$deleteDeserialize(result: PathUncheckedResponse): Promise<void>;
/** Delete a Schema Resource */
/**
 *  @fixme delete is a reserved word that cannot be used as an operation name.
 *         Please add @clientName("clientName") or @clientName("<JS-Specific-Name>", "javascript")
 *         to the operation to override the generated name.
 */
export declare function $delete(context: Client, resourceGroupName: string, schemaName: string, options?: SchemasDeleteOptionalParams): PollerLike<OperationState<void>, void>;
export declare function _updateSend(context: Client, resourceGroupName: string, schemaName: string, properties: SchemaUpdate, options?: SchemasUpdateOptionalParams): StreamableMethod;
export declare function _updateDeserialize(result: PathUncheckedResponse): Promise<Schema>;
/** update a Schema Resource */
export declare function update(context: Client, resourceGroupName: string, schemaName: string, properties: SchemaUpdate, options?: SchemasUpdateOptionalParams): Promise<Schema>;
export declare function _createOrUpdateSend(context: Client, resourceGroupName: string, schemaName: string, resource: Schema, options?: SchemasCreateOrUpdateOptionalParams): StreamableMethod;
export declare function _createOrUpdateDeserialize(result: PathUncheckedResponse): Promise<Schema>;
/** Create or update a Schema Resource */
export declare function createOrUpdate(context: Client, resourceGroupName: string, schemaName: string, resource: Schema, options?: SchemasCreateOrUpdateOptionalParams): PollerLike<OperationState<Schema>, Schema>;
export declare function _getSend(context: Client, resourceGroupName: string, schemaName: string, options?: SchemasGetOptionalParams): StreamableMethod;
export declare function _getDeserialize(result: PathUncheckedResponse): Promise<Schema>;
/** Get a Schema Resource */
export declare function get(context: Client, resourceGroupName: string, schemaName: string, options?: SchemasGetOptionalParams): Promise<Schema>;
//# sourceMappingURL=operations.d.ts.map