import { WorkloadOrchestrationManagementContext as Client } from "../index.js";
import { VersionParameter, RemoveVersionResponse, ConfigTemplate, ConfigTemplateUpdate, ConfigTemplateVersionWithUpdateType, ConfigTemplateVersion, _ConfigTemplateListResult } from "../../models/models.js";
import { PagedAsyncIterableIterator } from "../../static-helpers/pagingHelpers.js";
import { ConfigTemplatesListBySubscriptionOptionalParams, ConfigTemplatesListByResourceGroupOptionalParams, ConfigTemplatesDeleteOptionalParams, ConfigTemplatesRemoveVersionOptionalParams, ConfigTemplatesCreateVersionOptionalParams, ConfigTemplatesUpdateOptionalParams, ConfigTemplatesCreateOrUpdateOptionalParams, ConfigTemplatesGetOptionalParams } from "./options.js";
import { StreamableMethod, PathUncheckedResponse } from "@azure-rest/core-client";
import { PollerLike, OperationState } from "@azure/core-lro";
export declare function _listBySubscriptionSend(context: Client, options?: ConfigTemplatesListBySubscriptionOptionalParams): StreamableMethod;
export declare function _listBySubscriptionDeserialize(result: PathUncheckedResponse): Promise<_ConfigTemplateListResult>;
/** List by subscription */
export declare function listBySubscription(context: Client, options?: ConfigTemplatesListBySubscriptionOptionalParams): PagedAsyncIterableIterator<ConfigTemplate>;
export declare function _listByResourceGroupSend(context: Client, resourceGroupName: string, options?: ConfigTemplatesListByResourceGroupOptionalParams): StreamableMethod;
export declare function _listByResourceGroupDeserialize(result: PathUncheckedResponse): Promise<_ConfigTemplateListResult>;
/** List by specified resource group */
export declare function listByResourceGroup(context: Client, resourceGroupName: string, options?: ConfigTemplatesListByResourceGroupOptionalParams): PagedAsyncIterableIterator<ConfigTemplate>;
export declare function _$deleteSend(context: Client, resourceGroupName: string, configTemplateName: string, options?: ConfigTemplatesDeleteOptionalParams): StreamableMethod;
export declare function _$deleteDeserialize(result: PathUncheckedResponse): Promise<void>;
/** Delete a Config Template Resource */
/**
 *  @fixme delete is a reserved word that cannot be used as an operation name.
 *         Please add @clientName("clientName") or @clientName("<JS-Specific-Name>", "javascript")
 *         to the operation to override the generated name.
 */
export declare function $delete(context: Client, resourceGroupName: string, configTemplateName: string, options?: ConfigTemplatesDeleteOptionalParams): PollerLike<OperationState<void>, void>;
export declare function _removeVersionSend(context: Client, resourceGroupName: string, configTemplateName: string, body: VersionParameter, options?: ConfigTemplatesRemoveVersionOptionalParams): StreamableMethod;
export declare function _removeVersionDeserialize(result: PathUncheckedResponse): Promise<RemoveVersionResponse>;
/** Remove Config Template Version Resource */
export declare function removeVersion(context: Client, resourceGroupName: string, configTemplateName: string, body: VersionParameter, options?: ConfigTemplatesRemoveVersionOptionalParams): Promise<RemoveVersionResponse>;
export declare function _createVersionSend(context: Client, resourceGroupName: string, configTemplateName: string, body: ConfigTemplateVersionWithUpdateType, options?: ConfigTemplatesCreateVersionOptionalParams): StreamableMethod;
export declare function _createVersionDeserialize(result: PathUncheckedResponse): Promise<ConfigTemplateVersion>;
/** Create or update a Config Template Version Resource with the specified UpdateType */
export declare function createVersion(context: Client, resourceGroupName: string, configTemplateName: string, body: ConfigTemplateVersionWithUpdateType, options?: ConfigTemplatesCreateVersionOptionalParams): PollerLike<OperationState<ConfigTemplateVersion>, ConfigTemplateVersion>;
export declare function _updateSend(context: Client, resourceGroupName: string, configTemplateName: string, properties: ConfigTemplateUpdate, options?: ConfigTemplatesUpdateOptionalParams): StreamableMethod;
export declare function _updateDeserialize(result: PathUncheckedResponse): Promise<ConfigTemplate>;
/** update a Config Template Resource */
export declare function update(context: Client, resourceGroupName: string, configTemplateName: string, properties: ConfigTemplateUpdate, options?: ConfigTemplatesUpdateOptionalParams): Promise<ConfigTemplate>;
export declare function _createOrUpdateSend(context: Client, resourceGroupName: string, configTemplateName: string, resource: ConfigTemplate, options?: ConfigTemplatesCreateOrUpdateOptionalParams): StreamableMethod;
export declare function _createOrUpdateDeserialize(result: PathUncheckedResponse): Promise<ConfigTemplate>;
/** Create or update a Config Template Resource */
export declare function createOrUpdate(context: Client, resourceGroupName: string, configTemplateName: string, resource: ConfigTemplate, options?: ConfigTemplatesCreateOrUpdateOptionalParams): PollerLike<OperationState<ConfigTemplate>, ConfigTemplate>;
export declare function _getSend(context: Client, resourceGroupName: string, configTemplateName: string, options?: ConfigTemplatesGetOptionalParams): StreamableMethod;
export declare function _getDeserialize(result: PathUncheckedResponse): Promise<ConfigTemplate>;
/** Get a Config Template Resource */
export declare function get(context: Client, resourceGroupName: string, configTemplateName: string, options?: ConfigTemplatesGetOptionalParams): Promise<ConfigTemplate>;
//# sourceMappingURL=operations.d.ts.map