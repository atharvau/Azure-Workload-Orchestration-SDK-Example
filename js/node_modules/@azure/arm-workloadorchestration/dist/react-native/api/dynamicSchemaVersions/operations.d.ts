import { WorkloadOrchestrationManagementContext as Client } from "../index.js";
import { DynamicSchemaVersion, _DynamicSchemaVersionListResult } from "../../models/models.js";
import { PagedAsyncIterableIterator } from "../../static-helpers/pagingHelpers.js";
import { DynamicSchemaVersionsListByDynamicSchemaOptionalParams, DynamicSchemaVersionsDeleteOptionalParams, DynamicSchemaVersionsUpdateOptionalParams, DynamicSchemaVersionsCreateOrUpdateOptionalParams, DynamicSchemaVersionsGetOptionalParams } from "./options.js";
import { StreamableMethod, PathUncheckedResponse } from "@azure-rest/core-client";
import { PollerLike, OperationState } from "@azure/core-lro";
export declare function _listByDynamicSchemaSend(context: Client, resourceGroupName: string, schemaName: string, dynamicSchemaName: string, options?: DynamicSchemaVersionsListByDynamicSchemaOptionalParams): StreamableMethod;
export declare function _listByDynamicSchemaDeserialize(result: PathUncheckedResponse): Promise<_DynamicSchemaVersionListResult>;
/** List by Dynamic Schema */
export declare function listByDynamicSchema(context: Client, resourceGroupName: string, schemaName: string, dynamicSchemaName: string, options?: DynamicSchemaVersionsListByDynamicSchemaOptionalParams): PagedAsyncIterableIterator<DynamicSchemaVersion>;
export declare function _$deleteSend(context: Client, resourceGroupName: string, schemaName: string, dynamicSchemaName: string, dynamicSchemaVersionName: string, options?: DynamicSchemaVersionsDeleteOptionalParams): StreamableMethod;
export declare function _$deleteDeserialize(result: PathUncheckedResponse): Promise<void>;
/** Delete a Dynamic Schema Version Resource */
/**
 *  @fixme delete is a reserved word that cannot be used as an operation name.
 *         Please add @clientName("clientName") or @clientName("<JS-Specific-Name>", "javascript")
 *         to the operation to override the generated name.
 */
export declare function $delete(context: Client, resourceGroupName: string, schemaName: string, dynamicSchemaName: string, dynamicSchemaVersionName: string, options?: DynamicSchemaVersionsDeleteOptionalParams): PollerLike<OperationState<void>, void>;
export declare function _updateSend(context: Client, resourceGroupName: string, schemaName: string, dynamicSchemaName: string, dynamicSchemaVersionName: string, properties: DynamicSchemaVersion, options?: DynamicSchemaVersionsUpdateOptionalParams): StreamableMethod;
export declare function _updateDeserialize(result: PathUncheckedResponse): Promise<DynamicSchemaVersion>;
/** update a Dynamic Schema Version Resource */
export declare function update(context: Client, resourceGroupName: string, schemaName: string, dynamicSchemaName: string, dynamicSchemaVersionName: string, properties: DynamicSchemaVersion, options?: DynamicSchemaVersionsUpdateOptionalParams): Promise<DynamicSchemaVersion>;
export declare function _createOrUpdateSend(context: Client, resourceGroupName: string, schemaName: string, dynamicSchemaName: string, dynamicSchemaVersionName: string, resource: DynamicSchemaVersion, options?: DynamicSchemaVersionsCreateOrUpdateOptionalParams): StreamableMethod;
export declare function _createOrUpdateDeserialize(result: PathUncheckedResponse): Promise<DynamicSchemaVersion>;
/** Create or update a Dynamic Schema Version Resource */
export declare function createOrUpdate(context: Client, resourceGroupName: string, schemaName: string, dynamicSchemaName: string, dynamicSchemaVersionName: string, resource: DynamicSchemaVersion, options?: DynamicSchemaVersionsCreateOrUpdateOptionalParams): PollerLike<OperationState<DynamicSchemaVersion>, DynamicSchemaVersion>;
export declare function _getSend(context: Client, resourceGroupName: string, schemaName: string, dynamicSchemaName: string, dynamicSchemaVersionName: string, options?: DynamicSchemaVersionsGetOptionalParams): StreamableMethod;
export declare function _getDeserialize(result: PathUncheckedResponse): Promise<DynamicSchemaVersion>;
/** Get a Dynamic Schema Version Resource */
export declare function get(context: Client, resourceGroupName: string, schemaName: string, dynamicSchemaName: string, dynamicSchemaVersionName: string, options?: DynamicSchemaVersionsGetOptionalParams): Promise<DynamicSchemaVersion>;
//# sourceMappingURL=operations.d.ts.map