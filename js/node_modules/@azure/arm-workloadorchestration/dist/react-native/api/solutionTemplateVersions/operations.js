// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { errorResponseDeserializer, solutionTemplateVersionDeserializer, _solutionTemplateVersionListResultDeserializer, bulkDeploySolutionParameterSerializer, bulkPublishSolutionParameterSerializer, } from "../../models/models.js";
import { buildPagedAsyncIterator, } from "../../static-helpers/pagingHelpers.js";
import { getLongRunningPoller } from "../../static-helpers/pollingHelpers.js";
import { expandUrlTemplate } from "../../static-helpers/urlTemplate.js";
import { createRestError, operationOptionsToRequestParameters, } from "@azure-rest/core-client";
export function _bulkPublishSolutionSend(context, resourceGroupName, solutionTemplateName, solutionTemplateVersionName, body, options = {
    requestOptions: {},
}) {
    const path = expandUrlTemplate("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}/versions/{solutionTemplateVersionName}/bulkPublishSolution{?api%2Dversion}", {
        subscriptionId: context.subscriptionId,
        resourceGroupName: resourceGroupName,
        solutionTemplateName: solutionTemplateName,
        solutionTemplateVersionName: solutionTemplateVersionName,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).post({
        ...operationOptionsToRequestParameters(options),
        contentType: "application/json",
        body: bulkPublishSolutionParameterSerializer(body),
    });
}
export async function _bulkPublishSolutionDeserialize(result) {
    const expectedStatuses = ["202", "200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = createRestError(result);
        error.details = errorResponseDeserializer(result.body);
        throw error;
    }
    return;
}
/** Post request for bulk publish */
export function bulkPublishSolution(context, resourceGroupName, solutionTemplateName, solutionTemplateVersionName, body, options = {
    requestOptions: {},
}) {
    return getLongRunningPoller(context, _bulkPublishSolutionDeserialize, ["202", "200"], {
        updateIntervalInMs: options?.updateIntervalInMs,
        abortSignal: options?.abortSignal,
        getInitialResponse: () => _bulkPublishSolutionSend(context, resourceGroupName, solutionTemplateName, solutionTemplateVersionName, body, options),
        resourceLocationConfig: "location",
    });
}
export function _bulkDeploySolutionSend(context, resourceGroupName, solutionTemplateName, solutionTemplateVersionName, body, options = {
    requestOptions: {},
}) {
    const path = expandUrlTemplate("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}/versions/{solutionTemplateVersionName}/bulkDeploySolution{?api%2Dversion}", {
        subscriptionId: context.subscriptionId,
        resourceGroupName: resourceGroupName,
        solutionTemplateName: solutionTemplateName,
        solutionTemplateVersionName: solutionTemplateVersionName,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).post({
        ...operationOptionsToRequestParameters(options),
        contentType: "application/json",
        body: bulkDeploySolutionParameterSerializer(body),
    });
}
export async function _bulkDeploySolutionDeserialize(result) {
    const expectedStatuses = ["202", "200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = createRestError(result);
        error.details = errorResponseDeserializer(result.body);
        throw error;
    }
    return;
}
/** Post request for bulk deploy */
export function bulkDeploySolution(context, resourceGroupName, solutionTemplateName, solutionTemplateVersionName, body, options = {
    requestOptions: {},
}) {
    return getLongRunningPoller(context, _bulkDeploySolutionDeserialize, ["202", "200"], {
        updateIntervalInMs: options?.updateIntervalInMs,
        abortSignal: options?.abortSignal,
        getInitialResponse: () => _bulkDeploySolutionSend(context, resourceGroupName, solutionTemplateName, solutionTemplateVersionName, body, options),
        resourceLocationConfig: "location",
    });
}
export function _listBySolutionTemplateSend(context, resourceGroupName, solutionTemplateName, options = {
    requestOptions: {},
}) {
    const path = expandUrlTemplate("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}/versions{?api%2Dversion}", {
        subscriptionId: context.subscriptionId,
        resourceGroupName: resourceGroupName,
        solutionTemplateName: solutionTemplateName,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).get({
        ...operationOptionsToRequestParameters(options),
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
    });
}
export async function _listBySolutionTemplateDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = createRestError(result);
        error.details = errorResponseDeserializer(result.body);
        throw error;
    }
    return _solutionTemplateVersionListResultDeserializer(result.body);
}
/** List Solution Template Version Resources */
export function listBySolutionTemplate(context, resourceGroupName, solutionTemplateName, options = {
    requestOptions: {},
}) {
    return buildPagedAsyncIterator(context, () => _listBySolutionTemplateSend(context, resourceGroupName, solutionTemplateName, options), _listBySolutionTemplateDeserialize, ["200"], { itemName: "value", nextLinkName: "nextLink" });
}
export function _getSend(context, resourceGroupName, solutionTemplateName, solutionTemplateVersionName, options = { requestOptions: {} }) {
    const path = expandUrlTemplate("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}/versions/{solutionTemplateVersionName}{?api%2Dversion}", {
        subscriptionId: context.subscriptionId,
        resourceGroupName: resourceGroupName,
        solutionTemplateName: solutionTemplateName,
        solutionTemplateVersionName: solutionTemplateVersionName,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).get({
        ...operationOptionsToRequestParameters(options),
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
    });
}
export async function _getDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = createRestError(result);
        error.details = errorResponseDeserializer(result.body);
        throw error;
    }
    return solutionTemplateVersionDeserializer(result.body);
}
/** Get a Solution Template Version Resource */
export async function get(context, resourceGroupName, solutionTemplateName, solutionTemplateVersionName, options = { requestOptions: {} }) {
    const result = await _getSend(context, resourceGroupName, solutionTemplateName, solutionTemplateVersionName, options);
    return _getDeserialize(result);
}
//# sourceMappingURL=operations.js.map