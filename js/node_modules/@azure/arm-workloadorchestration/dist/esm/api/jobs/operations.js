// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { errorResponseDeserializer, jobDeserializer, _jobListResultDeserializer, } from "../../models/models.js";
import { buildPagedAsyncIterator, } from "../../static-helpers/pagingHelpers.js";
import { expandUrlTemplate } from "../../static-helpers/urlTemplate.js";
import { createRestError, operationOptionsToRequestParameters, } from "@azure-rest/core-client";
export function _listByTargetSend(context, resourceUri, options = { requestOptions: {} }) {
    const path = expandUrlTemplate("/{+resourceUri}/providers/Microsoft.Edge/jobs{?api%2Dversion}", {
        resourceUri: resourceUri,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).get({
        ...operationOptionsToRequestParameters(options),
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
    });
}
export async function _listByTargetDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = createRestError(result);
        error.details = errorResponseDeserializer(result.body);
        throw error;
    }
    return _jobListResultDeserializer(result.body);
}
/** List Jobs by parent resource */
export function listByTarget(context, resourceUri, options = { requestOptions: {} }) {
    return buildPagedAsyncIterator(context, () => _listByTargetSend(context, resourceUri, options), _listByTargetDeserialize, ["200"], { itemName: "value", nextLinkName: "nextLink" });
}
export function _getSend(context, resourceUri, jobName, options = { requestOptions: {} }) {
    const path = expandUrlTemplate("/{+resourceUri}/providers/Microsoft.Edge/jobs/{jobName}{?api%2Dversion}", {
        resourceUri: resourceUri,
        jobName: jobName,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).get({
        ...operationOptionsToRequestParameters(options),
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
    });
}
export async function _getDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = createRestError(result);
        error.details = errorResponseDeserializer(result.body);
        throw error;
    }
    return jobDeserializer(result.body);
}
/** Get a Job resource */
export async function get(context, resourceUri, jobName, options = { requestOptions: {} }) {
    const result = await _getSend(context, resourceUri, jobName, options);
    return _getDeserialize(result);
}
//# sourceMappingURL=operations.js.map