import { WorkloadOrchestrationManagementContext as Client } from "../index.js";
import { SolutionVersion, _SolutionVersionListResult } from "../../models/models.js";
import { PagedAsyncIterableIterator } from "../../static-helpers/pagingHelpers.js";
import { SolutionVersionsListBySolutionOptionalParams, SolutionVersionsDeleteOptionalParams, SolutionVersionsUpdateOptionalParams, SolutionVersionsCreateOrUpdateOptionalParams, SolutionVersionsGetOptionalParams } from "./options.js";
import { StreamableMethod, PathUncheckedResponse } from "@azure-rest/core-client";
import { PollerLike, OperationState } from "@azure/core-lro";
export declare function _listBySolutionSend(context: Client, resourceGroupName: string, targetName: string, solutionName: string, options?: SolutionVersionsListBySolutionOptionalParams): StreamableMethod;
export declare function _listBySolutionDeserialize(result: PathUncheckedResponse): Promise<_SolutionVersionListResult>;
/** List Solution Version Resources */
export declare function listBySolution(context: Client, resourceGroupName: string, targetName: string, solutionName: string, options?: SolutionVersionsListBySolutionOptionalParams): PagedAsyncIterableIterator<SolutionVersion>;
export declare function _$deleteSend(context: Client, resourceGroupName: string, targetName: string, solutionName: string, solutionVersionName: string, options?: SolutionVersionsDeleteOptionalParams): StreamableMethod;
export declare function _$deleteDeserialize(result: PathUncheckedResponse): Promise<void>;
/** Delete a Solution Version Resource */
/**
 *  @fixme delete is a reserved word that cannot be used as an operation name.
 *         Please add @clientName("clientName") or @clientName("<JS-Specific-Name>", "javascript")
 *         to the operation to override the generated name.
 */
export declare function $delete(context: Client, resourceGroupName: string, targetName: string, solutionName: string, solutionVersionName: string, options?: SolutionVersionsDeleteOptionalParams): PollerLike<OperationState<void>, void>;
export declare function _updateSend(context: Client, resourceGroupName: string, targetName: string, solutionName: string, solutionVersionName: string, properties: SolutionVersion, options?: SolutionVersionsUpdateOptionalParams): StreamableMethod;
export declare function _updateDeserialize(result: PathUncheckedResponse): Promise<SolutionVersion>;
/** Update a Solution Version Resource */
export declare function update(context: Client, resourceGroupName: string, targetName: string, solutionName: string, solutionVersionName: string, properties: SolutionVersion, options?: SolutionVersionsUpdateOptionalParams): PollerLike<OperationState<SolutionVersion>, SolutionVersion>;
export declare function _createOrUpdateSend(context: Client, resourceGroupName: string, targetName: string, solutionName: string, solutionVersionName: string, resource: SolutionVersion, options?: SolutionVersionsCreateOrUpdateOptionalParams): StreamableMethod;
export declare function _createOrUpdateDeserialize(result: PathUncheckedResponse): Promise<SolutionVersion>;
/** Create or update a Solution Version Resource */
export declare function createOrUpdate(context: Client, resourceGroupName: string, targetName: string, solutionName: string, solutionVersionName: string, resource: SolutionVersion, options?: SolutionVersionsCreateOrUpdateOptionalParams): PollerLike<OperationState<SolutionVersion>, SolutionVersion>;
export declare function _getSend(context: Client, resourceGroupName: string, targetName: string, solutionName: string, solutionVersionName: string, options?: SolutionVersionsGetOptionalParams): StreamableMethod;
export declare function _getDeserialize(result: PathUncheckedResponse): Promise<SolutionVersion>;
/** Get a Solution Version Resource */
export declare function get(context: Client, resourceGroupName: string, targetName: string, solutionName: string, solutionVersionName: string, options?: SolutionVersionsGetOptionalParams): Promise<SolutionVersion>;
//# sourceMappingURL=operations.d.ts.map