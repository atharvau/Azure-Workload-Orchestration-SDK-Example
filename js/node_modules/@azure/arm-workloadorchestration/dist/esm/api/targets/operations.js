// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { errorResponseDeserializer, solutionVersionDeserializer, installSolutionParameterSerializer, targetSerializer, targetDeserializer, targetUpdateSerializer, _targetListResultDeserializer, uninstallSolutionParameterSerializer, removeRevisionParameterSerializer, solutionTemplateParameterSerializer, resolvedConfigurationDeserializer, solutionVersionParameterSerializer, updateExternalValidationStatusParameterSerializer, } from "../../models/models.js";
import { buildPagedAsyncIterator, } from "../../static-helpers/pagingHelpers.js";
import { getLongRunningPoller } from "../../static-helpers/pollingHelpers.js";
import { expandUrlTemplate } from "../../static-helpers/urlTemplate.js";
import { createRestError, operationOptionsToRequestParameters, } from "@azure-rest/core-client";
export function _updateExternalValidationStatusSend(context, resourceGroupName, targetName, body, options = {
    requestOptions: {},
}) {
    const path = expandUrlTemplate("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/updateExternalValidationStatus{?api%2Dversion}", {
        subscriptionId: context.subscriptionId,
        resourceGroupName: resourceGroupName,
        targetName: targetName,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).post({
        ...operationOptionsToRequestParameters(options),
        contentType: "application/json",
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
        body: updateExternalValidationStatusParameterSerializer(body),
    });
}
export async function _updateExternalValidationStatusDeserialize(result) {
    const expectedStatuses = ["202", "200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = createRestError(result);
        error.details = errorResponseDeserializer(result.body);
        throw error;
    }
    return solutionVersionDeserializer(result.body);
}
/** Post request to update external validation status */
export function updateExternalValidationStatus(context, resourceGroupName, targetName, body, options = {
    requestOptions: {},
}) {
    return getLongRunningPoller(context, _updateExternalValidationStatusDeserialize, ["202", "200"], {
        updateIntervalInMs: options?.updateIntervalInMs,
        abortSignal: options?.abortSignal,
        getInitialResponse: () => _updateExternalValidationStatusSend(context, resourceGroupName, targetName, body, options),
        resourceLocationConfig: "location",
    });
}
export function _publishSolutionVersionSend(context, resourceGroupName, targetName, body, options = { requestOptions: {} }) {
    const path = expandUrlTemplate("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/publishSolutionVersion{?api%2Dversion}", {
        subscriptionId: context.subscriptionId,
        resourceGroupName: resourceGroupName,
        targetName: targetName,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).post({
        ...operationOptionsToRequestParameters(options),
        contentType: "application/json",
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
        body: solutionVersionParameterSerializer(body),
    });
}
export async function _publishSolutionVersionDeserialize(result) {
    const expectedStatuses = ["202", "200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = createRestError(result);
        error.details = errorResponseDeserializer(result.body);
        throw error;
    }
    return solutionVersionDeserializer(result.body);
}
/** Post request to publish */
export function publishSolutionVersion(context, resourceGroupName, targetName, body, options = { requestOptions: {} }) {
    return getLongRunningPoller(context, _publishSolutionVersionDeserialize, ["202", "200"], {
        updateIntervalInMs: options?.updateIntervalInMs,
        abortSignal: options?.abortSignal,
        getInitialResponse: () => _publishSolutionVersionSend(context, resourceGroupName, targetName, body, options),
        resourceLocationConfig: "location",
    });
}
export function _reviewSolutionVersionSend(context, resourceGroupName, targetName, body, options = { requestOptions: {} }) {
    const path = expandUrlTemplate("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/reviewSolutionVersion{?api%2Dversion}", {
        subscriptionId: context.subscriptionId,
        resourceGroupName: resourceGroupName,
        targetName: targetName,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).post({
        ...operationOptionsToRequestParameters(options),
        contentType: "application/json",
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
        body: solutionTemplateParameterSerializer(body),
    });
}
export async function _reviewSolutionVersionDeserialize(result) {
    const expectedStatuses = ["202", "200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = createRestError(result);
        error.details = errorResponseDeserializer(result.body);
        throw error;
    }
    return solutionVersionDeserializer(result.body);
}
/** Post request to review configuration */
export function reviewSolutionVersion(context, resourceGroupName, targetName, body, options = { requestOptions: {} }) {
    return getLongRunningPoller(context, _reviewSolutionVersionDeserialize, ["202", "200"], {
        updateIntervalInMs: options?.updateIntervalInMs,
        abortSignal: options?.abortSignal,
        getInitialResponse: () => _reviewSolutionVersionSend(context, resourceGroupName, targetName, body, options),
        resourceLocationConfig: "location",
    });
}
export function _resolveConfigurationSend(context, resourceGroupName, targetName, body, options = { requestOptions: {} }) {
    const path = expandUrlTemplate("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/resolveConfiguration{?api%2Dversion}", {
        subscriptionId: context.subscriptionId,
        resourceGroupName: resourceGroupName,
        targetName: targetName,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).post({
        ...operationOptionsToRequestParameters(options),
        contentType: "application/json",
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
        body: solutionTemplateParameterSerializer(body),
    });
}
export async function _resolveConfigurationDeserialize(result) {
    const expectedStatuses = ["202", "200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = createRestError(result);
        error.details = errorResponseDeserializer(result.body);
        throw error;
    }
    return resolvedConfigurationDeserializer(result.body);
}
/** Post request to resolve configuration */
export function resolveConfiguration(context, resourceGroupName, targetName, body, options = { requestOptions: {} }) {
    return getLongRunningPoller(context, _resolveConfigurationDeserialize, ["202", "200"], {
        updateIntervalInMs: options?.updateIntervalInMs,
        abortSignal: options?.abortSignal,
        getInitialResponse: () => _resolveConfigurationSend(context, resourceGroupName, targetName, body, options),
        resourceLocationConfig: "location",
    });
}
export function _removeRevisionSend(context, resourceGroupName, targetName, body, options = { requestOptions: {} }) {
    const path = expandUrlTemplate("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/removeRevision{?api%2Dversion}", {
        subscriptionId: context.subscriptionId,
        resourceGroupName: resourceGroupName,
        targetName: targetName,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).post({
        ...operationOptionsToRequestParameters(options),
        contentType: "application/json",
        body: removeRevisionParameterSerializer(body),
    });
}
export async function _removeRevisionDeserialize(result) {
    const expectedStatuses = ["202", "200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = createRestError(result);
        error.details = errorResponseDeserializer(result.body);
        throw error;
    }
    return;
}
/** Post request to remove solution version revision */
export function removeRevision(context, resourceGroupName, targetName, body, options = { requestOptions: {} }) {
    return getLongRunningPoller(context, _removeRevisionDeserialize, ["202", "200"], {
        updateIntervalInMs: options?.updateIntervalInMs,
        abortSignal: options?.abortSignal,
        getInitialResponse: () => _removeRevisionSend(context, resourceGroupName, targetName, body, options),
        resourceLocationConfig: "location",
    });
}
export function _uninstallSolutionSend(context, resourceGroupName, targetName, body, options = { requestOptions: {} }) {
    const path = expandUrlTemplate("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/uninstallSolution{?api%2Dversion}", {
        subscriptionId: context.subscriptionId,
        resourceGroupName: resourceGroupName,
        targetName: targetName,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).post({
        ...operationOptionsToRequestParameters(options),
        contentType: "application/json",
        body: uninstallSolutionParameterSerializer(body),
    });
}
export async function _uninstallSolutionDeserialize(result) {
    const expectedStatuses = ["202", "200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = createRestError(result);
        error.details = errorResponseDeserializer(result.body);
        throw error;
    }
    return;
}
/** Post request to uninstall */
export function uninstallSolution(context, resourceGroupName, targetName, body, options = { requestOptions: {} }) {
    return getLongRunningPoller(context, _uninstallSolutionDeserialize, ["202", "200"], {
        updateIntervalInMs: options?.updateIntervalInMs,
        abortSignal: options?.abortSignal,
        getInitialResponse: () => _uninstallSolutionSend(context, resourceGroupName, targetName, body, options),
        resourceLocationConfig: "location",
    });
}
export function _installSolutionSend(context, resourceGroupName, targetName, body, options = { requestOptions: {} }) {
    const path = expandUrlTemplate("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/installSolution{?api%2Dversion}", {
        subscriptionId: context.subscriptionId,
        resourceGroupName: resourceGroupName,
        targetName: targetName,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).post({
        ...operationOptionsToRequestParameters(options),
        contentType: "application/json",
        body: installSolutionParameterSerializer(body),
    });
}
export async function _installSolutionDeserialize(result) {
    const expectedStatuses = ["202", "200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = createRestError(result);
        error.details = errorResponseDeserializer(result.body);
        throw error;
    }
    return;
}
/** Post request to deploy */
export function installSolution(context, resourceGroupName, targetName, body, options = { requestOptions: {} }) {
    return getLongRunningPoller(context, _installSolutionDeserialize, ["202", "200"], {
        updateIntervalInMs: options?.updateIntervalInMs,
        abortSignal: options?.abortSignal,
        getInitialResponse: () => _installSolutionSend(context, resourceGroupName, targetName, body, options),
        resourceLocationConfig: "location",
    });
}
export function _listBySubscriptionSend(context, options = { requestOptions: {} }) {
    const path = expandUrlTemplate("/subscriptions/{subscriptionId}/providers/Microsoft.Edge/targets{?api%2Dversion}", {
        subscriptionId: context.subscriptionId,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).get({
        ...operationOptionsToRequestParameters(options),
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
    });
}
export async function _listBySubscriptionDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = createRestError(result);
        error.details = errorResponseDeserializer(result.body);
        throw error;
    }
    return _targetListResultDeserializer(result.body);
}
/** List by subscription */
export function listBySubscription(context, options = { requestOptions: {} }) {
    return buildPagedAsyncIterator(context, () => _listBySubscriptionSend(context, options), _listBySubscriptionDeserialize, ["200"], { itemName: "value", nextLinkName: "nextLink" });
}
export function _listByResourceGroupSend(context, resourceGroupName, options = { requestOptions: {} }) {
    const path = expandUrlTemplate("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets{?api%2Dversion}", {
        subscriptionId: context.subscriptionId,
        resourceGroupName: resourceGroupName,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).get({
        ...operationOptionsToRequestParameters(options),
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
    });
}
export async function _listByResourceGroupDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = createRestError(result);
        error.details = errorResponseDeserializer(result.body);
        throw error;
    }
    return _targetListResultDeserializer(result.body);
}
/** List by specified resource group */
export function listByResourceGroup(context, resourceGroupName, options = { requestOptions: {} }) {
    return buildPagedAsyncIterator(context, () => _listByResourceGroupSend(context, resourceGroupName, options), _listByResourceGroupDeserialize, ["200"], { itemName: "value", nextLinkName: "nextLink" });
}
export function _$deleteSend(context, resourceGroupName, targetName, options = { requestOptions: {} }) {
    const path = expandUrlTemplate("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}{?api%2Dversion,forceDelete}", {
        subscriptionId: context.subscriptionId,
        resourceGroupName: resourceGroupName,
        targetName: targetName,
        "api%2Dversion": context.apiVersion,
        forceDelete: options?.forceDelete,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).delete({ ...operationOptionsToRequestParameters(options) });
}
export async function _$deleteDeserialize(result) {
    const expectedStatuses = ["202", "204", "200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = createRestError(result);
        error.details = errorResponseDeserializer(result.body);
        throw error;
    }
    return;
}
/** Delete a Target Resource */
/**
 *  @fixme delete is a reserved word that cannot be used as an operation name.
 *         Please add @clientName("clientName") or @clientName("<JS-Specific-Name>", "javascript")
 *         to the operation to override the generated name.
 */
export function $delete(context, resourceGroupName, targetName, options = { requestOptions: {} }) {
    return getLongRunningPoller(context, _$deleteDeserialize, ["202", "204", "200"], {
        updateIntervalInMs: options?.updateIntervalInMs,
        abortSignal: options?.abortSignal,
        getInitialResponse: () => _$deleteSend(context, resourceGroupName, targetName, options),
        resourceLocationConfig: "location",
    });
}
export function _updateSend(context, resourceGroupName, targetName, properties, options = { requestOptions: {} }) {
    const path = expandUrlTemplate("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}{?api%2Dversion}", {
        subscriptionId: context.subscriptionId,
        resourceGroupName: resourceGroupName,
        targetName: targetName,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).patch({
        ...operationOptionsToRequestParameters(options),
        contentType: "application/json",
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
        body: targetUpdateSerializer(properties),
    });
}
export async function _updateDeserialize(result) {
    const expectedStatuses = ["200", "202"];
    if (!expectedStatuses.includes(result.status)) {
        const error = createRestError(result);
        error.details = errorResponseDeserializer(result.body);
        throw error;
    }
    return targetDeserializer(result.body);
}
/** update a Target Resource */
export function update(context, resourceGroupName, targetName, properties, options = { requestOptions: {} }) {
    return getLongRunningPoller(context, _updateDeserialize, ["200", "202"], {
        updateIntervalInMs: options?.updateIntervalInMs,
        abortSignal: options?.abortSignal,
        getInitialResponse: () => _updateSend(context, resourceGroupName, targetName, properties, options),
        resourceLocationConfig: "location",
    });
}
export function _createOrUpdateSend(context, resourceGroupName, targetName, resource, options = { requestOptions: {} }) {
    const path = expandUrlTemplate("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}{?api%2Dversion}", {
        subscriptionId: context.subscriptionId,
        resourceGroupName: resourceGroupName,
        targetName: targetName,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).put({
        ...operationOptionsToRequestParameters(options),
        contentType: "application/json",
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
        body: targetSerializer(resource),
    });
}
export async function _createOrUpdateDeserialize(result) {
    const expectedStatuses = ["200", "201", "202"];
    if (!expectedStatuses.includes(result.status)) {
        const error = createRestError(result);
        error.details = errorResponseDeserializer(result.body);
        throw error;
    }
    return targetDeserializer(result.body);
}
/** Create or update a Target Resource */
export function createOrUpdate(context, resourceGroupName, targetName, resource, options = { requestOptions: {} }) {
    return getLongRunningPoller(context, _createOrUpdateDeserialize, ["200", "201", "202"], {
        updateIntervalInMs: options?.updateIntervalInMs,
        abortSignal: options?.abortSignal,
        getInitialResponse: () => _createOrUpdateSend(context, resourceGroupName, targetName, resource, options),
        resourceLocationConfig: "azure-async-operation",
    });
}
export function _getSend(context, resourceGroupName, targetName, options = { requestOptions: {} }) {
    const path = expandUrlTemplate("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}{?api%2Dversion}", {
        subscriptionId: context.subscriptionId,
        resourceGroupName: resourceGroupName,
        targetName: targetName,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).get({
        ...operationOptionsToRequestParameters(options),
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
    });
}
export async function _getDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = createRestError(result);
        error.details = errorResponseDeserializer(result.body);
        throw error;
    }
    return targetDeserializer(result.body);
}
/** Get a Target Resource */
export async function get(context, resourceGroupName, targetName, options = { requestOptions: {} }) {
    const result = await _getSend(context, resourceGroupName, targetName, options);
    return _getDeserialize(result);
}
//# sourceMappingURL=operations.js.map