import { WorkloadOrchestrationManagementContext as Client } from "../index.js";
import { Execution, _ExecutionListResult } from "../../models/models.js";
import { PagedAsyncIterableIterator } from "../../static-helpers/pagingHelpers.js";
import { ExecutionsListByWorkflowVersionOptionalParams, ExecutionsDeleteOptionalParams, ExecutionsUpdateOptionalParams, ExecutionsCreateOrUpdateOptionalParams, ExecutionsGetOptionalParams } from "./options.js";
import { StreamableMethod, PathUncheckedResponse } from "@azure-rest/core-client";
import { PollerLike, OperationState } from "@azure/core-lro";
export declare function _listByWorkflowVersionSend(context: Client, resourceGroupName: string, contextName: string, workflowName: string, versionName: string, options?: ExecutionsListByWorkflowVersionOptionalParams): StreamableMethod;
export declare function _listByWorkflowVersionDeserialize(result: PathUncheckedResponse): Promise<_ExecutionListResult>;
/** List Execution Resources */
export declare function listByWorkflowVersion(context: Client, resourceGroupName: string, contextName: string, workflowName: string, versionName: string, options?: ExecutionsListByWorkflowVersionOptionalParams): PagedAsyncIterableIterator<Execution>;
export declare function _$deleteSend(context: Client, resourceGroupName: string, contextName: string, workflowName: string, versionName: string, executionName: string, options?: ExecutionsDeleteOptionalParams): StreamableMethod;
export declare function _$deleteDeserialize(result: PathUncheckedResponse): Promise<void>;
/** Delete Execution Resource */
/**
 *  @fixme delete is a reserved word that cannot be used as an operation name.
 *         Please add @clientName("clientName") or @clientName("<JS-Specific-Name>", "javascript")
 *         to the operation to override the generated name.
 */
export declare function $delete(context: Client, resourceGroupName: string, contextName: string, workflowName: string, versionName: string, executionName: string, options?: ExecutionsDeleteOptionalParams): PollerLike<OperationState<void>, void>;
export declare function _updateSend(context: Client, resourceGroupName: string, contextName: string, workflowName: string, versionName: string, executionName: string, properties: Execution, options?: ExecutionsUpdateOptionalParams): StreamableMethod;
export declare function _updateDeserialize(result: PathUncheckedResponse): Promise<Execution>;
/** update an Execution Resource */
export declare function update(context: Client, resourceGroupName: string, contextName: string, workflowName: string, versionName: string, executionName: string, properties: Execution, options?: ExecutionsUpdateOptionalParams): PollerLike<OperationState<Execution>, Execution>;
export declare function _createOrUpdateSend(context: Client, resourceGroupName: string, contextName: string, workflowName: string, versionName: string, executionName: string, resource: Execution, options?: ExecutionsCreateOrUpdateOptionalParams): StreamableMethod;
export declare function _createOrUpdateDeserialize(result: PathUncheckedResponse): Promise<Execution>;
/** Create or update Execution Resource */
export declare function createOrUpdate(context: Client, resourceGroupName: string, contextName: string, workflowName: string, versionName: string, executionName: string, resource: Execution, options?: ExecutionsCreateOrUpdateOptionalParams): PollerLike<OperationState<Execution>, Execution>;
export declare function _getSend(context: Client, resourceGroupName: string, contextName: string, workflowName: string, versionName: string, executionName: string, options?: ExecutionsGetOptionalParams): StreamableMethod;
export declare function _getDeserialize(result: PathUncheckedResponse): Promise<Execution>;
/** Get Execution Resource */
export declare function get(context: Client, resourceGroupName: string, contextName: string, workflowName: string, versionName: string, executionName: string, options?: ExecutionsGetOptionalParams): Promise<Execution>;
//# sourceMappingURL=operations.d.ts.map