// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { errorResponseDeserializer, executionSerializer, executionDeserializer, _executionListResultDeserializer, } from "../../models/models.js";
import { buildPagedAsyncIterator, } from "../../static-helpers/pagingHelpers.js";
import { getLongRunningPoller } from "../../static-helpers/pollingHelpers.js";
import { expandUrlTemplate } from "../../static-helpers/urlTemplate.js";
import { createRestError, operationOptionsToRequestParameters, } from "@azure-rest/core-client";
export function _listByWorkflowVersionSend(context, resourceGroupName, contextName, workflowName, versionName, options = {
    requestOptions: {},
}) {
    const path = expandUrlTemplate("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions/{versionName}/executions{?api%2Dversion}", {
        subscriptionId: context.subscriptionId,
        resourceGroupName: resourceGroupName,
        contextName: contextName,
        workflowName: workflowName,
        versionName: versionName,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).get({
        ...operationOptionsToRequestParameters(options),
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
    });
}
export async function _listByWorkflowVersionDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = createRestError(result);
        error.details = errorResponseDeserializer(result.body);
        throw error;
    }
    return _executionListResultDeserializer(result.body);
}
/** List Execution Resources */
export function listByWorkflowVersion(context, resourceGroupName, contextName, workflowName, versionName, options = {
    requestOptions: {},
}) {
    return buildPagedAsyncIterator(context, () => _listByWorkflowVersionSend(context, resourceGroupName, contextName, workflowName, versionName, options), _listByWorkflowVersionDeserialize, ["200"], { itemName: "value", nextLinkName: "nextLink" });
}
export function _$deleteSend(context, resourceGroupName, contextName, workflowName, versionName, executionName, options = { requestOptions: {} }) {
    const path = expandUrlTemplate("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions/{versionName}/executions/{executionName}{?api%2Dversion}", {
        subscriptionId: context.subscriptionId,
        resourceGroupName: resourceGroupName,
        contextName: contextName,
        workflowName: workflowName,
        versionName: versionName,
        executionName: executionName,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).delete({ ...operationOptionsToRequestParameters(options) });
}
export async function _$deleteDeserialize(result) {
    const expectedStatuses = ["202", "204", "200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = createRestError(result);
        error.details = errorResponseDeserializer(result.body);
        throw error;
    }
    return;
}
/** Delete Execution Resource */
/**
 *  @fixme delete is a reserved word that cannot be used as an operation name.
 *         Please add @clientName("clientName") or @clientName("<JS-Specific-Name>", "javascript")
 *         to the operation to override the generated name.
 */
export function $delete(context, resourceGroupName, contextName, workflowName, versionName, executionName, options = { requestOptions: {} }) {
    return getLongRunningPoller(context, _$deleteDeserialize, ["202", "204", "200"], {
        updateIntervalInMs: options?.updateIntervalInMs,
        abortSignal: options?.abortSignal,
        getInitialResponse: () => _$deleteSend(context, resourceGroupName, contextName, workflowName, versionName, executionName, options),
        resourceLocationConfig: "location",
    });
}
export function _updateSend(context, resourceGroupName, contextName, workflowName, versionName, executionName, properties, options = { requestOptions: {} }) {
    const path = expandUrlTemplate("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions/{versionName}/executions/{executionName}{?api%2Dversion}", {
        subscriptionId: context.subscriptionId,
        resourceGroupName: resourceGroupName,
        contextName: contextName,
        workflowName: workflowName,
        versionName: versionName,
        executionName: executionName,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).patch({
        ...operationOptionsToRequestParameters(options),
        contentType: "application/json",
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
        body: executionSerializer(properties),
    });
}
export async function _updateDeserialize(result) {
    const expectedStatuses = ["200", "202"];
    if (!expectedStatuses.includes(result.status)) {
        const error = createRestError(result);
        error.details = errorResponseDeserializer(result.body);
        throw error;
    }
    return executionDeserializer(result.body);
}
/** update an Execution Resource */
export function update(context, resourceGroupName, contextName, workflowName, versionName, executionName, properties, options = { requestOptions: {} }) {
    return getLongRunningPoller(context, _updateDeserialize, ["200", "202"], {
        updateIntervalInMs: options?.updateIntervalInMs,
        abortSignal: options?.abortSignal,
        getInitialResponse: () => _updateSend(context, resourceGroupName, contextName, workflowName, versionName, executionName, properties, options),
        resourceLocationConfig: "location",
    });
}
export function _createOrUpdateSend(context, resourceGroupName, contextName, workflowName, versionName, executionName, resource, options = { requestOptions: {} }) {
    const path = expandUrlTemplate("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions/{versionName}/executions/{executionName}{?api%2Dversion}", {
        subscriptionId: context.subscriptionId,
        resourceGroupName: resourceGroupName,
        contextName: contextName,
        workflowName: workflowName,
        versionName: versionName,
        executionName: executionName,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).put({
        ...operationOptionsToRequestParameters(options),
        contentType: "application/json",
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
        body: executionSerializer(resource),
    });
}
export async function _createOrUpdateDeserialize(result) {
    const expectedStatuses = ["200", "201", "202"];
    if (!expectedStatuses.includes(result.status)) {
        const error = createRestError(result);
        error.details = errorResponseDeserializer(result.body);
        throw error;
    }
    return executionDeserializer(result.body);
}
/** Create or update Execution Resource */
export function createOrUpdate(context, resourceGroupName, contextName, workflowName, versionName, executionName, resource, options = { requestOptions: {} }) {
    return getLongRunningPoller(context, _createOrUpdateDeserialize, ["200", "201", "202"], {
        updateIntervalInMs: options?.updateIntervalInMs,
        abortSignal: options?.abortSignal,
        getInitialResponse: () => _createOrUpdateSend(context, resourceGroupName, contextName, workflowName, versionName, executionName, resource, options),
        resourceLocationConfig: "azure-async-operation",
    });
}
export function _getSend(context, resourceGroupName, contextName, workflowName, versionName, executionName, options = { requestOptions: {} }) {
    const path = expandUrlTemplate("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions/{versionName}/executions/{executionName}{?api%2Dversion}", {
        subscriptionId: context.subscriptionId,
        resourceGroupName: resourceGroupName,
        contextName: contextName,
        workflowName: workflowName,
        versionName: versionName,
        executionName: executionName,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).get({
        ...operationOptionsToRequestParameters(options),
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
    });
}
export async function _getDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = createRestError(result);
        error.details = errorResponseDeserializer(result.body);
        throw error;
    }
    return executionDeserializer(result.body);
}
/** Get Execution Resource */
export async function get(context, resourceGroupName, contextName, workflowName, versionName, executionName, options = { requestOptions: {} }) {
    const result = await _getSend(context, resourceGroupName, contextName, workflowName, versionName, executionName, options);
    return _getDeserialize(result);
}
//# sourceMappingURL=operations.js.map