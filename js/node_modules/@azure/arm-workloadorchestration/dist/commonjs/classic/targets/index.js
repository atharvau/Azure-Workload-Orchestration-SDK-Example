"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", { value: true });
exports._getTargetsOperations = _getTargetsOperations;
const operations_js_1 = require("../../api/targets/operations.js");
function _getTargets(context) {
    return {
        updateExternalValidationStatus: (resourceGroupName, targetName, body, options) => (0, operations_js_1.updateExternalValidationStatus)(context, resourceGroupName, targetName, body, options),
        publishSolutionVersion: (resourceGroupName, targetName, body, options) => (0, operations_js_1.publishSolutionVersion)(context, resourceGroupName, targetName, body, options),
        reviewSolutionVersion: (resourceGroupName, targetName, body, options) => (0, operations_js_1.reviewSolutionVersion)(context, resourceGroupName, targetName, body, options),
        resolveConfiguration: (resourceGroupName, targetName, body, options) => (0, operations_js_1.resolveConfiguration)(context, resourceGroupName, targetName, body, options),
        removeRevision: (resourceGroupName, targetName, body, options) => (0, operations_js_1.removeRevision)(context, resourceGroupName, targetName, body, options),
        uninstallSolution: (resourceGroupName, targetName, body, options) => (0, operations_js_1.uninstallSolution)(context, resourceGroupName, targetName, body, options),
        installSolution: (resourceGroupName, targetName, body, options) => (0, operations_js_1.installSolution)(context, resourceGroupName, targetName, body, options),
        listBySubscription: (options) => (0, operations_js_1.listBySubscription)(context, options),
        listByResourceGroup: (resourceGroupName, options) => (0, operations_js_1.listByResourceGroup)(context, resourceGroupName, options),
        delete: (resourceGroupName, targetName, options) => (0, operations_js_1.$delete)(context, resourceGroupName, targetName, options),
        update: (resourceGroupName, targetName, properties, options) => (0, operations_js_1.update)(context, resourceGroupName, targetName, properties, options),
        createOrUpdate: (resourceGroupName, targetName, resource, options) => (0, operations_js_1.createOrUpdate)(context, resourceGroupName, targetName, resource, options),
        get: (resourceGroupName, targetName, options) => (0, operations_js_1.get)(context, resourceGroupName, targetName, options),
    };
}
function _getTargetsOperations(context) {
    return {
        ..._getTargets(context),
    };
}
//# sourceMappingURL=index.js.map