{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/classic/workflows/index.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;AAsGlC,0DAMC;AAzGD,qEAM2C;AAyD3C,SAAS,aAAa,CAAC,OAA+C;IACpE,OAAO;QACL,aAAa,EAAE,CACb,iBAAyB,EACzB,WAAmB,EACnB,OAA8C,EAC9C,EAAE,CAAC,IAAA,6BAAa,EAAC,OAAO,EAAE,iBAAiB,EAAE,WAAW,EAAE,OAAO,CAAC;QACpE,MAAM,EAAE,CACN,iBAAyB,EACzB,WAAmB,EACnB,YAAoB,EACpB,OAAuC,EACvC,EAAE,CAAC,IAAA,uBAAO,EAAC,OAAO,EAAE,iBAAiB,EAAE,WAAW,EAAE,YAAY,EAAE,OAAO,CAAC;QAC5E,MAAM,EAAE,CACN,iBAAyB,EACzB,WAAmB,EACnB,YAAoB,EACpB,UAAoB,EACpB,OAAuC,EACvC,EAAE,CAAC,IAAA,sBAAM,EAAC,OAAO,EAAE,iBAAiB,EAAE,WAAW,EAAE,YAAY,EAAE,UAAU,EAAE,OAAO,CAAC;QACvF,cAAc,EAAE,CACd,iBAAyB,EACzB,WAAmB,EACnB,YAAoB,EACpB,QAAkB,EAClB,OAA+C,EAC/C,EAAE,CAAC,IAAA,8BAAc,EAAC,OAAO,EAAE,iBAAiB,EAAE,WAAW,EAAE,YAAY,EAAE,QAAQ,EAAE,OAAO,CAAC;QAC7F,GAAG,EAAE,CACH,iBAAyB,EACzB,WAAmB,EACnB,YAAoB,EACpB,OAAoC,EACpC,EAAE,CAAC,IAAA,mBAAG,EAAC,OAAO,EAAE,iBAAiB,EAAE,WAAW,EAAE,YAAY,EAAE,OAAO,CAAC;KACzE,CAAC;AACJ,CAAC;AAED,SAAgB,uBAAuB,CACrC,OAA+C;IAE/C,OAAO;QACL,GAAG,aAAa,CAAC,OAAO,CAAC;KAC1B,CAAC;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { WorkloadOrchestrationManagementContext } from \"../../api/workloadOrchestrationManagementContext.js\";\nimport {\n  listByContext,\n  $delete,\n  update,\n  createOrUpdate,\n  get,\n} from \"../../api/workflows/operations.js\";\nimport {\n  WorkflowsListByContextOptionalParams,\n  WorkflowsDeleteOptionalParams,\n  WorkflowsUpdateOptionalParams,\n  WorkflowsCreateOrUpdateOptionalParams,\n  WorkflowsGetOptionalParams,\n} from \"../../api/workflows/options.js\";\nimport { Workflow } from \"../../models/models.js\";\nimport { PagedAsyncIterableIterator } from \"../../static-helpers/pagingHelpers.js\";\nimport { PollerLike, OperationState } from \"@azure/core-lro\";\n\n/** Interface representing a Workflows operations. */\nexport interface WorkflowsOperations {\n  /** List Workflow resources */\n  listByContext: (\n    resourceGroupName: string,\n    contextName: string,\n    options?: WorkflowsListByContextOptionalParams,\n  ) => PagedAsyncIterableIterator<Workflow>;\n  /** Delete a Workflow resource */\n  /**\n   *  @fixme delete is a reserved word that cannot be used as an operation name.\n   *         Please add @clientName(\"clientName\") or @clientName(\"<JS-Specific-Name>\", \"javascript\")\n   *         to the operation to override the generated name.\n   */\n  delete: (\n    resourceGroupName: string,\n    contextName: string,\n    workflowName: string,\n    options?: WorkflowsDeleteOptionalParams,\n  ) => PollerLike<OperationState<void>, void>;\n  /** update a Workflow resource */\n  update: (\n    resourceGroupName: string,\n    contextName: string,\n    workflowName: string,\n    properties: Workflow,\n    options?: WorkflowsUpdateOptionalParams,\n  ) => PollerLike<OperationState<Workflow>, Workflow>;\n  /** Create or update a Workflow resource */\n  createOrUpdate: (\n    resourceGroupName: string,\n    contextName: string,\n    workflowName: string,\n    resource: Workflow,\n    options?: WorkflowsCreateOrUpdateOptionalParams,\n  ) => PollerLike<OperationState<Workflow>, Workflow>;\n  /** Get a Workflow resource */\n  get: (\n    resourceGroupName: string,\n    contextName: string,\n    workflowName: string,\n    options?: WorkflowsGetOptionalParams,\n  ) => Promise<Workflow>;\n}\n\nfunction _getWorkflows(context: WorkloadOrchestrationManagementContext) {\n  return {\n    listByContext: (\n      resourceGroupName: string,\n      contextName: string,\n      options?: WorkflowsListByContextOptionalParams,\n    ) => listByContext(context, resourceGroupName, contextName, options),\n    delete: (\n      resourceGroupName: string,\n      contextName: string,\n      workflowName: string,\n      options?: WorkflowsDeleteOptionalParams,\n    ) => $delete(context, resourceGroupName, contextName, workflowName, options),\n    update: (\n      resourceGroupName: string,\n      contextName: string,\n      workflowName: string,\n      properties: Workflow,\n      options?: WorkflowsUpdateOptionalParams,\n    ) => update(context, resourceGroupName, contextName, workflowName, properties, options),\n    createOrUpdate: (\n      resourceGroupName: string,\n      contextName: string,\n      workflowName: string,\n      resource: Workflow,\n      options?: WorkflowsCreateOrUpdateOptionalParams,\n    ) => createOrUpdate(context, resourceGroupName, contextName, workflowName, resource, options),\n    get: (\n      resourceGroupName: string,\n      contextName: string,\n      workflowName: string,\n      options?: WorkflowsGetOptionalParams,\n    ) => get(context, resourceGroupName, contextName, workflowName, options),\n  };\n}\n\nexport function _getWorkflowsOperations(\n  context: WorkloadOrchestrationManagementContext,\n): WorkflowsOperations {\n  return {\n    ..._getWorkflows(context),\n  };\n}\n"]}