{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/classic/dynamicSchemaVersions/index.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;AAkJlC,kFAMC;AArJD,iFAMuD;AA8DvD,SAAS,yBAAyB,CAAC,OAA+C;IAChF,OAAO;QACL,mBAAmB,EAAE,CACnB,iBAAyB,EACzB,UAAkB,EAClB,iBAAyB,EACzB,OAAgE,EAChE,EAAE,CAAC,IAAA,mCAAmB,EAAC,OAAO,EAAE,iBAAiB,EAAE,UAAU,EAAE,iBAAiB,EAAE,OAAO,CAAC;QAC5F,MAAM,EAAE,CACN,iBAAyB,EACzB,UAAkB,EAClB,iBAAyB,EACzB,wBAAgC,EAChC,OAAmD,EACnD,EAAE,CACF,IAAA,uBAAO,EACL,OAAO,EACP,iBAAiB,EACjB,UAAU,EACV,iBAAiB,EACjB,wBAAwB,EACxB,OAAO,CACR;QACH,MAAM,EAAE,CACN,iBAAyB,EACzB,UAAkB,EAClB,iBAAyB,EACzB,wBAAgC,EAChC,UAAgC,EAChC,OAAmD,EACnD,EAAE,CACF,IAAA,sBAAM,EACJ,OAAO,EACP,iBAAiB,EACjB,UAAU,EACV,iBAAiB,EACjB,wBAAwB,EACxB,UAAU,EACV,OAAO,CACR;QACH,cAAc,EAAE,CACd,iBAAyB,EACzB,UAAkB,EAClB,iBAAyB,EACzB,wBAAgC,EAChC,QAA8B,EAC9B,OAA2D,EAC3D,EAAE,CACF,IAAA,8BAAc,EACZ,OAAO,EACP,iBAAiB,EACjB,UAAU,EACV,iBAAiB,EACjB,wBAAwB,EACxB,QAAQ,EACR,OAAO,CACR;QACH,GAAG,EAAE,CACH,iBAAyB,EACzB,UAAkB,EAClB,iBAAyB,EACzB,wBAAgC,EAChC,OAAgD,EAChD,EAAE,CACF,IAAA,mBAAG,EACD,OAAO,EACP,iBAAiB,EACjB,UAAU,EACV,iBAAiB,EACjB,wBAAwB,EACxB,OAAO,CACR;KACJ,CAAC;AACJ,CAAC;AAED,SAAgB,mCAAmC,CACjD,OAA+C;IAE/C,OAAO;QACL,GAAG,yBAAyB,CAAC,OAAO,CAAC;KACtC,CAAC;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { WorkloadOrchestrationManagementContext } from \"../../api/workloadOrchestrationManagementContext.js\";\nimport {\n  listByDynamicSchema,\n  $delete,\n  update,\n  createOrUpdate,\n  get,\n} from \"../../api/dynamicSchemaVersions/operations.js\";\nimport {\n  DynamicSchemaVersionsListByDynamicSchemaOptionalParams,\n  DynamicSchemaVersionsDeleteOptionalParams,\n  DynamicSchemaVersionsUpdateOptionalParams,\n  DynamicSchemaVersionsCreateOrUpdateOptionalParams,\n  DynamicSchemaVersionsGetOptionalParams,\n} from \"../../api/dynamicSchemaVersions/options.js\";\nimport { DynamicSchemaVersion } from \"../../models/models.js\";\nimport { PagedAsyncIterableIterator } from \"../../static-helpers/pagingHelpers.js\";\nimport { PollerLike, OperationState } from \"@azure/core-lro\";\n\n/** Interface representing a DynamicSchemaVersions operations. */\nexport interface DynamicSchemaVersionsOperations {\n  /** List by Dynamic Schema */\n  listByDynamicSchema: (\n    resourceGroupName: string,\n    schemaName: string,\n    dynamicSchemaName: string,\n    options?: DynamicSchemaVersionsListByDynamicSchemaOptionalParams,\n  ) => PagedAsyncIterableIterator<DynamicSchemaVersion>;\n  /** Delete a Dynamic Schema Version Resource */\n  /**\n   *  @fixme delete is a reserved word that cannot be used as an operation name.\n   *         Please add @clientName(\"clientName\") or @clientName(\"<JS-Specific-Name>\", \"javascript\")\n   *         to the operation to override the generated name.\n   */\n  delete: (\n    resourceGroupName: string,\n    schemaName: string,\n    dynamicSchemaName: string,\n    dynamicSchemaVersionName: string,\n    options?: DynamicSchemaVersionsDeleteOptionalParams,\n  ) => PollerLike<OperationState<void>, void>;\n  /** update a Dynamic Schema Version Resource */\n  update: (\n    resourceGroupName: string,\n    schemaName: string,\n    dynamicSchemaName: string,\n    dynamicSchemaVersionName: string,\n    properties: DynamicSchemaVersion,\n    options?: DynamicSchemaVersionsUpdateOptionalParams,\n  ) => Promise<DynamicSchemaVersion>;\n  /** Create or update a Dynamic Schema Version Resource */\n  createOrUpdate: (\n    resourceGroupName: string,\n    schemaName: string,\n    dynamicSchemaName: string,\n    dynamicSchemaVersionName: string,\n    resource: DynamicSchemaVersion,\n    options?: DynamicSchemaVersionsCreateOrUpdateOptionalParams,\n  ) => PollerLike<OperationState<DynamicSchemaVersion>, DynamicSchemaVersion>;\n  /** Get a Dynamic Schema Version Resource */\n  get: (\n    resourceGroupName: string,\n    schemaName: string,\n    dynamicSchemaName: string,\n    dynamicSchemaVersionName: string,\n    options?: DynamicSchemaVersionsGetOptionalParams,\n  ) => Promise<DynamicSchemaVersion>;\n}\n\nfunction _getDynamicSchemaVersions(context: WorkloadOrchestrationManagementContext) {\n  return {\n    listByDynamicSchema: (\n      resourceGroupName: string,\n      schemaName: string,\n      dynamicSchemaName: string,\n      options?: DynamicSchemaVersionsListByDynamicSchemaOptionalParams,\n    ) => listByDynamicSchema(context, resourceGroupName, schemaName, dynamicSchemaName, options),\n    delete: (\n      resourceGroupName: string,\n      schemaName: string,\n      dynamicSchemaName: string,\n      dynamicSchemaVersionName: string,\n      options?: DynamicSchemaVersionsDeleteOptionalParams,\n    ) =>\n      $delete(\n        context,\n        resourceGroupName,\n        schemaName,\n        dynamicSchemaName,\n        dynamicSchemaVersionName,\n        options,\n      ),\n    update: (\n      resourceGroupName: string,\n      schemaName: string,\n      dynamicSchemaName: string,\n      dynamicSchemaVersionName: string,\n      properties: DynamicSchemaVersion,\n      options?: DynamicSchemaVersionsUpdateOptionalParams,\n    ) =>\n      update(\n        context,\n        resourceGroupName,\n        schemaName,\n        dynamicSchemaName,\n        dynamicSchemaVersionName,\n        properties,\n        options,\n      ),\n    createOrUpdate: (\n      resourceGroupName: string,\n      schemaName: string,\n      dynamicSchemaName: string,\n      dynamicSchemaVersionName: string,\n      resource: DynamicSchemaVersion,\n      options?: DynamicSchemaVersionsCreateOrUpdateOptionalParams,\n    ) =>\n      createOrUpdate(\n        context,\n        resourceGroupName,\n        schemaName,\n        dynamicSchemaName,\n        dynamicSchemaVersionName,\n        resource,\n        options,\n      ),\n    get: (\n      resourceGroupName: string,\n      schemaName: string,\n      dynamicSchemaName: string,\n      dynamicSchemaVersionName: string,\n      options?: DynamicSchemaVersionsGetOptionalParams,\n    ) =>\n      get(\n        context,\n        resourceGroupName,\n        schemaName,\n        dynamicSchemaName,\n        dynamicSchemaVersionName,\n        options,\n      ),\n  };\n}\n\nexport function _getDynamicSchemaVersionsOperations(\n  context: WorkloadOrchestrationManagementContext,\n): DynamicSchemaVersionsOperations {\n  return {\n    ..._getDynamicSchemaVersions(context),\n  };\n}\n"]}