{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/classic/schemas/index.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;AAsIlC,sDAMC;AAzID,mEASyC;AAgFzC,SAAS,WAAW,CAAC,OAA+C;IAClE,OAAO;QACL,kBAAkB,EAAE,CAAC,OAAiD,EAAE,EAAE,CACxE,IAAA,kCAAkB,EAAC,OAAO,EAAE,OAAO,CAAC;QACtC,mBAAmB,EAAE,CACnB,iBAAyB,EACzB,OAAkD,EAClD,EAAE,CAAC,IAAA,mCAAmB,EAAC,OAAO,EAAE,iBAAiB,EAAE,OAAO,CAAC;QAC7D,aAAa,EAAE,CACb,iBAAyB,EACzB,UAAkB,EAClB,IAAsB,EACtB,OAA4C,EAC5C,EAAE,CAAC,IAAA,6BAAa,EAAC,OAAO,EAAE,iBAAiB,EAAE,UAAU,EAAE,IAAI,EAAE,OAAO,CAAC;QACzE,aAAa,EAAE,CACb,iBAAyB,EACzB,UAAkB,EAClB,IAAiC,EACjC,OAA4C,EAC5C,EAAE,CAAC,IAAA,6BAAa,EAAC,OAAO,EAAE,iBAAiB,EAAE,UAAU,EAAE,IAAI,EAAE,OAAO,CAAC;QACzE,MAAM,EAAE,CACN,iBAAyB,EACzB,UAAkB,EAClB,OAAqC,EACrC,EAAE,CAAC,IAAA,uBAAO,EAAC,OAAO,EAAE,iBAAiB,EAAE,UAAU,EAAE,OAAO,CAAC;QAC7D,MAAM,EAAE,CACN,iBAAyB,EACzB,UAAkB,EAClB,UAAwB,EACxB,OAAqC,EACrC,EAAE,CAAC,IAAA,sBAAM,EAAC,OAAO,EAAE,iBAAiB,EAAE,UAAU,EAAE,UAAU,EAAE,OAAO,CAAC;QACxE,cAAc,EAAE,CACd,iBAAyB,EACzB,UAAkB,EAClB,QAAgB,EAChB,OAA6C,EAC7C,EAAE,CAAC,IAAA,8BAAc,EAAC,OAAO,EAAE,iBAAiB,EAAE,UAAU,EAAE,QAAQ,EAAE,OAAO,CAAC;QAC9E,GAAG,EAAE,CAAC,iBAAyB,EAAE,UAAkB,EAAE,OAAkC,EAAE,EAAE,CACzF,IAAA,mBAAG,EAAC,OAAO,EAAE,iBAAiB,EAAE,UAAU,EAAE,OAAO,CAAC;KACvD,CAAC;AACJ,CAAC;AAED,SAAgB,qBAAqB,CACnC,OAA+C;IAE/C,OAAO;QACL,GAAG,WAAW,CAAC,OAAO,CAAC;KACxB,CAAC;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { WorkloadOrchestrationManagementContext } from \"../../api/workloadOrchestrationManagementContext.js\";\nimport {\n  listBySubscription,\n  listByResourceGroup,\n  removeVersion,\n  createVersion,\n  $delete,\n  update,\n  createOrUpdate,\n  get,\n} from \"../../api/schemas/operations.js\";\nimport {\n  SchemasListBySubscriptionOptionalParams,\n  SchemasListByResourceGroupOptionalParams,\n  SchemasRemoveVersionOptionalParams,\n  SchemasCreateVersionOptionalParams,\n  SchemasDeleteOptionalParams,\n  SchemasUpdateOptionalParams,\n  SchemasCreateOrUpdateOptionalParams,\n  SchemasGetOptionalParams,\n} from \"../../api/schemas/options.js\";\nimport {\n  Schema,\n  SchemaUpdate,\n  SchemaVersionWithUpdateType,\n  SchemaVersion,\n  VersionParameter,\n  RemoveVersionResponse,\n} from \"../../models/models.js\";\nimport { PagedAsyncIterableIterator } from \"../../static-helpers/pagingHelpers.js\";\nimport { PollerLike, OperationState } from \"@azure/core-lro\";\n\n/** Interface representing a Schemas operations. */\nexport interface SchemasOperations {\n  /** List by subscription */\n  listBySubscription: (\n    options?: SchemasListBySubscriptionOptionalParams,\n  ) => PagedAsyncIterableIterator<Schema>;\n  /** List by specified resource group */\n  listByResourceGroup: (\n    resourceGroupName: string,\n    options?: SchemasListByResourceGroupOptionalParams,\n  ) => PagedAsyncIterableIterator<Schema>;\n  /** Remove Schema Version Resource */\n  removeVersion: (\n    resourceGroupName: string,\n    schemaName: string,\n    body: VersionParameter,\n    options?: SchemasRemoveVersionOptionalParams,\n  ) => Promise<RemoveVersionResponse>;\n  /** Create a Schema Version Resource */\n  createVersion: (\n    resourceGroupName: string,\n    schemaName: string,\n    body: SchemaVersionWithUpdateType,\n    options?: SchemasCreateVersionOptionalParams,\n  ) => PollerLike<OperationState<SchemaVersion>, SchemaVersion>;\n  /** Delete a Schema Resource */\n  /**\n   *  @fixme delete is a reserved word that cannot be used as an operation name.\n   *         Please add @clientName(\"clientName\") or @clientName(\"<JS-Specific-Name>\", \"javascript\")\n   *         to the operation to override the generated name.\n   */\n  delete: (\n    resourceGroupName: string,\n    schemaName: string,\n    options?: SchemasDeleteOptionalParams,\n  ) => PollerLike<OperationState<void>, void>;\n  /** update a Schema Resource */\n  update: (\n    resourceGroupName: string,\n    schemaName: string,\n    properties: SchemaUpdate,\n    options?: SchemasUpdateOptionalParams,\n  ) => Promise<Schema>;\n  /** Create or update a Schema Resource */\n  createOrUpdate: (\n    resourceGroupName: string,\n    schemaName: string,\n    resource: Schema,\n    options?: SchemasCreateOrUpdateOptionalParams,\n  ) => PollerLike<OperationState<Schema>, Schema>;\n  /** Get a Schema Resource */\n  get: (\n    resourceGroupName: string,\n    schemaName: string,\n    options?: SchemasGetOptionalParams,\n  ) => Promise<Schema>;\n}\n\nfunction _getSchemas(context: WorkloadOrchestrationManagementContext) {\n  return {\n    listBySubscription: (options?: SchemasListBySubscriptionOptionalParams) =>\n      listBySubscription(context, options),\n    listByResourceGroup: (\n      resourceGroupName: string,\n      options?: SchemasListByResourceGroupOptionalParams,\n    ) => listByResourceGroup(context, resourceGroupName, options),\n    removeVersion: (\n      resourceGroupName: string,\n      schemaName: string,\n      body: VersionParameter,\n      options?: SchemasRemoveVersionOptionalParams,\n    ) => removeVersion(context, resourceGroupName, schemaName, body, options),\n    createVersion: (\n      resourceGroupName: string,\n      schemaName: string,\n      body: SchemaVersionWithUpdateType,\n      options?: SchemasCreateVersionOptionalParams,\n    ) => createVersion(context, resourceGroupName, schemaName, body, options),\n    delete: (\n      resourceGroupName: string,\n      schemaName: string,\n      options?: SchemasDeleteOptionalParams,\n    ) => $delete(context, resourceGroupName, schemaName, options),\n    update: (\n      resourceGroupName: string,\n      schemaName: string,\n      properties: SchemaUpdate,\n      options?: SchemasUpdateOptionalParams,\n    ) => update(context, resourceGroupName, schemaName, properties, options),\n    createOrUpdate: (\n      resourceGroupName: string,\n      schemaName: string,\n      resource: Schema,\n      options?: SchemasCreateOrUpdateOptionalParams,\n    ) => createOrUpdate(context, resourceGroupName, schemaName, resource, options),\n    get: (resourceGroupName: string, schemaName: string, options?: SchemasGetOptionalParams) =>\n      get(context, resourceGroupName, schemaName, options),\n  };\n}\n\nexport function _getSchemasOperations(\n  context: WorkloadOrchestrationManagementContext,\n): SchemasOperations {\n  return {\n    ..._getSchemas(context),\n  };\n}\n"]}