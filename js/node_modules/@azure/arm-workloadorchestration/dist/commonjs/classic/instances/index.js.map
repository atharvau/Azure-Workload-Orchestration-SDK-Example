{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/classic/instances/index.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;AAkIlC,0DAMC;AArID,qEAM2C;AA8D3C,SAAS,aAAa,CAAC,OAA+C;IACpE,OAAO;QACL,cAAc,EAAE,CACd,iBAAyB,EACzB,UAAkB,EAClB,YAAoB,EACpB,OAA+C,EAC/C,EAAE,CAAC,IAAA,8BAAc,EAAC,OAAO,EAAE,iBAAiB,EAAE,UAAU,EAAE,YAAY,EAAE,OAAO,CAAC;QAClF,MAAM,EAAE,CACN,iBAAyB,EACzB,UAAkB,EAClB,YAAoB,EACpB,YAAoB,EACpB,OAAuC,EACvC,EAAE,CAAC,IAAA,uBAAO,EAAC,OAAO,EAAE,iBAAiB,EAAE,UAAU,EAAE,YAAY,EAAE,YAAY,EAAE,OAAO,CAAC;QACzF,MAAM,EAAE,CACN,iBAAyB,EACzB,UAAkB,EAClB,YAAoB,EACpB,YAAoB,EACpB,UAAoB,EACpB,OAAuC,EACvC,EAAE,CACF,IAAA,sBAAM,EACJ,OAAO,EACP,iBAAiB,EACjB,UAAU,EACV,YAAY,EACZ,YAAY,EACZ,UAAU,EACV,OAAO,CACR;QACH,cAAc,EAAE,CACd,iBAAyB,EACzB,UAAkB,EAClB,YAAoB,EACpB,YAAoB,EACpB,QAAkB,EAClB,OAA+C,EAC/C,EAAE,CACF,IAAA,8BAAc,EACZ,OAAO,EACP,iBAAiB,EACjB,UAAU,EACV,YAAY,EACZ,YAAY,EACZ,QAAQ,EACR,OAAO,CACR;QACH,GAAG,EAAE,CACH,iBAAyB,EACzB,UAAkB,EAClB,YAAoB,EACpB,YAAoB,EACpB,OAAoC,EACpC,EAAE,CAAC,IAAA,mBAAG,EAAC,OAAO,EAAE,iBAAiB,EAAE,UAAU,EAAE,YAAY,EAAE,YAAY,EAAE,OAAO,CAAC;KACtF,CAAC;AACJ,CAAC;AAED,SAAgB,uBAAuB,CACrC,OAA+C;IAE/C,OAAO;QACL,GAAG,aAAa,CAAC,OAAO,CAAC;KAC1B,CAAC;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { WorkloadOrchestrationManagementContext } from \"../../api/workloadOrchestrationManagementContext.js\";\nimport {\n  listBySolution,\n  $delete,\n  update,\n  createOrUpdate,\n  get,\n} from \"../../api/instances/operations.js\";\nimport {\n  InstancesListBySolutionOptionalParams,\n  InstancesDeleteOptionalParams,\n  InstancesUpdateOptionalParams,\n  InstancesCreateOrUpdateOptionalParams,\n  InstancesGetOptionalParams,\n} from \"../../api/instances/options.js\";\nimport { Instance } from \"../../models/models.js\";\nimport { PagedAsyncIterableIterator } from \"../../static-helpers/pagingHelpers.js\";\nimport { PollerLike, OperationState } from \"@azure/core-lro\";\n\n/** Interface representing a Instances operations. */\nexport interface InstancesOperations {\n  /** List Instance Resources */\n  listBySolution: (\n    resourceGroupName: string,\n    targetName: string,\n    solutionName: string,\n    options?: InstancesListBySolutionOptionalParams,\n  ) => PagedAsyncIterableIterator<Instance>;\n  /** Delete Instance Resource */\n  /**\n   *  @fixme delete is a reserved word that cannot be used as an operation name.\n   *         Please add @clientName(\"clientName\") or @clientName(\"<JS-Specific-Name>\", \"javascript\")\n   *         to the operation to override the generated name.\n   */\n  delete: (\n    resourceGroupName: string,\n    targetName: string,\n    solutionName: string,\n    instanceName: string,\n    options?: InstancesDeleteOptionalParams,\n  ) => PollerLike<OperationState<void>, void>;\n  /** Update an Instance Resource */\n  update: (\n    resourceGroupName: string,\n    targetName: string,\n    solutionName: string,\n    instanceName: string,\n    properties: Instance,\n    options?: InstancesUpdateOptionalParams,\n  ) => PollerLike<OperationState<Instance>, Instance>;\n  /** Create or update Instance Resource */\n  createOrUpdate: (\n    resourceGroupName: string,\n    targetName: string,\n    solutionName: string,\n    instanceName: string,\n    resource: Instance,\n    options?: InstancesCreateOrUpdateOptionalParams,\n  ) => PollerLike<OperationState<Instance>, Instance>;\n  /** Get Instance Resource */\n  get: (\n    resourceGroupName: string,\n    targetName: string,\n    solutionName: string,\n    instanceName: string,\n    options?: InstancesGetOptionalParams,\n  ) => Promise<Instance>;\n}\n\nfunction _getInstances(context: WorkloadOrchestrationManagementContext) {\n  return {\n    listBySolution: (\n      resourceGroupName: string,\n      targetName: string,\n      solutionName: string,\n      options?: InstancesListBySolutionOptionalParams,\n    ) => listBySolution(context, resourceGroupName, targetName, solutionName, options),\n    delete: (\n      resourceGroupName: string,\n      targetName: string,\n      solutionName: string,\n      instanceName: string,\n      options?: InstancesDeleteOptionalParams,\n    ) => $delete(context, resourceGroupName, targetName, solutionName, instanceName, options),\n    update: (\n      resourceGroupName: string,\n      targetName: string,\n      solutionName: string,\n      instanceName: string,\n      properties: Instance,\n      options?: InstancesUpdateOptionalParams,\n    ) =>\n      update(\n        context,\n        resourceGroupName,\n        targetName,\n        solutionName,\n        instanceName,\n        properties,\n        options,\n      ),\n    createOrUpdate: (\n      resourceGroupName: string,\n      targetName: string,\n      solutionName: string,\n      instanceName: string,\n      resource: Instance,\n      options?: InstancesCreateOrUpdateOptionalParams,\n    ) =>\n      createOrUpdate(\n        context,\n        resourceGroupName,\n        targetName,\n        solutionName,\n        instanceName,\n        resource,\n        options,\n      ),\n    get: (\n      resourceGroupName: string,\n      targetName: string,\n      solutionName: string,\n      instanceName: string,\n      options?: InstancesGetOptionalParams,\n    ) => get(context, resourceGroupName, targetName, solutionName, instanceName, options),\n  };\n}\n\nexport function _getInstancesOperations(\n  context: WorkloadOrchestrationManagementContext,\n): InstancesOperations {\n  return {\n    ..._getInstances(context),\n  };\n}\n"]}