{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/classic/solutions/index.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;AAsGlC,0DAMC;AAzGD,qEAM2C;AAyD3C,SAAS,aAAa,CAAC,OAA+C;IACpE,OAAO;QACL,YAAY,EAAE,CACZ,iBAAyB,EACzB,UAAkB,EAClB,OAA6C,EAC7C,EAAE,CAAC,IAAA,4BAAY,EAAC,OAAO,EAAE,iBAAiB,EAAE,UAAU,EAAE,OAAO,CAAC;QAClE,MAAM,EAAE,CACN,iBAAyB,EACzB,UAAkB,EAClB,YAAoB,EACpB,OAAuC,EACvC,EAAE,CAAC,IAAA,uBAAO,EAAC,OAAO,EAAE,iBAAiB,EAAE,UAAU,EAAE,YAAY,EAAE,OAAO,CAAC;QAC3E,MAAM,EAAE,CACN,iBAAyB,EACzB,UAAkB,EAClB,YAAoB,EACpB,UAA0B,EAC1B,OAAuC,EACvC,EAAE,CAAC,IAAA,sBAAM,EAAC,OAAO,EAAE,iBAAiB,EAAE,UAAU,EAAE,YAAY,EAAE,UAAU,EAAE,OAAO,CAAC;QACtF,cAAc,EAAE,CACd,iBAAyB,EACzB,UAAkB,EAClB,YAAoB,EACpB,QAAkB,EAClB,OAA+C,EAC/C,EAAE,CAAC,IAAA,8BAAc,EAAC,OAAO,EAAE,iBAAiB,EAAE,UAAU,EAAE,YAAY,EAAE,QAAQ,EAAE,OAAO,CAAC;QAC5F,GAAG,EAAE,CACH,iBAAyB,EACzB,UAAkB,EAClB,YAAoB,EACpB,OAAoC,EACpC,EAAE,CAAC,IAAA,mBAAG,EAAC,OAAO,EAAE,iBAAiB,EAAE,UAAU,EAAE,YAAY,EAAE,OAAO,CAAC;KACxE,CAAC;AACJ,CAAC;AAED,SAAgB,uBAAuB,CACrC,OAA+C;IAE/C,OAAO;QACL,GAAG,aAAa,CAAC,OAAO,CAAC;KAC1B,CAAC;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { WorkloadOrchestrationManagementContext } from \"../../api/workloadOrchestrationManagementContext.js\";\nimport {\n  listByTarget,\n  $delete,\n  update,\n  createOrUpdate,\n  get,\n} from \"../../api/solutions/operations.js\";\nimport {\n  SolutionsListByTargetOptionalParams,\n  SolutionsDeleteOptionalParams,\n  SolutionsUpdateOptionalParams,\n  SolutionsCreateOrUpdateOptionalParams,\n  SolutionsGetOptionalParams,\n} from \"../../api/solutions/options.js\";\nimport { Solution, SolutionUpdate } from \"../../models/models.js\";\nimport { PagedAsyncIterableIterator } from \"../../static-helpers/pagingHelpers.js\";\nimport { PollerLike, OperationState } from \"@azure/core-lro\";\n\n/** Interface representing a Solutions operations. */\nexport interface SolutionsOperations {\n  /** List Solution resources */\n  listByTarget: (\n    resourceGroupName: string,\n    targetName: string,\n    options?: SolutionsListByTargetOptionalParams,\n  ) => PagedAsyncIterableIterator<Solution>;\n  /** Delete a Solution Resource */\n  /**\n   *  @fixme delete is a reserved word that cannot be used as an operation name.\n   *         Please add @clientName(\"clientName\") or @clientName(\"<JS-Specific-Name>\", \"javascript\")\n   *         to the operation to override the generated name.\n   */\n  delete: (\n    resourceGroupName: string,\n    targetName: string,\n    solutionName: string,\n    options?: SolutionsDeleteOptionalParams,\n  ) => PollerLike<OperationState<void>, void>;\n  /** Update a Solution Resource */\n  update: (\n    resourceGroupName: string,\n    targetName: string,\n    solutionName: string,\n    properties: SolutionUpdate,\n    options?: SolutionsUpdateOptionalParams,\n  ) => PollerLike<OperationState<Solution>, Solution>;\n  /** Create or update a Solution Resource */\n  createOrUpdate: (\n    resourceGroupName: string,\n    targetName: string,\n    solutionName: string,\n    resource: Solution,\n    options?: SolutionsCreateOrUpdateOptionalParams,\n  ) => PollerLike<OperationState<Solution>, Solution>;\n  /** Get a Solution resource */\n  get: (\n    resourceGroupName: string,\n    targetName: string,\n    solutionName: string,\n    options?: SolutionsGetOptionalParams,\n  ) => Promise<Solution>;\n}\n\nfunction _getSolutions(context: WorkloadOrchestrationManagementContext) {\n  return {\n    listByTarget: (\n      resourceGroupName: string,\n      targetName: string,\n      options?: SolutionsListByTargetOptionalParams,\n    ) => listByTarget(context, resourceGroupName, targetName, options),\n    delete: (\n      resourceGroupName: string,\n      targetName: string,\n      solutionName: string,\n      options?: SolutionsDeleteOptionalParams,\n    ) => $delete(context, resourceGroupName, targetName, solutionName, options),\n    update: (\n      resourceGroupName: string,\n      targetName: string,\n      solutionName: string,\n      properties: SolutionUpdate,\n      options?: SolutionsUpdateOptionalParams,\n    ) => update(context, resourceGroupName, targetName, solutionName, properties, options),\n    createOrUpdate: (\n      resourceGroupName: string,\n      targetName: string,\n      solutionName: string,\n      resource: Solution,\n      options?: SolutionsCreateOrUpdateOptionalParams,\n    ) => createOrUpdate(context, resourceGroupName, targetName, solutionName, resource, options),\n    get: (\n      resourceGroupName: string,\n      targetName: string,\n      solutionName: string,\n      options?: SolutionsGetOptionalParams,\n    ) => get(context, resourceGroupName, targetName, solutionName, options),\n  };\n}\n\nexport function _getSolutionsOperations(\n  context: WorkloadOrchestrationManagementContext,\n): SolutionsOperations {\n  return {\n    ..._getSolutions(context),\n  };\n}\n"]}