{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/classic/dynamicSchemas/index.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;AAuGlC,oEAMC;AA1GD,0EAMgD;AAyDhD,SAAS,kBAAkB,CAAC,OAA+C;IACzE,OAAO;QACL,YAAY,EAAE,CACZ,iBAAyB,EACzB,UAAkB,EAClB,OAAkD,EAClD,EAAE,CAAC,IAAA,4BAAY,EAAC,OAAO,EAAE,iBAAiB,EAAE,UAAU,EAAE,OAAO,CAAC;QAClE,MAAM,EAAE,CACN,iBAAyB,EACzB,UAAkB,EAClB,iBAAyB,EACzB,OAA4C,EAC5C,EAAE,CAAC,IAAA,uBAAO,EAAC,OAAO,EAAE,iBAAiB,EAAE,UAAU,EAAE,iBAAiB,EAAE,OAAO,CAAC;QAChF,MAAM,EAAE,CACN,iBAAyB,EACzB,UAAkB,EAClB,iBAAyB,EACzB,UAAyB,EACzB,OAA4C,EAC5C,EAAE,CAAC,IAAA,sBAAM,EAAC,OAAO,EAAE,iBAAiB,EAAE,UAAU,EAAE,iBAAiB,EAAE,UAAU,EAAE,OAAO,CAAC;QAC3F,cAAc,EAAE,CACd,iBAAyB,EACzB,UAAkB,EAClB,iBAAyB,EACzB,QAAuB,EACvB,OAAoD,EACpD,EAAE,CACF,IAAA,8BAAc,EAAC,OAAO,EAAE,iBAAiB,EAAE,UAAU,EAAE,iBAAiB,EAAE,QAAQ,EAAE,OAAO,CAAC;QAC9F,GAAG,EAAE,CACH,iBAAyB,EACzB,UAAkB,EAClB,iBAAyB,EACzB,OAAyC,EACzC,EAAE,CAAC,IAAA,mBAAG,EAAC,OAAO,EAAE,iBAAiB,EAAE,UAAU,EAAE,iBAAiB,EAAE,OAAO,CAAC;KAC7E,CAAC;AACJ,CAAC;AAED,SAAgB,4BAA4B,CAC1C,OAA+C;IAE/C,OAAO;QACL,GAAG,kBAAkB,CAAC,OAAO,CAAC;KAC/B,CAAC;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { WorkloadOrchestrationManagementContext } from \"../../api/workloadOrchestrationManagementContext.js\";\nimport {\n  listBySchema,\n  $delete,\n  update,\n  createOrUpdate,\n  get,\n} from \"../../api/dynamicSchemas/operations.js\";\nimport {\n  DynamicSchemasListBySchemaOptionalParams,\n  DynamicSchemasDeleteOptionalParams,\n  DynamicSchemasUpdateOptionalParams,\n  DynamicSchemasCreateOrUpdateOptionalParams,\n  DynamicSchemasGetOptionalParams,\n} from \"../../api/dynamicSchemas/options.js\";\nimport { DynamicSchema } from \"../../models/models.js\";\nimport { PagedAsyncIterableIterator } from \"../../static-helpers/pagingHelpers.js\";\nimport { PollerLike, OperationState } from \"@azure/core-lro\";\n\n/** Interface representing a DynamicSchemas operations. */\nexport interface DynamicSchemasOperations {\n  /** List by Schema */\n  listBySchema: (\n    resourceGroupName: string,\n    schemaName: string,\n    options?: DynamicSchemasListBySchemaOptionalParams,\n  ) => PagedAsyncIterableIterator<DynamicSchema>;\n  /** Delete a DynamicSchema Resource */\n  /**\n   *  @fixme delete is a reserved word that cannot be used as an operation name.\n   *         Please add @clientName(\"clientName\") or @clientName(\"<JS-Specific-Name>\", \"javascript\")\n   *         to the operation to override the generated name.\n   */\n  delete: (\n    resourceGroupName: string,\n    schemaName: string,\n    dynamicSchemaName: string,\n    options?: DynamicSchemasDeleteOptionalParams,\n  ) => PollerLike<OperationState<void>, void>;\n  /** update a DynamicSchema Resource */\n  update: (\n    resourceGroupName: string,\n    schemaName: string,\n    dynamicSchemaName: string,\n    properties: DynamicSchema,\n    options?: DynamicSchemasUpdateOptionalParams,\n  ) => Promise<DynamicSchema>;\n  /** Create or update a DynamicSchema Resource */\n  createOrUpdate: (\n    resourceGroupName: string,\n    schemaName: string,\n    dynamicSchemaName: string,\n    resource: DynamicSchema,\n    options?: DynamicSchemasCreateOrUpdateOptionalParams,\n  ) => PollerLike<OperationState<DynamicSchema>, DynamicSchema>;\n  /** Get a DynamicSchema Resource */\n  get: (\n    resourceGroupName: string,\n    schemaName: string,\n    dynamicSchemaName: string,\n    options?: DynamicSchemasGetOptionalParams,\n  ) => Promise<DynamicSchema>;\n}\n\nfunction _getDynamicSchemas(context: WorkloadOrchestrationManagementContext) {\n  return {\n    listBySchema: (\n      resourceGroupName: string,\n      schemaName: string,\n      options?: DynamicSchemasListBySchemaOptionalParams,\n    ) => listBySchema(context, resourceGroupName, schemaName, options),\n    delete: (\n      resourceGroupName: string,\n      schemaName: string,\n      dynamicSchemaName: string,\n      options?: DynamicSchemasDeleteOptionalParams,\n    ) => $delete(context, resourceGroupName, schemaName, dynamicSchemaName, options),\n    update: (\n      resourceGroupName: string,\n      schemaName: string,\n      dynamicSchemaName: string,\n      properties: DynamicSchema,\n      options?: DynamicSchemasUpdateOptionalParams,\n    ) => update(context, resourceGroupName, schemaName, dynamicSchemaName, properties, options),\n    createOrUpdate: (\n      resourceGroupName: string,\n      schemaName: string,\n      dynamicSchemaName: string,\n      resource: DynamicSchema,\n      options?: DynamicSchemasCreateOrUpdateOptionalParams,\n    ) =>\n      createOrUpdate(context, resourceGroupName, schemaName, dynamicSchemaName, resource, options),\n    get: (\n      resourceGroupName: string,\n      schemaName: string,\n      dynamicSchemaName: string,\n      options?: DynamicSchemasGetOptionalParams,\n    ) => get(context, resourceGroupName, schemaName, dynamicSchemaName, options),\n  };\n}\n\nexport function _getDynamicSchemasOperations(\n  context: WorkloadOrchestrationManagementContext,\n): DynamicSchemasOperations {\n  return {\n    ..._getDynamicSchemas(context),\n  };\n}\n"]}