{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/classic/diagnostics/index.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;AAoGlC,8DAMC;AAvGD,uEAO6C;AAyD7C,SAAS,eAAe,CAAC,OAA+C;IACtE,OAAO;QACL,kBAAkB,EAAE,CAAC,OAAqD,EAAE,EAAE,CAC5E,IAAA,kCAAkB,EAAC,OAAO,EAAE,OAAO,CAAC;QACtC,mBAAmB,EAAE,CACnB,iBAAyB,EACzB,OAAsD,EACtD,EAAE,CAAC,IAAA,mCAAmB,EAAC,OAAO,EAAE,iBAAiB,EAAE,OAAO,CAAC;QAC7D,MAAM,EAAE,CACN,iBAAyB,EACzB,cAAsB,EACtB,OAAyC,EACzC,EAAE,CAAC,IAAA,uBAAO,EAAC,OAAO,EAAE,iBAAiB,EAAE,cAAc,EAAE,OAAO,CAAC;QACjE,MAAM,EAAE,CACN,iBAAyB,EACzB,cAAsB,EACtB,UAA4B,EAC5B,OAAyC,EACzC,EAAE,CAAC,IAAA,sBAAM,EAAC,OAAO,EAAE,iBAAiB,EAAE,cAAc,EAAE,UAAU,EAAE,OAAO,CAAC;QAC5E,cAAc,EAAE,CACd,iBAAyB,EACzB,cAAsB,EACtB,QAAoB,EACpB,OAAiD,EACjD,EAAE,CAAC,IAAA,8BAAc,EAAC,OAAO,EAAE,iBAAiB,EAAE,cAAc,EAAE,QAAQ,EAAE,OAAO,CAAC;QAClF,GAAG,EAAE,CACH,iBAAyB,EACzB,cAAsB,EACtB,OAAsC,EACtC,EAAE,CAAC,IAAA,mBAAG,EAAC,OAAO,EAAE,iBAAiB,EAAE,cAAc,EAAE,OAAO,CAAC;KAC9D,CAAC;AACJ,CAAC;AAED,SAAgB,yBAAyB,CACvC,OAA+C;IAE/C,OAAO;QACL,GAAG,eAAe,CAAC,OAAO,CAAC;KAC5B,CAAC;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { WorkloadOrchestrationManagementContext } from \"../../api/workloadOrchestrationManagementContext.js\";\nimport {\n  listBySubscription,\n  listByResourceGroup,\n  $delete,\n  update,\n  createOrUpdate,\n  get,\n} from \"../../api/diagnostics/operations.js\";\nimport {\n  DiagnosticsListBySubscriptionOptionalParams,\n  DiagnosticsListByResourceGroupOptionalParams,\n  DiagnosticsDeleteOptionalParams,\n  DiagnosticsUpdateOptionalParams,\n  DiagnosticsCreateOrUpdateOptionalParams,\n  DiagnosticsGetOptionalParams,\n} from \"../../api/diagnostics/options.js\";\nimport { Diagnostic, DiagnosticUpdate } from \"../../models/models.js\";\nimport { PagedAsyncIterableIterator } from \"../../static-helpers/pagingHelpers.js\";\nimport { PollerLike, OperationState } from \"@azure/core-lro\";\n\n/** Interface representing a Diagnostics operations. */\nexport interface DiagnosticsOperations {\n  /** Lists Diagnostics resources within an Azure subscription. */\n  listBySubscription: (\n    options?: DiagnosticsListBySubscriptionOptionalParams,\n  ) => PagedAsyncIterableIterator<Diagnostic>;\n  /** Returns a collection of Diagnostic resources within the resource group. */\n  listByResourceGroup: (\n    resourceGroupName: string,\n    options?: DiagnosticsListByResourceGroupOptionalParams,\n  ) => PagedAsyncIterableIterator<Diagnostic>;\n  /** Deletes specified Diagnostic resource. */\n  /**\n   *  @fixme delete is a reserved word that cannot be used as an operation name.\n   *         Please add @clientName(\"clientName\") or @clientName(\"<JS-Specific-Name>\", \"javascript\")\n   *         to the operation to override the generated name.\n   */\n  delete: (\n    resourceGroupName: string,\n    diagnosticName: string,\n    options?: DiagnosticsDeleteOptionalParams,\n  ) => PollerLike<OperationState<void>, void>;\n  /** Updates existing Diagnostic resource. */\n  update: (\n    resourceGroupName: string,\n    diagnosticName: string,\n    properties: DiagnosticUpdate,\n    options?: DiagnosticsUpdateOptionalParams,\n  ) => PollerLike<OperationState<Diagnostic>, Diagnostic>;\n  /** Creates new or updates existing Diagnostic resource. */\n  createOrUpdate: (\n    resourceGroupName: string,\n    diagnosticName: string,\n    resource: Diagnostic,\n    options?: DiagnosticsCreateOrUpdateOptionalParams,\n  ) => PollerLike<OperationState<Diagnostic>, Diagnostic>;\n  /** Returns details of specified Diagnostic resource. */\n  get: (\n    resourceGroupName: string,\n    diagnosticName: string,\n    options?: DiagnosticsGetOptionalParams,\n  ) => Promise<Diagnostic>;\n}\n\nfunction _getDiagnostics(context: WorkloadOrchestrationManagementContext) {\n  return {\n    listBySubscription: (options?: DiagnosticsListBySubscriptionOptionalParams) =>\n      listBySubscription(context, options),\n    listByResourceGroup: (\n      resourceGroupName: string,\n      options?: DiagnosticsListByResourceGroupOptionalParams,\n    ) => listByResourceGroup(context, resourceGroupName, options),\n    delete: (\n      resourceGroupName: string,\n      diagnosticName: string,\n      options?: DiagnosticsDeleteOptionalParams,\n    ) => $delete(context, resourceGroupName, diagnosticName, options),\n    update: (\n      resourceGroupName: string,\n      diagnosticName: string,\n      properties: DiagnosticUpdate,\n      options?: DiagnosticsUpdateOptionalParams,\n    ) => update(context, resourceGroupName, diagnosticName, properties, options),\n    createOrUpdate: (\n      resourceGroupName: string,\n      diagnosticName: string,\n      resource: Diagnostic,\n      options?: DiagnosticsCreateOrUpdateOptionalParams,\n    ) => createOrUpdate(context, resourceGroupName, diagnosticName, resource, options),\n    get: (\n      resourceGroupName: string,\n      diagnosticName: string,\n      options?: DiagnosticsGetOptionalParams,\n    ) => get(context, resourceGroupName, diagnosticName, options),\n  };\n}\n\nexport function _getDiagnosticsOperations(\n  context: WorkloadOrchestrationManagementContext,\n): DiagnosticsOperations {\n  return {\n    ..._getDiagnostics(context),\n  };\n}\n"]}