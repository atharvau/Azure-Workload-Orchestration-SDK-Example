{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/classic/schemaReferences/index.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;AAwClC,wEAMC;AA3CD,4EAAoF;AAuBpF,SAAS,oBAAoB,CAAC,OAA+C;IAC3E,OAAO;QACL,mBAAmB,EAAE,CACnB,WAAmB,EACnB,OAA2D,EAC3D,EAAE,CAAC,IAAA,mCAAmB,EAAC,OAAO,EAAE,WAAW,EAAE,OAAO,CAAC;QACvD,GAAG,EAAE,CACH,WAAmB,EACnB,mBAA2B,EAC3B,OAA2C,EAC3C,EAAE,CAAC,IAAA,mBAAG,EAAC,OAAO,EAAE,WAAW,EAAE,mBAAmB,EAAE,OAAO,CAAC;KAC7D,CAAC;AACJ,CAAC;AAED,SAAgB,8BAA8B,CAC5C,OAA+C;IAE/C,OAAO;QACL,GAAG,oBAAoB,CAAC,OAAO,CAAC;KACjC,CAAC;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { WorkloadOrchestrationManagementContext } from \"../../api/workloadOrchestrationManagementContext.js\";\nimport { listByResourceGroup, get } from \"../../api/schemaReferences/operations.js\";\nimport {\n  SchemaReferencesListByResourceGroupOptionalParams,\n  SchemaReferencesGetOptionalParams,\n} from \"../../api/schemaReferences/options.js\";\nimport { SchemaReference } from \"../../models/models.js\";\nimport { PagedAsyncIterableIterator } from \"../../static-helpers/pagingHelpers.js\";\n\n/** Interface representing a SchemaReferences operations. */\nexport interface SchemaReferencesOperations {\n  /** List by specified resource group */\n  listByResourceGroup: (\n    resourceUri: string,\n    options?: SchemaReferencesListByResourceGroupOptionalParams,\n  ) => PagedAsyncIterableIterator<SchemaReference>;\n  /** Get a Schema Reference Resource */\n  get: (\n    resourceUri: string,\n    schemaReferenceName: string,\n    options?: SchemaReferencesGetOptionalParams,\n  ) => Promise<SchemaReference>;\n}\n\nfunction _getSchemaReferences(context: WorkloadOrchestrationManagementContext) {\n  return {\n    listByResourceGroup: (\n      resourceUri: string,\n      options?: SchemaReferencesListByResourceGroupOptionalParams,\n    ) => listByResourceGroup(context, resourceUri, options),\n    get: (\n      resourceUri: string,\n      schemaReferenceName: string,\n      options?: SchemaReferencesGetOptionalParams,\n    ) => get(context, resourceUri, schemaReferenceName, options),\n  };\n}\n\nexport function _getSchemaReferencesOperations(\n  context: WorkloadOrchestrationManagementContext,\n): SchemaReferencesOperations {\n  return {\n    ..._getSchemaReferences(context),\n  };\n}\n"]}