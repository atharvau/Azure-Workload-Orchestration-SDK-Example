{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/classic/schemaVersions/index.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;AAuGlC,oEAMC;AA1GD,0EAMgD;AAyDhD,SAAS,kBAAkB,CAAC,OAA+C;IACzE,OAAO;QACL,YAAY,EAAE,CACZ,iBAAyB,EACzB,UAAkB,EAClB,OAAkD,EAClD,EAAE,CAAC,IAAA,4BAAY,EAAC,OAAO,EAAE,iBAAiB,EAAE,UAAU,EAAE,OAAO,CAAC;QAClE,MAAM,EAAE,CACN,iBAAyB,EACzB,UAAkB,EAClB,iBAAyB,EACzB,OAA4C,EAC5C,EAAE,CAAC,IAAA,uBAAO,EAAC,OAAO,EAAE,iBAAiB,EAAE,UAAU,EAAE,iBAAiB,EAAE,OAAO,CAAC;QAChF,MAAM,EAAE,CACN,iBAAyB,EACzB,UAAkB,EAClB,iBAAyB,EACzB,UAAyB,EACzB,OAA4C,EAC5C,EAAE,CAAC,IAAA,sBAAM,EAAC,OAAO,EAAE,iBAAiB,EAAE,UAAU,EAAE,iBAAiB,EAAE,UAAU,EAAE,OAAO,CAAC;QAC3F,cAAc,EAAE,CACd,iBAAyB,EACzB,UAAkB,EAClB,iBAAyB,EACzB,QAAuB,EACvB,OAAoD,EACpD,EAAE,CACF,IAAA,8BAAc,EAAC,OAAO,EAAE,iBAAiB,EAAE,UAAU,EAAE,iBAAiB,EAAE,QAAQ,EAAE,OAAO,CAAC;QAC9F,GAAG,EAAE,CACH,iBAAyB,EACzB,UAAkB,EAClB,iBAAyB,EACzB,OAAyC,EACzC,EAAE,CAAC,IAAA,mBAAG,EAAC,OAAO,EAAE,iBAAiB,EAAE,UAAU,EAAE,iBAAiB,EAAE,OAAO,CAAC;KAC7E,CAAC;AACJ,CAAC;AAED,SAAgB,4BAA4B,CAC1C,OAA+C;IAE/C,OAAO;QACL,GAAG,kBAAkB,CAAC,OAAO,CAAC;KAC/B,CAAC;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { WorkloadOrchestrationManagementContext } from \"../../api/workloadOrchestrationManagementContext.js\";\nimport {\n  listBySchema,\n  $delete,\n  update,\n  createOrUpdate,\n  get,\n} from \"../../api/schemaVersions/operations.js\";\nimport {\n  SchemaVersionsListBySchemaOptionalParams,\n  SchemaVersionsDeleteOptionalParams,\n  SchemaVersionsUpdateOptionalParams,\n  SchemaVersionsCreateOrUpdateOptionalParams,\n  SchemaVersionsGetOptionalParams,\n} from \"../../api/schemaVersions/options.js\";\nimport { SchemaVersion } from \"../../models/models.js\";\nimport { PagedAsyncIterableIterator } from \"../../static-helpers/pagingHelpers.js\";\nimport { PollerLike, OperationState } from \"@azure/core-lro\";\n\n/** Interface representing a SchemaVersions operations. */\nexport interface SchemaVersionsOperations {\n  /** List by specified resource group */\n  listBySchema: (\n    resourceGroupName: string,\n    schemaName: string,\n    options?: SchemaVersionsListBySchemaOptionalParams,\n  ) => PagedAsyncIterableIterator<SchemaVersion>;\n  /** Delete a Schema Version Resource */\n  /**\n   *  @fixme delete is a reserved word that cannot be used as an operation name.\n   *         Please add @clientName(\"clientName\") or @clientName(\"<JS-Specific-Name>\", \"javascript\")\n   *         to the operation to override the generated name.\n   */\n  delete: (\n    resourceGroupName: string,\n    schemaName: string,\n    schemaVersionName: string,\n    options?: SchemaVersionsDeleteOptionalParams,\n  ) => PollerLike<OperationState<void>, void>;\n  /** update a Schema Version Resource */\n  update: (\n    resourceGroupName: string,\n    schemaName: string,\n    schemaVersionName: string,\n    properties: SchemaVersion,\n    options?: SchemaVersionsUpdateOptionalParams,\n  ) => Promise<SchemaVersion>;\n  /** Create or update a Schema Version Resource */\n  createOrUpdate: (\n    resourceGroupName: string,\n    schemaName: string,\n    schemaVersionName: string,\n    resource: SchemaVersion,\n    options?: SchemaVersionsCreateOrUpdateOptionalParams,\n  ) => PollerLike<OperationState<SchemaVersion>, SchemaVersion>;\n  /** Get a Schema Version Resource */\n  get: (\n    resourceGroupName: string,\n    schemaName: string,\n    schemaVersionName: string,\n    options?: SchemaVersionsGetOptionalParams,\n  ) => Promise<SchemaVersion>;\n}\n\nfunction _getSchemaVersions(context: WorkloadOrchestrationManagementContext) {\n  return {\n    listBySchema: (\n      resourceGroupName: string,\n      schemaName: string,\n      options?: SchemaVersionsListBySchemaOptionalParams,\n    ) => listBySchema(context, resourceGroupName, schemaName, options),\n    delete: (\n      resourceGroupName: string,\n      schemaName: string,\n      schemaVersionName: string,\n      options?: SchemaVersionsDeleteOptionalParams,\n    ) => $delete(context, resourceGroupName, schemaName, schemaVersionName, options),\n    update: (\n      resourceGroupName: string,\n      schemaName: string,\n      schemaVersionName: string,\n      properties: SchemaVersion,\n      options?: SchemaVersionsUpdateOptionalParams,\n    ) => update(context, resourceGroupName, schemaName, schemaVersionName, properties, options),\n    createOrUpdate: (\n      resourceGroupName: string,\n      schemaName: string,\n      schemaVersionName: string,\n      resource: SchemaVersion,\n      options?: SchemaVersionsCreateOrUpdateOptionalParams,\n    ) =>\n      createOrUpdate(context, resourceGroupName, schemaName, schemaVersionName, resource, options),\n    get: (\n      resourceGroupName: string,\n      schemaName: string,\n      schemaVersionName: string,\n      options?: SchemaVersionsGetOptionalParams,\n    ) => get(context, resourceGroupName, schemaName, schemaVersionName, options),\n  };\n}\n\nexport function _getSchemaVersionsOperations(\n  context: WorkloadOrchestrationManagementContext,\n): SchemaVersionsOperations {\n  return {\n    ..._getSchemaVersions(context),\n  };\n}\n"]}