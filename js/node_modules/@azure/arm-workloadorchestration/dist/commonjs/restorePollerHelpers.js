"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.restorePoller = restorePoller;
const operations_js_1 = require("./api/siteReferences/operations.js");
const operations_js_2 = require("./api/contexts/operations.js");
const operations_js_3 = require("./api/diagnostics/operations.js");
const operations_js_4 = require("./api/executions/operations.js");
const operations_js_5 = require("./api/workflowVersions/operations.js");
const operations_js_6 = require("./api/workflows/operations.js");
const operations_js_7 = require("./api/configTemplates/operations.js");
const operations_js_8 = require("./api/instances/operations.js");
const operations_js_9 = require("./api/solutionTemplates/operations.js");
const operations_js_10 = require("./api/solutionTemplateVersions/operations.js");
const operations_js_11 = require("./api/solutions/operations.js");
const operations_js_12 = require("./api/dynamicSchemaVersions/operations.js");
const operations_js_13 = require("./api/targets/operations.js");
const operations_js_14 = require("./api/solutionVersions/operations.js");
const operations_js_15 = require("./api/schemaVersions/operations.js");
const operations_js_16 = require("./api/schemas/operations.js");
const operations_js_17 = require("./api/dynamicSchemas/operations.js");
const pollingHelpers_js_1 = require("./static-helpers/pollingHelpers.js");
const core_lro_1 = require("@azure/core-lro");
/**
 * Creates a poller from the serialized state of another poller. This can be
 * useful when you want to create pollers on a different host or a poller
 * needs to be constructed after the original one is not in scope.
 */
function restorePoller(client, serializedState, sourceOperation, options) {
    const pollerConfig = (0, core_lro_1.deserializeState)(serializedState).config;
    const { initialRequestUrl, requestMethod, metadata } = pollerConfig;
    if (!initialRequestUrl || !requestMethod) {
        throw new Error(`Invalid serialized state: ${serializedState} for sourceOperation ${sourceOperation?.name}`);
    }
    const resourceLocationConfig = metadata?.["resourceLocationConfig"];
    const { deserializer, expectedStatuses = [] } = getDeserializationHelper(initialRequestUrl, requestMethod) ?? {};
    const deserializeHelper = options?.processResponseBody ?? deserializer;
    if (!deserializeHelper) {
        throw new Error(`Please ensure the operation is in this client! We can't find its deserializeHelper for ${sourceOperation?.name}.`);
    }
    return (0, pollingHelpers_js_1.getLongRunningPoller)(client["_client"] ?? client, deserializeHelper, expectedStatuses, {
        updateIntervalInMs: options?.updateIntervalInMs,
        abortSignal: options?.abortSignal,
        resourceLocationConfig,
        restoreFrom: serializedState,
        initialRequestUrl,
    });
}
const deserializeMap = {
    "DELETE /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/siteReferences/{siteReferenceName}": {
        deserializer: operations_js_1._$deleteDeserialize,
        expectedStatuses: ["202", "204", "200"],
    },
    "PATCH /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/siteReferences/{siteReferenceName}": { deserializer: operations_js_1._updateDeserialize, expectedStatuses: ["200", "202"] },
    "PUT /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/siteReferences/{siteReferenceName}": {
        deserializer: operations_js_1._createOrUpdateDeserialize,
        expectedStatuses: ["200", "201", "202"],
    },
    "DELETE /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}": {
        deserializer: operations_js_2._$deleteDeserialize,
        expectedStatuses: ["202", "204", "200"],
    },
    "PATCH /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}": {
        deserializer: operations_js_2._updateDeserialize,
        expectedStatuses: ["200", "202"],
    },
    "PUT /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}": {
        deserializer: operations_js_2._createOrUpdateDeserialize,
        expectedStatuses: ["200", "201", "202"],
    },
    "DELETE /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/diagnostics/{diagnosticName}": {
        deserializer: operations_js_3._$deleteDeserialize,
        expectedStatuses: ["202", "204", "200"],
    },
    "PATCH /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/diagnostics/{diagnosticName}": {
        deserializer: operations_js_3._updateDeserialize,
        expectedStatuses: ["200", "202"],
    },
    "PUT /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/diagnostics/{diagnosticName}": {
        deserializer: operations_js_3._createOrUpdateDeserialize,
        expectedStatuses: ["200", "201", "202"],
    },
    "DELETE /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions/{versionName}/executions/{executionName}": {
        deserializer: operations_js_4._$deleteDeserialize,
        expectedStatuses: ["202", "204", "200"],
    },
    "PATCH /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions/{versionName}/executions/{executionName}": {
        deserializer: operations_js_4._updateDeserialize,
        expectedStatuses: ["200", "202"],
    },
    "PUT /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions/{versionName}/executions/{executionName}": {
        deserializer: operations_js_4._createOrUpdateDeserialize,
        expectedStatuses: ["200", "201", "202"],
    },
    "DELETE /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions/{versionName}": {
        deserializer: operations_js_5._$deleteDeserialize,
        expectedStatuses: ["202", "204", "200"],
    },
    "PATCH /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions/{versionName}": {
        deserializer: operations_js_5._updateDeserialize,
        expectedStatuses: ["200", "202"],
    },
    "PUT /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions/{versionName}": {
        deserializer: operations_js_5._createOrUpdateDeserialize,
        expectedStatuses: ["200", "201", "202"],
    },
    "DELETE /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}": {
        deserializer: operations_js_6._$deleteDeserialize,
        expectedStatuses: ["202", "204", "200"],
    },
    "PATCH /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}": {
        deserializer: operations_js_6._updateDeserialize,
        expectedStatuses: ["200", "202"],
    },
    "PUT /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}": {
        deserializer: operations_js_6._createOrUpdateDeserialize,
        expectedStatuses: ["200", "201", "202"],
    },
    "DELETE /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}": {
        deserializer: operations_js_7._$deleteDeserialize,
        expectedStatuses: ["202", "204", "200"],
    },
    "POST /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}/createVersion": {
        deserializer: operations_js_7._createVersionDeserialize,
        expectedStatuses: ["202", "200"],
    },
    "PUT /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}": {
        deserializer: operations_js_7._createOrUpdateDeserialize,
        expectedStatuses: ["200", "201", "202"],
    },
    "DELETE /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances/{instanceName}": {
        deserializer: operations_js_8._$deleteDeserialize,
        expectedStatuses: ["202", "204", "200"],
    },
    "PATCH /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances/{instanceName}": {
        deserializer: operations_js_8._updateDeserialize,
        expectedStatuses: ["200", "202"],
    },
    "PUT /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances/{instanceName}": {
        deserializer: operations_js_8._createOrUpdateDeserialize,
        expectedStatuses: ["200", "201", "202"],
    },
    "DELETE /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}": {
        deserializer: operations_js_9._$deleteDeserialize,
        expectedStatuses: ["202", "204", "200"],
    },
    "POST /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}/removeVersion": {
        deserializer: operations_js_9._removeVersionDeserialize,
        expectedStatuses: ["202", "200"],
    },
    "POST /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}/createVersion": {
        deserializer: operations_js_9._createVersionDeserialize,
        expectedStatuses: ["202", "200"],
    },
    "PUT /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}": {
        deserializer: operations_js_9._createOrUpdateDeserialize,
        expectedStatuses: ["200", "201", "202"],
    },
    "POST /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}/versions/{solutionTemplateVersionName}/bulkPublishSolution": {
        deserializer: operations_js_10._bulkPublishSolutionDeserialize,
        expectedStatuses: ["202", "200"],
    },
    "POST /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}/versions/{solutionTemplateVersionName}/bulkDeploySolution": {
        deserializer: operations_js_10._bulkDeploySolutionDeserialize,
        expectedStatuses: ["202", "200"],
    },
    "DELETE /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}": {
        deserializer: operations_js_11._$deleteDeserialize,
        expectedStatuses: ["202", "204", "200"],
    },
    "PATCH /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}": {
        deserializer: operations_js_11._updateDeserialize,
        expectedStatuses: ["200", "202"],
    },
    "PUT /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}": {
        deserializer: operations_js_11._createOrUpdateDeserialize,
        expectedStatuses: ["200", "201", "202"],
    },
    "DELETE /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas/{dynamicSchemaName}/versions/{dynamicSchemaVersionName}": {
        deserializer: operations_js_12._$deleteDeserialize,
        expectedStatuses: ["202", "204", "200"],
    },
    "PUT /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas/{dynamicSchemaName}/versions/{dynamicSchemaVersionName}": {
        deserializer: operations_js_12._createOrUpdateDeserialize,
        expectedStatuses: ["200", "201", "202"],
    },
    "POST /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/updateExternalValidationStatus": {
        deserializer: operations_js_13._updateExternalValidationStatusDeserialize,
        expectedStatuses: ["202", "200"],
    },
    "POST /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/publishSolutionVersion": {
        deserializer: operations_js_13._publishSolutionVersionDeserialize,
        expectedStatuses: ["202", "200"],
    },
    "POST /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/reviewSolutionVersion": {
        deserializer: operations_js_13._reviewSolutionVersionDeserialize,
        expectedStatuses: ["202", "200"],
    },
    "POST /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/resolveConfiguration": {
        deserializer: operations_js_13._resolveConfigurationDeserialize,
        expectedStatuses: ["202", "200"],
    },
    "POST /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/removeRevision": {
        deserializer: operations_js_13._removeRevisionDeserialize,
        expectedStatuses: ["202", "200"],
    },
    "POST /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/uninstallSolution": {
        deserializer: operations_js_13._uninstallSolutionDeserialize,
        expectedStatuses: ["202", "200"],
    },
    "POST /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/installSolution": {
        deserializer: operations_js_13._installSolutionDeserialize,
        expectedStatuses: ["202", "200"],
    },
    "DELETE /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}": {
        deserializer: operations_js_13._$deleteDeserialize,
        expectedStatuses: ["202", "204", "200"],
    },
    "PATCH /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}": {
        deserializer: operations_js_13._updateDeserialize,
        expectedStatuses: ["200", "202"],
    },
    "PUT /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}": {
        deserializer: operations_js_13._createOrUpdateDeserialize,
        expectedStatuses: ["200", "201", "202"],
    },
    "DELETE /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/versions/{solutionVersionName}": {
        deserializer: operations_js_14._$deleteDeserialize,
        expectedStatuses: ["202", "204", "200"],
    },
    "PATCH /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/versions/{solutionVersionName}": {
        deserializer: operations_js_14._updateDeserialize,
        expectedStatuses: ["200", "202"],
    },
    "PUT /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/versions/{solutionVersionName}": {
        deserializer: operations_js_14._createOrUpdateDeserialize,
        expectedStatuses: ["200", "201", "202"],
    },
    "DELETE /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/versions/{schemaVersionName}": {
        deserializer: operations_js_15._$deleteDeserialize,
        expectedStatuses: ["202", "204", "200"],
    },
    "PUT /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/versions/{schemaVersionName}": {
        deserializer: operations_js_15._createOrUpdateDeserialize,
        expectedStatuses: ["200", "201", "202"],
    },
    "POST /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/createVersion": {
        deserializer: operations_js_16._createVersionDeserialize,
        expectedStatuses: ["202", "200"],
    },
    "DELETE /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}": {
        deserializer: operations_js_16._$deleteDeserialize,
        expectedStatuses: ["202", "204", "200"],
    },
    "PUT /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}": {
        deserializer: operations_js_16._createOrUpdateDeserialize,
        expectedStatuses: ["200", "201", "202"],
    },
    "DELETE /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas/{dynamicSchemaName}": {
        deserializer: operations_js_17._$deleteDeserialize,
        expectedStatuses: ["202", "204", "200"],
    },
    "PUT /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas/{dynamicSchemaName}": {
        deserializer: operations_js_17._createOrUpdateDeserialize,
        expectedStatuses: ["200", "201", "202"],
    },
};
function getDeserializationHelper(urlStr, method) {
    const path = new URL(urlStr).pathname;
    const pathParts = path.split("/");
    // Traverse list to match the longest candidate
    // matchedLen: the length of candidate path
    // matchedValue: the matched status code array
    let matchedLen = -1, matchedValue;
    // Iterate the responseMap to find a match
    for (const [key, value] of Object.entries(deserializeMap)) {
        // Extracting the path from the map key which is in format
        // GET /path/foo
        if (!key.startsWith(method)) {
            continue;
        }
        const candidatePath = getPathFromMapKey(key);
        // Get each part of the url path
        const candidateParts = candidatePath.split("/");
        // track if we have found a match to return the values found.
        let found = true;
        for (let i = candidateParts.length - 1, j = pathParts.length - 1; i >= 1 && j >= 1; i--, j--) {
            if (candidateParts[i]?.startsWith("{") && candidateParts[i]?.indexOf("}") !== -1) {
                const start = candidateParts[i].indexOf("}") + 1, end = candidateParts[i]?.length;
                // If the current part of the candidate is a "template" part
                // Try to use the suffix of pattern to match the path
                // {guid} ==> $
                // {guid}:export ==> :export$
                const isMatched = new RegExp(`${candidateParts[i]?.slice(start, end)}`).test(pathParts[j] || "");
                if (!isMatched) {
                    found = false;
                    break;
                }
                continue;
            }
            // If the candidate part is not a template and
            // the parts don't match mark the candidate as not found
            // to move on with the next candidate path.
            if (candidateParts[i] !== pathParts[j]) {
                found = false;
                break;
            }
        }
        // We finished evaluating the current candidate parts
        // Update the matched value if and only if we found the longer pattern
        if (found && candidatePath.length > matchedLen) {
            matchedLen = candidatePath.length;
            matchedValue = value;
        }
    }
    return matchedValue;
}
function getPathFromMapKey(mapKey) {
    const pathStart = mapKey.indexOf("/");
    return mapKey.slice(pathStart);
}
//# sourceMappingURL=restorePollerHelpers.js.map