{"version":3,"file":"operations.js","sourceRoot":"","sources":["../../../../src/api/schemaReferences/operations.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;AA0BlC,4DAwBC;AAED,0EAWC;AAGD,kDAcC;AAED,4BAwBC;AAED,0CASC;AAGD,kBAQC;AA7HD,sDAMgC;AAChC,4EAG+C;AAC/C,wEAAwE;AAKxE,yDAKiC;AAEjC,SAAgB,wBAAwB,CACtC,OAAe,EACf,WAAmB,EACnB,UAA6D;IAC3D,cAAc,EAAE,EAAE;CACnB;IAED,MAAM,IAAI,GAAG,IAAA,kCAAiB,EAC5B,2EAA2E,EAC3E;QACE,WAAW,EAAE,WAAW;QACxB,eAAe,EAAE,OAAO,CAAC,UAAU;KACpC,EACD;QACE,aAAa,EAAE,OAAO,EAAE,cAAc,EAAE,eAAe;KACxD,CACF,CAAC;IACF,OAAO,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC;QAC5B,GAAG,IAAA,iDAAmC,EAAC,OAAO,CAAC;QAC/C,OAAO,EAAE;YACP,MAAM,EAAE,kBAAkB;YAC1B,GAAG,OAAO,CAAC,cAAc,EAAE,OAAO;SACnC;KACF,CAAC,CAAC;AACL,CAAC;AAEM,KAAK,UAAU,+BAA+B,CACnD,MAA6B;IAE7B,MAAM,gBAAgB,GAAG,CAAC,KAAK,CAAC,CAAC;IACjC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC;QAC9C,MAAM,KAAK,GAAG,IAAA,6BAAe,EAAC,MAAM,CAAC,CAAC;QACtC,KAAK,CAAC,OAAO,GAAG,IAAA,qCAAyB,EAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACvD,MAAM,KAAK,CAAC;IACd,CAAC;IAED,OAAO,IAAA,kDAAsC,EAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAC7D,CAAC;AAED,uCAAuC;AACvC,SAAgB,mBAAmB,CACjC,OAAe,EACf,WAAmB,EACnB,UAA6D;IAC3D,cAAc,EAAE,EAAE;CACnB;IAED,OAAO,IAAA,0CAAuB,EAC5B,OAAO,EACP,GAAG,EAAE,CAAC,wBAAwB,CAAC,OAAO,EAAE,WAAW,EAAE,OAAO,CAAC,EAC7D,+BAA+B,EAC/B,CAAC,KAAK,CAAC,EACP,EAAE,QAAQ,EAAE,OAAO,EAAE,YAAY,EAAE,UAAU,EAAE,CAChD,CAAC;AACJ,CAAC;AAED,SAAgB,QAAQ,CACtB,OAAe,EACf,WAAmB,EACnB,mBAA2B,EAC3B,UAA6C,EAAE,cAAc,EAAE,EAAE,EAAE;IAEnE,MAAM,IAAI,GAAG,IAAA,kCAAiB,EAC5B,iGAAiG,EACjG;QACE,WAAW,EAAE,WAAW;QACxB,mBAAmB,EAAE,mBAAmB;QACxC,eAAe,EAAE,OAAO,CAAC,UAAU;KACpC,EACD;QACE,aAAa,EAAE,OAAO,EAAE,cAAc,EAAE,eAAe;KACxD,CACF,CAAC;IACF,OAAO,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC;QAC5B,GAAG,IAAA,iDAAmC,EAAC,OAAO,CAAC;QAC/C,OAAO,EAAE;YACP,MAAM,EAAE,kBAAkB;YAC1B,GAAG,OAAO,CAAC,cAAc,EAAE,OAAO;SACnC;KACF,CAAC,CAAC;AACL,CAAC;AAEM,KAAK,UAAU,eAAe,CAAC,MAA6B;IACjE,MAAM,gBAAgB,GAAG,CAAC,KAAK,CAAC,CAAC;IACjC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC;QAC9C,MAAM,KAAK,GAAG,IAAA,6BAAe,EAAC,MAAM,CAAC,CAAC;QACtC,KAAK,CAAC,OAAO,GAAG,IAAA,qCAAyB,EAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACvD,MAAM,KAAK,CAAC;IACd,CAAC;IAED,OAAO,IAAA,uCAA2B,EAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAClD,CAAC;AAED,sCAAsC;AAC/B,KAAK,UAAU,GAAG,CACvB,OAAe,EACf,WAAmB,EACnB,mBAA2B,EAC3B,UAA6C,EAAE,cAAc,EAAE,EAAE,EAAE;IAEnE,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,OAAO,EAAE,WAAW,EAAE,mBAAmB,EAAE,OAAO,CAAC,CAAC;IAClF,OAAO,eAAe,CAAC,MAAM,CAAC,CAAC;AACjC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { WorkloadOrchestrationManagementContext as Client } from \"../index.js\";\nimport {\n  errorResponseDeserializer,\n  SchemaReference,\n  schemaReferenceDeserializer,\n  _SchemaReferenceListResult,\n  _schemaReferenceListResultDeserializer,\n} from \"../../models/models.js\";\nimport {\n  PagedAsyncIterableIterator,\n  buildPagedAsyncIterator,\n} from \"../../static-helpers/pagingHelpers.js\";\nimport { expandUrlTemplate } from \"../../static-helpers/urlTemplate.js\";\nimport {\n  SchemaReferencesListByResourceGroupOptionalParams,\n  SchemaReferencesGetOptionalParams,\n} from \"./options.js\";\nimport {\n  StreamableMethod,\n  PathUncheckedResponse,\n  createRestError,\n  operationOptionsToRequestParameters,\n} from \"@azure-rest/core-client\";\n\nexport function _listByResourceGroupSend(\n  context: Client,\n  resourceUri: string,\n  options: SchemaReferencesListByResourceGroupOptionalParams = {\n    requestOptions: {},\n  },\n): StreamableMethod {\n  const path = expandUrlTemplate(\n    \"/{+resourceUri}/providers/Microsoft.Edge/schemaReferences{?api%2Dversion}\",\n    {\n      resourceUri: resourceUri,\n      \"api%2Dversion\": context.apiVersion,\n    },\n    {\n      allowReserved: options?.requestOptions?.skipUrlEncoding,\n    },\n  );\n  return context.path(path).get({\n    ...operationOptionsToRequestParameters(options),\n    headers: {\n      accept: \"application/json\",\n      ...options.requestOptions?.headers,\n    },\n  });\n}\n\nexport async function _listByResourceGroupDeserialize(\n  result: PathUncheckedResponse,\n): Promise<_SchemaReferenceListResult> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    const error = createRestError(result);\n    error.details = errorResponseDeserializer(result.body);\n    throw error;\n  }\n\n  return _schemaReferenceListResultDeserializer(result.body);\n}\n\n/** List by specified resource group */\nexport function listByResourceGroup(\n  context: Client,\n  resourceUri: string,\n  options: SchemaReferencesListByResourceGroupOptionalParams = {\n    requestOptions: {},\n  },\n): PagedAsyncIterableIterator<SchemaReference> {\n  return buildPagedAsyncIterator(\n    context,\n    () => _listByResourceGroupSend(context, resourceUri, options),\n    _listByResourceGroupDeserialize,\n    [\"200\"],\n    { itemName: \"value\", nextLinkName: \"nextLink\" },\n  );\n}\n\nexport function _getSend(\n  context: Client,\n  resourceUri: string,\n  schemaReferenceName: string,\n  options: SchemaReferencesGetOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  const path = expandUrlTemplate(\n    \"/{+resourceUri}/providers/Microsoft.Edge/schemaReferences/{schemaReferenceName}{?api%2Dversion}\",\n    {\n      resourceUri: resourceUri,\n      schemaReferenceName: schemaReferenceName,\n      \"api%2Dversion\": context.apiVersion,\n    },\n    {\n      allowReserved: options?.requestOptions?.skipUrlEncoding,\n    },\n  );\n  return context.path(path).get({\n    ...operationOptionsToRequestParameters(options),\n    headers: {\n      accept: \"application/json\",\n      ...options.requestOptions?.headers,\n    },\n  });\n}\n\nexport async function _getDeserialize(result: PathUncheckedResponse): Promise<SchemaReference> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    const error = createRestError(result);\n    error.details = errorResponseDeserializer(result.body);\n    throw error;\n  }\n\n  return schemaReferenceDeserializer(result.body);\n}\n\n/** Get a Schema Reference Resource */\nexport async function get(\n  context: Client,\n  resourceUri: string,\n  schemaReferenceName: string,\n  options: SchemaReferencesGetOptionalParams = { requestOptions: {} },\n): Promise<SchemaReference> {\n  const result = await _getSend(context, resourceUri, schemaReferenceName, options);\n  return _getDeserialize(result);\n}\n"]}