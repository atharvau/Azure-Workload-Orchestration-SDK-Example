"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", { value: true });
exports._listBySubscriptionSend = _listBySubscriptionSend;
exports._listBySubscriptionDeserialize = _listBySubscriptionDeserialize;
exports.listBySubscription = listBySubscription;
exports._listByResourceGroupSend = _listByResourceGroupSend;
exports._listByResourceGroupDeserialize = _listByResourceGroupDeserialize;
exports.listByResourceGroup = listByResourceGroup;
exports._removeVersionSend = _removeVersionSend;
exports._removeVersionDeserialize = _removeVersionDeserialize;
exports.removeVersion = removeVersion;
exports._createVersionSend = _createVersionSend;
exports._createVersionDeserialize = _createVersionDeserialize;
exports.createVersion = createVersion;
exports._$deleteSend = _$deleteSend;
exports._$deleteDeserialize = _$deleteDeserialize;
exports.$delete = $delete;
exports._updateSend = _updateSend;
exports._updateDeserialize = _updateDeserialize;
exports.update = update;
exports._createOrUpdateSend = _createOrUpdateSend;
exports._createOrUpdateDeserialize = _createOrUpdateDeserialize;
exports.createOrUpdate = createOrUpdate;
exports._getSend = _getSend;
exports._getDeserialize = _getDeserialize;
exports.get = get;
const models_js_1 = require("../../models/models.js");
const pagingHelpers_js_1 = require("../../static-helpers/pagingHelpers.js");
const pollingHelpers_js_1 = require("../../static-helpers/pollingHelpers.js");
const urlTemplate_js_1 = require("../../static-helpers/urlTemplate.js");
const core_client_1 = require("@azure-rest/core-client");
function _listBySubscriptionSend(context, options = { requestOptions: {} }) {
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/subscriptions/{subscriptionId}/providers/Microsoft.Edge/schemas{?api%2Dversion}", {
        subscriptionId: context.subscriptionId,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).get({
        ...(0, core_client_1.operationOptionsToRequestParameters)(options),
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
    });
}
async function _listBySubscriptionDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = (0, core_client_1.createRestError)(result);
        error.details = (0, models_js_1.errorResponseDeserializer)(result.body);
        throw error;
    }
    return (0, models_js_1._schemaListResultDeserializer)(result.body);
}
/** List by subscription */
function listBySubscription(context, options = { requestOptions: {} }) {
    return (0, pagingHelpers_js_1.buildPagedAsyncIterator)(context, () => _listBySubscriptionSend(context, options), _listBySubscriptionDeserialize, ["200"], { itemName: "value", nextLinkName: "nextLink" });
}
function _listByResourceGroupSend(context, resourceGroupName, options = { requestOptions: {} }) {
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas{?api%2Dversion}", {
        subscriptionId: context.subscriptionId,
        resourceGroupName: resourceGroupName,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).get({
        ...(0, core_client_1.operationOptionsToRequestParameters)(options),
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
    });
}
async function _listByResourceGroupDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = (0, core_client_1.createRestError)(result);
        error.details = (0, models_js_1.errorResponseDeserializer)(result.body);
        throw error;
    }
    return (0, models_js_1._schemaListResultDeserializer)(result.body);
}
/** List by specified resource group */
function listByResourceGroup(context, resourceGroupName, options = { requestOptions: {} }) {
    return (0, pagingHelpers_js_1.buildPagedAsyncIterator)(context, () => _listByResourceGroupSend(context, resourceGroupName, options), _listByResourceGroupDeserialize, ["200"], { itemName: "value", nextLinkName: "nextLink" });
}
function _removeVersionSend(context, resourceGroupName, schemaName, body, options = { requestOptions: {} }) {
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/removeVersion{?api%2Dversion}", {
        subscriptionId: context.subscriptionId,
        resourceGroupName: resourceGroupName,
        schemaName: schemaName,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).post({
        ...(0, core_client_1.operationOptionsToRequestParameters)(options),
        contentType: "application/json",
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
        body: (0, models_js_1.versionParameterSerializer)(body),
    });
}
async function _removeVersionDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = (0, core_client_1.createRestError)(result);
        error.details = (0, models_js_1.errorResponseDeserializer)(result.body);
        throw error;
    }
    return (0, models_js_1.removeVersionResponseDeserializer)(result.body);
}
/** Remove Schema Version Resource */
async function removeVersion(context, resourceGroupName, schemaName, body, options = { requestOptions: {} }) {
    const result = await _removeVersionSend(context, resourceGroupName, schemaName, body, options);
    return _removeVersionDeserialize(result);
}
function _createVersionSend(context, resourceGroupName, schemaName, body, options = { requestOptions: {} }) {
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/createVersion{?api%2Dversion}", {
        subscriptionId: context.subscriptionId,
        resourceGroupName: resourceGroupName,
        schemaName: schemaName,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).post({
        ...(0, core_client_1.operationOptionsToRequestParameters)(options),
        contentType: "application/json",
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
        body: (0, models_js_1.schemaVersionWithUpdateTypeSerializer)(body),
    });
}
async function _createVersionDeserialize(result) {
    const expectedStatuses = ["202", "200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = (0, core_client_1.createRestError)(result);
        error.details = (0, models_js_1.errorResponseDeserializer)(result.body);
        throw error;
    }
    return (0, models_js_1.schemaVersionDeserializer)(result.body);
}
/** Create a Schema Version Resource */
function createVersion(context, resourceGroupName, schemaName, body, options = { requestOptions: {} }) {
    return (0, pollingHelpers_js_1.getLongRunningPoller)(context, _createVersionDeserialize, ["202", "200"], {
        updateIntervalInMs: options?.updateIntervalInMs,
        abortSignal: options?.abortSignal,
        getInitialResponse: () => _createVersionSend(context, resourceGroupName, schemaName, body, options),
        resourceLocationConfig: "location",
    });
}
function _$deleteSend(context, resourceGroupName, schemaName, options = { requestOptions: {} }) {
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}{?api%2Dversion}", {
        subscriptionId: context.subscriptionId,
        resourceGroupName: resourceGroupName,
        schemaName: schemaName,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).delete({ ...(0, core_client_1.operationOptionsToRequestParameters)(options) });
}
async function _$deleteDeserialize(result) {
    const expectedStatuses = ["202", "204", "200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = (0, core_client_1.createRestError)(result);
        error.details = (0, models_js_1.errorResponseDeserializer)(result.body);
        throw error;
    }
    return;
}
/** Delete a Schema Resource */
/**
 *  @fixme delete is a reserved word that cannot be used as an operation name.
 *         Please add @clientName("clientName") or @clientName("<JS-Specific-Name>", "javascript")
 *         to the operation to override the generated name.
 */
function $delete(context, resourceGroupName, schemaName, options = { requestOptions: {} }) {
    return (0, pollingHelpers_js_1.getLongRunningPoller)(context, _$deleteDeserialize, ["202", "204", "200"], {
        updateIntervalInMs: options?.updateIntervalInMs,
        abortSignal: options?.abortSignal,
        getInitialResponse: () => _$deleteSend(context, resourceGroupName, schemaName, options),
        resourceLocationConfig: "location",
    });
}
function _updateSend(context, resourceGroupName, schemaName, properties, options = { requestOptions: {} }) {
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}{?api%2Dversion}", {
        subscriptionId: context.subscriptionId,
        resourceGroupName: resourceGroupName,
        schemaName: schemaName,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).patch({
        ...(0, core_client_1.operationOptionsToRequestParameters)(options),
        contentType: "application/json",
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
        body: (0, models_js_1.schemaUpdateSerializer)(properties),
    });
}
async function _updateDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = (0, core_client_1.createRestError)(result);
        error.details = (0, models_js_1.errorResponseDeserializer)(result.body);
        throw error;
    }
    return (0, models_js_1.schemaDeserializer)(result.body);
}
/** update a Schema Resource */
async function update(context, resourceGroupName, schemaName, properties, options = { requestOptions: {} }) {
    const result = await _updateSend(context, resourceGroupName, schemaName, properties, options);
    return _updateDeserialize(result);
}
function _createOrUpdateSend(context, resourceGroupName, schemaName, resource, options = { requestOptions: {} }) {
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}{?api%2Dversion}", {
        subscriptionId: context.subscriptionId,
        resourceGroupName: resourceGroupName,
        schemaName: schemaName,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).put({
        ...(0, core_client_1.operationOptionsToRequestParameters)(options),
        contentType: "application/json",
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
        body: (0, models_js_1.schemaSerializer)(resource),
    });
}
async function _createOrUpdateDeserialize(result) {
    const expectedStatuses = ["200", "201", "202"];
    if (!expectedStatuses.includes(result.status)) {
        const error = (0, core_client_1.createRestError)(result);
        error.details = (0, models_js_1.errorResponseDeserializer)(result.body);
        throw error;
    }
    return (0, models_js_1.schemaDeserializer)(result.body);
}
/** Create or update a Schema Resource */
function createOrUpdate(context, resourceGroupName, schemaName, resource, options = { requestOptions: {} }) {
    return (0, pollingHelpers_js_1.getLongRunningPoller)(context, _createOrUpdateDeserialize, ["200", "201", "202"], {
        updateIntervalInMs: options?.updateIntervalInMs,
        abortSignal: options?.abortSignal,
        getInitialResponse: () => _createOrUpdateSend(context, resourceGroupName, schemaName, resource, options),
        resourceLocationConfig: "azure-async-operation",
    });
}
function _getSend(context, resourceGroupName, schemaName, options = { requestOptions: {} }) {
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}{?api%2Dversion}", {
        subscriptionId: context.subscriptionId,
        resourceGroupName: resourceGroupName,
        schemaName: schemaName,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).get({
        ...(0, core_client_1.operationOptionsToRequestParameters)(options),
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
    });
}
async function _getDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = (0, core_client_1.createRestError)(result);
        error.details = (0, models_js_1.errorResponseDeserializer)(result.body);
        throw error;
    }
    return (0, models_js_1.schemaDeserializer)(result.body);
}
/** Get a Schema Resource */
async function get(context, resourceGroupName, schemaName, options = { requestOptions: {} }) {
    const result = await _getSend(context, resourceGroupName, schemaName, options);
    return _getDeserialize(result);
}
//# sourceMappingURL=operations.js.map