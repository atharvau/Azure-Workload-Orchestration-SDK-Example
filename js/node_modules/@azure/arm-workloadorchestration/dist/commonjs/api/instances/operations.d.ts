import { WorkloadOrchestrationManagementContext as Client } from "../index.js";
import { Instance, _InstanceListResult } from "../../models/models.js";
import { PagedAsyncIterableIterator } from "../../static-helpers/pagingHelpers.js";
import { InstancesListBySolutionOptionalParams, InstancesDeleteOptionalParams, InstancesUpdateOptionalParams, InstancesCreateOrUpdateOptionalParams, InstancesGetOptionalParams } from "./options.js";
import { StreamableMethod, PathUncheckedResponse } from "@azure-rest/core-client";
import { PollerLike, OperationState } from "@azure/core-lro";
export declare function _listBySolutionSend(context: Client, resourceGroupName: string, targetName: string, solutionName: string, options?: InstancesListBySolutionOptionalParams): StreamableMethod;
export declare function _listBySolutionDeserialize(result: PathUncheckedResponse): Promise<_InstanceListResult>;
/** List Instance Resources */
export declare function listBySolution(context: Client, resourceGroupName: string, targetName: string, solutionName: string, options?: InstancesListBySolutionOptionalParams): PagedAsyncIterableIterator<Instance>;
export declare function _$deleteSend(context: Client, resourceGroupName: string, targetName: string, solutionName: string, instanceName: string, options?: InstancesDeleteOptionalParams): StreamableMethod;
export declare function _$deleteDeserialize(result: PathUncheckedResponse): Promise<void>;
/** Delete Instance Resource */
/**
 *  @fixme delete is a reserved word that cannot be used as an operation name.
 *         Please add @clientName("clientName") or @clientName("<JS-Specific-Name>", "javascript")
 *         to the operation to override the generated name.
 */
export declare function $delete(context: Client, resourceGroupName: string, targetName: string, solutionName: string, instanceName: string, options?: InstancesDeleteOptionalParams): PollerLike<OperationState<void>, void>;
export declare function _updateSend(context: Client, resourceGroupName: string, targetName: string, solutionName: string, instanceName: string, properties: Instance, options?: InstancesUpdateOptionalParams): StreamableMethod;
export declare function _updateDeserialize(result: PathUncheckedResponse): Promise<Instance>;
/** Update an Instance Resource */
export declare function update(context: Client, resourceGroupName: string, targetName: string, solutionName: string, instanceName: string, properties: Instance, options?: InstancesUpdateOptionalParams): PollerLike<OperationState<Instance>, Instance>;
export declare function _createOrUpdateSend(context: Client, resourceGroupName: string, targetName: string, solutionName: string, instanceName: string, resource: Instance, options?: InstancesCreateOrUpdateOptionalParams): StreamableMethod;
export declare function _createOrUpdateDeserialize(result: PathUncheckedResponse): Promise<Instance>;
/** Create or update Instance Resource */
export declare function createOrUpdate(context: Client, resourceGroupName: string, targetName: string, solutionName: string, instanceName: string, resource: Instance, options?: InstancesCreateOrUpdateOptionalParams): PollerLike<OperationState<Instance>, Instance>;
export declare function _getSend(context: Client, resourceGroupName: string, targetName: string, solutionName: string, instanceName: string, options?: InstancesGetOptionalParams): StreamableMethod;
export declare function _getDeserialize(result: PathUncheckedResponse): Promise<Instance>;
/** Get Instance Resource */
export declare function get(context: Client, resourceGroupName: string, targetName: string, solutionName: string, instanceName: string, options?: InstancesGetOptionalParams): Promise<Instance>;
//# sourceMappingURL=operations.d.ts.map