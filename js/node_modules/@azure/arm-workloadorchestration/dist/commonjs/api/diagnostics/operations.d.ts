import { WorkloadOrchestrationManagementContext as Client } from "../index.js";
import { Diagnostic, DiagnosticUpdate, _DiagnosticListResult } from "../../models/models.js";
import { PagedAsyncIterableIterator } from "../../static-helpers/pagingHelpers.js";
import { DiagnosticsListBySubscriptionOptionalParams, DiagnosticsListByResourceGroupOptionalParams, DiagnosticsDeleteOptionalParams, DiagnosticsUpdateOptionalParams, DiagnosticsCreateOrUpdateOptionalParams, DiagnosticsGetOptionalParams } from "./options.js";
import { StreamableMethod, PathUncheckedResponse } from "@azure-rest/core-client";
import { PollerLike, OperationState } from "@azure/core-lro";
export declare function _listBySubscriptionSend(context: Client, options?: DiagnosticsListBySubscriptionOptionalParams): StreamableMethod;
export declare function _listBySubscriptionDeserialize(result: PathUncheckedResponse): Promise<_DiagnosticListResult>;
/** Lists Diagnostics resources within an Azure subscription. */
export declare function listBySubscription(context: Client, options?: DiagnosticsListBySubscriptionOptionalParams): PagedAsyncIterableIterator<Diagnostic>;
export declare function _listByResourceGroupSend(context: Client, resourceGroupName: string, options?: DiagnosticsListByResourceGroupOptionalParams): StreamableMethod;
export declare function _listByResourceGroupDeserialize(result: PathUncheckedResponse): Promise<_DiagnosticListResult>;
/** Returns a collection of Diagnostic resources within the resource group. */
export declare function listByResourceGroup(context: Client, resourceGroupName: string, options?: DiagnosticsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<Diagnostic>;
export declare function _$deleteSend(context: Client, resourceGroupName: string, diagnosticName: string, options?: DiagnosticsDeleteOptionalParams): StreamableMethod;
export declare function _$deleteDeserialize(result: PathUncheckedResponse): Promise<void>;
/** Deletes specified Diagnostic resource. */
/**
 *  @fixme delete is a reserved word that cannot be used as an operation name.
 *         Please add @clientName("clientName") or @clientName("<JS-Specific-Name>", "javascript")
 *         to the operation to override the generated name.
 */
export declare function $delete(context: Client, resourceGroupName: string, diagnosticName: string, options?: DiagnosticsDeleteOptionalParams): PollerLike<OperationState<void>, void>;
export declare function _updateSend(context: Client, resourceGroupName: string, diagnosticName: string, properties: DiagnosticUpdate, options?: DiagnosticsUpdateOptionalParams): StreamableMethod;
export declare function _updateDeserialize(result: PathUncheckedResponse): Promise<Diagnostic>;
/** Updates existing Diagnostic resource. */
export declare function update(context: Client, resourceGroupName: string, diagnosticName: string, properties: DiagnosticUpdate, options?: DiagnosticsUpdateOptionalParams): PollerLike<OperationState<Diagnostic>, Diagnostic>;
export declare function _createOrUpdateSend(context: Client, resourceGroupName: string, diagnosticName: string, resource: Diagnostic, options?: DiagnosticsCreateOrUpdateOptionalParams): StreamableMethod;
export declare function _createOrUpdateDeserialize(result: PathUncheckedResponse): Promise<Diagnostic>;
/** Creates new or updates existing Diagnostic resource. */
export declare function createOrUpdate(context: Client, resourceGroupName: string, diagnosticName: string, resource: Diagnostic, options?: DiagnosticsCreateOrUpdateOptionalParams): PollerLike<OperationState<Diagnostic>, Diagnostic>;
export declare function _getSend(context: Client, resourceGroupName: string, diagnosticName: string, options?: DiagnosticsGetOptionalParams): StreamableMethod;
export declare function _getDeserialize(result: PathUncheckedResponse): Promise<Diagnostic>;
/** Returns details of specified Diagnostic resource. */
export declare function get(context: Client, resourceGroupName: string, diagnosticName: string, options?: DiagnosticsGetOptionalParams): Promise<Diagnostic>;
//# sourceMappingURL=operations.d.ts.map