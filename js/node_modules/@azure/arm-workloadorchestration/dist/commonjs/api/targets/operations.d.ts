import { WorkloadOrchestrationManagementContext as Client } from "../index.js";
import { SolutionVersion, InstallSolutionParameter, Target, TargetUpdate, _TargetListResult, UninstallSolutionParameter, RemoveRevisionParameter, SolutionTemplateParameter, ResolvedConfiguration, SolutionVersionParameter, UpdateExternalValidationStatusParameter } from "../../models/models.js";
import { PagedAsyncIterableIterator } from "../../static-helpers/pagingHelpers.js";
import { TargetsUpdateExternalValidationStatusOptionalParams, TargetsPublishSolutionVersionOptionalParams, TargetsReviewSolutionVersionOptionalParams, TargetsResolveConfigurationOptionalParams, TargetsRemoveRevisionOptionalParams, TargetsUninstallSolutionOptionalParams, TargetsInstallSolutionOptionalParams, TargetsListBySubscriptionOptionalParams, TargetsListByResourceGroupOptionalParams, TargetsDeleteOptionalParams, TargetsUpdateOptionalParams, TargetsCreateOrUpdateOptionalParams, TargetsGetOptionalParams } from "./options.js";
import { StreamableMethod, PathUncheckedResponse } from "@azure-rest/core-client";
import { PollerLike, OperationState } from "@azure/core-lro";
export declare function _updateExternalValidationStatusSend(context: Client, resourceGroupName: string, targetName: string, body: UpdateExternalValidationStatusParameter, options?: TargetsUpdateExternalValidationStatusOptionalParams): StreamableMethod;
export declare function _updateExternalValidationStatusDeserialize(result: PathUncheckedResponse): Promise<SolutionVersion>;
/** Post request to update external validation status */
export declare function updateExternalValidationStatus(context: Client, resourceGroupName: string, targetName: string, body: UpdateExternalValidationStatusParameter, options?: TargetsUpdateExternalValidationStatusOptionalParams): PollerLike<OperationState<SolutionVersion>, SolutionVersion>;
export declare function _publishSolutionVersionSend(context: Client, resourceGroupName: string, targetName: string, body: SolutionVersionParameter, options?: TargetsPublishSolutionVersionOptionalParams): StreamableMethod;
export declare function _publishSolutionVersionDeserialize(result: PathUncheckedResponse): Promise<SolutionVersion>;
/** Post request to publish */
export declare function publishSolutionVersion(context: Client, resourceGroupName: string, targetName: string, body: SolutionVersionParameter, options?: TargetsPublishSolutionVersionOptionalParams): PollerLike<OperationState<SolutionVersion>, SolutionVersion>;
export declare function _reviewSolutionVersionSend(context: Client, resourceGroupName: string, targetName: string, body: SolutionTemplateParameter, options?: TargetsReviewSolutionVersionOptionalParams): StreamableMethod;
export declare function _reviewSolutionVersionDeserialize(result: PathUncheckedResponse): Promise<SolutionVersion>;
/** Post request to review configuration */
export declare function reviewSolutionVersion(context: Client, resourceGroupName: string, targetName: string, body: SolutionTemplateParameter, options?: TargetsReviewSolutionVersionOptionalParams): PollerLike<OperationState<SolutionVersion>, SolutionVersion>;
export declare function _resolveConfigurationSend(context: Client, resourceGroupName: string, targetName: string, body: SolutionTemplateParameter, options?: TargetsResolveConfigurationOptionalParams): StreamableMethod;
export declare function _resolveConfigurationDeserialize(result: PathUncheckedResponse): Promise<ResolvedConfiguration>;
/** Post request to resolve configuration */
export declare function resolveConfiguration(context: Client, resourceGroupName: string, targetName: string, body: SolutionTemplateParameter, options?: TargetsResolveConfigurationOptionalParams): PollerLike<OperationState<ResolvedConfiguration>, ResolvedConfiguration>;
export declare function _removeRevisionSend(context: Client, resourceGroupName: string, targetName: string, body: RemoveRevisionParameter, options?: TargetsRemoveRevisionOptionalParams): StreamableMethod;
export declare function _removeRevisionDeserialize(result: PathUncheckedResponse): Promise<void>;
/** Post request to remove solution version revision */
export declare function removeRevision(context: Client, resourceGroupName: string, targetName: string, body: RemoveRevisionParameter, options?: TargetsRemoveRevisionOptionalParams): PollerLike<OperationState<void>, void>;
export declare function _uninstallSolutionSend(context: Client, resourceGroupName: string, targetName: string, body: UninstallSolutionParameter, options?: TargetsUninstallSolutionOptionalParams): StreamableMethod;
export declare function _uninstallSolutionDeserialize(result: PathUncheckedResponse): Promise<void>;
/** Post request to uninstall */
export declare function uninstallSolution(context: Client, resourceGroupName: string, targetName: string, body: UninstallSolutionParameter, options?: TargetsUninstallSolutionOptionalParams): PollerLike<OperationState<void>, void>;
export declare function _installSolutionSend(context: Client, resourceGroupName: string, targetName: string, body: InstallSolutionParameter, options?: TargetsInstallSolutionOptionalParams): StreamableMethod;
export declare function _installSolutionDeserialize(result: PathUncheckedResponse): Promise<void>;
/** Post request to deploy */
export declare function installSolution(context: Client, resourceGroupName: string, targetName: string, body: InstallSolutionParameter, options?: TargetsInstallSolutionOptionalParams): PollerLike<OperationState<void>, void>;
export declare function _listBySubscriptionSend(context: Client, options?: TargetsListBySubscriptionOptionalParams): StreamableMethod;
export declare function _listBySubscriptionDeserialize(result: PathUncheckedResponse): Promise<_TargetListResult>;
/** List by subscription */
export declare function listBySubscription(context: Client, options?: TargetsListBySubscriptionOptionalParams): PagedAsyncIterableIterator<Target>;
export declare function _listByResourceGroupSend(context: Client, resourceGroupName: string, options?: TargetsListByResourceGroupOptionalParams): StreamableMethod;
export declare function _listByResourceGroupDeserialize(result: PathUncheckedResponse): Promise<_TargetListResult>;
/** List by specified resource group */
export declare function listByResourceGroup(context: Client, resourceGroupName: string, options?: TargetsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<Target>;
export declare function _$deleteSend(context: Client, resourceGroupName: string, targetName: string, options?: TargetsDeleteOptionalParams): StreamableMethod;
export declare function _$deleteDeserialize(result: PathUncheckedResponse): Promise<void>;
/** Delete a Target Resource */
/**
 *  @fixme delete is a reserved word that cannot be used as an operation name.
 *         Please add @clientName("clientName") or @clientName("<JS-Specific-Name>", "javascript")
 *         to the operation to override the generated name.
 */
export declare function $delete(context: Client, resourceGroupName: string, targetName: string, options?: TargetsDeleteOptionalParams): PollerLike<OperationState<void>, void>;
export declare function _updateSend(context: Client, resourceGroupName: string, targetName: string, properties: TargetUpdate, options?: TargetsUpdateOptionalParams): StreamableMethod;
export declare function _updateDeserialize(result: PathUncheckedResponse): Promise<Target>;
/** update a Target Resource */
export declare function update(context: Client, resourceGroupName: string, targetName: string, properties: TargetUpdate, options?: TargetsUpdateOptionalParams): PollerLike<OperationState<Target>, Target>;
export declare function _createOrUpdateSend(context: Client, resourceGroupName: string, targetName: string, resource: Target, options?: TargetsCreateOrUpdateOptionalParams): StreamableMethod;
export declare function _createOrUpdateDeserialize(result: PathUncheckedResponse): Promise<Target>;
/** Create or update a Target Resource */
export declare function createOrUpdate(context: Client, resourceGroupName: string, targetName: string, resource: Target, options?: TargetsCreateOrUpdateOptionalParams): PollerLike<OperationState<Target>, Target>;
export declare function _getSend(context: Client, resourceGroupName: string, targetName: string, options?: TargetsGetOptionalParams): StreamableMethod;
export declare function _getDeserialize(result: PathUncheckedResponse): Promise<Target>;
/** Get a Target Resource */
export declare function get(context: Client, resourceGroupName: string, targetName: string, options?: TargetsGetOptionalParams): Promise<Target>;
//# sourceMappingURL=operations.d.ts.map