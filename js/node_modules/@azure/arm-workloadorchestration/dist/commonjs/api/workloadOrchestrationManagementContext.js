"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.createWorkloadOrchestrationManagement = createWorkloadOrchestrationManagement;
const logger_js_1 = require("../logger.js");
const cloudSettingHelpers_js_1 = require("../static-helpers/cloudSettingHelpers.js");
const core_client_1 = require("@azure-rest/core-client");
/** Microsoft.Edge Resource Provider management API. */
function createWorkloadOrchestrationManagement(credential, subscriptionId, options = {}) {
    const endpointUrl = options.endpoint ?? (0, cloudSettingHelpers_js_1.getArmEndpoint)(options.cloudSetting) ?? "https://management.azure.com";
    const prefixFromOptions = options?.userAgentOptions?.userAgentPrefix;
    const userAgentInfo = `azsdk-js-arm-workloadorchestration/1.0.0-beta.1`;
    const userAgentPrefix = prefixFromOptions
        ? `${prefixFromOptions} azsdk-js-api ${userAgentInfo}`
        : `azsdk-js-api ${userAgentInfo}`;
    const { apiVersion: _, ...updatedOptions } = {
        ...options,
        userAgentOptions: { userAgentPrefix },
        loggingOptions: { logger: options.loggingOptions?.logger ?? logger_js_1.logger.info },
        credentials: {
            scopes: options.credentials?.scopes ?? [`${endpointUrl}/.default`],
        },
    };
    const clientContext = (0, core_client_1.getClient)(endpointUrl, credential, updatedOptions);
    clientContext.pipeline.removePolicy({ name: "ApiVersionPolicy" });
    const apiVersion = options.apiVersion ?? "2025-06-01";
    clientContext.pipeline.addPolicy({
        name: "ClientApiVersionPolicy",
        sendRequest: (req, next) => {
            // Use the apiVersion defined in request url directly
            // Append one if there is no apiVersion and we have one at client options
            const url = new URL(req.url);
            if (!url.searchParams.get("api-version")) {
                req.url = `${req.url}${Array.from(url.searchParams.keys()).length > 0 ? "&" : "?"}api-version=${apiVersion}`;
            }
            return next(req);
        },
    });
    return {
        ...clientContext,
        apiVersion,
        subscriptionId,
    };
}
//# sourceMappingURL=workloadOrchestrationManagementContext.js.map