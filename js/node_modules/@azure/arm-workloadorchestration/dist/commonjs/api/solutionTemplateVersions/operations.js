"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", { value: true });
exports._bulkPublishSolutionSend = _bulkPublishSolutionSend;
exports._bulkPublishSolutionDeserialize = _bulkPublishSolutionDeserialize;
exports.bulkPublishSolution = bulkPublishSolution;
exports._bulkDeploySolutionSend = _bulkDeploySolutionSend;
exports._bulkDeploySolutionDeserialize = _bulkDeploySolutionDeserialize;
exports.bulkDeploySolution = bulkDeploySolution;
exports._listBySolutionTemplateSend = _listBySolutionTemplateSend;
exports._listBySolutionTemplateDeserialize = _listBySolutionTemplateDeserialize;
exports.listBySolutionTemplate = listBySolutionTemplate;
exports._getSend = _getSend;
exports._getDeserialize = _getDeserialize;
exports.get = get;
const models_js_1 = require("../../models/models.js");
const pagingHelpers_js_1 = require("../../static-helpers/pagingHelpers.js");
const pollingHelpers_js_1 = require("../../static-helpers/pollingHelpers.js");
const urlTemplate_js_1 = require("../../static-helpers/urlTemplate.js");
const core_client_1 = require("@azure-rest/core-client");
function _bulkPublishSolutionSend(context, resourceGroupName, solutionTemplateName, solutionTemplateVersionName, body, options = {
    requestOptions: {},
}) {
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}/versions/{solutionTemplateVersionName}/bulkPublishSolution{?api%2Dversion}", {
        subscriptionId: context.subscriptionId,
        resourceGroupName: resourceGroupName,
        solutionTemplateName: solutionTemplateName,
        solutionTemplateVersionName: solutionTemplateVersionName,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).post({
        ...(0, core_client_1.operationOptionsToRequestParameters)(options),
        contentType: "application/json",
        body: (0, models_js_1.bulkPublishSolutionParameterSerializer)(body),
    });
}
async function _bulkPublishSolutionDeserialize(result) {
    const expectedStatuses = ["202", "200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = (0, core_client_1.createRestError)(result);
        error.details = (0, models_js_1.errorResponseDeserializer)(result.body);
        throw error;
    }
    return;
}
/** Post request for bulk publish */
function bulkPublishSolution(context, resourceGroupName, solutionTemplateName, solutionTemplateVersionName, body, options = {
    requestOptions: {},
}) {
    return (0, pollingHelpers_js_1.getLongRunningPoller)(context, _bulkPublishSolutionDeserialize, ["202", "200"], {
        updateIntervalInMs: options?.updateIntervalInMs,
        abortSignal: options?.abortSignal,
        getInitialResponse: () => _bulkPublishSolutionSend(context, resourceGroupName, solutionTemplateName, solutionTemplateVersionName, body, options),
        resourceLocationConfig: "location",
    });
}
function _bulkDeploySolutionSend(context, resourceGroupName, solutionTemplateName, solutionTemplateVersionName, body, options = {
    requestOptions: {},
}) {
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}/versions/{solutionTemplateVersionName}/bulkDeploySolution{?api%2Dversion}", {
        subscriptionId: context.subscriptionId,
        resourceGroupName: resourceGroupName,
        solutionTemplateName: solutionTemplateName,
        solutionTemplateVersionName: solutionTemplateVersionName,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).post({
        ...(0, core_client_1.operationOptionsToRequestParameters)(options),
        contentType: "application/json",
        body: (0, models_js_1.bulkDeploySolutionParameterSerializer)(body),
    });
}
async function _bulkDeploySolutionDeserialize(result) {
    const expectedStatuses = ["202", "200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = (0, core_client_1.createRestError)(result);
        error.details = (0, models_js_1.errorResponseDeserializer)(result.body);
        throw error;
    }
    return;
}
/** Post request for bulk deploy */
function bulkDeploySolution(context, resourceGroupName, solutionTemplateName, solutionTemplateVersionName, body, options = {
    requestOptions: {},
}) {
    return (0, pollingHelpers_js_1.getLongRunningPoller)(context, _bulkDeploySolutionDeserialize, ["202", "200"], {
        updateIntervalInMs: options?.updateIntervalInMs,
        abortSignal: options?.abortSignal,
        getInitialResponse: () => _bulkDeploySolutionSend(context, resourceGroupName, solutionTemplateName, solutionTemplateVersionName, body, options),
        resourceLocationConfig: "location",
    });
}
function _listBySolutionTemplateSend(context, resourceGroupName, solutionTemplateName, options = {
    requestOptions: {},
}) {
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}/versions{?api%2Dversion}", {
        subscriptionId: context.subscriptionId,
        resourceGroupName: resourceGroupName,
        solutionTemplateName: solutionTemplateName,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).get({
        ...(0, core_client_1.operationOptionsToRequestParameters)(options),
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
    });
}
async function _listBySolutionTemplateDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = (0, core_client_1.createRestError)(result);
        error.details = (0, models_js_1.errorResponseDeserializer)(result.body);
        throw error;
    }
    return (0, models_js_1._solutionTemplateVersionListResultDeserializer)(result.body);
}
/** List Solution Template Version Resources */
function listBySolutionTemplate(context, resourceGroupName, solutionTemplateName, options = {
    requestOptions: {},
}) {
    return (0, pagingHelpers_js_1.buildPagedAsyncIterator)(context, () => _listBySolutionTemplateSend(context, resourceGroupName, solutionTemplateName, options), _listBySolutionTemplateDeserialize, ["200"], { itemName: "value", nextLinkName: "nextLink" });
}
function _getSend(context, resourceGroupName, solutionTemplateName, solutionTemplateVersionName, options = { requestOptions: {} }) {
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}/versions/{solutionTemplateVersionName}{?api%2Dversion}", {
        subscriptionId: context.subscriptionId,
        resourceGroupName: resourceGroupName,
        solutionTemplateName: solutionTemplateName,
        solutionTemplateVersionName: solutionTemplateVersionName,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).get({
        ...(0, core_client_1.operationOptionsToRequestParameters)(options),
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
    });
}
async function _getDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = (0, core_client_1.createRestError)(result);
        error.details = (0, models_js_1.errorResponseDeserializer)(result.body);
        throw error;
    }
    return (0, models_js_1.solutionTemplateVersionDeserializer)(result.body);
}
/** Get a Solution Template Version Resource */
async function get(context, resourceGroupName, solutionTemplateName, solutionTemplateVersionName, options = { requestOptions: {} }) {
    const result = await _getSend(context, resourceGroupName, solutionTemplateName, solutionTemplateVersionName, options);
    return _getDeserialize(result);
}
//# sourceMappingURL=operations.js.map