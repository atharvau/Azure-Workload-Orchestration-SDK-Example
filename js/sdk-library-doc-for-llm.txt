================================================
FILE: sdk/workloadorchestration/ci.mgmt.yml
================================================
# NOTE: Please refer to https://aka.ms/azsdk/engsys/ci-yaml before editing this file.

trigger:
  branches:
    include:
      - main
      - feature/*
      - release/*
      - hotfix/*
    exclude:
      - feature/v4
  paths:
    include:
      - sdk/workloadorchestration/arm-workloadorchestration
      - sdk/workloadorchestration/ci.mgmt.yml
pr:
  branches:
    include:
      - main
      - feature/*
      - release/*
      - hotfix/*
    exclude:
      - feature/v4
  paths:
    include:
      - sdk/workloadorchestration/arm-workloadorchestration
      - sdk/workloadorchestration/ci.mgmt.yml
extends:
  template: /eng/pipelines/templates/stages/archetype-sdk-client.yml
  parameters:
    ServiceDirectory: workloadorchestration
    Artifacts:
      - name: azure-arm-workloadorchestration
        safeName: azurearmworkloadorchestration



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/README.md
================================================
# Azure WorkloadOrchestrationManagement client library for JavaScript

This package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure WorkloadOrchestrationManagement client.

Microsoft.Edge Resource Provider management API.

Key links:

- [Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/workloadorchestration/arm-workloadorchestration)
- [Package (NPM)](https://www.npmjs.com/package/@azure/arm-workloadorchestration)
- [API reference documentation](https://learn.microsoft.com/javascript/api/@azure/arm-workloadorchestration?view=azure-node-preview)
- [Samples](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/workloadorchestration/arm-workloadorchestration/samples)

## Getting started

### Currently supported environments

- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)
- Latest versions of Safari, Chrome, Edge and Firefox.

See our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.

### Prerequisites

- An [Azure subscription][azure_sub].

### Install the `@azure/arm-workloadorchestration` package

Install the Azure WorkloadOrchestrationManagement client library for JavaScript with `npm`:

```bash
npm install @azure/arm-workloadorchestration
```

### Create and authenticate a `WorkloadOrchestrationManagementClient`

To create a client object to access the Azure WorkloadOrchestrationManagement API, you will need the `endpoint` of your Azure WorkloadOrchestrationManagement resource and a `credential`. The Azure WorkloadOrchestrationManagement client can use Azure Active Directory credentials to authenticate.
You can find the endpoint for your Azure WorkloadOrchestrationManagement resource in the [Azure Portal][azure_portal].

You can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).

To use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:

```bash
npm install @azure/identity
```

You will also need to **register a new AAD application and grant access to Azure WorkloadOrchestrationManagement** by assigning the suitable role to your service principal (note: roles such as `"Owner"` will not grant the necessary permissions).

For more information about how to create an Azure AD Application check out [this guide](https://learn.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).

Using Node.js and Node-like environments, you can use the `DefaultAzureCredential` class to authenticate the client.

```ts snippet:ReadmeSampleCreateClient_Node
import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

const subscriptionId = "00000000-0000-0000-0000-000000000000";
const client = new WorkloadOrchestrationManagementClient(
  new DefaultAzureCredential(),
  subscriptionId,
);
```

For browser environments, use the `InteractiveBrowserCredential` from the `@azure/identity` package to authenticate.

```ts snippet:ReadmeSampleCreateClient_Browser
import { InteractiveBrowserCredential } from "@azure/identity";
import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";

const credential = new InteractiveBrowserCredential({
  tenantId: "<YOUR_TENANT_ID>",
  clientId: "<YOUR_CLIENT_ID>",
});
const subscriptionId = "00000000-0000-0000-0000-000000000000";
const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
```


### JavaScript Bundle
To use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).

## Key concepts

### WorkloadOrchestrationManagementClient

`WorkloadOrchestrationManagementClient` is the primary interface for developers using the Azure WorkloadOrchestrationManagement client library. Explore the methods on this client object to understand the different features of the Azure WorkloadOrchestrationManagement service that you can access.

## Troubleshooting

### Logging

Enabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:

```ts snippet:SetLogLevel
import { setLogLevel } from "@azure/logger";

setLogLevel("info");
```

For more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).

## Next steps

Please take a look at the [samples](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/workloadorchestration/arm-workloadorchestration/samples) directory for detailed examples on how to use this library.

## Contributing

If you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.

## Related projects

- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)

[azure_sub]: https://azure.microsoft.com/free/
[azure_portal]: https://portal.azure.com
[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity
[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/api-extractor.json
================================================
{ "extends": "../../../api-extractor-base.json" }



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/assets.json
================================================
{
  "AssetsRepo": "Azure/azure-sdk-assets",
  "AssetsRepoPrefixPath": "js",
  "TagPrefix": "js/workloadorchestration/arm-workloadorchestration",
  "Tag": "js/workloadorchestration/arm-workloadorchestration_5e4e692a04"
}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/CHANGELOG.md
================================================
# Release History

## 1.0.0-beta.1 (2025-09-02)

### Features Added

This is the first stable version with the package of @azure/arm-workloadorchestration



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/eslint.config.mjs
================================================
import azsdkEslint from "@azure/eslint-plugin-azure-sdk";

export default azsdkEslint.config([
  {
    rules: {
      "@azure/azure-sdk/ts-modules-only-named": "warn",
      "@azure/azure-sdk/ts-package-json-types": "warn",
      "@azure/azure-sdk/ts-package-json-engine-is-present": "warn",
      "@azure/azure-sdk/ts-package-json-files-required": "off",
      "@azure/azure-sdk/ts-package-json-main-is-cjs": "off",
      "tsdoc/syntax": "warn",
    },
  },
]);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/LICENSE
================================================
Copyright (c) Microsoft Corporation.

MIT License

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/metadata.json
================================================
{
  "apiVersion": "2025-06-01",
  "emitterVersion": "0.43.0"
}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/package.json
================================================
{
  "name": "@azure/arm-workloadorchestration",
  "version": "1.0.0-beta.1",
  "description": "A generated SDK for WorkloadOrchestrationManagementClient.",
  "engines": {
    "node": ">=20.0.0"
  },
  "sideEffects": false,
  "autoPublish": false,
  "tshy": {
    "exports": {
      "./package.json": "./package.json",
      ".": "./src/index.ts",
      "./api": "./src/api/index.ts",
      "./api/siteReferences": "./src/api/siteReferences/index.ts",
      "./api/contexts": "./src/api/contexts/index.ts",
      "./api/diagnostics": "./src/api/diagnostics/index.ts",
      "./api/executions": "./src/api/executions/index.ts",
      "./api/workflowVersions": "./src/api/workflowVersions/index.ts",
      "./api/workflows": "./src/api/workflows/index.ts",
      "./api/configTemplateVersions": "./src/api/configTemplateVersions/index.ts",
      "./api/configTemplates": "./src/api/configTemplates/index.ts",
      "./api/instanceHistories": "./src/api/instanceHistories/index.ts",
      "./api/instances": "./src/api/instances/index.ts",
      "./api/solutionTemplates": "./src/api/solutionTemplates/index.ts",
      "./api/solutionTemplateVersions": "./src/api/solutionTemplateVersions/index.ts",
      "./api/solutions": "./src/api/solutions/index.ts",
      "./api/schemaReferences": "./src/api/schemaReferences/index.ts",
      "./api/dynamicSchemaVersions": "./src/api/dynamicSchemaVersions/index.ts",
      "./api/targets": "./src/api/targets/index.ts",
      "./api/jobs": "./src/api/jobs/index.ts",
      "./api/solutionVersions": "./src/api/solutionVersions/index.ts",
      "./api/schemaVersions": "./src/api/schemaVersions/index.ts",
      "./api/schemas": "./src/api/schemas/index.ts",
      "./api/dynamicSchemas": "./src/api/dynamicSchemas/index.ts",
      "./models": "./src/models/index.ts"
    },
    "dialects": [
      "esm",
      "commonjs"
    ],
    "esmDialects": [
      "browser",
      "react-native"
    ],
    "selfLink": false,
    "project": "../../../tsconfig.src.build.json"
  },
  "type": "module",
  "browser": "./dist/browser/index.js",
  "react-native": "./dist/react-native/index.js",
  "keywords": [
    "node",
    "azure",
    "cloud",
    "typescript",
    "browser",
    "isomorphic"
  ],
  "author": "Microsoft Corporation",
  "license": "MIT",
  "files": [
    "dist/",
    "!dist/**/*.d.*ts.map",
    "README.md",
    "LICENSE"
  ],
  "sdk-type": "mgmt",
  "repository": "github:Azure/azure-sdk-for-js",
  "bugs": {
    "url": "https://github.com/Azure/azure-sdk-for-js/issues"
  },
  "homepage": "https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/workloadorchestration/arm-workloadorchestration/README.md",
  "prettier": "@azure/eslint-plugin-azure-sdk/prettier.json",
  "//metadata": {
    "constantPaths": [
      {
        "path": "src/api/workloadOrchestrationManagementContext.ts",
        "prefix": "userAgentInfo"
      }
    ]
  },
  "dependencies": {
    "@azure/core-util": "^1.12.0",
    "@azure-rest/core-client": "^2.3.1",
    "@azure/abort-controller": "^2.1.2",
    "@azure/core-auth": "^1.9.0",
    "@azure/core-lro": "^3.1.0",
    "@azure/core-rest-pipeline": "^1.20.0",
    "@azure/logger": "^1.2.0",
    "tslib": "^2.8.1"
  },
  "devDependencies": {
    "@azure-tools/test-credential": "^2.0.0",
    "@azure-tools/test-recorder": "^4.1.0",
    "@azure-tools/test-utils-vitest": "^1.0.0",
    "@azure/dev-tool": "^1.0.0",
    "@azure/eslint-plugin-azure-sdk": "^3.0.0",
    "@azure/identity": "^4.9.0",
    "@types/node": "^20.0.0",
    "eslint": "^9.9.0",
    "@vitest/browser": "^3.0.9",
    "@vitest/coverage-istanbul": "^3.0.9",
    "dotenv": "^16.0.0",
    "playwright": "^1.52.0",
    "typescript": "~5.8.2",
    "vitest": "^3.0.9"
  },
  "scripts": {
    "clean": "dev-tool run vendored rimraf --glob dist dist-browser dist-esm test-dist temp types *.tgz *.log",
    "extract-api": "dev-tool run vendored rimraf review && dev-tool run extract-api",
    "pack": "npm pack 2>&1",
    "lint": "echo skipped",
    "lint:fix": "echo skipped",
    "build:samples": "tsc -p tsconfig.samples.json",
    "check-format": "dev-tool run vendored prettier --list-different --config ../../../.prettierrc.json --ignore-path ../../../.prettierignore \"src/**/*.{ts,cts,mts}\" \"test/**/*.{ts,cts,mts}\" \"*.{js,cjs,mjs,json}\" \"samples-dev/*.ts\"",
    "execute:samples": "dev-tool samples run samples-dev",
    "format": "dev-tool run vendored prettier --write --config ../../../.prettierrc.json --ignore-path ../../../.prettierignore \"src/**/*.{ts,cts,mts}\" \"test/**/*.{ts,cts,mts}\" \"*.{js,cjs,mjs,json}\" \"samples-dev/*.ts\"",
    "generate:client": "echo skipped",
    "test:browser": "dev-tool run build-test && dev-tool run test:vitest --browser",
    "build": "npm run clean && dev-tool run build-package && dev-tool run extract-api",
    "test:node": "dev-tool run test:vitest",
    "test:node:esm": "dev-tool run test:vitest --esm",
    "test": "npm run test:node && npm run test:browser",
    "update-snippets": "dev-tool run update-snippets"
  },
  "//sampleConfiguration": {
    "productName": "@azure/arm-workloadorchestration",
    "productSlugs": [
      "azure"
    ],
    "disableDocsMs": true,
    "apiRefLink": "https://learn.microsoft.com/javascript/api/@azure/arm-workloadorchestration?view=azure-node-preview"
  },
  "exports": {
    "./package.json": "./package.json",
    ".": {
      "browser": {
        "types": "./dist/browser/index.d.ts",
        "default": "./dist/browser/index.js"
      },
      "react-native": {
        "types": "./dist/react-native/index.d.ts",
        "default": "./dist/react-native/index.js"
      },
      "import": {
        "types": "./dist/esm/index.d.ts",
        "default": "./dist/esm/index.js"
      },
      "require": {
        "types": "./dist/commonjs/index.d.ts",
        "default": "./dist/commonjs/index.js"
      }
    },
    "./api": {
      "browser": {
        "types": "./dist/browser/api/index.d.ts",
        "default": "./dist/browser/api/index.js"
      },
      "react-native": {
        "types": "./dist/react-native/api/index.d.ts",
        "default": "./dist/react-native/api/index.js"
      },
      "import": {
        "types": "./dist/esm/api/index.d.ts",
        "default": "./dist/esm/api/index.js"
      },
      "require": {
        "types": "./dist/commonjs/api/index.d.ts",
        "default": "./dist/commonjs/api/index.js"
      }
    },
    "./api/siteReferences": {
      "browser": {
        "types": "./dist/browser/api/siteReferences/index.d.ts",
        "default": "./dist/browser/api/siteReferences/index.js"
      },
      "react-native": {
        "types": "./dist/react-native/api/siteReferences/index.d.ts",
        "default": "./dist/react-native/api/siteReferences/index.js"
      },
      "import": {
        "types": "./dist/esm/api/siteReferences/index.d.ts",
        "default": "./dist/esm/api/siteReferences/index.js"
      },
      "require": {
        "types": "./dist/commonjs/api/siteReferences/index.d.ts",
        "default": "./dist/commonjs/api/siteReferences/index.js"
      }
    },
    "./api/contexts": {
      "browser": {
        "types": "./dist/browser/api/contexts/index.d.ts",
        "default": "./dist/browser/api/contexts/index.js"
      },
      "react-native": {
        "types": "./dist/react-native/api/contexts/index.d.ts",
        "default": "./dist/react-native/api/contexts/index.js"
      },
      "import": {
        "types": "./dist/esm/api/contexts/index.d.ts",
        "default": "./dist/esm/api/contexts/index.js"
      },
      "require": {
        "types": "./dist/commonjs/api/contexts/index.d.ts",
        "default": "./dist/commonjs/api/contexts/index.js"
      }
    },
    "./api/diagnostics": {
      "browser": {
        "types": "./dist/browser/api/diagnostics/index.d.ts",
        "default": "./dist/browser/api/diagnostics/index.js"
      },
      "react-native": {
        "types": "./dist/react-native/api/diagnostics/index.d.ts",
        "default": "./dist/react-native/api/diagnostics/index.js"
      },
      "import": {
        "types": "./dist/esm/api/diagnostics/index.d.ts",
        "default": "./dist/esm/api/diagnostics/index.js"
      },
      "require": {
        "types": "./dist/commonjs/api/diagnostics/index.d.ts",
        "default": "./dist/commonjs/api/diagnostics/index.js"
      }
    },
    "./api/executions": {
      "browser": {
        "types": "./dist/browser/api/executions/index.d.ts",
        "default": "./dist/browser/api/executions/index.js"
      },
      "react-native": {
        "types": "./dist/react-native/api/executions/index.d.ts",
        "default": "./dist/react-native/api/executions/index.js"
      },
      "import": {
        "types": "./dist/esm/api/executions/index.d.ts",
        "default": "./dist/esm/api/executions/index.js"
      },
      "require": {
        "types": "./dist/commonjs/api/executions/index.d.ts",
        "default": "./dist/commonjs/api/executions/index.js"
      }
    },
    "./api/workflowVersions": {
      "browser": {
        "types": "./dist/browser/api/workflowVersions/index.d.ts",
        "default": "./dist/browser/api/workflowVersions/index.js"
      },
      "react-native": {
        "types": "./dist/react-native/api/workflowVersions/index.d.ts",
        "default": "./dist/react-native/api/workflowVersions/index.js"
      },
      "import": {
        "types": "./dist/esm/api/workflowVersions/index.d.ts",
        "default": "./dist/esm/api/workflowVersions/index.js"
      },
      "require": {
        "types": "./dist/commonjs/api/workflowVersions/index.d.ts",
        "default": "./dist/commonjs/api/workflowVersions/index.js"
      }
    },
    "./api/workflows": {
      "browser": {
        "types": "./dist/browser/api/workflows/index.d.ts",
        "default": "./dist/browser/api/workflows/index.js"
      },
      "react-native": {
        "types": "./dist/react-native/api/workflows/index.d.ts",
        "default": "./dist/react-native/api/workflows/index.js"
      },
      "import": {
        "types": "./dist/esm/api/workflows/index.d.ts",
        "default": "./dist/esm/api/workflows/index.js"
      },
      "require": {
        "types": "./dist/commonjs/api/workflows/index.d.ts",
        "default": "./dist/commonjs/api/workflows/index.js"
      }
    },
    "./api/configTemplateVersions": {
      "browser": {
        "types": "./dist/browser/api/configTemplateVersions/index.d.ts",
        "default": "./dist/browser/api/configTemplateVersions/index.js"
      },
      "react-native": {
        "types": "./dist/react-native/api/configTemplateVersions/index.d.ts",
        "default": "./dist/react-native/api/configTemplateVersions/index.js"
      },
      "import": {
        "types": "./dist/esm/api/configTemplateVersions/index.d.ts",
        "default": "./dist/esm/api/configTemplateVersions/index.js"
      },
      "require": {
        "types": "./dist/commonjs/api/configTemplateVersions/index.d.ts",
        "default": "./dist/commonjs/api/configTemplateVersions/index.js"
      }
    },
    "./api/configTemplates": {
      "browser": {
        "types": "./dist/browser/api/configTemplates/index.d.ts",
        "default": "./dist/browser/api/configTemplates/index.js"
      },
      "react-native": {
        "types": "./dist/react-native/api/configTemplates/index.d.ts",
        "default": "./dist/react-native/api/configTemplates/index.js"
      },
      "import": {
        "types": "./dist/esm/api/configTemplates/index.d.ts",
        "default": "./dist/esm/api/configTemplates/index.js"
      },
      "require": {
        "types": "./dist/commonjs/api/configTemplates/index.d.ts",
        "default": "./dist/commonjs/api/configTemplates/index.js"
      }
    },
    "./api/instanceHistories": {
      "browser": {
        "types": "./dist/browser/api/instanceHistories/index.d.ts",
        "default": "./dist/browser/api/instanceHistories/index.js"
      },
      "react-native": {
        "types": "./dist/react-native/api/instanceHistories/index.d.ts",
        "default": "./dist/react-native/api/instanceHistories/index.js"
      },
      "import": {
        "types": "./dist/esm/api/instanceHistories/index.d.ts",
        "default": "./dist/esm/api/instanceHistories/index.js"
      },
      "require": {
        "types": "./dist/commonjs/api/instanceHistories/index.d.ts",
        "default": "./dist/commonjs/api/instanceHistories/index.js"
      }
    },
    "./api/instances": {
      "browser": {
        "types": "./dist/browser/api/instances/index.d.ts",
        "default": "./dist/browser/api/instances/index.js"
      },
      "react-native": {
        "types": "./dist/react-native/api/instances/index.d.ts",
        "default": "./dist/react-native/api/instances/index.js"
      },
      "import": {
        "types": "./dist/esm/api/instances/index.d.ts",
        "default": "./dist/esm/api/instances/index.js"
      },
      "require": {
        "types": "./dist/commonjs/api/instances/index.d.ts",
        "default": "./dist/commonjs/api/instances/index.js"
      }
    },
    "./api/solutionTemplates": {
      "browser": {
        "types": "./dist/browser/api/solutionTemplates/index.d.ts",
        "default": "./dist/browser/api/solutionTemplates/index.js"
      },
      "react-native": {
        "types": "./dist/react-native/api/solutionTemplates/index.d.ts",
        "default": "./dist/react-native/api/solutionTemplates/index.js"
      },
      "import": {
        "types": "./dist/esm/api/solutionTemplates/index.d.ts",
        "default": "./dist/esm/api/solutionTemplates/index.js"
      },
      "require": {
        "types": "./dist/commonjs/api/solutionTemplates/index.d.ts",
        "default": "./dist/commonjs/api/solutionTemplates/index.js"
      }
    },
    "./api/solutionTemplateVersions": {
      "browser": {
        "types": "./dist/browser/api/solutionTemplateVersions/index.d.ts",
        "default": "./dist/browser/api/solutionTemplateVersions/index.js"
      },
      "react-native": {
        "types": "./dist/react-native/api/solutionTemplateVersions/index.d.ts",
        "default": "./dist/react-native/api/solutionTemplateVersions/index.js"
      },
      "import": {
        "types": "./dist/esm/api/solutionTemplateVersions/index.d.ts",
        "default": "./dist/esm/api/solutionTemplateVersions/index.js"
      },
      "require": {
        "types": "./dist/commonjs/api/solutionTemplateVersions/index.d.ts",
        "default": "./dist/commonjs/api/solutionTemplateVersions/index.js"
      }
    },
    "./api/solutions": {
      "browser": {
        "types": "./dist/browser/api/solutions/index.d.ts",
        "default": "./dist/browser/api/solutions/index.js"
      },
      "react-native": {
        "types": "./dist/react-native/api/solutions/index.d.ts",
        "default": "./dist/react-native/api/solutions/index.js"
      },
      "import": {
        "types": "./dist/esm/api/solutions/index.d.ts",
        "default": "./dist/esm/api/solutions/index.js"
      },
      "require": {
        "types": "./dist/commonjs/api/solutions/index.d.ts",
        "default": "./dist/commonjs/api/solutions/index.js"
      }
    },
    "./api/schemaReferences": {
      "browser": {
        "types": "./dist/browser/api/schemaReferences/index.d.ts",
        "default": "./dist/browser/api/schemaReferences/index.js"
      },
      "react-native": {
        "types": "./dist/react-native/api/schemaReferences/index.d.ts",
        "default": "./dist/react-native/api/schemaReferences/index.js"
      },
      "import": {
        "types": "./dist/esm/api/schemaReferences/index.d.ts",
        "default": "./dist/esm/api/schemaReferences/index.js"
      },
      "require": {
        "types": "./dist/commonjs/api/schemaReferences/index.d.ts",
        "default": "./dist/commonjs/api/schemaReferences/index.js"
      }
    },
    "./api/dynamicSchemaVersions": {
      "browser": {
        "types": "./dist/browser/api/dynamicSchemaVersions/index.d.ts",
        "default": "./dist/browser/api/dynamicSchemaVersions/index.js"
      },
      "react-native": {
        "types": "./dist/react-native/api/dynamicSchemaVersions/index.d.ts",
        "default": "./dist/react-native/api/dynamicSchemaVersions/index.js"
      },
      "import": {
        "types": "./dist/esm/api/dynamicSchemaVersions/index.d.ts",
        "default": "./dist/esm/api/dynamicSchemaVersions/index.js"
      },
      "require": {
        "types": "./dist/commonjs/api/dynamicSchemaVersions/index.d.ts",
        "default": "./dist/commonjs/api/dynamicSchemaVersions/index.js"
      }
    },
    "./api/targets": {
      "browser": {
        "types": "./dist/browser/api/targets/index.d.ts",
        "default": "./dist/browser/api/targets/index.js"
      },
      "react-native": {
        "types": "./dist/react-native/api/targets/index.d.ts",
        "default": "./dist/react-native/api/targets/index.js"
      },
      "import": {
        "types": "./dist/esm/api/targets/index.d.ts",
        "default": "./dist/esm/api/targets/index.js"
      },
      "require": {
        "types": "./dist/commonjs/api/targets/index.d.ts",
        "default": "./dist/commonjs/api/targets/index.js"
      }
    },
    "./api/jobs": {
      "browser": {
        "types": "./dist/browser/api/jobs/index.d.ts",
        "default": "./dist/browser/api/jobs/index.js"
      },
      "react-native": {
        "types": "./dist/react-native/api/jobs/index.d.ts",
        "default": "./dist/react-native/api/jobs/index.js"
      },
      "import": {
        "types": "./dist/esm/api/jobs/index.d.ts",
        "default": "./dist/esm/api/jobs/index.js"
      },
      "require": {
        "types": "./dist/commonjs/api/jobs/index.d.ts",
        "default": "./dist/commonjs/api/jobs/index.js"
      }
    },
    "./api/solutionVersions": {
      "browser": {
        "types": "./dist/browser/api/solutionVersions/index.d.ts",
        "default": "./dist/browser/api/solutionVersions/index.js"
      },
      "react-native": {
        "types": "./dist/react-native/api/solutionVersions/index.d.ts",
        "default": "./dist/react-native/api/solutionVersions/index.js"
      },
      "import": {
        "types": "./dist/esm/api/solutionVersions/index.d.ts",
        "default": "./dist/esm/api/solutionVersions/index.js"
      },
      "require": {
        "types": "./dist/commonjs/api/solutionVersions/index.d.ts",
        "default": "./dist/commonjs/api/solutionVersions/index.js"
      }
    },
    "./api/schemaVersions": {
      "browser": {
        "types": "./dist/browser/api/schemaVersions/index.d.ts",
        "default": "./dist/browser/api/schemaVersions/index.js"
      },
      "react-native": {
        "types": "./dist/react-native/api/schemaVersions/index.d.ts",
        "default": "./dist/react-native/api/schemaVersions/index.js"
      },
      "import": {
        "types": "./dist/esm/api/schemaVersions/index.d.ts",
        "default": "./dist/esm/api/schemaVersions/index.js"
      },
      "require": {
        "types": "./dist/commonjs/api/schemaVersions/index.d.ts",
        "default": "./dist/commonjs/api/schemaVersions/index.js"
      }
    },
    "./api/schemas": {
      "browser": {
        "types": "./dist/browser/api/schemas/index.d.ts",
        "default": "./dist/browser/api/schemas/index.js"
      },
      "react-native": {
        "types": "./dist/react-native/api/schemas/index.d.ts",
        "default": "./dist/react-native/api/schemas/index.js"
      },
      "import": {
        "types": "./dist/esm/api/schemas/index.d.ts",
        "default": "./dist/esm/api/schemas/index.js"
      },
      "require": {
        "types": "./dist/commonjs/api/schemas/index.d.ts",
        "default": "./dist/commonjs/api/schemas/index.js"
      }
    },
    "./api/dynamicSchemas": {
      "browser": {
        "types": "./dist/browser/api/dynamicSchemas/index.d.ts",
        "default": "./dist/browser/api/dynamicSchemas/index.js"
      },
      "react-native": {
        "types": "./dist/react-native/api/dynamicSchemas/index.d.ts",
        "default": "./dist/react-native/api/dynamicSchemas/index.js"
      },
      "import": {
        "types": "./dist/esm/api/dynamicSchemas/index.d.ts",
        "default": "./dist/esm/api/dynamicSchemas/index.js"
      },
      "require": {
        "types": "./dist/commonjs/api/dynamicSchemas/index.d.ts",
        "default": "./dist/commonjs/api/dynamicSchemas/index.js"
      }
    },
    "./models": {
      "browser": {
        "types": "./dist/browser/models/index.d.ts",
        "default": "./dist/browser/models/index.js"
      },
      "react-native": {
        "types": "./dist/react-native/models/index.d.ts",
        "default": "./dist/react-native/models/index.js"
      },
      "import": {
        "types": "./dist/esm/models/index.d.ts",
        "default": "./dist/esm/models/index.js"
      },
      "require": {
        "types": "./dist/commonjs/models/index.d.ts",
        "default": "./dist/commonjs/models/index.js"
      }
    }
  },
  "main": "./dist/commonjs/index.js",
  "types": "./dist/commonjs/index.d.ts",
  "module": "./dist/esm/index.js"
}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/sample.env
================================================
# Feel free to add your own environment variables.


================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/tsconfig.browser.config.json
================================================
{
  "extends": ["./tsconfig.test.json", "../../../tsconfig.browser.base.json"]
}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/tsconfig.json
================================================
{
  "references": [
    {
      "path": "./tsconfig.src.json"
    },
    {
      "path": "./tsconfig.samples.json"
    },
    {
      "path": "./tsconfig.test.json"
    },
    {
      "path": "./tsconfig.snippets.json"
    }
  ]
}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/tsconfig.samples.json
================================================
{
  "extends": "../../../tsconfig.samples.base.json",
  "compilerOptions": {
    "paths": {
      "@azure/arm-workloadorchestration": ["./dist/esm"]
    }
  }
}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/tsconfig.snippets.json
================================================
{
  "extends": ["../../../tsconfig.snippets.base.json"]
}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/tsconfig.src.json
================================================
{
  "extends": "../../../tsconfig.lib.json"
}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/tsconfig.test.json
================================================
{
  "extends": ["./tsconfig.src.json", "../../../tsconfig.test.base.json"]
}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/tsp-location.yaml
================================================
directory: specification/edge/Microsoft.Edge.ConfigurationManager.Management
commit: 416149d7e33b89d2ab51825f08b4da7d73cbfed1
repo: Azure/azure-rest-api-specs
additionalDirectories: 



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/vitest.browser.config.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { defineConfig, mergeConfig } from "vitest/config";
import viteConfig from "../../../vitest.browser.shared.config.ts";

export default mergeConfig(
  viteConfig,
  defineConfig({
    test: {
      include: ["dist-test/browser/test/**/*.spec.js"],
      testTimeout: 1200000,
      hookTimeout: 1200000,
    },
  }),
);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/vitest.config.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { defineConfig, mergeConfig } from "vitest/config";
import viteConfig from "../../../vitest.shared.config.ts";

export default mergeConfig(
  viteConfig,
  defineConfig({
    test: {
      hookTimeout: 1200000,
      testTimeout: 1200000,
    },
  }),
);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/vitest.esm.config.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { mergeConfig } from "vitest/config";
import vitestConfig from "./vitest.config.ts";
import vitestEsmConfig from "../../../vitest.esm.shared.config.ts";

export default mergeConfig(vitestConfig, vitestEsmConfig);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/review/arm-workloadorchestration-api-configTemplates-node.api.md
================================================
## API Report File for "@azure/arm-workloadorchestration"

> Do not edit this file. It is a report generated by [API Extractor](https://api-extractor.com/).

```ts

import { Client } from '@azure-rest/core-client';
import { OperationOptions } from '@azure-rest/core-client';
import { OperationState } from '@azure/core-lro';
import { PollerLike } from '@azure/core-lro';

// @public
export function $delete(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, configTemplateName: string, options?: ConfigTemplatesDeleteOptionalParams): PollerLike<OperationState<void>, void>;

// @public
export interface ConfigTemplatesCreateOrUpdateOptionalParams extends OperationOptions {
    updateIntervalInMs?: number;
}

// @public
export interface ConfigTemplatesCreateVersionOptionalParams extends OperationOptions {
    updateIntervalInMs?: number;
}

// @public
export interface ConfigTemplatesDeleteOptionalParams extends OperationOptions {
    updateIntervalInMs?: number;
}

// @public
export interface ConfigTemplatesGetOptionalParams extends OperationOptions {
}

// @public
export interface ConfigTemplatesListByResourceGroupOptionalParams extends OperationOptions {
}

// @public
export interface ConfigTemplatesListBySubscriptionOptionalParams extends OperationOptions {
}

// @public
export interface ConfigTemplatesRemoveVersionOptionalParams extends OperationOptions {
}

// @public
export interface ConfigTemplatesUpdateOptionalParams extends OperationOptions {
}

// @public
export function createOrUpdate(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, configTemplateName: string, resource: ConfigTemplate, options?: ConfigTemplatesCreateOrUpdateOptionalParams): PollerLike<OperationState<ConfigTemplate>, ConfigTemplate>;

// @public
export function createVersion(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, configTemplateName: string, body: ConfigTemplateVersionWithUpdateType, options?: ConfigTemplatesCreateVersionOptionalParams): PollerLike<OperationState<ConfigTemplateVersion>, ConfigTemplateVersion>;

// @public
export function get(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, configTemplateName: string, options?: ConfigTemplatesGetOptionalParams): Promise<ConfigTemplate>;

// @public
export function listByResourceGroup(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, options?: ConfigTemplatesListByResourceGroupOptionalParams): PagedAsyncIterableIterator<ConfigTemplate>;

// @public
export function listBySubscription(context: WorkloadOrchestrationManagementContext, options?: ConfigTemplatesListBySubscriptionOptionalParams): PagedAsyncIterableIterator<ConfigTemplate>;

// @public
export function removeVersion(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, configTemplateName: string, body: VersionParameter, options?: ConfigTemplatesRemoveVersionOptionalParams): Promise<RemoveVersionResponse>;

// @public
export function update(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, configTemplateName: string, properties: ConfigTemplateUpdate, options?: ConfigTemplatesUpdateOptionalParams): Promise<ConfigTemplate>;

// (No @packageDocumentation comment for this package)

```



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/review/arm-workloadorchestration-api-configTemplateVersions-node.api.md
================================================
## API Report File for "@azure/arm-workloadorchestration"

> Do not edit this file. It is a report generated by [API Extractor](https://api-extractor.com/).

```ts

import { Client } from '@azure-rest/core-client';
import { OperationOptions } from '@azure-rest/core-client';

// @public
export interface ConfigTemplateVersionsGetOptionalParams extends OperationOptions {
}

// @public
export interface ConfigTemplateVersionsListByConfigTemplateOptionalParams extends OperationOptions {
}

// @public
export function get(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, configTemplateName: string, configTemplateVersionName: string, options?: ConfigTemplateVersionsGetOptionalParams): Promise<ConfigTemplateVersion>;

// @public
export function listByConfigTemplate(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, configTemplateName: string, options?: ConfigTemplateVersionsListByConfigTemplateOptionalParams): PagedAsyncIterableIterator<ConfigTemplateVersion>;

// (No @packageDocumentation comment for this package)

```



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/review/arm-workloadorchestration-api-contexts-node.api.md
================================================
## API Report File for "@azure/arm-workloadorchestration"

> Do not edit this file. It is a report generated by [API Extractor](https://api-extractor.com/).

```ts

import { Client } from '@azure-rest/core-client';
import { OperationOptions } from '@azure-rest/core-client';
import { OperationState } from '@azure/core-lro';
import { PollerLike } from '@azure/core-lro';

// @public
export function $delete(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, contextName: string, options?: ContextsDeleteOptionalParams): PollerLike<OperationState<void>, void>;

// @public
export interface ContextsCreateOrUpdateOptionalParams extends OperationOptions {
    updateIntervalInMs?: number;
}

// @public
export interface ContextsDeleteOptionalParams extends OperationOptions {
    updateIntervalInMs?: number;
}

// @public
export interface ContextsGetOptionalParams extends OperationOptions {
}

// @public
export interface ContextsListByResourceGroupOptionalParams extends OperationOptions {
}

// @public
export interface ContextsListBySubscriptionOptionalParams extends OperationOptions {
}

// @public
export interface ContextsUpdateOptionalParams extends OperationOptions {
    updateIntervalInMs?: number;
}

// @public
export function createOrUpdate(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, contextName: string, resource: Context, options?: ContextsCreateOrUpdateOptionalParams): PollerLike<OperationState<Context>, Context>;

// @public
export function get(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, contextName: string, options?: ContextsGetOptionalParams): Promise<Context>;

// @public
export function listByResourceGroup(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, options?: ContextsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<Context>;

// @public
export function listBySubscription(context: WorkloadOrchestrationManagementContext, options?: ContextsListBySubscriptionOptionalParams): PagedAsyncIterableIterator<Context>;

// @public
export function update(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, contextName: string, properties: ContextUpdate, options?: ContextsUpdateOptionalParams): PollerLike<OperationState<Context>, Context>;

// (No @packageDocumentation comment for this package)

```



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/review/arm-workloadorchestration-api-diagnostics-node.api.md
================================================
## API Report File for "@azure/arm-workloadorchestration"

> Do not edit this file. It is a report generated by [API Extractor](https://api-extractor.com/).

```ts

import { Client } from '@azure-rest/core-client';
import { OperationOptions } from '@azure-rest/core-client';
import { OperationState } from '@azure/core-lro';
import { PollerLike } from '@azure/core-lro';

// @public
export function $delete(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, diagnosticName: string, options?: DiagnosticsDeleteOptionalParams): PollerLike<OperationState<void>, void>;

// @public
export function createOrUpdate(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, diagnosticName: string, resource: Diagnostic, options?: DiagnosticsCreateOrUpdateOptionalParams): PollerLike<OperationState<Diagnostic>, Diagnostic>;

// @public
export interface DiagnosticsCreateOrUpdateOptionalParams extends OperationOptions {
    updateIntervalInMs?: number;
}

// @public
export interface DiagnosticsDeleteOptionalParams extends OperationOptions {
    updateIntervalInMs?: number;
}

// @public
export interface DiagnosticsGetOptionalParams extends OperationOptions {
}

// @public
export interface DiagnosticsListByResourceGroupOptionalParams extends OperationOptions {
}

// @public
export interface DiagnosticsListBySubscriptionOptionalParams extends OperationOptions {
}

// @public
export interface DiagnosticsUpdateOptionalParams extends OperationOptions {
    updateIntervalInMs?: number;
}

// @public
export function get(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, diagnosticName: string, options?: DiagnosticsGetOptionalParams): Promise<Diagnostic>;

// @public
export function listByResourceGroup(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, options?: DiagnosticsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<Diagnostic>;

// @public
export function listBySubscription(context: WorkloadOrchestrationManagementContext, options?: DiagnosticsListBySubscriptionOptionalParams): PagedAsyncIterableIterator<Diagnostic>;

// @public
export function update(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, diagnosticName: string, properties: DiagnosticUpdate, options?: DiagnosticsUpdateOptionalParams): PollerLike<OperationState<Diagnostic>, Diagnostic>;

// (No @packageDocumentation comment for this package)

```



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/review/arm-workloadorchestration-api-dynamicSchemas-node.api.md
================================================
## API Report File for "@azure/arm-workloadorchestration"

> Do not edit this file. It is a report generated by [API Extractor](https://api-extractor.com/).

```ts

import { Client } from '@azure-rest/core-client';
import { OperationOptions } from '@azure-rest/core-client';
import { OperationState } from '@azure/core-lro';
import { PollerLike } from '@azure/core-lro';

// @public
export function $delete(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, schemaName: string, dynamicSchemaName: string, options?: DynamicSchemasDeleteOptionalParams): PollerLike<OperationState<void>, void>;

// @public
export function createOrUpdate(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, schemaName: string, dynamicSchemaName: string, resource: DynamicSchema, options?: DynamicSchemasCreateOrUpdateOptionalParams): PollerLike<OperationState<DynamicSchema>, DynamicSchema>;

// @public
export interface DynamicSchemasCreateOrUpdateOptionalParams extends OperationOptions {
    updateIntervalInMs?: number;
}

// @public
export interface DynamicSchemasDeleteOptionalParams extends OperationOptions {
    updateIntervalInMs?: number;
}

// @public
export interface DynamicSchemasGetOptionalParams extends OperationOptions {
}

// @public
export interface DynamicSchemasListBySchemaOptionalParams extends OperationOptions {
}

// @public
export interface DynamicSchemasUpdateOptionalParams extends OperationOptions {
}

// @public
export function get(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, schemaName: string, dynamicSchemaName: string, options?: DynamicSchemasGetOptionalParams): Promise<DynamicSchema>;

// @public
export function listBySchema(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, schemaName: string, options?: DynamicSchemasListBySchemaOptionalParams): PagedAsyncIterableIterator<DynamicSchema>;

// @public
export function update(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, schemaName: string, dynamicSchemaName: string, properties: DynamicSchema, options?: DynamicSchemasUpdateOptionalParams): Promise<DynamicSchema>;

// (No @packageDocumentation comment for this package)

```



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/review/arm-workloadorchestration-api-dynamicSchemaVersions-node.api.md
================================================
## API Report File for "@azure/arm-workloadorchestration"

> Do not edit this file. It is a report generated by [API Extractor](https://api-extractor.com/).

```ts

import { Client } from '@azure-rest/core-client';
import { OperationOptions } from '@azure-rest/core-client';
import { OperationState } from '@azure/core-lro';
import { PollerLike } from '@azure/core-lro';

// @public
export function $delete(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, schemaName: string, dynamicSchemaName: string, dynamicSchemaVersionName: string, options?: DynamicSchemaVersionsDeleteOptionalParams): PollerLike<OperationState<void>, void>;

// @public
export function createOrUpdate(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, schemaName: string, dynamicSchemaName: string, dynamicSchemaVersionName: string, resource: DynamicSchemaVersion, options?: DynamicSchemaVersionsCreateOrUpdateOptionalParams): PollerLike<OperationState<DynamicSchemaVersion>, DynamicSchemaVersion>;

// @public
export interface DynamicSchemaVersionsCreateOrUpdateOptionalParams extends OperationOptions {
    updateIntervalInMs?: number;
}

// @public
export interface DynamicSchemaVersionsDeleteOptionalParams extends OperationOptions {
    updateIntervalInMs?: number;
}

// @public
export interface DynamicSchemaVersionsGetOptionalParams extends OperationOptions {
}

// @public
export interface DynamicSchemaVersionsListByDynamicSchemaOptionalParams extends OperationOptions {
}

// @public
export interface DynamicSchemaVersionsUpdateOptionalParams extends OperationOptions {
}

// @public
export function get(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, schemaName: string, dynamicSchemaName: string, dynamicSchemaVersionName: string, options?: DynamicSchemaVersionsGetOptionalParams): Promise<DynamicSchemaVersion>;

// @public
export function listByDynamicSchema(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, schemaName: string, dynamicSchemaName: string, options?: DynamicSchemaVersionsListByDynamicSchemaOptionalParams): PagedAsyncIterableIterator<DynamicSchemaVersion>;

// @public
export function update(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, schemaName: string, dynamicSchemaName: string, dynamicSchemaVersionName: string, properties: DynamicSchemaVersion, options?: DynamicSchemaVersionsUpdateOptionalParams): Promise<DynamicSchemaVersion>;

// (No @packageDocumentation comment for this package)

```



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/review/arm-workloadorchestration-api-executions-node.api.md
================================================
## API Report File for "@azure/arm-workloadorchestration"

> Do not edit this file. It is a report generated by [API Extractor](https://api-extractor.com/).

```ts

import { Client } from '@azure-rest/core-client';
import { OperationOptions } from '@azure-rest/core-client';
import { OperationState } from '@azure/core-lro';
import { PollerLike } from '@azure/core-lro';

// @public
export function $delete(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, contextName: string, workflowName: string, versionName: string, executionName: string, options?: ExecutionsDeleteOptionalParams): PollerLike<OperationState<void>, void>;

// @public
export function createOrUpdate(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, contextName: string, workflowName: string, versionName: string, executionName: string, resource: Execution, options?: ExecutionsCreateOrUpdateOptionalParams): PollerLike<OperationState<Execution>, Execution>;

// @public
export interface ExecutionsCreateOrUpdateOptionalParams extends OperationOptions {
    updateIntervalInMs?: number;
}

// @public
export interface ExecutionsDeleteOptionalParams extends OperationOptions {
    updateIntervalInMs?: number;
}

// @public
export interface ExecutionsGetOptionalParams extends OperationOptions {
}

// @public
export interface ExecutionsListByWorkflowVersionOptionalParams extends OperationOptions {
}

// @public
export interface ExecutionsUpdateOptionalParams extends OperationOptions {
    updateIntervalInMs?: number;
}

// @public
export function get(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, contextName: string, workflowName: string, versionName: string, executionName: string, options?: ExecutionsGetOptionalParams): Promise<Execution>;

// @public
export function listByWorkflowVersion(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, contextName: string, workflowName: string, versionName: string, options?: ExecutionsListByWorkflowVersionOptionalParams): PagedAsyncIterableIterator<Execution>;

// @public
export function update(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, contextName: string, workflowName: string, versionName: string, executionName: string, properties: Execution, options?: ExecutionsUpdateOptionalParams): PollerLike<OperationState<Execution>, Execution>;

// (No @packageDocumentation comment for this package)

```



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/review/arm-workloadorchestration-api-instanceHistories-node.api.md
================================================
## API Report File for "@azure/arm-workloadorchestration"

> Do not edit this file. It is a report generated by [API Extractor](https://api-extractor.com/).

```ts

import { Client } from '@azure-rest/core-client';
import { OperationOptions } from '@azure-rest/core-client';

// @public
export function get(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, targetName: string, solutionName: string, instanceName: string, instanceHistoryName: string, options?: InstanceHistoriesGetOptionalParams): Promise<InstanceHistory>;

// @public
export interface InstanceHistoriesGetOptionalParams extends OperationOptions {
}

// @public
export interface InstanceHistoriesListByInstanceOptionalParams extends OperationOptions {
}

// @public
export function listByInstance(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, targetName: string, solutionName: string, instanceName: string, options?: InstanceHistoriesListByInstanceOptionalParams): PagedAsyncIterableIterator<InstanceHistory>;

// (No @packageDocumentation comment for this package)

```



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/review/arm-workloadorchestration-api-instances-node.api.md
================================================
## API Report File for "@azure/arm-workloadorchestration"

> Do not edit this file. It is a report generated by [API Extractor](https://api-extractor.com/).

```ts

import { Client } from '@azure-rest/core-client';
import { OperationOptions } from '@azure-rest/core-client';
import { OperationState } from '@azure/core-lro';
import { PollerLike } from '@azure/core-lro';

// @public
export function $delete(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, targetName: string, solutionName: string, instanceName: string, options?: InstancesDeleteOptionalParams): PollerLike<OperationState<void>, void>;

// @public
export function createOrUpdate(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, targetName: string, solutionName: string, instanceName: string, resource: Instance, options?: InstancesCreateOrUpdateOptionalParams): PollerLike<OperationState<Instance>, Instance>;

// @public
export function get(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, targetName: string, solutionName: string, instanceName: string, options?: InstancesGetOptionalParams): Promise<Instance>;

// @public
export interface InstancesCreateOrUpdateOptionalParams extends OperationOptions {
    updateIntervalInMs?: number;
}

// @public
export interface InstancesDeleteOptionalParams extends OperationOptions {
    updateIntervalInMs?: number;
}

// @public
export interface InstancesGetOptionalParams extends OperationOptions {
}

// @public
export interface InstancesListBySolutionOptionalParams extends OperationOptions {
}

// @public
export interface InstancesUpdateOptionalParams extends OperationOptions {
    updateIntervalInMs?: number;
}

// @public
export function listBySolution(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, targetName: string, solutionName: string, options?: InstancesListBySolutionOptionalParams): PagedAsyncIterableIterator<Instance>;

// @public
export function update(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, targetName: string, solutionName: string, instanceName: string, properties: Instance, options?: InstancesUpdateOptionalParams): PollerLike<OperationState<Instance>, Instance>;

// (No @packageDocumentation comment for this package)

```



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/review/arm-workloadorchestration-api-jobs-node.api.md
================================================
## API Report File for "@azure/arm-workloadorchestration"

> Do not edit this file. It is a report generated by [API Extractor](https://api-extractor.com/).

```ts

import { Client } from '@azure-rest/core-client';
import { OperationOptions } from '@azure-rest/core-client';

// @public
export function get(context: WorkloadOrchestrationManagementContext, resourceUri: string, jobName: string, options?: JobsGetOptionalParams): Promise<Job>;

// @public
export interface JobsGetOptionalParams extends OperationOptions {
}

// @public
export interface JobsListByTargetOptionalParams extends OperationOptions {
}

// @public
export function listByTarget(context: WorkloadOrchestrationManagementContext, resourceUri: string, options?: JobsListByTargetOptionalParams): PagedAsyncIterableIterator<Job>;

// (No @packageDocumentation comment for this package)

```



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/review/arm-workloadorchestration-api-node.api.md
================================================
## API Report File for "@azure/arm-workloadorchestration"

> Do not edit this file. It is a report generated by [API Extractor](https://api-extractor.com/).

```ts

import { Client } from '@azure-rest/core-client';
import { ClientOptions } from '@azure-rest/core-client';
import { TokenCredential } from '@azure/core-auth';

// @public
export function createWorkloadOrchestrationManagement(credential: TokenCredential, subscriptionId: string, options?: WorkloadOrchestrationManagementClientOptionalParams): WorkloadOrchestrationManagementContext;

// @public
export interface WorkloadOrchestrationManagementClientOptionalParams extends ClientOptions {
    apiVersion?: string;
    cloudSetting?: AzureSupportedClouds;
}

// @public
export interface WorkloadOrchestrationManagementContext extends Client {
    apiVersion: string;
    subscriptionId: string;
}

// (No @packageDocumentation comment for this package)

```



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/review/arm-workloadorchestration-api-schemaReferences-node.api.md
================================================
## API Report File for "@azure/arm-workloadorchestration"

> Do not edit this file. It is a report generated by [API Extractor](https://api-extractor.com/).

```ts

import { Client } from '@azure-rest/core-client';
import { OperationOptions } from '@azure-rest/core-client';

// @public
export function get(context: WorkloadOrchestrationManagementContext, resourceUri: string, schemaReferenceName: string, options?: SchemaReferencesGetOptionalParams): Promise<SchemaReference>;

// @public
export function listByResourceGroup(context: WorkloadOrchestrationManagementContext, resourceUri: string, options?: SchemaReferencesListByResourceGroupOptionalParams): PagedAsyncIterableIterator<SchemaReference>;

// @public
export interface SchemaReferencesGetOptionalParams extends OperationOptions {
}

// @public
export interface SchemaReferencesListByResourceGroupOptionalParams extends OperationOptions {
}

// (No @packageDocumentation comment for this package)

```



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/review/arm-workloadorchestration-api-schemas-node.api.md
================================================
## API Report File for "@azure/arm-workloadorchestration"

> Do not edit this file. It is a report generated by [API Extractor](https://api-extractor.com/).

```ts

import { Client } from '@azure-rest/core-client';
import { OperationOptions } from '@azure-rest/core-client';
import { OperationState } from '@azure/core-lro';
import { PollerLike } from '@azure/core-lro';

// @public
export function $delete(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, schemaName: string, options?: SchemasDeleteOptionalParams): PollerLike<OperationState<void>, void>;

// @public
export function createOrUpdate(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, schemaName: string, resource: Schema, options?: SchemasCreateOrUpdateOptionalParams): PollerLike<OperationState<Schema>, Schema>;

// @public
export function createVersion(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, schemaName: string, body: SchemaVersionWithUpdateType, options?: SchemasCreateVersionOptionalParams): PollerLike<OperationState<SchemaVersion>, SchemaVersion>;

// @public
export function get(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, schemaName: string, options?: SchemasGetOptionalParams): Promise<Schema>;

// @public
export function listByResourceGroup(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, options?: SchemasListByResourceGroupOptionalParams): PagedAsyncIterableIterator<Schema>;

// @public
export function listBySubscription(context: WorkloadOrchestrationManagementContext, options?: SchemasListBySubscriptionOptionalParams): PagedAsyncIterableIterator<Schema>;

// @public
export function removeVersion(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, schemaName: string, body: VersionParameter, options?: SchemasRemoveVersionOptionalParams): Promise<RemoveVersionResponse>;

// @public
export interface SchemasCreateOrUpdateOptionalParams extends OperationOptions {
    updateIntervalInMs?: number;
}

// @public
export interface SchemasCreateVersionOptionalParams extends OperationOptions {
    updateIntervalInMs?: number;
}

// @public
export interface SchemasDeleteOptionalParams extends OperationOptions {
    updateIntervalInMs?: number;
}

// @public
export interface SchemasGetOptionalParams extends OperationOptions {
}

// @public
export interface SchemasListByResourceGroupOptionalParams extends OperationOptions {
}

// @public
export interface SchemasListBySubscriptionOptionalParams extends OperationOptions {
}

// @public
export interface SchemasRemoveVersionOptionalParams extends OperationOptions {
}

// @public
export interface SchemasUpdateOptionalParams extends OperationOptions {
}

// @public
export function update(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, schemaName: string, properties: SchemaUpdate, options?: SchemasUpdateOptionalParams): Promise<Schema>;

// (No @packageDocumentation comment for this package)

```



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/review/arm-workloadorchestration-api-schemaVersions-node.api.md
================================================
## API Report File for "@azure/arm-workloadorchestration"

> Do not edit this file. It is a report generated by [API Extractor](https://api-extractor.com/).

```ts

import { Client } from '@azure-rest/core-client';
import { OperationOptions } from '@azure-rest/core-client';
import { OperationState } from '@azure/core-lro';
import { PollerLike } from '@azure/core-lro';

// @public
export function $delete(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, schemaName: string, schemaVersionName: string, options?: SchemaVersionsDeleteOptionalParams): PollerLike<OperationState<void>, void>;

// @public
export function createOrUpdate(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, schemaName: string, schemaVersionName: string, resource: SchemaVersion, options?: SchemaVersionsCreateOrUpdateOptionalParams): PollerLike<OperationState<SchemaVersion>, SchemaVersion>;

// @public
export function get(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, schemaName: string, schemaVersionName: string, options?: SchemaVersionsGetOptionalParams): Promise<SchemaVersion>;

// @public
export function listBySchema(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, schemaName: string, options?: SchemaVersionsListBySchemaOptionalParams): PagedAsyncIterableIterator<SchemaVersion>;

// @public
export interface SchemaVersionsCreateOrUpdateOptionalParams extends OperationOptions {
    updateIntervalInMs?: number;
}

// @public
export interface SchemaVersionsDeleteOptionalParams extends OperationOptions {
    updateIntervalInMs?: number;
}

// @public
export interface SchemaVersionsGetOptionalParams extends OperationOptions {
}

// @public
export interface SchemaVersionsListBySchemaOptionalParams extends OperationOptions {
}

// @public
export interface SchemaVersionsUpdateOptionalParams extends OperationOptions {
}

// @public
export function update(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, schemaName: string, schemaVersionName: string, properties: SchemaVersion, options?: SchemaVersionsUpdateOptionalParams): Promise<SchemaVersion>;

// (No @packageDocumentation comment for this package)

```



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/review/arm-workloadorchestration-api-siteReferences-node.api.md
================================================
## API Report File for "@azure/arm-workloadorchestration"

> Do not edit this file. It is a report generated by [API Extractor](https://api-extractor.com/).

```ts

import { Client } from '@azure-rest/core-client';
import { OperationOptions } from '@azure-rest/core-client';
import { OperationState } from '@azure/core-lro';
import { PollerLike } from '@azure/core-lro';

// @public
export function $delete(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, contextName: string, siteReferenceName: string, options?: SiteReferencesDeleteOptionalParams): PollerLike<OperationState<void>, void>;

// @public
export function createOrUpdate(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, contextName: string, siteReferenceName: string, resource: SiteReference, options?: SiteReferencesCreateOrUpdateOptionalParams): PollerLike<OperationState<SiteReference>, SiteReference>;

// @public
export function get(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, contextName: string, siteReferenceName: string, options?: SiteReferencesGetOptionalParams): Promise<SiteReference>;

// @public
export function listByContext(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, contextName: string, options?: SiteReferencesListByContextOptionalParams): PagedAsyncIterableIterator<SiteReference>;

// @public
export interface SiteReferencesCreateOrUpdateOptionalParams extends OperationOptions {
    updateIntervalInMs?: number;
}

// @public
export interface SiteReferencesDeleteOptionalParams extends OperationOptions {
    updateIntervalInMs?: number;
}

// @public
export interface SiteReferencesGetOptionalParams extends OperationOptions {
}

// @public
export interface SiteReferencesListByContextOptionalParams extends OperationOptions {
}

// @public
export interface SiteReferencesUpdateOptionalParams extends OperationOptions {
    updateIntervalInMs?: number;
}

// @public
export function update(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, contextName: string, siteReferenceName: string, properties: SiteReference, options?: SiteReferencesUpdateOptionalParams): PollerLike<OperationState<SiteReference>, SiteReference>;

// (No @packageDocumentation comment for this package)

```



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/review/arm-workloadorchestration-api-solutions-node.api.md
================================================
## API Report File for "@azure/arm-workloadorchestration"

> Do not edit this file. It is a report generated by [API Extractor](https://api-extractor.com/).

```ts

import { Client } from '@azure-rest/core-client';
import { OperationOptions } from '@azure-rest/core-client';
import { OperationState } from '@azure/core-lro';
import { PollerLike } from '@azure/core-lro';

// @public
export function $delete(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, targetName: string, solutionName: string, options?: SolutionsDeleteOptionalParams): PollerLike<OperationState<void>, void>;

// @public
export function createOrUpdate(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, targetName: string, solutionName: string, resource: Solution, options?: SolutionsCreateOrUpdateOptionalParams): PollerLike<OperationState<Solution>, Solution>;

// @public
export function get(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, targetName: string, solutionName: string, options?: SolutionsGetOptionalParams): Promise<Solution>;

// @public
export function listByTarget(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, targetName: string, options?: SolutionsListByTargetOptionalParams): PagedAsyncIterableIterator<Solution>;

// @public
export interface SolutionsCreateOrUpdateOptionalParams extends OperationOptions {
    updateIntervalInMs?: number;
}

// @public
export interface SolutionsDeleteOptionalParams extends OperationOptions {
    updateIntervalInMs?: number;
}

// @public
export interface SolutionsGetOptionalParams extends OperationOptions {
}

// @public
export interface SolutionsListByTargetOptionalParams extends OperationOptions {
}

// @public
export interface SolutionsUpdateOptionalParams extends OperationOptions {
    updateIntervalInMs?: number;
}

// @public
export function update(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, targetName: string, solutionName: string, properties: SolutionUpdate, options?: SolutionsUpdateOptionalParams): PollerLike<OperationState<Solution>, Solution>;

// (No @packageDocumentation comment for this package)

```



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/review/arm-workloadorchestration-api-solutionTemplates-node.api.md
================================================
## API Report File for "@azure/arm-workloadorchestration"

> Do not edit this file. It is a report generated by [API Extractor](https://api-extractor.com/).

```ts

import { Client } from '@azure-rest/core-client';
import { OperationOptions } from '@azure-rest/core-client';
import { OperationState } from '@azure/core-lro';
import { PollerLike } from '@azure/core-lro';

// @public
export function $delete(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, solutionTemplateName: string, options?: SolutionTemplatesDeleteOptionalParams): PollerLike<OperationState<void>, void>;

// @public
export function createOrUpdate(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, solutionTemplateName: string, resource: SolutionTemplate, options?: SolutionTemplatesCreateOrUpdateOptionalParams): PollerLike<OperationState<SolutionTemplate>, SolutionTemplate>;

// @public
export function createVersion(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, solutionTemplateName: string, body: SolutionTemplateVersionWithUpdateType, options?: SolutionTemplatesCreateVersionOptionalParams): PollerLike<OperationState<SolutionTemplateVersion>, SolutionTemplateVersion>;

// @public
export function get(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, solutionTemplateName: string, options?: SolutionTemplatesGetOptionalParams): Promise<SolutionTemplate>;

// @public
export function listByResourceGroup(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, options?: SolutionTemplatesListByResourceGroupOptionalParams): PagedAsyncIterableIterator<SolutionTemplate>;

// @public
export function listBySubscription(context: WorkloadOrchestrationManagementContext, options?: SolutionTemplatesListBySubscriptionOptionalParams): PagedAsyncIterableIterator<SolutionTemplate>;

// @public
export function removeVersion(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, solutionTemplateName: string, body: VersionParameter, options?: SolutionTemplatesRemoveVersionOptionalParams): PollerLike<OperationState<void>, void>;

// @public
export interface SolutionTemplatesCreateOrUpdateOptionalParams extends OperationOptions {
    updateIntervalInMs?: number;
}

// @public
export interface SolutionTemplatesCreateVersionOptionalParams extends OperationOptions {
    updateIntervalInMs?: number;
}

// @public
export interface SolutionTemplatesDeleteOptionalParams extends OperationOptions {
    updateIntervalInMs?: number;
}

// @public
export interface SolutionTemplatesGetOptionalParams extends OperationOptions {
}

// @public
export interface SolutionTemplatesListByResourceGroupOptionalParams extends OperationOptions {
}

// @public
export interface SolutionTemplatesListBySubscriptionOptionalParams extends OperationOptions {
}

// @public
export interface SolutionTemplatesRemoveVersionOptionalParams extends OperationOptions {
    updateIntervalInMs?: number;
}

// @public
export interface SolutionTemplatesUpdateOptionalParams extends OperationOptions {
}

// @public
export function update(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, solutionTemplateName: string, properties: SolutionTemplateUpdate, options?: SolutionTemplatesUpdateOptionalParams): Promise<SolutionTemplate>;

// (No @packageDocumentation comment for this package)

```



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/review/arm-workloadorchestration-api-solutionTemplateVersions-node.api.md
================================================
## API Report File for "@azure/arm-workloadorchestration"

> Do not edit this file. It is a report generated by [API Extractor](https://api-extractor.com/).

```ts

import { Client } from '@azure-rest/core-client';
import { OperationOptions } from '@azure-rest/core-client';
import { OperationState } from '@azure/core-lro';
import { PollerLike } from '@azure/core-lro';

// @public
export function bulkDeploySolution(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, solutionTemplateName: string, solutionTemplateVersionName: string, body: BulkDeploySolutionParameter, options?: SolutionTemplateVersionsBulkDeploySolutionOptionalParams): PollerLike<OperationState<void>, void>;

// @public
export function bulkPublishSolution(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, solutionTemplateName: string, solutionTemplateVersionName: string, body: BulkPublishSolutionParameter, options?: SolutionTemplateVersionsBulkPublishSolutionOptionalParams): PollerLike<OperationState<void>, void>;

// @public
export function get(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, solutionTemplateName: string, solutionTemplateVersionName: string, options?: SolutionTemplateVersionsGetOptionalParams): Promise<SolutionTemplateVersion>;

// @public
export function listBySolutionTemplate(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, solutionTemplateName: string, options?: SolutionTemplateVersionsListBySolutionTemplateOptionalParams): PagedAsyncIterableIterator<SolutionTemplateVersion>;

// @public
export interface SolutionTemplateVersionsBulkDeploySolutionOptionalParams extends OperationOptions {
    updateIntervalInMs?: number;
}

// @public
export interface SolutionTemplateVersionsBulkPublishSolutionOptionalParams extends OperationOptions {
    updateIntervalInMs?: number;
}

// @public
export interface SolutionTemplateVersionsGetOptionalParams extends OperationOptions {
}

// @public
export interface SolutionTemplateVersionsListBySolutionTemplateOptionalParams extends OperationOptions {
}

// (No @packageDocumentation comment for this package)

```



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/review/arm-workloadorchestration-api-solutionVersions-node.api.md
================================================
## API Report File for "@azure/arm-workloadorchestration"

> Do not edit this file. It is a report generated by [API Extractor](https://api-extractor.com/).

```ts

import { Client } from '@azure-rest/core-client';
import { OperationOptions } from '@azure-rest/core-client';
import { OperationState } from '@azure/core-lro';
import { PollerLike } from '@azure/core-lro';

// @public
export function $delete(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, targetName: string, solutionName: string, solutionVersionName: string, options?: SolutionVersionsDeleteOptionalParams): PollerLike<OperationState<void>, void>;

// @public
export function createOrUpdate(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, targetName: string, solutionName: string, solutionVersionName: string, resource: SolutionVersion, options?: SolutionVersionsCreateOrUpdateOptionalParams): PollerLike<OperationState<SolutionVersion>, SolutionVersion>;

// @public
export function get(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, targetName: string, solutionName: string, solutionVersionName: string, options?: SolutionVersionsGetOptionalParams): Promise<SolutionVersion>;

// @public
export function listBySolution(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, targetName: string, solutionName: string, options?: SolutionVersionsListBySolutionOptionalParams): PagedAsyncIterableIterator<SolutionVersion>;

// @public
export interface SolutionVersionsCreateOrUpdateOptionalParams extends OperationOptions {
    updateIntervalInMs?: number;
}

// @public
export interface SolutionVersionsDeleteOptionalParams extends OperationOptions {
    updateIntervalInMs?: number;
}

// @public
export interface SolutionVersionsGetOptionalParams extends OperationOptions {
}

// @public
export interface SolutionVersionsListBySolutionOptionalParams extends OperationOptions {
}

// @public
export interface SolutionVersionsUpdateOptionalParams extends OperationOptions {
    updateIntervalInMs?: number;
}

// @public
export function update(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, targetName: string, solutionName: string, solutionVersionName: string, properties: SolutionVersion, options?: SolutionVersionsUpdateOptionalParams): PollerLike<OperationState<SolutionVersion>, SolutionVersion>;

// (No @packageDocumentation comment for this package)

```



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/review/arm-workloadorchestration-api-targets-node.api.md
================================================
## API Report File for "@azure/arm-workloadorchestration"

> Do not edit this file. It is a report generated by [API Extractor](https://api-extractor.com/).

```ts

import { Client } from '@azure-rest/core-client';
import { OperationOptions } from '@azure-rest/core-client';
import { OperationState } from '@azure/core-lro';
import { PollerLike } from '@azure/core-lro';

// @public
export function $delete(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, targetName: string, options?: TargetsDeleteOptionalParams): PollerLike<OperationState<void>, void>;

// @public
export function createOrUpdate(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, targetName: string, resource: Target, options?: TargetsCreateOrUpdateOptionalParams): PollerLike<OperationState<Target>, Target>;

// @public
export function get(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, targetName: string, options?: TargetsGetOptionalParams): Promise<Target>;

// @public
export function installSolution(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, targetName: string, body: InstallSolutionParameter, options?: TargetsInstallSolutionOptionalParams): PollerLike<OperationState<void>, void>;

// @public
export function listByResourceGroup(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, options?: TargetsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<Target>;

// @public
export function listBySubscription(context: WorkloadOrchestrationManagementContext, options?: TargetsListBySubscriptionOptionalParams): PagedAsyncIterableIterator<Target>;

// @public
export function publishSolutionVersion(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, targetName: string, body: SolutionVersionParameter, options?: TargetsPublishSolutionVersionOptionalParams): PollerLike<OperationState<SolutionVersion>, SolutionVersion>;

// @public
export function removeRevision(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, targetName: string, body: RemoveRevisionParameter, options?: TargetsRemoveRevisionOptionalParams): PollerLike<OperationState<void>, void>;

// @public
export function resolveConfiguration(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, targetName: string, body: SolutionTemplateParameter, options?: TargetsResolveConfigurationOptionalParams): PollerLike<OperationState<ResolvedConfiguration>, ResolvedConfiguration>;

// @public
export function reviewSolutionVersion(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, targetName: string, body: SolutionTemplateParameter, options?: TargetsReviewSolutionVersionOptionalParams): PollerLike<OperationState<SolutionVersion>, SolutionVersion>;

// @public
export interface TargetsCreateOrUpdateOptionalParams extends OperationOptions {
    updateIntervalInMs?: number;
}

// @public
export interface TargetsDeleteOptionalParams extends OperationOptions {
    forceDelete?: boolean;
    updateIntervalInMs?: number;
}

// @public
export interface TargetsGetOptionalParams extends OperationOptions {
}

// @public
export interface TargetsInstallSolutionOptionalParams extends OperationOptions {
    updateIntervalInMs?: number;
}

// @public
export interface TargetsListByResourceGroupOptionalParams extends OperationOptions {
}

// @public
export interface TargetsListBySubscriptionOptionalParams extends OperationOptions {
}

// @public
export interface TargetsPublishSolutionVersionOptionalParams extends OperationOptions {
    updateIntervalInMs?: number;
}

// @public
export interface TargetsRemoveRevisionOptionalParams extends OperationOptions {
    updateIntervalInMs?: number;
}

// @public
export interface TargetsResolveConfigurationOptionalParams extends OperationOptions {
    updateIntervalInMs?: number;
}

// @public
export interface TargetsReviewSolutionVersionOptionalParams extends OperationOptions {
    updateIntervalInMs?: number;
}

// @public
export interface TargetsUninstallSolutionOptionalParams extends OperationOptions {
    updateIntervalInMs?: number;
}

// @public
export interface TargetsUpdateExternalValidationStatusOptionalParams extends OperationOptions {
    updateIntervalInMs?: number;
}

// @public
export interface TargetsUpdateOptionalParams extends OperationOptions {
    updateIntervalInMs?: number;
}

// @public
export function uninstallSolution(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, targetName: string, body: UninstallSolutionParameter, options?: TargetsUninstallSolutionOptionalParams): PollerLike<OperationState<void>, void>;

// @public
export function update(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, targetName: string, properties: TargetUpdate, options?: TargetsUpdateOptionalParams): PollerLike<OperationState<Target>, Target>;

// @public
export function updateExternalValidationStatus(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, targetName: string, body: UpdateExternalValidationStatusParameter, options?: TargetsUpdateExternalValidationStatusOptionalParams): PollerLike<OperationState<SolutionVersion>, SolutionVersion>;

// (No @packageDocumentation comment for this package)

```



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/review/arm-workloadorchestration-api-workflows-node.api.md
================================================
## API Report File for "@azure/arm-workloadorchestration"

> Do not edit this file. It is a report generated by [API Extractor](https://api-extractor.com/).

```ts

import { Client } from '@azure-rest/core-client';
import { OperationOptions } from '@azure-rest/core-client';
import { OperationState } from '@azure/core-lro';
import { PollerLike } from '@azure/core-lro';

// @public
export function $delete(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, contextName: string, workflowName: string, options?: WorkflowsDeleteOptionalParams): PollerLike<OperationState<void>, void>;

// @public
export function createOrUpdate(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, contextName: string, workflowName: string, resource: Workflow, options?: WorkflowsCreateOrUpdateOptionalParams): PollerLike<OperationState<Workflow>, Workflow>;

// @public
export function get(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, contextName: string, workflowName: string, options?: WorkflowsGetOptionalParams): Promise<Workflow>;

// @public
export function listByContext(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, contextName: string, options?: WorkflowsListByContextOptionalParams): PagedAsyncIterableIterator<Workflow>;

// @public
export function update(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, contextName: string, workflowName: string, properties: Workflow, options?: WorkflowsUpdateOptionalParams): PollerLike<OperationState<Workflow>, Workflow>;

// @public
export interface WorkflowsCreateOrUpdateOptionalParams extends OperationOptions {
    updateIntervalInMs?: number;
}

// @public
export interface WorkflowsDeleteOptionalParams extends OperationOptions {
    updateIntervalInMs?: number;
}

// @public
export interface WorkflowsGetOptionalParams extends OperationOptions {
}

// @public
export interface WorkflowsListByContextOptionalParams extends OperationOptions {
}

// @public
export interface WorkflowsUpdateOptionalParams extends OperationOptions {
    updateIntervalInMs?: number;
}

// (No @packageDocumentation comment for this package)

```



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/review/arm-workloadorchestration-api-workflowVersions-node.api.md
================================================
## API Report File for "@azure/arm-workloadorchestration"

> Do not edit this file. It is a report generated by [API Extractor](https://api-extractor.com/).

```ts

import { Client } from '@azure-rest/core-client';
import { OperationOptions } from '@azure-rest/core-client';
import { OperationState } from '@azure/core-lro';
import { PollerLike } from '@azure/core-lro';

// @public
export function $delete(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, contextName: string, workflowName: string, versionName: string, options?: WorkflowVersionsDeleteOptionalParams): PollerLike<OperationState<void>, void>;

// @public
export function createOrUpdate(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, contextName: string, workflowName: string, versionName: string, resource: WorkflowVersion, options?: WorkflowVersionsCreateOrUpdateOptionalParams): PollerLike<OperationState<WorkflowVersion>, WorkflowVersion>;

// @public
export function get(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, contextName: string, workflowName: string, versionName: string, options?: WorkflowVersionsGetOptionalParams): Promise<WorkflowVersion>;

// @public
export function listByWorkflow(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, contextName: string, workflowName: string, options?: WorkflowVersionsListByWorkflowOptionalParams): PagedAsyncIterableIterator<WorkflowVersion>;

// @public
export function update(context: WorkloadOrchestrationManagementContext, resourceGroupName: string, contextName: string, workflowName: string, versionName: string, properties: WorkflowVersion, options?: WorkflowVersionsUpdateOptionalParams): PollerLike<OperationState<WorkflowVersion>, WorkflowVersion>;

// @public
export interface WorkflowVersionsCreateOrUpdateOptionalParams extends OperationOptions {
    updateIntervalInMs?: number;
}

// @public
export interface WorkflowVersionsDeleteOptionalParams extends OperationOptions {
    updateIntervalInMs?: number;
}

// @public
export interface WorkflowVersionsGetOptionalParams extends OperationOptions {
}

// @public
export interface WorkflowVersionsListByWorkflowOptionalParams extends OperationOptions {
}

// @public
export interface WorkflowVersionsUpdateOptionalParams extends OperationOptions {
    updateIntervalInMs?: number;
}

// (No @packageDocumentation comment for this package)

```



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/review/arm-workloadorchestration-models-node.api.md
================================================
## API Report File for "@azure/arm-workloadorchestration"

> Do not edit this file. It is a report generated by [API Extractor](https://api-extractor.com/).

```ts

// @public
export type ActiveState = string;

// @public
export interface AvailableSolutionTemplateVersion {
    isConfigured: boolean;
    latestConfigRevision: string;
    solutionTemplateVersion: string;
}

// @public
export interface BulkDeploySolutionParameter {
    targets: BulkDeployTargetDetails[];
}

// @public
export interface BulkDeployTargetDetails {
    solutionVersionId: string;
}

// @public
export interface BulkPublishSolutionParameter {
    solutionDependencies?: SolutionDependencyParameter[];
    solutionInstanceName?: string;
    targets: BulkPublishTargetDetails[];
}

// @public
export interface BulkPublishTargetDetails {
    solutionInstanceName?: string;
    targetId: string;
}

// @public
export interface Capability {
    description: string;
    name: string;
    state?: ResourceState;
}

// @public
export interface ComponentStatus {
    name?: string;
    status?: string;
}

// @public
export interface ConfigTemplate extends TrackedResource {
    readonly eTag?: string;
    properties?: ConfigTemplateProperties;
}

// @public
export interface ConfigTemplateProperties {
    description: string;
    readonly latestVersion?: string;
    readonly provisioningState?: ProvisioningState;
}

// @public
export interface ConfigTemplateUpdate {
    properties?: ConfigTemplateUpdateProperties;
    tags?: Record<string, string>;
}

// @public
export interface ConfigTemplateUpdateProperties {
    description?: string;
}

// @public
export interface ConfigTemplateVersion extends ProxyResource {
    readonly eTag?: string;
    properties?: ConfigTemplateVersionProperties;
}

// @public
export interface ConfigTemplateVersionProperties {
    configurations: string;
    readonly provisioningState?: ProvisioningState;
}

// @public
export interface ConfigTemplateVersionWithUpdateType {
    configTemplateVersion: ConfigTemplateVersion;
    updateType?: UpdateType;
    version?: string;
}

// @public
export type ConfigurationModel = string;

// @public
export type ConfigurationType = string;

// @public
export interface Context extends TrackedResource {
    properties?: ContextProperties;
}

// @public
export interface ContextProperties {
    capabilities: Capability[];
    hierarchies: Hierarchy[];
    readonly provisioningState?: ProvisioningState;
}

// @public
export interface ContextUpdate {
    properties?: ContextUpdateProperties;
    tags?: Record<string, string>;
}

// @public
export interface ContextUpdateProperties {
    capabilities?: Capability[];
    hierarchies?: Hierarchy[];
}

// @public
export type CreatedByType = string;

// @public
export interface DeployJobParameter extends JobParameterBase {
    jobType: "deploy";
    // (undocumented)
    parameter?: InstallSolutionParameter;
}

// @public
export interface DeployJobStepStatistics extends JobStepStatisticsBase {
    failedCount?: number;
    statisticsType: "deploy";
    successCount?: number;
    totalCount?: number;
}

// @public
export interface DeploymentStatus {
    deployed?: number;
    expectedRunningJobId?: number;
    generation?: number;
    lastModified?: Date;
    runningJobId?: number;
    status?: string;
    statusDetails?: string;
    targetStatuses?: TargetStatus[];
}

// @public
export interface Diagnostic extends TrackedResource {
    readonly eTag?: string;
    // (undocumented)
    extendedLocation?: ExtendedLocation;
    properties?: DiagnosticProperties;
}

// @public
export interface DiagnosticProperties {
    readonly provisioningState?: ProvisioningState;
}

// @public
export interface DiagnosticUpdate {
    properties?: DiagnosticUpdateProperties;
    tags?: Record<string, string>;
}

// @public
export interface DiagnosticUpdateProperties {
}

// @public
export interface DynamicSchema extends ProxyResource {
    readonly eTag?: string;
    properties?: DynamicSchemaProperties;
}

// @public
export interface DynamicSchemaProperties {
    readonly configurationModel?: ConfigurationModel;
    readonly configurationType?: ConfigurationType;
    readonly provisioningState?: ProvisioningState;
}

// @public
export interface DynamicSchemaVersion extends ProxyResource {
    readonly eTag?: string;
    properties?: SchemaVersionProperties;
}

// @public
export interface ErrorAction {
    maxToleratedFailures?: number;
    mode?: ErrorActionMode;
}

// @public
export type ErrorActionMode = string;

// @public
export interface ErrorAdditionalInfo {
    readonly info?: any;
    readonly type?: string;
}

// @public
export interface ErrorDetail {
    readonly additionalInfo?: ErrorAdditionalInfo[];
    readonly code?: string;
    readonly details?: ErrorDetail[];
    readonly message?: string;
    readonly target?: string;
}

// @public
export interface ErrorResponse {
    error?: ErrorDetail;
}

// @public
export interface Execution extends ProxyResource {
    readonly eTag?: string;
    // (undocumented)
    extendedLocation?: ExtendedLocation;
    properties?: ExecutionProperties;
}

// @public
export interface ExecutionProperties {
    readonly provisioningState?: ProvisioningState;
    specification?: Record<string, any>;
    readonly status?: ExecutionStatus;
    workflowVersionId: string;
}

// @public
export interface ExecutionStatus {
    stageHistory?: StageStatus[];
    status?: number;
    statusMessage?: string;
    updateTime?: Date;
}

// @public
export interface ExtendedLocation {
    name: string;
    type: ExtendedLocationType;
}

// @public
export type ExtendedLocationType = string;

// @public
export interface ExtensionResource extends Resource {
}

// @public
export interface Hierarchy {
    description: string;
    name: string;
}

// @public
export interface InstallSolutionParameter {
    solutionVersionId: string;
}

// @public
export interface Instance extends ProxyResource {
    readonly eTag?: string;
    // (undocumented)
    extendedLocation?: ExtendedLocation;
    properties?: InstanceProperties;
}

// @public
export interface InstanceHistory extends ProxyResource {
    readonly eTag?: string;
    // (undocumented)
    extendedLocation?: ExtendedLocation;
    properties?: InstanceHistoryProperties;
}

// @public
export interface InstanceHistoryProperties {
    activeState?: ActiveState;
    readonly provisioningState?: ProvisioningState;
    readonly reconciliationPolicy?: ReconciliationPolicyProperties;
    readonly solutionScope?: string;
    readonly solutionVersion: SolutionVersionSnapshot;
    readonly status?: DeploymentStatus;
    readonly target: TargetSnapshot;
}

// @public
export interface InstanceProperties {
    activeState?: ActiveState;
    readonly deploymentTimestampEpoch?: number;
    readonly provisioningState?: ProvisioningState;
    reconciliationPolicy?: ReconciliationPolicyProperties;
    solutionScope?: string;
    solutionVersionId: string;
    readonly status?: DeploymentStatus;
    targetId: string;
}

// @public
export interface Job extends ExtensionResource {
    readonly eTag?: string;
    properties?: JobProperties;
}

// @public
export interface JobParameterBase {
    jobType: JobType;
}

// @public
export type JobParameterBaseUnion = DeployJobParameter | JobParameterBase;

// @public
export interface JobProperties {
    correlationId?: string;
    endTime?: Date;
    readonly errorDetails?: ErrorDetail;
    jobParameter?: JobParameterBaseUnion;
    jobType: JobType;
    readonly provisioningState?: ProvisioningState;
    startTime?: Date;
    status: JobStatus;
    steps?: JobStep[];
    triggeredBy?: string;
}

// @public
export type JobStatus = string;

// @public
export interface JobStep {
    endTime?: Date;
    readonly errorDetails?: ErrorDetail;
    message?: string;
    name: string;
    startTime?: Date;
    statistics?: JobStepStatisticsBaseUnion;
    status: JobStatus;
    steps?: JobStep[];
}

// @public
export interface JobStepStatisticsBase {
    statisticsType: JobType;
}

// @public
export type JobStepStatisticsBaseUnion = DeployJobStepStatistics | JobStepStatisticsBase;

// @public
export type JobType = string;

// @public
export enum KnownActiveState {
    Active = "active",
    Inactive = "inactive"
}

// @public
export enum KnownConfigurationModel {
    Application = "Application",
    Common = "Common"
}

// @public
export enum KnownConfigurationType {
    Hierarchy = "Hierarchy",
    Shared = "Shared"
}

// @public
export enum KnownCreatedByType {
    Application = "Application",
    Key = "Key",
    ManagedIdentity = "ManagedIdentity",
    User = "User"
}

// @public
export enum KnownErrorActionMode {
    SilentlyContinue = "silentlyContinue",
    StopOnAnyFailure = "stopOnAnyFailure",
    StopOnNFailures = "stopOnNFailures"
}

// @public
export enum KnownExtendedLocationType {
    CustomLocation = "CustomLocation",
    EdgeZone = "EdgeZone"
}

// @public
export enum KnownJobStatus {
    Failed = "Failed",
    InProgress = "InProgress",
    NotStarted = "NotStarted",
    Succeeded = "Succeeded"
}

// @public
export enum KnownJobType {
    Deploy = "deploy",
    ExternalValidation = "externalValidation",
    Staging = "staging"
}

// @public
export enum KnownOrchestratorType {
    TO = "TO"
}

// @public
export enum KnownProvisioningState {
    Canceled = "Canceled",
    Deleting = "Deleting",
    Failed = "Failed",
    Initialized = "Initialized",
    Inprogress = "InProgress",
    Succeeded = "Succeeded"
}

// @public
export enum KnownReconciliationState {
    Active = "active",
    Inactive = "inactive"
}

// @public
export enum KnownResourceState {
    Active = "active",
    Inactive = "inactive"
}

// @public
export enum KnownState {
    Deployed = "Deployed",
    Deploying = "Deploying",
    ExternalValidationFailed = "ExternalValidationFailed",
    Failed = "Failed",
    InReview = "InReview",
    PendingExternalValidation = "PendingExternalValidation",
    ReadyToDeploy = "ReadyToDeploy",
    ReadyToUpgrade = "ReadyToUpgrade",
    Staging = "Staging",
    Undeployed = "Undeployed",
    UpgradeInReview = "UpgradeInReview"
}

// @public
export enum KnownUpdateType {
    Major = "Major",
    Minor = "Minor",
    Patch = "Patch"
}

// @public
export enum KnownValidationStatus {
    Invalid = "Invalid",
    Valid = "Valid"
}

// @public
export enum KnownVersions {
    // (undocumented)
    V20250601 = "2025-06-01"
}

// @public
export type OrchestratorType = string;

// @public
export type ProvisioningState = string;

// @public
export interface ProxyResource extends Resource {
}

// @public
export interface ReconciliationPolicyProperties {
    interval: string;
    state: ReconciliationState;
}

// @public
export type ReconciliationState = string;

// @public
export interface RemoveRevisionParameter {
    solutionTemplateId: string;
    solutionVersion: string;
}

// @public
export interface RemoveVersionResponse {
    status: string;
}

// @public
export interface ResolvedConfiguration {
    configuration: string;
}

// @public
export interface Resource {
    readonly id?: string;
    readonly name?: string;
    readonly systemData?: SystemData;
    readonly type?: string;
}

// @public
export type ResourceState = string;

// @public
export interface Schema extends TrackedResource {
    readonly eTag?: string;
    properties?: SchemaProperties;
}

// @public
export interface SchemaProperties {
    readonly currentVersion?: string;
    readonly provisioningState?: ProvisioningState;
}

// @public
export interface SchemaReference extends ExtensionResource {
    readonly eTag?: string;
    properties?: SchemaReferenceProperties;
}

// @public
export interface SchemaReferenceProperties {
    readonly provisioningState?: ProvisioningState;
    schemaId: string;
}

// @public
export interface SchemaUpdate {
    properties?: SchemaUpdateProperties;
    tags?: Record<string, string>;
}

// @public
export interface SchemaUpdateProperties {
}

// @public
export interface SchemaVersion extends ProxyResource {
    readonly eTag?: string;
    properties?: SchemaVersionProperties;
}

// @public
export interface SchemaVersionProperties {
    readonly provisioningState?: ProvisioningState;
    value: string;
}

// @public
export interface SchemaVersionWithUpdateType {
    schemaVersion: SchemaVersion;
    updateType?: UpdateType;
    version?: string;
}

// @public
export interface SiteReference extends ProxyResource {
    properties?: SiteReferenceProperties;
}

// @public
export interface SiteReferenceProperties {
    readonly provisioningState?: ProvisioningState;
    siteId: string;
}

// @public
export interface Solution extends ProxyResource {
    readonly eTag?: string;
    // (undocumented)
    extendedLocation?: ExtendedLocation;
    properties?: SolutionProperties;
}

// @public
export interface SolutionDependency {
    dependencies?: SolutionDependency[];
    solutionInstanceName?: string;
    solutionTemplateVersionId: string;
    solutionVersionId: string;
    targetId: string;
}

// @public
export interface SolutionDependencyParameter {
    dependencies?: SolutionDependencyParameter[];
    solutionInstanceName?: string;
    solutionTemplateId?: string;
    solutionTemplateVersion?: string;
    solutionVersionId?: string;
    targetId?: string;
}

// @public
export interface SolutionProperties {
    readonly availableSolutionTemplateVersions?: AvailableSolutionTemplateVersion[];
    readonly provisioningState?: ProvisioningState;
    readonly solutionTemplateId?: string;
}

// @public
export interface SolutionTemplate extends TrackedResource {
    readonly eTag?: string;
    properties?: SolutionTemplateProperties;
}

// @public
export interface SolutionTemplateParameter {
    solutionDependencies?: SolutionDependencyParameter[];
    solutionInstanceName?: string;
    solutionTemplateVersionId: string;
}

// @public
export interface SolutionTemplateProperties {
    capabilities: string[];
    description: string;
    enableExternalValidation?: boolean;
    readonly latestVersion?: string;
    readonly provisioningState?: ProvisioningState;
    state?: ResourceState;
}

// @public
export interface SolutionTemplateUpdate {
    properties?: SolutionTemplateUpdateProperties;
    tags?: Record<string, string>;
}

// @public
export interface SolutionTemplateUpdateProperties {
    capabilities?: string[];
    description?: string;
    enableExternalValidation?: boolean;
    state?: ResourceState;
}

// @public
export interface SolutionTemplateVersion extends ProxyResource {
    readonly eTag?: string;
    properties?: SolutionTemplateVersionProperties;
}

// @public
export interface SolutionTemplateVersionProperties {
    configurations: string;
    orchestratorType?: OrchestratorType;
    readonly provisioningState?: ProvisioningState;
    specification: Record<string, any>;
}

// @public
export interface SolutionTemplateVersionWithUpdateType {
    solutionTemplateVersion: SolutionTemplateVersion;
    updateType?: UpdateType;
    version?: string;
}

// @public
export interface SolutionUpdate {
    properties?: SolutionUpdateProperties;
}

// @public
export interface SolutionUpdateProperties {
}

// @public
export interface SolutionVersion extends ProxyResource {
    readonly eTag?: string;
    // (undocumented)
    extendedLocation?: ExtendedLocation;
    properties?: SolutionVersionProperties;
}

// @public
export interface SolutionVersionParameter {
    solutionVersionId: string;
}

// @public
export interface SolutionVersionProperties {
    readonly actionType?: JobType;
    readonly configuration?: string;
    readonly errorDetails?: ErrorDetail;
    readonly externalValidationId?: string;
    readonly latestActionTrackingUri?: string;
    readonly provisioningState?: ProvisioningState;
    readonly reviewId?: string;
    readonly revision?: number;
    readonly solutionDependencies?: SolutionDependency[];
    readonly solutionInstanceName?: string;
    readonly solutionTemplateVersionId?: string;
    specification: Record<string, any>;
    readonly state?: State;
    readonly targetDisplayName?: string;
    readonly targetLevelConfiguration?: string;
}

// @public
export interface SolutionVersionSnapshot {
    solutionVersionId?: string;
    specification?: Record<string, any>;
}

// @public
export interface StageSpec {
    name: string;
    specification?: Record<string, any>;
    taskOption?: TaskOption;
    tasks?: TaskSpec[];
}

// @public
export interface StageStatus {
    errorMessage?: string;
    inputs?: Record<string, any>;
    isActive?: ActiveState;
    nextstage?: string;
    outputs?: Record<string, any>;
    stage?: string;
    status?: number;
    statusMessage?: string;
}

// @public
export type State = string;

// @public
export interface SystemData {
    createdAt?: Date;
    createdBy?: string;
    createdByType?: CreatedByType;
    lastModifiedAt?: Date;
    lastModifiedBy?: string;
    lastModifiedByType?: CreatedByType;
}

// @public
export interface Target extends TrackedResource {
    readonly eTag?: string;
    // (undocumented)
    extendedLocation?: ExtendedLocation;
    properties?: TargetProperties;
}

// @public
export interface TargetProperties {
    capabilities: string[];
    contextId: string;
    description: string;
    displayName: string;
    hierarchyLevel: string;
    readonly provisioningState?: ProvisioningState;
    solutionScope?: string;
    state?: ResourceState;
    readonly status?: DeploymentStatus;
    targetSpecification: Record<string, any>;
}

// @public
export interface TargetSnapshot {
    solutionScope?: string;
    targetId?: string;
    targetSpecification?: Record<string, any>;
}

// @public
export interface TargetStatus {
    componentStatuses?: ComponentStatus[];
    name?: string;
    status?: string;
}

// @public
export interface TargetUpdate {
    properties?: TargetUpdateProperties;
    tags?: Record<string, string>;
}

// @public
export interface TargetUpdateProperties {
    capabilities?: string[];
    contextId?: string;
    description?: string;
    displayName?: string;
    hierarchyLevel?: string;
    solutionScope?: string;
    state?: ResourceState;
    targetSpecification?: Record<string, any>;
}

// @public
export interface TaskOption {
    concurrency?: number;
    errorAction?: ErrorAction;
}

// @public
export interface TaskSpec {
    name: string;
    specification: Record<string, any>;
    targetId?: string;
}

// @public
export interface TrackedResource extends Resource {
    location: string;
    tags?: Record<string, string>;
}

// @public
export interface UninstallSolutionParameter {
    solutionInstanceName?: string;
    solutionTemplateId: string;
}

// @public
export interface UpdateExternalValidationStatusParameter {
    errorDetails?: ErrorDetail;
    externalValidationId: string;
    solutionVersionId: string;
    validationStatus: ValidationStatus;
}

// @public
export type UpdateType = string;

// @public
export type ValidationStatus = string;

// @public
export interface VersionParameter {
    version: string;
}

// @public
export interface Workflow extends ProxyResource {
    readonly eTag?: string;
    // (undocumented)
    extendedLocation?: ExtendedLocation;
    properties?: WorkflowProperties;
}

// @public
export interface WorkflowProperties {
    readonly provisioningState?: ProvisioningState;
    readonly workflowTemplateId?: string;
}

// @public
export interface WorkflowVersion extends ProxyResource {
    readonly eTag?: string;
    // (undocumented)
    extendedLocation?: ExtendedLocation;
    properties?: WorkflowVersionProperties;
}

// @public
export interface WorkflowVersionProperties {
    readonly configuration?: string;
    readonly provisioningState?: ProvisioningState;
    readonly reviewId?: string;
    readonly revision?: number;
    specification?: Record<string, any>;
    stageSpec: StageSpec[];
    readonly state?: State;
}

// (No @packageDocumentation comment for this package)

```



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/configTemplatesCreateOrUpdateSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to create or update a Config Template Resource
 *
 * @summary create or update a Config Template Resource
 * x-ms-original-file: 2025-06-01/ConfigTemplates_CreateOrUpdate_MaximumSet_Gen.json
 */
async function configTemplatesCreateOrUpdateMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.configTemplates.createOrUpdate("rgconfigurationmanager", "testname", {
    properties: { description: "ccdyggozwmhyvemlcwlsnhijwg" },
    tags: { key6936: "vnqujuvnbxonbsgb" },
    location: "egqjo",
  });
  console.log(result);
}

async function main() {
  await configTemplatesCreateOrUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/configTemplatesCreateVersionSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to create or update a Config Template Version Resource with the specified UpdateType
 *
 * @summary create or update a Config Template Version Resource with the specified UpdateType
 * x-ms-original-file: 2025-06-01/ConfigTemplates_CreateVersion_MaximumSet_Gen.json
 */
async function configTemplatesCreateVersionMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.configTemplates.createVersion("rgconfigurationmanager", "testname", {
    updateType: "Major",
    version: "1.0.0",
    configTemplateVersion: {
      properties: { configurations: "rgricnhvcbqykc" },
    },
  });
  console.log(result);
}

async function main() {
  await configTemplatesCreateVersionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/configTemplatesDeleteSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to delete a Config Template Resource
 *
 * @summary delete a Config Template Resource
 * x-ms-original-file: 2025-06-01/ConfigTemplates_Delete_MaximumSet_Gen.json
 */
async function configTemplatesDeleteMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.configTemplates.delete("rgconfigurationmanager", "testname");
}

async function main() {
  await configTemplatesDeleteMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/configTemplatesGetSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to get a Config Template Resource
 *
 * @summary get a Config Template Resource
 * x-ms-original-file: 2025-06-01/ConfigTemplates_Get_MaximumSet_Gen.json
 */
async function configTemplatesGetMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.configTemplates.get("rgconfigurationmanager", "testname");
  console.log(result);
}

async function main() {
  await configTemplatesGetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/configTemplatesListByResourceGroupSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to list by specified resource group
 *
 * @summary list by specified resource group
 * x-ms-original-file: 2025-06-01/ConfigTemplates_ListByResourceGroup_MaximumSet_Gen.json
 */
async function configTemplatesListByResourceGroupMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.configTemplates.listByResourceGroup("rgconfigurationmanager")) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main() {
  await configTemplatesListByResourceGroupMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/configTemplatesListBySubscriptionSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to list by subscription
 *
 * @summary list by subscription
 * x-ms-original-file: 2025-06-01/ConfigTemplates_ListBySubscription_MaximumSet_Gen.json
 */
async function configTemplatesListBySubscriptionMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.configTemplates.listBySubscription()) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main() {
  await configTemplatesListBySubscriptionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/configTemplatesRemoveVersionSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to remove Config Template Version Resource
 *
 * @summary remove Config Template Version Resource
 * x-ms-original-file: 2025-06-01/ConfigTemplates_RemoveVersion_MaximumSet_Gen.json
 */
async function configTemplatesRemoveVersionMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.configTemplates.removeVersion("rgconfigurationmanager", "testname", {
    version: "ghtvdzgmzncaifrnuumg",
  });
  console.log(result);
}

async function main() {
  await configTemplatesRemoveVersionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/configTemplatesUpdateSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to update a Config Template Resource
 *
 * @summary update a Config Template Resource
 * x-ms-original-file: 2025-06-01/ConfigTemplates_Update_MaximumSet_Gen.json
 */
async function configTemplatesUpdateMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.configTemplates.update("rgconfigurationmanager", "testname", {
    properties: { description: "cavjiqnrbzsvedicrixhwnfj" },
    tags: { key7701: "wrsv" },
  });
  console.log(result);
}

async function main() {
  await configTemplatesUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/configTemplateVersionsGetSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to get a Config Template Version Resource
 *
 * @summary get a Config Template Version Resource
 * x-ms-original-file: 2025-06-01/ConfigTemplateVersions_Get_MaximumSet_Gen.json
 */
async function configTemplateVersionsGetMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.configTemplateVersions.get(
    "rgconfigurationmanager",
    "testname",
    "1.0.0",
  );
  console.log(result);
}

async function main() {
  await configTemplateVersionsGetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/configTemplateVersionsListByConfigTemplateSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to list Config Template Version Resources
 *
 * @summary list Config Template Version Resources
 * x-ms-original-file: 2025-06-01/ConfigTemplateVersions_ListByConfigTemplate_MaximumSet_Gen.json
 */
async function configTemplateVersionsListByConfigTemplateMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.configTemplateVersions.listByConfigTemplate(
    "rgconfigurationmanager",
    "testname",
  )) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main() {
  await configTemplateVersionsListByConfigTemplateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/contextsCreateOrUpdateSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to create or update Context Resource
 *
 * @summary create or update Context Resource
 * x-ms-original-file: 2025-06-01/Contexts_CreateOrUpdate_MaximumSet_Gen.json
 */
async function contextsCreateOrUpdateMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.contexts.createOrUpdate("rgconfigurationmanager", "testname", {
    properties: {
      capabilities: [
        {
          name: "tpylinjcmlnycfpofpxjtqmt",
          description: "banbenutsngwytoqh",
          state: "active",
        },
      ],
      hierarchies: [{ name: "upqe", description: "vg" }],
    },
    tags: { key3046: "clcnhzwypk" },
    location: "pkquwbplcp",
  });
  console.log(result);
}

async function main() {
  await contextsCreateOrUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/contextsDeleteSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to delete Context Resource
 *
 * @summary delete Context Resource
 * x-ms-original-file: 2025-06-01/Contexts_Delete_MaximumSet_Gen.json
 */
async function contextsDeleteMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.contexts.delete("rgconfigurationmanager", "testname");
}

async function main() {
  await contextsDeleteMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/contextsGetSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to get Context Resource
 *
 * @summary get Context Resource
 * x-ms-original-file: 2025-06-01/Contexts_Get_MaximumSet_Gen.json
 */
async function contextsGetMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.contexts.get("rgconfigurationmanager", "testname");
  console.log(result);
}

async function main() {
  await contextsGetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/contextsListByResourceGroupSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to list by specified resource group
 *
 * @summary list by specified resource group
 * x-ms-original-file: 2025-06-01/Contexts_ListByResourceGroup_MaximumSet_Gen.json
 */
async function contextsListByResourceGroupMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.contexts.listByResourceGroup("rgconfigurationmanager")) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main() {
  await contextsListByResourceGroupMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/contextsListBySubscriptionSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to list by subscription
 *
 * @summary list by subscription
 * x-ms-original-file: 2025-06-01/Contexts_ListBySubscription_MaximumSet_Gen.json
 */
async function contextsListBySubscriptionMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.contexts.listBySubscription()) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main() {
  await contextsListBySubscriptionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/contextsUpdateSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to update an Context Resource
 *
 * @summary update an Context Resource
 * x-ms-original-file: 2025-06-01/Contexts_Update_MaximumSet_Gen.json
 */
async function contextsUpdateMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.contexts.update("rgconfigurationmanager", "testname", {
    properties: {
      capabilities: [
        {
          name: "tpylinjcmlnycfpofpxjtqmt",
          description: "banbenutsngwytoqh",
          state: "active",
        },
      ],
      hierarchies: [{ name: "upqe", description: "vg" }],
    },
    tags: { key9545: "dhxykbzgliyqxxizttbjhuruhhv" },
  });
  console.log(result);
}

async function main() {
  await contextsUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/diagnosticsCreateOrUpdateSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to creates new or updates existing Diagnostic resource.
 *
 * @summary creates new or updates existing Diagnostic resource.
 * x-ms-original-file: 2025-06-01/Diagnostics_CreateOrUpdate_MaximumSet_Gen.json
 */
async function diagnosticsCreateOrUpdateMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.diagnostics.createOrUpdate("rgconfigurationmanager", "testname", {
    properties: {},
    extendedLocation: { name: "szjrwimeqyiue", type: "EdgeZone" },
    tags: { key4304: "mdrwpsdrcicagvximokxrrp" },
    location: "ouwfvnokjvivmjzqpupwrbsmls",
  });
  console.log(result);
}

async function main() {
  await diagnosticsCreateOrUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/diagnosticsDeleteSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to deletes specified Diagnostic resource.
 *
 * @summary deletes specified Diagnostic resource.
 * x-ms-original-file: 2025-06-01/Diagnostics_Delete_MaximumSet_Gen.json
 */
async function diagnosticsDeleteMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.diagnostics.delete("rgconfigurationmanager", "testname");
}

async function main() {
  await diagnosticsDeleteMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/diagnosticsGetSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to returns details of specified Diagnostic resource.
 *
 * @summary returns details of specified Diagnostic resource.
 * x-ms-original-file: 2025-06-01/Diagnostics_Get_MaximumSet_Gen.json
 */
async function diagnosticsGetMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.diagnostics.get("rgconfigurationmanager", "testname");
  console.log(result);
}

async function main() {
  await diagnosticsGetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/diagnosticsListByResourceGroupSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to returns a collection of Diagnostic resources within the resource group.
 *
 * @summary returns a collection of Diagnostic resources within the resource group.
 * x-ms-original-file: 2025-06-01/Diagnostics_ListByResourceGroup_MaximumSet_Gen.json
 */
async function diagnosticsListByResourceGroupMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.diagnostics.listByResourceGroup("rgconfigurationmanager")) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main() {
  await diagnosticsListByResourceGroupMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/diagnosticsListBySubscriptionSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to lists Diagnostics resources within an Azure subscription.
 *
 * @summary lists Diagnostics resources within an Azure subscription.
 * x-ms-original-file: 2025-06-01/Diagnostics_ListBySubscription_MaximumSet_Gen.json
 */
async function diagnosticsListBySubscriptionMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.diagnostics.listBySubscription()) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main() {
  await diagnosticsListBySubscriptionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/diagnosticsUpdateSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to updates existing Diagnostic resource.
 *
 * @summary updates existing Diagnostic resource.
 * x-ms-original-file: 2025-06-01/Diagnostics_Update_MaximumSet_Gen.json
 */
async function diagnosticsUpdateMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.diagnostics.update("rgconfigurationmanager", "testname", {
    properties: {},
    tags: { key1922: "efraipifhmdfekwgunngrgvsc" },
  });
  console.log(result);
}

async function main() {
  await diagnosticsUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/dynamicSchemasCreateOrUpdateSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to create or update a DynamicSchema Resource
 *
 * @summary create or update a DynamicSchema Resource
 * x-ms-original-file: 2025-06-01/DynamicSchemas_CreateOrUpdate_MaximumSet_Gen.json
 */
async function dynamicSchemasCreateOrUpdateMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.dynamicSchemas.createOrUpdate(
    "rgconfigurationmanager",
    "testname",
    "testname",
    {
      properties: {
        configurationType: "Shared",
        configurationModel: "Application",
      },
    },
  );
  console.log(result);
}

async function main() {
  await dynamicSchemasCreateOrUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/dynamicSchemasDeleteSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to delete a DynamicSchema Resource
 *
 * @summary delete a DynamicSchema Resource
 * x-ms-original-file: 2025-06-01/DynamicSchemas_Delete_MaximumSet_Gen.json
 */
async function dynamicSchemasDeleteMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.dynamicSchemas.delete("rgconfigurationmanager", "testname", "testname");
}

async function main() {
  await dynamicSchemasDeleteMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/dynamicSchemasGetSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to get a DynamicSchema Resource
 *
 * @summary get a DynamicSchema Resource
 * x-ms-original-file: 2025-06-01/DynamicSchemas_Get_MaximumSet_Gen.json
 */
async function dynamicSchemasGetMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.dynamicSchemas.get("rgconfigurationmanager", "testname", "testname");
  console.log(result);
}

async function main() {
  await dynamicSchemasGetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/dynamicSchemasListBySchemaSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to list by Schema
 *
 * @summary list by Schema
 * x-ms-original-file: 2025-06-01/DynamicSchemas_ListBySchema_MaximumSet_Gen.json
 */
async function dynamicSchemasListBySchemaMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.dynamicSchemas.listBySchema(
    "rgconfigurationmanager",
    "testname",
  )) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main() {
  await dynamicSchemasListBySchemaMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/dynamicSchemasUpdateSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to update a DynamicSchema Resource
 *
 * @summary update a DynamicSchema Resource
 * x-ms-original-file: 2025-06-01/DynamicSchemas_Update_MaximumSet_Gen.json
 */
async function dynamicSchemasUpdateMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.dynamicSchemas.update(
    "rgconfigurationmanager",
    "testname",
    "testname",
    {
      properties: {
        configurationType: "Shared",
        configurationModel: "Application",
      },
    },
  );
  console.log(result);
}

async function main() {
  await dynamicSchemasUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/dynamicSchemaVersionsCreateOrUpdateSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to create or update a Dynamic Schema Version Resource
 *
 * @summary create or update a Dynamic Schema Version Resource
 * x-ms-original-file: 2025-06-01/DynamicSchemaVersions_CreateOrUpdate_MaximumSet_Gen.json
 */
async function dynamicSchemaVersionsCreateOrUpdateMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.dynamicSchemaVersions.createOrUpdate(
    "rgconfigurationmanager",
    "testname",
    "testname",
    "1.0.0",
    { properties: { value: "uiaqdwsi" } },
  );
  console.log(result);
}

async function main() {
  await dynamicSchemaVersionsCreateOrUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/dynamicSchemaVersionsDeleteSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to delete a Dynamic Schema Version Resource
 *
 * @summary delete a Dynamic Schema Version Resource
 * x-ms-original-file: 2025-06-01/DynamicSchemaVersions_Delete_MaximumSet_Gen.json
 */
async function dynamicSchemaVersionsDeleteMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.dynamicSchemaVersions.delete(
    "rgconfigurationmanager",
    "testname",
    "testname",
    "1.0.0",
  );
}

async function main() {
  await dynamicSchemaVersionsDeleteMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/dynamicSchemaVersionsGetSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to get a Dynamic Schema Version Resource
 *
 * @summary get a Dynamic Schema Version Resource
 * x-ms-original-file: 2025-06-01/DynamicSchemaVersions_Get_MaximumSet_Gen.json
 */
async function dynamicSchemaVersionsGetMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.dynamicSchemaVersions.get(
    "rgconfigurationmanager",
    "testname",
    "testname",
    "1.0.0",
  );
  console.log(result);
}

async function main() {
  await dynamicSchemaVersionsGetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/dynamicSchemaVersionsListByDynamicSchemaSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to list by Dynamic Schema
 *
 * @summary list by Dynamic Schema
 * x-ms-original-file: 2025-06-01/DynamicSchemaVersions_ListByDynamicSchema_MaximumSet_Gen.json
 */
async function dynamicSchemaVersionsListByDynamicSchemaMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.dynamicSchemaVersions.listByDynamicSchema(
    "rgconfigurationmanager",
    "testname",
    "testname",
  )) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main() {
  await dynamicSchemaVersionsListByDynamicSchemaMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/dynamicSchemaVersionsUpdateSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to update a Dynamic Schema Version Resource
 *
 * @summary update a Dynamic Schema Version Resource
 * x-ms-original-file: 2025-06-01/DynamicSchemaVersions_Update_MaximumSet_Gen.json
 */
async function dynamicSchemaVersionsUpdateMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.dynamicSchemaVersions.update(
    "rgconfigurationmanager",
    "testname",
    "testname",
    "1.0.0",
    { properties: { value: "muezi" } },
  );
  console.log(result);
}

async function main() {
  await dynamicSchemaVersionsUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/executionsCreateOrUpdateSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to create or update Execution Resource
 *
 * @summary create or update Execution Resource
 * x-ms-original-file: 2025-06-01/Executions_CreateOrUpdate_MaximumSet_Gen.json
 */
async function executionsCreateOrUpdateMaximumSetGeneratedByMaximumSetRule() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "EE6D9590-0D52-4B1C-935C-FE49DBF838EB";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.executions.createOrUpdate(
    "rgconfigurationmanager",
    "abcde",
    "abcde",
    "abcde",
    "abcde",
    {
      properties: {
        specification: {},
        status: {
          status: 999,
          stageHistory: [
            {
              status: 999,
              statusMessage: "wfymzartwvvqrgrmdwyhfaftszoc",
              stage: "gsostfpgjcsoeky",
              nextstage: "wjxvqbrocjxzhzfgmgbzt",
              errorMessage: "xsvwgovyatvlacmp",
              isActive: "active",
              inputs: {},
              outputs: {},
            },
          ],
          updateTime: new Date("2025-02-17T13:55:20.922Z"),
          statusMessage: "ebhukpnhnbu",
        },
        workflowVersionId: "souenlqwltljsojdcbpc",
      },
      extendedLocation: { name: "ugf", type: "EdgeZone" },
    },
  );
  console.log(result);
}

async function main() {
  await executionsCreateOrUpdateMaximumSetGeneratedByMaximumSetRule();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/executionsDeleteSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to delete Execution Resource
 *
 * @summary delete Execution Resource
 * x-ms-original-file: 2025-06-01/Executions_Delete_MaximumSet_Gen.json
 */
async function executionsDeleteMaximumSetGeneratedByMaximumSetRule() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "EE6D9590-0D52-4B1C-935C-FE49DBF838EB";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.executions.delete("rgconfigurationmanager", "abcde", "abcde", "abcde", "abcde");
}

async function main() {
  await executionsDeleteMaximumSetGeneratedByMaximumSetRule();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/executionsGetSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to get Execution Resource
 *
 * @summary get Execution Resource
 * x-ms-original-file: 2025-06-01/Executions_Get_MaximumSet_Gen.json
 */
async function executionsGetMaximumSetGeneratedByMaximumSetRule() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "EE6D9590-0D52-4B1C-935C-FE49DBF838EB";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.executions.get(
    "rgconfigurationmanager",
    "abcde",
    "abcde",
    "abcde",
    "abcde",
  );
  console.log(result);
}

async function main() {
  await executionsGetMaximumSetGeneratedByMaximumSetRule();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/executionsListByWorkflowVersionSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to list Execution Resources
 *
 * @summary list Execution Resources
 * x-ms-original-file: 2025-06-01/Executions_ListByWorkflowVersion_MaximumSet_Gen.json
 */
async function executionsListByWorkflowVersionMaximumSetGeneratedByMaximumSetRule() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "EE6D9590-0D52-4B1C-935C-FE49DBF838EB";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.executions.listByWorkflowVersion(
    "rgconfigurationmanager",
    "abcde",
    "abcde",
    "abcde",
  )) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main() {
  await executionsListByWorkflowVersionMaximumSetGeneratedByMaximumSetRule();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/executionsUpdateSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to update an Execution Resource
 *
 * @summary update an Execution Resource
 * x-ms-original-file: 2025-06-01/Executions_Update_MaximumSet_Gen.json
 */
async function executionsUpdateMaximumSetGeneratedByMaximumSetRule() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "FFA229AF-C1A3-4CB6-9E5D-62C25CFBE4D0";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.executions.update(
    "rgconfigurationmanager",
    "abcde",
    "abcde",
    "abcde",
    "abcde",
    { properties: { specification: {}, workflowVersionId: "xjsxzbfltzvbuvn" } },
  );
  console.log(result);
}

async function main() {
  await executionsUpdateMaximumSetGeneratedByMaximumSetRule();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/instanceHistoriesGetSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to get InstanceHistory Resource
 *
 * @summary get InstanceHistory Resource
 * x-ms-original-file: 2025-06-01/InstanceHistories_Get_MaximumSet_Gen.json
 */
async function instanceHistoriesGetMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.instanceHistories.get(
    "rgconfigurationmanager",
    "testname",
    "testname",
    "testname",
    "testname",
  );
  console.log(result);
}

async function main() {
  await instanceHistoriesGetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/instanceHistoriesListByInstanceSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to list InstanceHistory Resources
 *
 * @summary list InstanceHistory Resources
 * x-ms-original-file: 2025-06-01/InstanceHistories_ListByInstance_MaximumSet_Gen.json
 */
async function instanceHistoriesListByInstanceMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.instanceHistories.listByInstance(
    "rgconfigurationmanager",
    "testname",
    "testname",
    "testname",
  )) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main() {
  await instanceHistoriesListByInstanceMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/instancesCreateOrUpdateSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to create or update Instance Resource
 *
 * @summary create or update Instance Resource
 * x-ms-original-file: 2025-06-01/Instances_CreateOrUpdate_MaximumSet_Gen.json
 */
async function instancesCreateOrUpdateMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.instances.createOrUpdate(
    "rgconfigurationmanager",
    "testname",
    "testname",
    "testname",
    {
      properties: {
        solutionVersionId: "acpddbkfclsgxg",
        targetId: "eguutiftuxrsavvckjrv",
        activeState: "active",
        reconciliationPolicy: {
          state: "inactive",
          interval: "szucgzdbydcowvhprhx",
        },
        solutionScope: "testname",
        status: {
          lastModified: new Date("2025-06-09T10:12:04.224Z"),
          deployed: 24,
          expectedRunningJobId: 19,
          runningJobId: 6,
          status: "nnpksn",
          statusDetails: "bslqqnfciczenaltdcmrgg",
          generation: 21,
          targetStatuses: [
            {
              name: "jpbfbxmjvr",
              status: "gsgkxfwtyoaepwa",
              componentStatuses: [
                {
                  name: "lxzbkoblvaoubknkblwplf",
                  status: "txtthlvducufbblgtctegtgpzkzgyi",
                },
              ],
            },
          ],
        },
      },
      extendedLocation: { name: "szjrwimeqyiue", type: "EdgeZone" },
    },
  );
  console.log(result);
}

async function main() {
  await instancesCreateOrUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/instancesDeleteSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to delete Instance Resource
 *
 * @summary delete Instance Resource
 * x-ms-original-file: 2025-06-01/Instances_Delete_MaximumSet_Gen.json
 */
async function instancesDeleteMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.instances.delete("rgconfigurationmanager", "testname", "testname", "testname");
}

async function main() {
  await instancesDeleteMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/instancesGetSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to get Instance Resource
 *
 * @summary get Instance Resource
 * x-ms-original-file: 2025-06-01/Instances_Get_MaximumSet_Gen.json
 */
async function instancesGetMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.instances.get(
    "rgconfigurationmanager",
    "testname",
    "testname",
    "testname",
  );
  console.log(result);
}

async function main() {
  await instancesGetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/instancesListBySolutionSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to list Instance Resources
 *
 * @summary list Instance Resources
 * x-ms-original-file: 2025-06-01/Instances_ListBySolution_MaximumSet_Gen.json
 */
async function instancesListBySolutionMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.instances.listBySolution(
    "rgconfigurationmanager",
    "testname",
    "testname",
  )) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main() {
  await instancesListBySolutionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/instancesUpdateSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to update an Instance Resource
 *
 * @summary update an Instance Resource
 * x-ms-original-file: 2025-06-01/Instances_Update_MaximumSet_Gen.json
 */
async function instancesUpdateMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.instances.update(
    "rgconfigurationmanager",
    "testname",
    "testname",
    "testname",
    {
      properties: {
        solutionVersionId: "vrpzlamkvanqibtjarpxit",
        targetId: "tqkdvc",
        activeState: "active",
        reconciliationPolicy: {
          state: "inactive",
          interval: "cmzlrjwnlshnkgv",
        },
        solutionScope: "testname",
      },
    },
  );
  console.log(result);
}

async function main() {
  await instancesUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/jobsGetSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to get a Job resource
 *
 * @summary get a Job resource
 * x-ms-original-file: 2025-06-01/Jobs_Get_MaximumSet_Gen.json
 */
async function jobsGetMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "00000000-0000-0000-0000-00000000000";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.jobs.get("gt", "jobsName");
  console.log(result);
}

async function main() {
  await jobsGetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/jobsListByTargetSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to list Jobs by parent resource
 *
 * @summary list Jobs by parent resource
 * x-ms-original-file: 2025-06-01/Jobs_ListByTarget_MaximumSet_Gen.json
 */
async function jobsListByTargetMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "00000000-0000-0000-0000-00000000000";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.jobs.listByTarget("gt")) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main() {
  await jobsListByTargetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/package.json
================================================
{
  "name": "@azure-samples/arm-workloadorchestration-js-beta",
  "private": true,
  "version": "1.0.0",
  "description": "@azure/arm-workloadorchestration client library samples for JavaScript (Beta)",
  "engines": {
    "node": ">=20.0.0"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Azure/azure-sdk-for-js.git",
    "directory": "sdk/workloadorchestration/arm-workloadorchestration"
  },
  "keywords": [
    "node",
    "azure",
    "cloud",
    "typescript",
    "browser",
    "isomorphic"
  ],
  "author": "Microsoft Corporation",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/Azure/azure-sdk-for-js/issues"
  },
  "homepage": "https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/workloadorchestration/arm-workloadorchestration",
  "dependencies": {
    "@azure/arm-workloadorchestration": "next",
    "dotenv": "latest",
    "@azure/identity": "^4.9.0"
  }
}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/sample.env
================================================
# Feel free to add your own environment variables.


================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/schemaReferencesGetSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to get a Schema Reference Resource
 *
 * @summary get a Schema Reference Resource
 * x-ms-original-file: 2025-06-01/SchemaReferences_Get_MaximumSet_Gen.json
 */
async function schemaReferencesGetMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "00000000-0000-0000-0000-00000000000";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.schemaReferences.get("jdvtghygpz", "testname");
  console.log(result);
}

async function main() {
  await schemaReferencesGetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/schemaReferencesListByResourceGroupSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to list by specified resource group
 *
 * @summary list by specified resource group
 * x-ms-original-file: 2025-06-01/SchemaReferences_ListByResourceGroup_MaximumSet_Gen.json
 */
async function schemaReferencesListByResourceGroupMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "00000000-0000-0000-0000-00000000000";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.schemaReferences.listByResourceGroup("jdvtghygpz")) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main() {
  await schemaReferencesListByResourceGroupMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/schemasCreateOrUpdateSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to create or update a Schema Resource
 *
 * @summary create or update a Schema Resource
 * x-ms-original-file: 2025-06-01/Schemas_CreateOrUpdate_MaximumSet_Gen.json
 */
async function schemasCreateOrUpdateMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.schemas.createOrUpdate("rgconfigurationmanager", "testname", {
    properties: {},
    tags: { key7017: "rdynaxxagwjzubehiz" },
    location: "alvi",
  });
  console.log(result);
}

async function main() {
  await schemasCreateOrUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/schemasCreateVersionSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to create a Schema Version Resource
 *
 * @summary create a Schema Version Resource
 * x-ms-original-file: 2025-06-01/Schemas_CreateVersion_MaximumSet_Gen.json
 */
async function schemasCreateVersionMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.schemas.createVersion("rgconfigurationmanager", "testname", {
    updateType: "Major",
    version: "1.0.0",
    schemaVersion: { properties: { value: "uiaqdwsi" } },
  });
  console.log(result);
}

async function main() {
  await schemasCreateVersionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/schemasDeleteSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to delete a Schema Resource
 *
 * @summary delete a Schema Resource
 * x-ms-original-file: 2025-06-01/Schemas_Delete_MaximumSet_Gen.json
 */
async function schemasDeleteMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.schemas.delete("rgconfigurationmanager", "testname");
}

async function main() {
  await schemasDeleteMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/schemasGetSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to get a Schema Resource
 *
 * @summary get a Schema Resource
 * x-ms-original-file: 2025-06-01/Schemas_Get_MaximumSet_Gen.json
 */
async function schemasGetMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.schemas.get("rgconfigurationmanager", "testname");
  console.log(result);
}

async function main() {
  await schemasGetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/schemasListByResourceGroupSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to list by specified resource group
 *
 * @summary list by specified resource group
 * x-ms-original-file: 2025-06-01/Schemas_ListByResourceGroup_MaximumSet_Gen.json
 */
async function schemasListByResourceGroupMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.schemas.listByResourceGroup("rgconfigurationmanager")) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main() {
  await schemasListByResourceGroupMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/schemasListBySubscriptionSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to list by subscription
 *
 * @summary list by subscription
 * x-ms-original-file: 2025-06-01/Schemas_ListBySubscription_MaximumSet_Gen.json
 */
async function schemasListBySubscriptionMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.schemas.listBySubscription()) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main() {
  await schemasListBySubscriptionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/schemasRemoveVersionSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to remove Schema Version Resource
 *
 * @summary remove Schema Version Resource
 * x-ms-original-file: 2025-06-01/Schemas_RemoveVersion_MaximumSet_Gen.json
 */
async function schemasRemoveVersionMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.schemas.removeVersion("rgconfigurationmanager", "testname", {
    version: "ghtvdzgmzncaifrnuumg",
  });
  console.log(result);
}

async function main() {
  await schemasRemoveVersionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/schemasUpdateSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to update a Schema Resource
 *
 * @summary update a Schema Resource
 * x-ms-original-file: 2025-06-01/Schemas_Update_MaximumSet_Gen.json
 */
async function schemasUpdateMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.schemas.update("rgconfigurationmanager", "testname", {
    properties: {},
    tags: { key6760: "lknwkzihsmzbzkezkartwgsv" },
  });
  console.log(result);
}

async function main() {
  await schemasUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/schemaVersionsCreateOrUpdateSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to create or update a Schema Version Resource
 *
 * @summary create or update a Schema Version Resource
 * x-ms-original-file: 2025-06-01/SchemaVersions_CreateOrUpdate_MaximumSet_Gen.json
 */
async function schemaVersionsCreateOrUpdateMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.schemaVersions.createOrUpdate(
    "rgconfigurationmanager",
    "testname",
    "1.0.0",
    { properties: { value: "uiaqdwsi" } },
  );
  console.log(result);
}

async function main() {
  await schemaVersionsCreateOrUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/schemaVersionsDeleteSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to delete a Schema Version Resource
 *
 * @summary delete a Schema Version Resource
 * x-ms-original-file: 2025-06-01/SchemaVersions_Delete_MaximumSet_Gen.json
 */
async function schemaVersionsDeleteMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.schemaVersions.delete("rgconfigurationmanager", "testname", "1.0.0");
}

async function main() {
  await schemaVersionsDeleteMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/schemaVersionsGetSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to get a Schema Version Resource
 *
 * @summary get a Schema Version Resource
 * x-ms-original-file: 2025-06-01/SchemaVersions_Get_MaximumSet_Gen.json
 */
async function schemaVersionsGetMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.schemaVersions.get("rgconfigurationmanager", "testname", "1.0.0");
  console.log(result);
}

async function main() {
  await schemaVersionsGetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/schemaVersionsListBySchemaSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to list by specified resource group
 *
 * @summary list by specified resource group
 * x-ms-original-file: 2025-06-01/SchemaVersions_ListBySchema_MaximumSet_Gen.json
 */
async function schemaVersionsListBySchemaMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.schemaVersions.listBySchema(
    "rgconfigurationmanager",
    "testname",
  )) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main() {
  await schemaVersionsListBySchemaMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/schemaVersionsUpdateSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to update a Schema Version Resource
 *
 * @summary update a Schema Version Resource
 * x-ms-original-file: 2025-06-01/SchemaVersions_Update_MaximumSet_Gen.json
 */
async function schemaVersionsUpdateMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.schemaVersions.update("rgconfigurationmanager", "testname", "1.0.0", {
    properties: { value: "muezi" },
  });
  console.log(result);
}

async function main() {
  await schemaVersionsUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/siteReferencesCreateOrUpdateSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to get Site Reference Resource
 *
 * @summary get Site Reference Resource
 * x-ms-original-file: 2025-06-01/SiteReferences_CreateOrUpdate_MaximumSet_Gen.json
 */
async function siteReferencesCreateOrUpdateMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.siteReferences.createOrUpdate(
    "rgconfigurationmanager",
    "testname",
    "testname",
    { properties: { siteId: "xxjpxdcaumewwgpbwzkcrgrcw" } },
  );
  console.log(result);
}

async function main() {
  await siteReferencesCreateOrUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/siteReferencesDeleteSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to get Site Reference Resource
 *
 * @summary get Site Reference Resource
 * x-ms-original-file: 2025-06-01/SiteReferences_Delete_MaximumSet_Gen.json
 */
async function siteReferencesDeleteMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.siteReferences.delete("rgconfigurationmanager", "testname", "testname");
}

async function main() {
  await siteReferencesDeleteMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/siteReferencesGetSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to get Site Reference Resource
 *
 * @summary get Site Reference Resource
 * x-ms-original-file: 2025-06-01/SiteReferences_Get_MaximumSet_Gen.json
 */
async function siteReferencesGetMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.siteReferences.get("rgconfigurationmanager", "testname", "testname");
  console.log(result);
}

async function main() {
  await siteReferencesGetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/siteReferencesListByContextSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to list Site Reference Resources
 *
 * @summary list Site Reference Resources
 * x-ms-original-file: 2025-06-01/SiteReferences_ListByContext_MaximumSet_Gen.json
 */
async function siteReferencesListByContextMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.siteReferences.listByContext(
    "rgconfigurationmanager",
    "testname",
  )) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main() {
  await siteReferencesListByContextMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/siteReferencesUpdateSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to get Site Reference Resource
 *
 * @summary get Site Reference Resource
 * x-ms-original-file: 2025-06-01/SiteReferences_Update_MaximumSet_Gen.json
 */
async function siteReferencesUpdateMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.siteReferences.update(
    "rgconfigurationmanager",
    "testname",
    "testname",
    { properties: { siteId: "nwiuyaro" } },
  );
  console.log(result);
}

async function main() {
  await siteReferencesUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/solutionsCreateOrUpdateSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to create or update a Solution Resource
 *
 * @summary create or update a Solution Resource
 * x-ms-original-file: 2025-06-01/Solutions_CreateOrUpdate_MaximumSet_Gen.json
 */
async function solutionsCreateOrUpdateMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.solutions.createOrUpdate(
    "rgconfigurationmanager",
    "testname",
    "testname",
    {
      properties: {},
      extendedLocation: { name: "szjrwimeqyiue", type: "EdgeZone" },
    },
  );
  console.log(result);
}

async function main() {
  await solutionsCreateOrUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/solutionsDeleteSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to delete a Solution Resource
 *
 * @summary delete a Solution Resource
 * x-ms-original-file: 2025-06-01/Solutions_Delete_MaximumSet_Gen.json
 */
async function solutionsDeleteMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.solutions.delete("rgconfigurationmanager", "testname", "testname");
}

async function main() {
  await solutionsDeleteMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/solutionsGetSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to get a Solution resource
 *
 * @summary get a Solution resource
 * x-ms-original-file: 2025-06-01/Solutions_Get_MaximumSet_Gen.json
 */
async function solutionsGetMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.solutions.get("rgconfigurationmanager", "testname", "testname");
  console.log(result);
}

async function main() {
  await solutionsGetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/solutionsListByTargetSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to list Solution resources
 *
 * @summary list Solution resources
 * x-ms-original-file: 2025-06-01/Solutions_ListByTarget_MaximumSet_Gen.json
 */
async function solutionsListByTargetMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.solutions.listByTarget("rgconfigurationmanager", "testname")) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main() {
  await solutionsListByTargetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/solutionsUpdateSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to update a Solution Resource
 *
 * @summary update a Solution Resource
 * x-ms-original-file: 2025-06-01/Solutions_Update_MaximumSet_Gen.json
 */
async function solutionsUpdateMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.solutions.update("rgconfigurationmanager", "testname", "testname", {
    properties: {},
  });
  console.log(result);
}

async function main() {
  await solutionsUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/solutionTemplatesCreateOrUpdateSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to create or update a Solution Template Resource
 *
 * @summary create or update a Solution Template Resource
 * x-ms-original-file: 2025-06-01/SolutionTemplates_CreateOrUpdate_MaximumSet_Gen.json
 */
async function solutionTemplatesCreateOrUpdateMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.solutionTemplates.createOrUpdate(
    "rgconfigurationmanager",
    "testname",
    {
      properties: {
        description: "psrftehgzngcdlccivhjmwsmiz",
        capabilities: ["dfoyxbbknrhvlunhmuyyt"],
        state: "active",
        enableExternalValidation: true,
      },
      tags: { key5091: "dov" },
      location: "zheaaqvadewftnctxzpinrgeproqs",
    },
  );
  console.log(result);
}

async function main() {
  await solutionTemplatesCreateOrUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/solutionTemplatesCreateVersionSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to create a Solution Template Version Resource
 *
 * @summary create a Solution Template Version Resource
 * x-ms-original-file: 2025-06-01/SolutionTemplates_CreateVersion_MaximumSet_Gen.json
 */
async function solutionTemplatesCreateVersionMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.solutionTemplates.createVersion(
    "rgconfigurationmanager",
    "testname",
    {
      updateType: "Major",
      version: "1.0.0",
      solutionTemplateVersion: {
        properties: {
          configurations: "ofqcsavwmeuwmvtjnqpoybtjvkmrlh",
          specification: {},
          orchestratorType: "TO",
        },
      },
    },
  );
  console.log(result);
}

async function main() {
  await solutionTemplatesCreateVersionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/solutionTemplatesDeleteSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to delete a Solution Template Resource
 *
 * @summary delete a Solution Template Resource
 * x-ms-original-file: 2025-06-01/SolutionTemplates_Delete_MaximumSet_Gen.json
 */
async function solutionTemplatesDeleteMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.solutionTemplates.delete("rgconfigurationmanager", "testname");
}

async function main() {
  await solutionTemplatesDeleteMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/solutionTemplatesGetSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to get a Solution Template Resource
 *
 * @summary get a Solution Template Resource
 * x-ms-original-file: 2025-06-01/SolutionTemplates_Get_MaximumSet_Gen.json
 */
async function solutionTemplatesGetMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.solutionTemplates.get("rgconfigurationmanager", "testname");
  console.log(result);
}

async function main() {
  await solutionTemplatesGetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/solutionTemplatesListByResourceGroupSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to list by specified resource group
 *
 * @summary list by specified resource group
 * x-ms-original-file: 2025-06-01/SolutionTemplates_ListByResourceGroup_MaximumSet_Gen.json
 */
async function solutionTemplatesListByResourceGroupMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.solutionTemplates.listByResourceGroup("rgconfigurationmanager")) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main() {
  await solutionTemplatesListByResourceGroupMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/solutionTemplatesListBySubscriptionSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to list by subscription
 *
 * @summary list by subscription
 * x-ms-original-file: 2025-06-01/SolutionTemplates_ListBySubscription_MaximumSet_Gen.json
 */
async function solutionTemplatesListBySubscriptionMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.solutionTemplates.listBySubscription()) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main() {
  await solutionTemplatesListBySubscriptionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/solutionTemplatesRemoveVersionSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to remove Solution Template Version Resource
 *
 * @summary remove Solution Template Version Resource
 * x-ms-original-file: 2025-06-01/SolutionTemplates_RemoveVersion_MaximumSet_Gen.json
 */
async function solutionTemplatesRemoveVersionMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.solutionTemplates.removeVersion("rgconfigurationmanager", "testname", {
    version: "ghtvdzgmzncaifrnuumg",
  });
}

async function main() {
  await solutionTemplatesRemoveVersionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/solutionTemplatesUpdateSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to update a Solution Template Resource
 *
 * @summary update a Solution Template Resource
 * x-ms-original-file: 2025-06-01/SolutionTemplates_Update_MaximumSet_Gen.json
 */
async function solutionTemplatesUpdateMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.solutionTemplates.update("rgconfigurationmanager", "testname", {
    properties: {
      description: "onqlteg",
      capabilities: ["relsv"],
      state: "active",
      enableExternalValidation: true,
    },
    tags: { key8772: "vbdujmqklnwiepis" },
  });
  console.log(result);
}

async function main() {
  await solutionTemplatesUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/solutionTemplateVersionsBulkDeploySolutionSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to post request for bulk deploy
 *
 * @summary post request for bulk deploy
 * x-ms-original-file: 2025-06-01/SolutionTemplateVersions_BulkDeploySolution_MaximumSet_Gen.json
 */
async function solutionTemplateVersionsBulkDeploySolutionMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.solutionTemplateVersions.bulkDeploySolution(
    "rgconfigurationmanager",
    "testname",
    "1.0.0",
    {
      targets: [
        {
          solutionVersionId:
            "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.Edge/Targets/target/Solutions/solution/Versions/solution-1.0.0.1",
        },
      ],
    },
  );
}

async function main() {
  await solutionTemplateVersionsBulkDeploySolutionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/solutionTemplateVersionsBulkPublishSolutionSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to post request for bulk publish
 *
 * @summary post request for bulk publish
 * x-ms-original-file: 2025-06-01/SolutionTemplateVersions_BulkPublishSolution_MaximumSet_Gen.json
 */
async function solutionTemplateVersionsBulkPublishSolutionMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.solutionTemplateVersions.bulkPublishSolution(
    "rgconfigurationmanager",
    "testname",
    "1.0.0",
    {
      targets: [
        {
          targetId:
            "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.Edge/Targets/target",
          solutionInstanceName: "test-instance",
        },
      ],
      solutionInstanceName: "test-instance",
      solutionDependencies: [
        {
          solutionVersionId:
            "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.Edge/Targets/target/Solutions/solution/Versions/solution-1.0.0.1",
          solutionTemplateId:
            "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.Edge/SolutionTemplates/st",
          solutionTemplateVersion: "1.0.0",
          solutionInstanceName: "test-instance",
          targetId:
            "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.Edge/Targets/target",
          dependencies: [],
        },
      ],
    },
  );
}

async function main() {
  await solutionTemplateVersionsBulkPublishSolutionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/solutionTemplateVersionsGetSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to get a Solution Template Version Resource
 *
 * @summary get a Solution Template Version Resource
 * x-ms-original-file: 2025-06-01/SolutionTemplateVersions_Get_MaximumSet_Gen.json
 */
async function solutionTemplateVersionsGetMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.solutionTemplateVersions.get(
    "rgconfigurationmanager",
    "testname",
    "1.0.0",
  );
  console.log(result);
}

async function main() {
  await solutionTemplateVersionsGetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/solutionTemplateVersionsListBySolutionTemplateSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to list Solution Template Version Resources
 *
 * @summary list Solution Template Version Resources
 * x-ms-original-file: 2025-06-01/SolutionTemplateVersions_ListBySolutionTemplate_MaximumSet_Gen.json
 */
async function solutionTemplateVersionsListBySolutionTemplateMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.solutionTemplateVersions.listBySolutionTemplate(
    "rgconfigurationmanager",
    "testname",
  )) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main() {
  await solutionTemplateVersionsListBySolutionTemplateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/solutionVersionsCreateOrUpdateSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to create or update a Solution Version Resource
 *
 * @summary create or update a Solution Version Resource
 * x-ms-original-file: 2025-06-01/SolutionVersions_CreateOrUpdate_MaximumSet_Gen.json
 */
async function solutionVersionsCreateOrUpdateMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.solutionVersions.createOrUpdate(
    "rgconfigurationmanager",
    "testname",
    "testname",
    "testname",
    {
      properties: { specification: {}, state: "InReview", errorDetails: {} },
      extendedLocation: { name: "szjrwimeqyiue", type: "EdgeZone" },
    },
  );
  console.log(result);
}

async function main() {
  await solutionVersionsCreateOrUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/solutionVersionsDeleteSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to delete a Solution Version Resource
 *
 * @summary delete a Solution Version Resource
 * x-ms-original-file: 2025-06-01/SolutionVersions_Delete_MaximumSet_Gen.json
 */
async function solutionVersionsDeleteMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.solutionVersions.delete(
    "rgconfigurationmanager",
    "testname",
    "testname",
    "testname",
  );
}

async function main() {
  await solutionVersionsDeleteMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/solutionVersionsGetSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to get a Solution Version Resource
 *
 * @summary get a Solution Version Resource
 * x-ms-original-file: 2025-06-01/SolutionVersions_Get_MaximumSet_Gen.json
 */
async function solutionVersionsGetMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.solutionVersions.get(
    "rgconfigurationmanager",
    "testname",
    "testname",
    "testname",
  );
  console.log(result);
}

async function main() {
  await solutionVersionsGetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/solutionVersionsListBySolutionSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to list Solution Version Resources
 *
 * @summary list Solution Version Resources
 * x-ms-original-file: 2025-06-01/SolutionVersions_ListBySolution_MaximumSet_Gen.json
 */
async function solutionVersionsListBySolutionMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.solutionVersions.listBySolution(
    "rgconfigurationmanager",
    "testname",
    "testname",
  )) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main() {
  await solutionVersionsListBySolutionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/solutionVersionsUpdateSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to update a Solution Version Resource
 *
 * @summary update a Solution Version Resource
 * x-ms-original-file: 2025-06-01/SolutionVersions_Update_MaximumSet_Gen.json
 */
async function solutionVersionsUpdateMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.solutionVersions.update(
    "rgconfigurationmanager",
    "testname",
    "testname",
    "testname",
    { properties: { specification: {} } },
  );
  console.log(result);
}

async function main() {
  await solutionVersionsUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/targetsCreateOrUpdateSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to create or update a Target Resource
 *
 * @summary create or update a Target Resource
 * x-ms-original-file: 2025-06-01/Targets_CreateOrUpdate_MaximumSet_Gen.json
 */
async function targetsCreateOrUpdateMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.targets.createOrUpdate("rgconfigurationmanager", "testname", {
    properties: {
      description: "riabrxtvhlmizyhffdpjeyhvw",
      displayName: "qjlbshhqzfmwxvvynibkoi",
      targetSpecification: {},
      capabilities: ["grjapghdidoao"],
      contextId:
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
      hierarchyLevel: "octqptfirejhjfavlnfqeiikqx",
      status: {
        lastModified: new Date("2025-06-09T10:12:04.224Z"),
        deployed: 24,
        expectedRunningJobId: 19,
        runningJobId: 6,
        status: "nnpksn",
        statusDetails: "bslqqnfciczenaltdcmrgg",
        generation: 21,
        targetStatuses: [
          {
            name: "jpbfbxmjvr",
            status: "gsgkxfwtyoaepwa",
            componentStatuses: [
              {
                name: "lxzbkoblvaoubknkblwplf",
                status: "txtthlvducufbblgtctegtgpzkzgyi",
              },
            ],
          },
        ],
      },
      solutionScope: "testname",
      state: "active",
    },
    extendedLocation: { name: "szjrwimeqyiue", type: "EdgeZone" },
    tags: { key612: "vtqzrk" },
    location: "kckloegmwsjgwtcl",
  });
  console.log(result);
}

async function main() {
  await targetsCreateOrUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/targetsDeleteSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to delete a Target Resource
 *
 * @summary delete a Target Resource
 * x-ms-original-file: 2025-06-01/Targets_Delete_MaximumSet_Gen.json
 */
async function targetsDeleteMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.targets.delete("rgconfigurationmanager", "testname", {
    forceDelete: true,
  });
}

async function main() {
  await targetsDeleteMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/targetsGetSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to get a Target Resource
 *
 * @summary get a Target Resource
 * x-ms-original-file: 2025-06-01/Targets_Get_MaximumSet_Gen.json
 */
async function targetsGetMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.targets.get("rgconfigurationmanager", "testname");
  console.log(result);
}

async function main() {
  await targetsGetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/targetsInstallSolutionSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to post request to deploy
 *
 * @summary post request to deploy
 * x-ms-original-file: 2025-06-01/Targets_InstallSolution_MaximumSet_Gen.json
 */
async function targetsInstallSolutionMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.targets.installSolution("rgconfigurationmanager", "testname", {
    solutionVersionId:
      "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
  });
}

async function main() {
  await targetsInstallSolutionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/targetsListByResourceGroupSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to list by specified resource group
 *
 * @summary list by specified resource group
 * x-ms-original-file: 2025-06-01/Targets_ListByResourceGroup_MaximumSet_Gen.json
 */
async function targetsListByResourceGroupMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.targets.listByResourceGroup("rgconfigurationmanager")) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main() {
  await targetsListByResourceGroupMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/targetsListBySubscriptionSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to list by subscription
 *
 * @summary list by subscription
 * x-ms-original-file: 2025-06-01/Targets_ListBySubscription_MaximumSet_Gen.json
 */
async function targetsListBySubscriptionMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.targets.listBySubscription()) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main() {
  await targetsListBySubscriptionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/targetsPublishSolutionVersionSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to post request to publish
 *
 * @summary post request to publish
 * x-ms-original-file: 2025-06-01/Targets_PublishSolutionVersion_MaximumSet_Gen.json
 */
async function targetsPublishSolutionVersionMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.targets.publishSolutionVersion("rgconfigurationmanager", "testname", {
    solutionVersionId:
      "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
  });
  console.log(result);
}

async function main() {
  await targetsPublishSolutionVersionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/targetsRemoveRevisionSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to post request to remove solution version revision
 *
 * @summary post request to remove solution version revision
 * x-ms-original-file: 2025-06-01/Targets_RemoveRevision_MaximumSet_Gen.json
 */
async function targetsRemoveRevisionMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.targets.removeRevision("rgconfigurationmanager", "testname", {
    solutionTemplateId:
      "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
    solutionVersion: "tomwmqybqomwkfaeukjneva",
  });
}

async function main() {
  await targetsRemoveRevisionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/targetsResolveConfigurationSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to post request to resolve configuration
 *
 * @summary post request to resolve configuration
 * x-ms-original-file: 2025-06-01/Targets_ResolveConfiguration_MaximumSet_Gen.json
 */
async function targetsResolveConfigurationMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.targets.resolveConfiguration("rgconfigurationmanager", "testname", {
    solutionTemplateVersionId:
      "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}/{resourceType}/{resourceName}",
    solutionInstanceName: "testname",
    solutionDependencies: [
      {
        solutionVersionId: "cydzqntmjlqtksbavjwteru",
        solutionTemplateId: "liqauthxnscodbiwktwfwrrsg",
        solutionTemplateVersion: "gordjasyxxrj",
        solutionInstanceName: "testname",
        targetId: "steadvphxtyhjokqicrtg",
        dependencies: [],
      },
    ],
  });
  console.log(result);
}

async function main() {
  await targetsResolveConfigurationMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/targetsReviewSolutionVersionSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to post request to review configuration
 *
 * @summary post request to review configuration
 * x-ms-original-file: 2025-06-01/Targets_ReviewSolutionVersion_MaximumSet_Gen.json
 */
async function targetsReviewSolutionVersionMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.targets.reviewSolutionVersion("rgconfigurationmanager", "testname", {
    solutionTemplateVersionId:
      "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}/{resourceType}/{resourceName}",
    solutionInstanceName: "testname",
    solutionDependencies: [
      {
        solutionVersionId: "cydzqntmjlqtksbavjwteru",
        solutionTemplateId: "liqauthxnscodbiwktwfwrrsg",
        solutionTemplateVersion: "gordjasyxxrj",
        solutionInstanceName: "testname",
        targetId: "steadvphxtyhjokqicrtg",
        dependencies: [],
      },
    ],
  });
  console.log(result);
}

async function main() {
  await targetsReviewSolutionVersionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/targetsUninstallSolutionSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to post request to uninstall
 *
 * @summary post request to uninstall
 * x-ms-original-file: 2025-06-01/Targets_UninstallSolution_MaximumSet_Gen.json
 */
async function targetsUninstallSolutionMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.targets.uninstallSolution("rgconfigurationmanager", "testname", {
    solutionTemplateId:
      "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
    solutionInstanceName: "lzihiumrcxbolmkqktvtuqyhg",
  });
}

async function main() {
  await targetsUninstallSolutionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/targetsUpdateExternalValidationStatusSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to post request to update external validation status
 *
 * @summary post request to update external validation status
 * x-ms-original-file: 2025-06-01/Targets_UpdateExternalValidationStatus_MaximumSet_Gen.json
 */
async function targetsUpdateExternalValidationStatusMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.targets.updateExternalValidationStatus(
    "rgconfigurationmanager",
    "testname",
    {
      solutionVersionId: "shntcsuwlmpehmuqkrbf",
      errorDetails: {},
      externalValidationId: "ivsjzwy",
      validationStatus: "Valid",
    },
  );
  console.log(result);
}

async function main() {
  await targetsUpdateExternalValidationStatusMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/targetsUpdateSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to update a Target Resource
 *
 * @summary update a Target Resource
 * x-ms-original-file: 2025-06-01/Targets_Update_MaximumSet_Gen.json
 */
async function targetsUpdateMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.targets.update("rgconfigurationmanager", "testname", {
    properties: {
      description: "yhnhdpznncdvncmnvoeohqjx",
      displayName: "pguujtzjjvixgjitugybrefp",
      targetSpecification: {},
      capabilities: ["dasqhyxfakivfzqb"],
      contextId:
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
      hierarchyLevel: "hfyntwxetgsmnucbjvvphtyxu",
      solutionScope: "testname",
      state: "active",
    },
    tags: { key8026: "yoosplotwgoquvpox" },
  });
  console.log(result);
}

async function main() {
  await targetsUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/workflowsCreateOrUpdateSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to create or update a Workflow resource
 *
 * @summary create or update a Workflow resource
 * x-ms-original-file: 2025-06-01/Workflows_CreateOrUpdate_MaximumSet_Gen.json
 */
async function workflowsCreateOrUpdateMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.workflows.createOrUpdate(
    "rgconfigurationmanager",
    "testname",
    "testname",
    {
      properties: {},
      extendedLocation: { name: "szjrwimeqyiue", type: "EdgeZone" },
    },
  );
  console.log(result);
}

async function main() {
  await workflowsCreateOrUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/workflowsDeleteSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to delete a Workflow resource
 *
 * @summary delete a Workflow resource
 * x-ms-original-file: 2025-06-01/Workflows_Delete_MaximumSet_Gen.json
 */
async function workflowsDeleteMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.workflows.delete("rgconfigurationmanager", "testname", "testname");
}

async function main() {
  await workflowsDeleteMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/workflowsGetSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to get a Workflow resource
 *
 * @summary get a Workflow resource
 * x-ms-original-file: 2025-06-01/Workflows_Get_MaximumSet_Gen.json
 */
async function workflowsGetMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.workflows.get("rgconfigurationmanager", "testname", "testname");
  console.log(result);
}

async function main() {
  await workflowsGetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/workflowsListByContextSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to list Workflow resources
 *
 * @summary list Workflow resources
 * x-ms-original-file: 2025-06-01/Workflows_ListByContext_MaximumSet_Gen.json
 */
async function workflowsListByContextMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.workflows.listByContext("rgconfigurationmanager", "testname")) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main() {
  await workflowsListByContextMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/workflowsUpdateSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to update a Workflow resource
 *
 * @summary update a Workflow resource
 * x-ms-original-file: 2025-06-01/Workflows_Update_MaximumSet_Gen.json
 */
async function workflowsUpdateMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.workflows.update("rgconfigurationmanager", "testname", "testname", {
    properties: {},
  });
  console.log(result);
}

async function main() {
  await workflowsUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/workflowVersionsCreateOrUpdateSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to create or update a Workflow Version Resource
 *
 * @summary create or update a Workflow Version Resource
 * x-ms-original-file: 2025-06-01/WorkflowVersions_CreateOrUpdate_MaximumSet_Gen.json
 */
async function workflowVersionsCreateOrUpdateMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.workflowVersions.createOrUpdate(
    "rgconfigurationmanager",
    "testname",
    "testname",
    "testname",
    {
      properties: {
        stageSpec: [
          {
            name: "amrbjd",
            specification: {},
            tasks: [
              {
                name: "xxmeyvmgydbcwxqwjhadjxjod",
                targetId:
                  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                specification: {},
              },
            ],
            taskOption: {
              concurrency: 3,
              errorAction: {
                mode: "stopOnAnyFailure",
                maxToleratedFailures: 0,
              },
            },
          },
        ],
        state: "InReview",
        specification: {},
      },
      extendedLocation: { name: "szjrwimeqyiue", type: "EdgeZone" },
    },
  );
  console.log(result);
}

async function main() {
  await workflowVersionsCreateOrUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/workflowVersionsDeleteSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to delete a Workflow Version Resource
 *
 * @summary delete a Workflow Version Resource
 * x-ms-original-file: 2025-06-01/WorkflowVersions_Delete_MaximumSet_Gen.json
 */
async function workflowVersionsDeleteMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.workflowVersions.delete(
    "rgconfigurationmanager",
    "testname",
    "testname",
    "testname",
  );
}

async function main() {
  await workflowVersionsDeleteMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/workflowVersionsGetSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to get a Workflow Version Resource
 *
 * @summary get a Workflow Version Resource
 * x-ms-original-file: 2025-06-01/WorkflowVersions_Get_MaximumSet_Gen.json
 */
async function workflowVersionsGetMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.workflowVersions.get(
    "rgconfigurationmanager",
    "testname",
    "testname",
    "testname",
  );
  console.log(result);
}

async function main() {
  await workflowVersionsGetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/workflowVersionsListByWorkflowSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to list Workflow Version Resources
 *
 * @summary list Workflow Version Resources
 * x-ms-original-file: 2025-06-01/WorkflowVersions_ListByWorkflow_MaximumSet_Gen.json
 */
async function workflowVersionsListByWorkflowMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.workflowVersions.listByWorkflow(
    "rgconfigurationmanager",
    "testname",
    "testname",
  )) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main() {
  await workflowVersionsListByWorkflowMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/javascript/workflowVersionsUpdateSample.js
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const { WorkloadOrchestrationManagementClient } = require("@azure/arm-workloadorchestration");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to update an WorkflowVersion Resource
 *
 * @summary update an WorkflowVersion Resource
 * x-ms-original-file: 2025-06-01/WorkflowVersions_Update_MaximumSet_Gen.json
 */
async function workflowVersionsUpdateMaximumSet() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.workflowVersions.update(
    "rgconfigurationmanager",
    "testname",
    "testname",
    "testname",
    {
      properties: {
        stageSpec: [
          {
            name: "amrbjd",
            specification: {},
            tasks: [
              {
                name: "xxmeyvmgydbcwxqwjhadjxjod",
                targetId:
                  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                specification: {},
              },
            ],
            taskOption: {
              concurrency: 3,
              errorAction: {
                mode: "stopOnAnyFailure",
                maxToleratedFailures: 0,
              },
            },
          },
        ],
        specification: {},
      },
    },
  );
  console.log(result);
}

async function main() {
  await workflowVersionsUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/package.json
================================================
{
  "name": "@azure-samples/arm-workloadorchestration-ts-beta",
  "private": true,
  "version": "1.0.0",
  "description": "@azure/arm-workloadorchestration client library samples for TypeScript (Beta)",
  "engines": {
    "node": ">=20.0.0"
  },
  "scripts": {
    "build": "tsc",
    "prebuild": "rimraf dist/"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Azure/azure-sdk-for-js.git",
    "directory": "sdk/workloadorchestration/arm-workloadorchestration"
  },
  "keywords": [
    "node",
    "azure",
    "cloud",
    "typescript",
    "browser",
    "isomorphic"
  ],
  "author": "Microsoft Corporation",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/Azure/azure-sdk-for-js/issues"
  },
  "homepage": "https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/workloadorchestration/arm-workloadorchestration",
  "dependencies": {
    "@azure/arm-workloadorchestration": "next",
    "dotenv": "latest",
    "@azure/identity": "^4.9.0"
  },
  "devDependencies": {
    "@types/node": "^20.0.0",
    "typescript": "~5.8.2",
    "rimraf": "latest"
  }
}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/sample.env
================================================
# Feel free to add your own environment variables.


================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/tsconfig.json
================================================
{
  "compilerOptions": {
    "target": "ES2023",
    "module": "commonjs",
    "lib": [],
    "importHelpers": true,
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "moduleResolution": "node10",
    "esModuleInterop": true,
    "outDir": "./dist",
    "resolveJsonModule": true
  },
  "include": [
    "./src"
  ]
}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/configTemplatesCreateOrUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to create or update a Config Template Resource
 *
 * @summary create or update a Config Template Resource
 * x-ms-original-file: 2025-06-01/ConfigTemplates_CreateOrUpdate_MaximumSet_Gen.json
 */
async function configTemplatesCreateOrUpdateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.configTemplates.createOrUpdate("rgconfigurationmanager", "testname", {
    properties: { description: "ccdyggozwmhyvemlcwlsnhijwg" },
    tags: { key6936: "vnqujuvnbxonbsgb" },
    location: "egqjo",
  });
  console.log(result);
}

async function main(): Promise<void> {
  await configTemplatesCreateOrUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/configTemplatesCreateVersionSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to create or update a Config Template Version Resource with the specified UpdateType
 *
 * @summary create or update a Config Template Version Resource with the specified UpdateType
 * x-ms-original-file: 2025-06-01/ConfigTemplates_CreateVersion_MaximumSet_Gen.json
 */
async function configTemplatesCreateVersionMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.configTemplates.createVersion("rgconfigurationmanager", "testname", {
    updateType: "Major",
    version: "1.0.0",
    configTemplateVersion: {
      properties: { configurations: "rgricnhvcbqykc" },
    },
  });
  console.log(result);
}

async function main(): Promise<void> {
  await configTemplatesCreateVersionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/configTemplatesDeleteSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to delete a Config Template Resource
 *
 * @summary delete a Config Template Resource
 * x-ms-original-file: 2025-06-01/ConfigTemplates_Delete_MaximumSet_Gen.json
 */
async function configTemplatesDeleteMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.configTemplates.delete("rgconfigurationmanager", "testname");
}

async function main(): Promise<void> {
  await configTemplatesDeleteMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/configTemplatesGetSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to get a Config Template Resource
 *
 * @summary get a Config Template Resource
 * x-ms-original-file: 2025-06-01/ConfigTemplates_Get_MaximumSet_Gen.json
 */
async function configTemplatesGetMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.configTemplates.get("rgconfigurationmanager", "testname");
  console.log(result);
}

async function main(): Promise<void> {
  await configTemplatesGetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/configTemplatesListByResourceGroupSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to list by specified resource group
 *
 * @summary list by specified resource group
 * x-ms-original-file: 2025-06-01/ConfigTemplates_ListByResourceGroup_MaximumSet_Gen.json
 */
async function configTemplatesListByResourceGroupMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.configTemplates.listByResourceGroup("rgconfigurationmanager")) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main(): Promise<void> {
  await configTemplatesListByResourceGroupMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/configTemplatesListBySubscriptionSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to list by subscription
 *
 * @summary list by subscription
 * x-ms-original-file: 2025-06-01/ConfigTemplates_ListBySubscription_MaximumSet_Gen.json
 */
async function configTemplatesListBySubscriptionMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.configTemplates.listBySubscription()) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main(): Promise<void> {
  await configTemplatesListBySubscriptionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/configTemplatesRemoveVersionSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to remove Config Template Version Resource
 *
 * @summary remove Config Template Version Resource
 * x-ms-original-file: 2025-06-01/ConfigTemplates_RemoveVersion_MaximumSet_Gen.json
 */
async function configTemplatesRemoveVersionMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.configTemplates.removeVersion("rgconfigurationmanager", "testname", {
    version: "ghtvdzgmzncaifrnuumg",
  });
  console.log(result);
}

async function main(): Promise<void> {
  await configTemplatesRemoveVersionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/configTemplatesUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to update a Config Template Resource
 *
 * @summary update a Config Template Resource
 * x-ms-original-file: 2025-06-01/ConfigTemplates_Update_MaximumSet_Gen.json
 */
async function configTemplatesUpdateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.configTemplates.update("rgconfigurationmanager", "testname", {
    properties: { description: "cavjiqnrbzsvedicrixhwnfj" },
    tags: { key7701: "wrsv" },
  });
  console.log(result);
}

async function main(): Promise<void> {
  await configTemplatesUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/configTemplateVersionsGetSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to get a Config Template Version Resource
 *
 * @summary get a Config Template Version Resource
 * x-ms-original-file: 2025-06-01/ConfigTemplateVersions_Get_MaximumSet_Gen.json
 */
async function configTemplateVersionsGetMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.configTemplateVersions.get(
    "rgconfigurationmanager",
    "testname",
    "1.0.0",
  );
  console.log(result);
}

async function main(): Promise<void> {
  await configTemplateVersionsGetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/configTemplateVersionsListByConfigTemplateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to list Config Template Version Resources
 *
 * @summary list Config Template Version Resources
 * x-ms-original-file: 2025-06-01/ConfigTemplateVersions_ListByConfigTemplate_MaximumSet_Gen.json
 */
async function configTemplateVersionsListByConfigTemplateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.configTemplateVersions.listByConfigTemplate(
    "rgconfigurationmanager",
    "testname",
  )) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main(): Promise<void> {
  await configTemplateVersionsListByConfigTemplateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/contextsCreateOrUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to create or update Context Resource
 *
 * @summary create or update Context Resource
 * x-ms-original-file: 2025-06-01/Contexts_CreateOrUpdate_MaximumSet_Gen.json
 */
async function contextsCreateOrUpdateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.contexts.createOrUpdate("rgconfigurationmanager", "testname", {
    properties: {
      capabilities: [
        {
          name: "tpylinjcmlnycfpofpxjtqmt",
          description: "banbenutsngwytoqh",
          state: "active",
        },
      ],
      hierarchies: [{ name: "upqe", description: "vg" }],
    },
    tags: { key3046: "clcnhzwypk" },
    location: "pkquwbplcp",
  });
  console.log(result);
}

async function main(): Promise<void> {
  await contextsCreateOrUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/contextsDeleteSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to delete Context Resource
 *
 * @summary delete Context Resource
 * x-ms-original-file: 2025-06-01/Contexts_Delete_MaximumSet_Gen.json
 */
async function contextsDeleteMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.contexts.delete("rgconfigurationmanager", "testname");
}

async function main(): Promise<void> {
  await contextsDeleteMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/contextsGetSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to get Context Resource
 *
 * @summary get Context Resource
 * x-ms-original-file: 2025-06-01/Contexts_Get_MaximumSet_Gen.json
 */
async function contextsGetMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.contexts.get("rgconfigurationmanager", "testname");
  console.log(result);
}

async function main(): Promise<void> {
  await contextsGetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/contextsListByResourceGroupSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to list by specified resource group
 *
 * @summary list by specified resource group
 * x-ms-original-file: 2025-06-01/Contexts_ListByResourceGroup_MaximumSet_Gen.json
 */
async function contextsListByResourceGroupMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.contexts.listByResourceGroup("rgconfigurationmanager")) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main(): Promise<void> {
  await contextsListByResourceGroupMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/contextsListBySubscriptionSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to list by subscription
 *
 * @summary list by subscription
 * x-ms-original-file: 2025-06-01/Contexts_ListBySubscription_MaximumSet_Gen.json
 */
async function contextsListBySubscriptionMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.contexts.listBySubscription()) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main(): Promise<void> {
  await contextsListBySubscriptionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/contextsUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to update an Context Resource
 *
 * @summary update an Context Resource
 * x-ms-original-file: 2025-06-01/Contexts_Update_MaximumSet_Gen.json
 */
async function contextsUpdateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.contexts.update("rgconfigurationmanager", "testname", {
    properties: {
      capabilities: [
        {
          name: "tpylinjcmlnycfpofpxjtqmt",
          description: "banbenutsngwytoqh",
          state: "active",
        },
      ],
      hierarchies: [{ name: "upqe", description: "vg" }],
    },
    tags: { key9545: "dhxykbzgliyqxxizttbjhuruhhv" },
  });
  console.log(result);
}

async function main(): Promise<void> {
  await contextsUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/diagnosticsCreateOrUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to creates new or updates existing Diagnostic resource.
 *
 * @summary creates new or updates existing Diagnostic resource.
 * x-ms-original-file: 2025-06-01/Diagnostics_CreateOrUpdate_MaximumSet_Gen.json
 */
async function diagnosticsCreateOrUpdateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.diagnostics.createOrUpdate("rgconfigurationmanager", "testname", {
    properties: {},
    extendedLocation: { name: "szjrwimeqyiue", type: "EdgeZone" },
    tags: { key4304: "mdrwpsdrcicagvximokxrrp" },
    location: "ouwfvnokjvivmjzqpupwrbsmls",
  });
  console.log(result);
}

async function main(): Promise<void> {
  await diagnosticsCreateOrUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/diagnosticsDeleteSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to deletes specified Diagnostic resource.
 *
 * @summary deletes specified Diagnostic resource.
 * x-ms-original-file: 2025-06-01/Diagnostics_Delete_MaximumSet_Gen.json
 */
async function diagnosticsDeleteMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.diagnostics.delete("rgconfigurationmanager", "testname");
}

async function main(): Promise<void> {
  await diagnosticsDeleteMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/diagnosticsGetSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to returns details of specified Diagnostic resource.
 *
 * @summary returns details of specified Diagnostic resource.
 * x-ms-original-file: 2025-06-01/Diagnostics_Get_MaximumSet_Gen.json
 */
async function diagnosticsGetMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.diagnostics.get("rgconfigurationmanager", "testname");
  console.log(result);
}

async function main(): Promise<void> {
  await diagnosticsGetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/diagnosticsListByResourceGroupSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to returns a collection of Diagnostic resources within the resource group.
 *
 * @summary returns a collection of Diagnostic resources within the resource group.
 * x-ms-original-file: 2025-06-01/Diagnostics_ListByResourceGroup_MaximumSet_Gen.json
 */
async function diagnosticsListByResourceGroupMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.diagnostics.listByResourceGroup("rgconfigurationmanager")) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main(): Promise<void> {
  await diagnosticsListByResourceGroupMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/diagnosticsListBySubscriptionSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to lists Diagnostics resources within an Azure subscription.
 *
 * @summary lists Diagnostics resources within an Azure subscription.
 * x-ms-original-file: 2025-06-01/Diagnostics_ListBySubscription_MaximumSet_Gen.json
 */
async function diagnosticsListBySubscriptionMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.diagnostics.listBySubscription()) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main(): Promise<void> {
  await diagnosticsListBySubscriptionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/diagnosticsUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to updates existing Diagnostic resource.
 *
 * @summary updates existing Diagnostic resource.
 * x-ms-original-file: 2025-06-01/Diagnostics_Update_MaximumSet_Gen.json
 */
async function diagnosticsUpdateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.diagnostics.update("rgconfigurationmanager", "testname", {
    properties: {},
    tags: { key1922: "efraipifhmdfekwgunngrgvsc" },
  });
  console.log(result);
}

async function main(): Promise<void> {
  await diagnosticsUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/dynamicSchemasCreateOrUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to create or update a DynamicSchema Resource
 *
 * @summary create or update a DynamicSchema Resource
 * x-ms-original-file: 2025-06-01/DynamicSchemas_CreateOrUpdate_MaximumSet_Gen.json
 */
async function dynamicSchemasCreateOrUpdateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.dynamicSchemas.createOrUpdate(
    "rgconfigurationmanager",
    "testname",
    "testname",
    {
      properties: {
        configurationType: "Shared",
        configurationModel: "Application",
      },
    },
  );
  console.log(result);
}

async function main(): Promise<void> {
  await dynamicSchemasCreateOrUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/dynamicSchemasDeleteSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to delete a DynamicSchema Resource
 *
 * @summary delete a DynamicSchema Resource
 * x-ms-original-file: 2025-06-01/DynamicSchemas_Delete_MaximumSet_Gen.json
 */
async function dynamicSchemasDeleteMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.dynamicSchemas.delete("rgconfigurationmanager", "testname", "testname");
}

async function main(): Promise<void> {
  await dynamicSchemasDeleteMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/dynamicSchemasGetSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to get a DynamicSchema Resource
 *
 * @summary get a DynamicSchema Resource
 * x-ms-original-file: 2025-06-01/DynamicSchemas_Get_MaximumSet_Gen.json
 */
async function dynamicSchemasGetMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.dynamicSchemas.get("rgconfigurationmanager", "testname", "testname");
  console.log(result);
}

async function main(): Promise<void> {
  await dynamicSchemasGetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/dynamicSchemasListBySchemaSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to list by Schema
 *
 * @summary list by Schema
 * x-ms-original-file: 2025-06-01/DynamicSchemas_ListBySchema_MaximumSet_Gen.json
 */
async function dynamicSchemasListBySchemaMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.dynamicSchemas.listBySchema(
    "rgconfigurationmanager",
    "testname",
  )) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main(): Promise<void> {
  await dynamicSchemasListBySchemaMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/dynamicSchemasUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to update a DynamicSchema Resource
 *
 * @summary update a DynamicSchema Resource
 * x-ms-original-file: 2025-06-01/DynamicSchemas_Update_MaximumSet_Gen.json
 */
async function dynamicSchemasUpdateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.dynamicSchemas.update(
    "rgconfigurationmanager",
    "testname",
    "testname",
    {
      properties: {
        configurationType: "Shared",
        configurationModel: "Application",
      },
    },
  );
  console.log(result);
}

async function main(): Promise<void> {
  await dynamicSchemasUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/dynamicSchemaVersionsCreateOrUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to create or update a Dynamic Schema Version Resource
 *
 * @summary create or update a Dynamic Schema Version Resource
 * x-ms-original-file: 2025-06-01/DynamicSchemaVersions_CreateOrUpdate_MaximumSet_Gen.json
 */
async function dynamicSchemaVersionsCreateOrUpdateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.dynamicSchemaVersions.createOrUpdate(
    "rgconfigurationmanager",
    "testname",
    "testname",
    "1.0.0",
    { properties: { value: "uiaqdwsi" } },
  );
  console.log(result);
}

async function main(): Promise<void> {
  await dynamicSchemaVersionsCreateOrUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/dynamicSchemaVersionsDeleteSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to delete a Dynamic Schema Version Resource
 *
 * @summary delete a Dynamic Schema Version Resource
 * x-ms-original-file: 2025-06-01/DynamicSchemaVersions_Delete_MaximumSet_Gen.json
 */
async function dynamicSchemaVersionsDeleteMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.dynamicSchemaVersions.delete(
    "rgconfigurationmanager",
    "testname",
    "testname",
    "1.0.0",
  );
}

async function main(): Promise<void> {
  await dynamicSchemaVersionsDeleteMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/dynamicSchemaVersionsGetSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to get a Dynamic Schema Version Resource
 *
 * @summary get a Dynamic Schema Version Resource
 * x-ms-original-file: 2025-06-01/DynamicSchemaVersions_Get_MaximumSet_Gen.json
 */
async function dynamicSchemaVersionsGetMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.dynamicSchemaVersions.get(
    "rgconfigurationmanager",
    "testname",
    "testname",
    "1.0.0",
  );
  console.log(result);
}

async function main(): Promise<void> {
  await dynamicSchemaVersionsGetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/dynamicSchemaVersionsListByDynamicSchemaSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to list by Dynamic Schema
 *
 * @summary list by Dynamic Schema
 * x-ms-original-file: 2025-06-01/DynamicSchemaVersions_ListByDynamicSchema_MaximumSet_Gen.json
 */
async function dynamicSchemaVersionsListByDynamicSchemaMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.dynamicSchemaVersions.listByDynamicSchema(
    "rgconfigurationmanager",
    "testname",
    "testname",
  )) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main(): Promise<void> {
  await dynamicSchemaVersionsListByDynamicSchemaMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/dynamicSchemaVersionsUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to update a Dynamic Schema Version Resource
 *
 * @summary update a Dynamic Schema Version Resource
 * x-ms-original-file: 2025-06-01/DynamicSchemaVersions_Update_MaximumSet_Gen.json
 */
async function dynamicSchemaVersionsUpdateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.dynamicSchemaVersions.update(
    "rgconfigurationmanager",
    "testname",
    "testname",
    "1.0.0",
    { properties: { value: "muezi" } },
  );
  console.log(result);
}

async function main(): Promise<void> {
  await dynamicSchemaVersionsUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/executionsCreateOrUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to create or update Execution Resource
 *
 * @summary create or update Execution Resource
 * x-ms-original-file: 2025-06-01/Executions_CreateOrUpdate_MaximumSet_Gen.json
 */
async function executionsCreateOrUpdateMaximumSetGeneratedByMaximumSetRule(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "EE6D9590-0D52-4B1C-935C-FE49DBF838EB";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.executions.createOrUpdate(
    "rgconfigurationmanager",
    "abcde",
    "abcde",
    "abcde",
    "abcde",
    {
      properties: {
        specification: {},
        status: {
          status: 999,
          stageHistory: [
            {
              status: 999,
              statusMessage: "wfymzartwvvqrgrmdwyhfaftszoc",
              stage: "gsostfpgjcsoeky",
              nextstage: "wjxvqbrocjxzhzfgmgbzt",
              errorMessage: "xsvwgovyatvlacmp",
              isActive: "active",
              inputs: {},
              outputs: {},
            },
          ],
          updateTime: new Date("2025-02-17T13:55:20.922Z"),
          statusMessage: "ebhukpnhnbu",
        },
        workflowVersionId: "souenlqwltljsojdcbpc",
      },
      extendedLocation: { name: "ugf", type: "EdgeZone" },
    },
  );
  console.log(result);
}

async function main(): Promise<void> {
  await executionsCreateOrUpdateMaximumSetGeneratedByMaximumSetRule();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/executionsDeleteSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to delete Execution Resource
 *
 * @summary delete Execution Resource
 * x-ms-original-file: 2025-06-01/Executions_Delete_MaximumSet_Gen.json
 */
async function executionsDeleteMaximumSetGeneratedByMaximumSetRule(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "EE6D9590-0D52-4B1C-935C-FE49DBF838EB";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.executions.delete("rgconfigurationmanager", "abcde", "abcde", "abcde", "abcde");
}

async function main(): Promise<void> {
  await executionsDeleteMaximumSetGeneratedByMaximumSetRule();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/executionsGetSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to get Execution Resource
 *
 * @summary get Execution Resource
 * x-ms-original-file: 2025-06-01/Executions_Get_MaximumSet_Gen.json
 */
async function executionsGetMaximumSetGeneratedByMaximumSetRule(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "EE6D9590-0D52-4B1C-935C-FE49DBF838EB";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.executions.get(
    "rgconfigurationmanager",
    "abcde",
    "abcde",
    "abcde",
    "abcde",
  );
  console.log(result);
}

async function main(): Promise<void> {
  await executionsGetMaximumSetGeneratedByMaximumSetRule();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/executionsListByWorkflowVersionSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to list Execution Resources
 *
 * @summary list Execution Resources
 * x-ms-original-file: 2025-06-01/Executions_ListByWorkflowVersion_MaximumSet_Gen.json
 */
async function executionsListByWorkflowVersionMaximumSetGeneratedByMaximumSetRule(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "EE6D9590-0D52-4B1C-935C-FE49DBF838EB";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.executions.listByWorkflowVersion(
    "rgconfigurationmanager",
    "abcde",
    "abcde",
    "abcde",
  )) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main(): Promise<void> {
  await executionsListByWorkflowVersionMaximumSetGeneratedByMaximumSetRule();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/executionsUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to update an Execution Resource
 *
 * @summary update an Execution Resource
 * x-ms-original-file: 2025-06-01/Executions_Update_MaximumSet_Gen.json
 */
async function executionsUpdateMaximumSetGeneratedByMaximumSetRule(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "FFA229AF-C1A3-4CB6-9E5D-62C25CFBE4D0";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.executions.update(
    "rgconfigurationmanager",
    "abcde",
    "abcde",
    "abcde",
    "abcde",
    { properties: { specification: {}, workflowVersionId: "xjsxzbfltzvbuvn" } },
  );
  console.log(result);
}

async function main(): Promise<void> {
  await executionsUpdateMaximumSetGeneratedByMaximumSetRule();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/instanceHistoriesGetSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to get InstanceHistory Resource
 *
 * @summary get InstanceHistory Resource
 * x-ms-original-file: 2025-06-01/InstanceHistories_Get_MaximumSet_Gen.json
 */
async function instanceHistoriesGetMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.instanceHistories.get(
    "rgconfigurationmanager",
    "testname",
    "testname",
    "testname",
    "testname",
  );
  console.log(result);
}

async function main(): Promise<void> {
  await instanceHistoriesGetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/instanceHistoriesListByInstanceSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to list InstanceHistory Resources
 *
 * @summary list InstanceHistory Resources
 * x-ms-original-file: 2025-06-01/InstanceHistories_ListByInstance_MaximumSet_Gen.json
 */
async function instanceHistoriesListByInstanceMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.instanceHistories.listByInstance(
    "rgconfigurationmanager",
    "testname",
    "testname",
    "testname",
  )) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main(): Promise<void> {
  await instanceHistoriesListByInstanceMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/instancesCreateOrUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to create or update Instance Resource
 *
 * @summary create or update Instance Resource
 * x-ms-original-file: 2025-06-01/Instances_CreateOrUpdate_MaximumSet_Gen.json
 */
async function instancesCreateOrUpdateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.instances.createOrUpdate(
    "rgconfigurationmanager",
    "testname",
    "testname",
    "testname",
    {
      properties: {
        solutionVersionId: "acpddbkfclsgxg",
        targetId: "eguutiftuxrsavvckjrv",
        activeState: "active",
        reconciliationPolicy: {
          state: "inactive",
          interval: "szucgzdbydcowvhprhx",
        },
        solutionScope: "testname",
        status: {
          lastModified: new Date("2025-06-09T10:12:04.224Z"),
          deployed: 24,
          expectedRunningJobId: 19,
          runningJobId: 6,
          status: "nnpksn",
          statusDetails: "bslqqnfciczenaltdcmrgg",
          generation: 21,
          targetStatuses: [
            {
              name: "jpbfbxmjvr",
              status: "gsgkxfwtyoaepwa",
              componentStatuses: [
                {
                  name: "lxzbkoblvaoubknkblwplf",
                  status: "txtthlvducufbblgtctegtgpzkzgyi",
                },
              ],
            },
          ],
        },
      },
      extendedLocation: { name: "szjrwimeqyiue", type: "EdgeZone" },
    },
  );
  console.log(result);
}

async function main(): Promise<void> {
  await instancesCreateOrUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/instancesDeleteSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to delete Instance Resource
 *
 * @summary delete Instance Resource
 * x-ms-original-file: 2025-06-01/Instances_Delete_MaximumSet_Gen.json
 */
async function instancesDeleteMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.instances.delete("rgconfigurationmanager", "testname", "testname", "testname");
}

async function main(): Promise<void> {
  await instancesDeleteMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/instancesGetSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to get Instance Resource
 *
 * @summary get Instance Resource
 * x-ms-original-file: 2025-06-01/Instances_Get_MaximumSet_Gen.json
 */
async function instancesGetMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.instances.get(
    "rgconfigurationmanager",
    "testname",
    "testname",
    "testname",
  );
  console.log(result);
}

async function main(): Promise<void> {
  await instancesGetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/instancesListBySolutionSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to list Instance Resources
 *
 * @summary list Instance Resources
 * x-ms-original-file: 2025-06-01/Instances_ListBySolution_MaximumSet_Gen.json
 */
async function instancesListBySolutionMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.instances.listBySolution(
    "rgconfigurationmanager",
    "testname",
    "testname",
  )) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main(): Promise<void> {
  await instancesListBySolutionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/instancesUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to update an Instance Resource
 *
 * @summary update an Instance Resource
 * x-ms-original-file: 2025-06-01/Instances_Update_MaximumSet_Gen.json
 */
async function instancesUpdateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.instances.update(
    "rgconfigurationmanager",
    "testname",
    "testname",
    "testname",
    {
      properties: {
        solutionVersionId: "vrpzlamkvanqibtjarpxit",
        targetId: "tqkdvc",
        activeState: "active",
        reconciliationPolicy: {
          state: "inactive",
          interval: "cmzlrjwnlshnkgv",
        },
        solutionScope: "testname",
      },
    },
  );
  console.log(result);
}

async function main(): Promise<void> {
  await instancesUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/jobsGetSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to get a Job resource
 *
 * @summary get a Job resource
 * x-ms-original-file: 2025-06-01/Jobs_Get_MaximumSet_Gen.json
 */
async function jobsGetMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "00000000-0000-0000-0000-00000000000";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.jobs.get("gt", "jobsName");
  console.log(result);
}

async function main(): Promise<void> {
  await jobsGetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/jobsListByTargetSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to list Jobs by parent resource
 *
 * @summary list Jobs by parent resource
 * x-ms-original-file: 2025-06-01/Jobs_ListByTarget_MaximumSet_Gen.json
 */
async function jobsListByTargetMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "00000000-0000-0000-0000-00000000000";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.jobs.listByTarget("gt")) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main(): Promise<void> {
  await jobsListByTargetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/schemaReferencesGetSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to get a Schema Reference Resource
 *
 * @summary get a Schema Reference Resource
 * x-ms-original-file: 2025-06-01/SchemaReferences_Get_MaximumSet_Gen.json
 */
async function schemaReferencesGetMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "00000000-0000-0000-0000-00000000000";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.schemaReferences.get("jdvtghygpz", "testname");
  console.log(result);
}

async function main(): Promise<void> {
  await schemaReferencesGetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/schemaReferencesListByResourceGroupSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to list by specified resource group
 *
 * @summary list by specified resource group
 * x-ms-original-file: 2025-06-01/SchemaReferences_ListByResourceGroup_MaximumSet_Gen.json
 */
async function schemaReferencesListByResourceGroupMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "00000000-0000-0000-0000-00000000000";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.schemaReferences.listByResourceGroup("jdvtghygpz")) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main(): Promise<void> {
  await schemaReferencesListByResourceGroupMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/schemasCreateOrUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to create or update a Schema Resource
 *
 * @summary create or update a Schema Resource
 * x-ms-original-file: 2025-06-01/Schemas_CreateOrUpdate_MaximumSet_Gen.json
 */
async function schemasCreateOrUpdateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.schemas.createOrUpdate("rgconfigurationmanager", "testname", {
    properties: {},
    tags: { key7017: "rdynaxxagwjzubehiz" },
    location: "alvi",
  });
  console.log(result);
}

async function main(): Promise<void> {
  await schemasCreateOrUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/schemasCreateVersionSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to create a Schema Version Resource
 *
 * @summary create a Schema Version Resource
 * x-ms-original-file: 2025-06-01/Schemas_CreateVersion_MaximumSet_Gen.json
 */
async function schemasCreateVersionMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.schemas.createVersion("rgconfigurationmanager", "testname", {
    updateType: "Major",
    version: "1.0.0",
    schemaVersion: { properties: { value: "uiaqdwsi" } },
  });
  console.log(result);
}

async function main(): Promise<void> {
  await schemasCreateVersionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/schemasDeleteSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to delete a Schema Resource
 *
 * @summary delete a Schema Resource
 * x-ms-original-file: 2025-06-01/Schemas_Delete_MaximumSet_Gen.json
 */
async function schemasDeleteMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.schemas.delete("rgconfigurationmanager", "testname");
}

async function main(): Promise<void> {
  await schemasDeleteMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/schemasGetSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to get a Schema Resource
 *
 * @summary get a Schema Resource
 * x-ms-original-file: 2025-06-01/Schemas_Get_MaximumSet_Gen.json
 */
async function schemasGetMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.schemas.get("rgconfigurationmanager", "testname");
  console.log(result);
}

async function main(): Promise<void> {
  await schemasGetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/schemasListByResourceGroupSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to list by specified resource group
 *
 * @summary list by specified resource group
 * x-ms-original-file: 2025-06-01/Schemas_ListByResourceGroup_MaximumSet_Gen.json
 */
async function schemasListByResourceGroupMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.schemas.listByResourceGroup("rgconfigurationmanager")) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main(): Promise<void> {
  await schemasListByResourceGroupMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/schemasListBySubscriptionSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to list by subscription
 *
 * @summary list by subscription
 * x-ms-original-file: 2025-06-01/Schemas_ListBySubscription_MaximumSet_Gen.json
 */
async function schemasListBySubscriptionMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.schemas.listBySubscription()) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main(): Promise<void> {
  await schemasListBySubscriptionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/schemasRemoveVersionSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to remove Schema Version Resource
 *
 * @summary remove Schema Version Resource
 * x-ms-original-file: 2025-06-01/Schemas_RemoveVersion_MaximumSet_Gen.json
 */
async function schemasRemoveVersionMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.schemas.removeVersion("rgconfigurationmanager", "testname", {
    version: "ghtvdzgmzncaifrnuumg",
  });
  console.log(result);
}

async function main(): Promise<void> {
  await schemasRemoveVersionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/schemasUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to update a Schema Resource
 *
 * @summary update a Schema Resource
 * x-ms-original-file: 2025-06-01/Schemas_Update_MaximumSet_Gen.json
 */
async function schemasUpdateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.schemas.update("rgconfigurationmanager", "testname", {
    properties: {},
    tags: { key6760: "lknwkzihsmzbzkezkartwgsv" },
  });
  console.log(result);
}

async function main(): Promise<void> {
  await schemasUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/schemaVersionsCreateOrUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to create or update a Schema Version Resource
 *
 * @summary create or update a Schema Version Resource
 * x-ms-original-file: 2025-06-01/SchemaVersions_CreateOrUpdate_MaximumSet_Gen.json
 */
async function schemaVersionsCreateOrUpdateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.schemaVersions.createOrUpdate(
    "rgconfigurationmanager",
    "testname",
    "1.0.0",
    { properties: { value: "uiaqdwsi" } },
  );
  console.log(result);
}

async function main(): Promise<void> {
  await schemaVersionsCreateOrUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/schemaVersionsDeleteSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to delete a Schema Version Resource
 *
 * @summary delete a Schema Version Resource
 * x-ms-original-file: 2025-06-01/SchemaVersions_Delete_MaximumSet_Gen.json
 */
async function schemaVersionsDeleteMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.schemaVersions.delete("rgconfigurationmanager", "testname", "1.0.0");
}

async function main(): Promise<void> {
  await schemaVersionsDeleteMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/schemaVersionsGetSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to get a Schema Version Resource
 *
 * @summary get a Schema Version Resource
 * x-ms-original-file: 2025-06-01/SchemaVersions_Get_MaximumSet_Gen.json
 */
async function schemaVersionsGetMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.schemaVersions.get("rgconfigurationmanager", "testname", "1.0.0");
  console.log(result);
}

async function main(): Promise<void> {
  await schemaVersionsGetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/schemaVersionsListBySchemaSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to list by specified resource group
 *
 * @summary list by specified resource group
 * x-ms-original-file: 2025-06-01/SchemaVersions_ListBySchema_MaximumSet_Gen.json
 */
async function schemaVersionsListBySchemaMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.schemaVersions.listBySchema(
    "rgconfigurationmanager",
    "testname",
  )) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main(): Promise<void> {
  await schemaVersionsListBySchemaMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/schemaVersionsUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to update a Schema Version Resource
 *
 * @summary update a Schema Version Resource
 * x-ms-original-file: 2025-06-01/SchemaVersions_Update_MaximumSet_Gen.json
 */
async function schemaVersionsUpdateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.schemaVersions.update("rgconfigurationmanager", "testname", "1.0.0", {
    properties: { value: "muezi" },
  });
  console.log(result);
}

async function main(): Promise<void> {
  await schemaVersionsUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/siteReferencesCreateOrUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to get Site Reference Resource
 *
 * @summary get Site Reference Resource
 * x-ms-original-file: 2025-06-01/SiteReferences_CreateOrUpdate_MaximumSet_Gen.json
 */
async function siteReferencesCreateOrUpdateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.siteReferences.createOrUpdate(
    "rgconfigurationmanager",
    "testname",
    "testname",
    { properties: { siteId: "xxjpxdcaumewwgpbwzkcrgrcw" } },
  );
  console.log(result);
}

async function main(): Promise<void> {
  await siteReferencesCreateOrUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/siteReferencesDeleteSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to get Site Reference Resource
 *
 * @summary get Site Reference Resource
 * x-ms-original-file: 2025-06-01/SiteReferences_Delete_MaximumSet_Gen.json
 */
async function siteReferencesDeleteMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.siteReferences.delete("rgconfigurationmanager", "testname", "testname");
}

async function main(): Promise<void> {
  await siteReferencesDeleteMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/siteReferencesGetSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to get Site Reference Resource
 *
 * @summary get Site Reference Resource
 * x-ms-original-file: 2025-06-01/SiteReferences_Get_MaximumSet_Gen.json
 */
async function siteReferencesGetMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.siteReferences.get("rgconfigurationmanager", "testname", "testname");
  console.log(result);
}

async function main(): Promise<void> {
  await siteReferencesGetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/siteReferencesListByContextSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to list Site Reference Resources
 *
 * @summary list Site Reference Resources
 * x-ms-original-file: 2025-06-01/SiteReferences_ListByContext_MaximumSet_Gen.json
 */
async function siteReferencesListByContextMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.siteReferences.listByContext(
    "rgconfigurationmanager",
    "testname",
  )) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main(): Promise<void> {
  await siteReferencesListByContextMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/siteReferencesUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to get Site Reference Resource
 *
 * @summary get Site Reference Resource
 * x-ms-original-file: 2025-06-01/SiteReferences_Update_MaximumSet_Gen.json
 */
async function siteReferencesUpdateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.siteReferences.update(
    "rgconfigurationmanager",
    "testname",
    "testname",
    { properties: { siteId: "nwiuyaro" } },
  );
  console.log(result);
}

async function main(): Promise<void> {
  await siteReferencesUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/solutionsCreateOrUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to create or update a Solution Resource
 *
 * @summary create or update a Solution Resource
 * x-ms-original-file: 2025-06-01/Solutions_CreateOrUpdate_MaximumSet_Gen.json
 */
async function solutionsCreateOrUpdateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.solutions.createOrUpdate(
    "rgconfigurationmanager",
    "testname",
    "testname",
    {
      properties: {},
      extendedLocation: { name: "szjrwimeqyiue", type: "EdgeZone" },
    },
  );
  console.log(result);
}

async function main(): Promise<void> {
  await solutionsCreateOrUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/solutionsDeleteSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to delete a Solution Resource
 *
 * @summary delete a Solution Resource
 * x-ms-original-file: 2025-06-01/Solutions_Delete_MaximumSet_Gen.json
 */
async function solutionsDeleteMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.solutions.delete("rgconfigurationmanager", "testname", "testname");
}

async function main(): Promise<void> {
  await solutionsDeleteMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/solutionsGetSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to get a Solution resource
 *
 * @summary get a Solution resource
 * x-ms-original-file: 2025-06-01/Solutions_Get_MaximumSet_Gen.json
 */
async function solutionsGetMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.solutions.get("rgconfigurationmanager", "testname", "testname");
  console.log(result);
}

async function main(): Promise<void> {
  await solutionsGetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/solutionsListByTargetSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to list Solution resources
 *
 * @summary list Solution resources
 * x-ms-original-file: 2025-06-01/Solutions_ListByTarget_MaximumSet_Gen.json
 */
async function solutionsListByTargetMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.solutions.listByTarget("rgconfigurationmanager", "testname")) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main(): Promise<void> {
  await solutionsListByTargetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/solutionsUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to update a Solution Resource
 *
 * @summary update a Solution Resource
 * x-ms-original-file: 2025-06-01/Solutions_Update_MaximumSet_Gen.json
 */
async function solutionsUpdateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.solutions.update("rgconfigurationmanager", "testname", "testname", {
    properties: {},
  });
  console.log(result);
}

async function main(): Promise<void> {
  await solutionsUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/solutionTemplatesCreateOrUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to create or update a Solution Template Resource
 *
 * @summary create or update a Solution Template Resource
 * x-ms-original-file: 2025-06-01/SolutionTemplates_CreateOrUpdate_MaximumSet_Gen.json
 */
async function solutionTemplatesCreateOrUpdateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.solutionTemplates.createOrUpdate(
    "rgconfigurationmanager",
    "testname",
    {
      properties: {
        description: "psrftehgzngcdlccivhjmwsmiz",
        capabilities: ["dfoyxbbknrhvlunhmuyyt"],
        state: "active",
        enableExternalValidation: true,
      },
      tags: { key5091: "dov" },
      location: "zheaaqvadewftnctxzpinrgeproqs",
    },
  );
  console.log(result);
}

async function main(): Promise<void> {
  await solutionTemplatesCreateOrUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/solutionTemplatesCreateVersionSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to create a Solution Template Version Resource
 *
 * @summary create a Solution Template Version Resource
 * x-ms-original-file: 2025-06-01/SolutionTemplates_CreateVersion_MaximumSet_Gen.json
 */
async function solutionTemplatesCreateVersionMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.solutionTemplates.createVersion(
    "rgconfigurationmanager",
    "testname",
    {
      updateType: "Major",
      version: "1.0.0",
      solutionTemplateVersion: {
        properties: {
          configurations: "ofqcsavwmeuwmvtjnqpoybtjvkmrlh",
          specification: {},
          orchestratorType: "TO",
        },
      },
    },
  );
  console.log(result);
}

async function main(): Promise<void> {
  await solutionTemplatesCreateVersionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/solutionTemplatesDeleteSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to delete a Solution Template Resource
 *
 * @summary delete a Solution Template Resource
 * x-ms-original-file: 2025-06-01/SolutionTemplates_Delete_MaximumSet_Gen.json
 */
async function solutionTemplatesDeleteMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.solutionTemplates.delete("rgconfigurationmanager", "testname");
}

async function main(): Promise<void> {
  await solutionTemplatesDeleteMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/solutionTemplatesGetSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to get a Solution Template Resource
 *
 * @summary get a Solution Template Resource
 * x-ms-original-file: 2025-06-01/SolutionTemplates_Get_MaximumSet_Gen.json
 */
async function solutionTemplatesGetMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.solutionTemplates.get("rgconfigurationmanager", "testname");
  console.log(result);
}

async function main(): Promise<void> {
  await solutionTemplatesGetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/solutionTemplatesListByResourceGroupSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to list by specified resource group
 *
 * @summary list by specified resource group
 * x-ms-original-file: 2025-06-01/SolutionTemplates_ListByResourceGroup_MaximumSet_Gen.json
 */
async function solutionTemplatesListByResourceGroupMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.solutionTemplates.listByResourceGroup("rgconfigurationmanager")) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main(): Promise<void> {
  await solutionTemplatesListByResourceGroupMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/solutionTemplatesListBySubscriptionSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to list by subscription
 *
 * @summary list by subscription
 * x-ms-original-file: 2025-06-01/SolutionTemplates_ListBySubscription_MaximumSet_Gen.json
 */
async function solutionTemplatesListBySubscriptionMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.solutionTemplates.listBySubscription()) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main(): Promise<void> {
  await solutionTemplatesListBySubscriptionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/solutionTemplatesRemoveVersionSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to remove Solution Template Version Resource
 *
 * @summary remove Solution Template Version Resource
 * x-ms-original-file: 2025-06-01/SolutionTemplates_RemoveVersion_MaximumSet_Gen.json
 */
async function solutionTemplatesRemoveVersionMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.solutionTemplates.removeVersion("rgconfigurationmanager", "testname", {
    version: "ghtvdzgmzncaifrnuumg",
  });
}

async function main(): Promise<void> {
  await solutionTemplatesRemoveVersionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/solutionTemplatesUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to update a Solution Template Resource
 *
 * @summary update a Solution Template Resource
 * x-ms-original-file: 2025-06-01/SolutionTemplates_Update_MaximumSet_Gen.json
 */
async function solutionTemplatesUpdateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.solutionTemplates.update("rgconfigurationmanager", "testname", {
    properties: {
      description: "onqlteg",
      capabilities: ["relsv"],
      state: "active",
      enableExternalValidation: true,
    },
    tags: { key8772: "vbdujmqklnwiepis" },
  });
  console.log(result);
}

async function main(): Promise<void> {
  await solutionTemplatesUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/solutionTemplateVersionsBulkDeploySolutionSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to post request for bulk deploy
 *
 * @summary post request for bulk deploy
 * x-ms-original-file: 2025-06-01/SolutionTemplateVersions_BulkDeploySolution_MaximumSet_Gen.json
 */
async function solutionTemplateVersionsBulkDeploySolutionMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.solutionTemplateVersions.bulkDeploySolution(
    "rgconfigurationmanager",
    "testname",
    "1.0.0",
    {
      targets: [
        {
          solutionVersionId:
            "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.Edge/Targets/target/Solutions/solution/Versions/solution-1.0.0.1",
        },
      ],
    },
  );
}

async function main(): Promise<void> {
  await solutionTemplateVersionsBulkDeploySolutionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/solutionTemplateVersionsBulkPublishSolutionSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to post request for bulk publish
 *
 * @summary post request for bulk publish
 * x-ms-original-file: 2025-06-01/SolutionTemplateVersions_BulkPublishSolution_MaximumSet_Gen.json
 */
async function solutionTemplateVersionsBulkPublishSolutionMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.solutionTemplateVersions.bulkPublishSolution(
    "rgconfigurationmanager",
    "testname",
    "1.0.0",
    {
      targets: [
        {
          targetId:
            "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.Edge/Targets/target",
          solutionInstanceName: "test-instance",
        },
      ],
      solutionInstanceName: "test-instance",
      solutionDependencies: [
        {
          solutionVersionId:
            "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.Edge/Targets/target/Solutions/solution/Versions/solution-1.0.0.1",
          solutionTemplateId:
            "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.Edge/SolutionTemplates/st",
          solutionTemplateVersion: "1.0.0",
          solutionInstanceName: "test-instance",
          targetId:
            "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.Edge/Targets/target",
          dependencies: [],
        },
      ],
    },
  );
}

async function main(): Promise<void> {
  await solutionTemplateVersionsBulkPublishSolutionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/solutionTemplateVersionsGetSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to get a Solution Template Version Resource
 *
 * @summary get a Solution Template Version Resource
 * x-ms-original-file: 2025-06-01/SolutionTemplateVersions_Get_MaximumSet_Gen.json
 */
async function solutionTemplateVersionsGetMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.solutionTemplateVersions.get(
    "rgconfigurationmanager",
    "testname",
    "1.0.0",
  );
  console.log(result);
}

async function main(): Promise<void> {
  await solutionTemplateVersionsGetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/solutionTemplateVersionsListBySolutionTemplateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to list Solution Template Version Resources
 *
 * @summary list Solution Template Version Resources
 * x-ms-original-file: 2025-06-01/SolutionTemplateVersions_ListBySolutionTemplate_MaximumSet_Gen.json
 */
async function solutionTemplateVersionsListBySolutionTemplateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.solutionTemplateVersions.listBySolutionTemplate(
    "rgconfigurationmanager",
    "testname",
  )) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main(): Promise<void> {
  await solutionTemplateVersionsListBySolutionTemplateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/solutionVersionsCreateOrUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to create or update a Solution Version Resource
 *
 * @summary create or update a Solution Version Resource
 * x-ms-original-file: 2025-06-01/SolutionVersions_CreateOrUpdate_MaximumSet_Gen.json
 */
async function solutionVersionsCreateOrUpdateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.solutionVersions.createOrUpdate(
    "rgconfigurationmanager",
    "testname",
    "testname",
    "testname",
    {
      properties: { specification: {}, state: "InReview", errorDetails: {} },
      extendedLocation: { name: "szjrwimeqyiue", type: "EdgeZone" },
    },
  );
  console.log(result);
}

async function main(): Promise<void> {
  await solutionVersionsCreateOrUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/solutionVersionsDeleteSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to delete a Solution Version Resource
 *
 * @summary delete a Solution Version Resource
 * x-ms-original-file: 2025-06-01/SolutionVersions_Delete_MaximumSet_Gen.json
 */
async function solutionVersionsDeleteMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.solutionVersions.delete(
    "rgconfigurationmanager",
    "testname",
    "testname",
    "testname",
  );
}

async function main(): Promise<void> {
  await solutionVersionsDeleteMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/solutionVersionsGetSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to get a Solution Version Resource
 *
 * @summary get a Solution Version Resource
 * x-ms-original-file: 2025-06-01/SolutionVersions_Get_MaximumSet_Gen.json
 */
async function solutionVersionsGetMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.solutionVersions.get(
    "rgconfigurationmanager",
    "testname",
    "testname",
    "testname",
  );
  console.log(result);
}

async function main(): Promise<void> {
  await solutionVersionsGetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/solutionVersionsListBySolutionSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to list Solution Version Resources
 *
 * @summary list Solution Version Resources
 * x-ms-original-file: 2025-06-01/SolutionVersions_ListBySolution_MaximumSet_Gen.json
 */
async function solutionVersionsListBySolutionMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.solutionVersions.listBySolution(
    "rgconfigurationmanager",
    "testname",
    "testname",
  )) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main(): Promise<void> {
  await solutionVersionsListBySolutionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/solutionVersionsUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to update a Solution Version Resource
 *
 * @summary update a Solution Version Resource
 * x-ms-original-file: 2025-06-01/SolutionVersions_Update_MaximumSet_Gen.json
 */
async function solutionVersionsUpdateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.solutionVersions.update(
    "rgconfigurationmanager",
    "testname",
    "testname",
    "testname",
    { properties: { specification: {} } },
  );
  console.log(result);
}

async function main(): Promise<void> {
  await solutionVersionsUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/targetsCreateOrUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to create or update a Target Resource
 *
 * @summary create or update a Target Resource
 * x-ms-original-file: 2025-06-01/Targets_CreateOrUpdate_MaximumSet_Gen.json
 */
async function targetsCreateOrUpdateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.targets.createOrUpdate("rgconfigurationmanager", "testname", {
    properties: {
      description: "riabrxtvhlmizyhffdpjeyhvw",
      displayName: "qjlbshhqzfmwxvvynibkoi",
      targetSpecification: {},
      capabilities: ["grjapghdidoao"],
      contextId:
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
      hierarchyLevel: "octqptfirejhjfavlnfqeiikqx",
      status: {
        lastModified: new Date("2025-06-09T10:12:04.224Z"),
        deployed: 24,
        expectedRunningJobId: 19,
        runningJobId: 6,
        status: "nnpksn",
        statusDetails: "bslqqnfciczenaltdcmrgg",
        generation: 21,
        targetStatuses: [
          {
            name: "jpbfbxmjvr",
            status: "gsgkxfwtyoaepwa",
            componentStatuses: [
              {
                name: "lxzbkoblvaoubknkblwplf",
                status: "txtthlvducufbblgtctegtgpzkzgyi",
              },
            ],
          },
        ],
      },
      solutionScope: "testname",
      state: "active",
    },
    extendedLocation: { name: "szjrwimeqyiue", type: "EdgeZone" },
    tags: { key612: "vtqzrk" },
    location: "kckloegmwsjgwtcl",
  });
  console.log(result);
}

async function main(): Promise<void> {
  await targetsCreateOrUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/targetsDeleteSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to delete a Target Resource
 *
 * @summary delete a Target Resource
 * x-ms-original-file: 2025-06-01/Targets_Delete_MaximumSet_Gen.json
 */
async function targetsDeleteMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.targets.delete("rgconfigurationmanager", "testname", {
    forceDelete: true,
  });
}

async function main(): Promise<void> {
  await targetsDeleteMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/targetsGetSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to get a Target Resource
 *
 * @summary get a Target Resource
 * x-ms-original-file: 2025-06-01/Targets_Get_MaximumSet_Gen.json
 */
async function targetsGetMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.targets.get("rgconfigurationmanager", "testname");
  console.log(result);
}

async function main(): Promise<void> {
  await targetsGetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/targetsInstallSolutionSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to post request to deploy
 *
 * @summary post request to deploy
 * x-ms-original-file: 2025-06-01/Targets_InstallSolution_MaximumSet_Gen.json
 */
async function targetsInstallSolutionMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.targets.installSolution("rgconfigurationmanager", "testname", {
    solutionVersionId:
      "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
  });
}

async function main(): Promise<void> {
  await targetsInstallSolutionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/targetsListByResourceGroupSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to list by specified resource group
 *
 * @summary list by specified resource group
 * x-ms-original-file: 2025-06-01/Targets_ListByResourceGroup_MaximumSet_Gen.json
 */
async function targetsListByResourceGroupMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.targets.listByResourceGroup("rgconfigurationmanager")) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main(): Promise<void> {
  await targetsListByResourceGroupMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/targetsListBySubscriptionSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to list by subscription
 *
 * @summary list by subscription
 * x-ms-original-file: 2025-06-01/Targets_ListBySubscription_MaximumSet_Gen.json
 */
async function targetsListBySubscriptionMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.targets.listBySubscription()) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main(): Promise<void> {
  await targetsListBySubscriptionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/targetsPublishSolutionVersionSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to post request to publish
 *
 * @summary post request to publish
 * x-ms-original-file: 2025-06-01/Targets_PublishSolutionVersion_MaximumSet_Gen.json
 */
async function targetsPublishSolutionVersionMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.targets.publishSolutionVersion("rgconfigurationmanager", "testname", {
    solutionVersionId:
      "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
  });
  console.log(result);
}

async function main(): Promise<void> {
  await targetsPublishSolutionVersionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/targetsRemoveRevisionSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to post request to remove solution version revision
 *
 * @summary post request to remove solution version revision
 * x-ms-original-file: 2025-06-01/Targets_RemoveRevision_MaximumSet_Gen.json
 */
async function targetsRemoveRevisionMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.targets.removeRevision("rgconfigurationmanager", "testname", {
    solutionTemplateId:
      "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
    solutionVersion: "tomwmqybqomwkfaeukjneva",
  });
}

async function main(): Promise<void> {
  await targetsRemoveRevisionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/targetsResolveConfigurationSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to post request to resolve configuration
 *
 * @summary post request to resolve configuration
 * x-ms-original-file: 2025-06-01/Targets_ResolveConfiguration_MaximumSet_Gen.json
 */
async function targetsResolveConfigurationMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.targets.resolveConfiguration("rgconfigurationmanager", "testname", {
    solutionTemplateVersionId:
      "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}/{resourceType}/{resourceName}",
    solutionInstanceName: "testname",
    solutionDependencies: [
      {
        solutionVersionId: "cydzqntmjlqtksbavjwteru",
        solutionTemplateId: "liqauthxnscodbiwktwfwrrsg",
        solutionTemplateVersion: "gordjasyxxrj",
        solutionInstanceName: "testname",
        targetId: "steadvphxtyhjokqicrtg",
        dependencies: [],
      },
    ],
  });
  console.log(result);
}

async function main(): Promise<void> {
  await targetsResolveConfigurationMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/targetsReviewSolutionVersionSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to post request to review configuration
 *
 * @summary post request to review configuration
 * x-ms-original-file: 2025-06-01/Targets_ReviewSolutionVersion_MaximumSet_Gen.json
 */
async function targetsReviewSolutionVersionMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.targets.reviewSolutionVersion("rgconfigurationmanager", "testname", {
    solutionTemplateVersionId:
      "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}/{resourceType}/{resourceName}",
    solutionInstanceName: "testname",
    solutionDependencies: [
      {
        solutionVersionId: "cydzqntmjlqtksbavjwteru",
        solutionTemplateId: "liqauthxnscodbiwktwfwrrsg",
        solutionTemplateVersion: "gordjasyxxrj",
        solutionInstanceName: "testname",
        targetId: "steadvphxtyhjokqicrtg",
        dependencies: [],
      },
    ],
  });
  console.log(result);
}

async function main(): Promise<void> {
  await targetsReviewSolutionVersionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/targetsUninstallSolutionSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to post request to uninstall
 *
 * @summary post request to uninstall
 * x-ms-original-file: 2025-06-01/Targets_UninstallSolution_MaximumSet_Gen.json
 */
async function targetsUninstallSolutionMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.targets.uninstallSolution("rgconfigurationmanager", "testname", {
    solutionTemplateId:
      "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
    solutionInstanceName: "lzihiumrcxbolmkqktvtuqyhg",
  });
}

async function main(): Promise<void> {
  await targetsUninstallSolutionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/targetsUpdateExternalValidationStatusSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to post request to update external validation status
 *
 * @summary post request to update external validation status
 * x-ms-original-file: 2025-06-01/Targets_UpdateExternalValidationStatus_MaximumSet_Gen.json
 */
async function targetsUpdateExternalValidationStatusMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.targets.updateExternalValidationStatus(
    "rgconfigurationmanager",
    "testname",
    {
      solutionVersionId: "shntcsuwlmpehmuqkrbf",
      errorDetails: {},
      externalValidationId: "ivsjzwy",
      validationStatus: "Valid",
    },
  );
  console.log(result);
}

async function main(): Promise<void> {
  await targetsUpdateExternalValidationStatusMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/targetsUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to update a Target Resource
 *
 * @summary update a Target Resource
 * x-ms-original-file: 2025-06-01/Targets_Update_MaximumSet_Gen.json
 */
async function targetsUpdateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.targets.update("rgconfigurationmanager", "testname", {
    properties: {
      description: "yhnhdpznncdvncmnvoeohqjx",
      displayName: "pguujtzjjvixgjitugybrefp",
      targetSpecification: {},
      capabilities: ["dasqhyxfakivfzqb"],
      contextId:
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
      hierarchyLevel: "hfyntwxetgsmnucbjvvphtyxu",
      solutionScope: "testname",
      state: "active",
    },
    tags: { key8026: "yoosplotwgoquvpox" },
  });
  console.log(result);
}

async function main(): Promise<void> {
  await targetsUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/workflowsCreateOrUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to create or update a Workflow resource
 *
 * @summary create or update a Workflow resource
 * x-ms-original-file: 2025-06-01/Workflows_CreateOrUpdate_MaximumSet_Gen.json
 */
async function workflowsCreateOrUpdateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.workflows.createOrUpdate(
    "rgconfigurationmanager",
    "testname",
    "testname",
    {
      properties: {},
      extendedLocation: { name: "szjrwimeqyiue", type: "EdgeZone" },
    },
  );
  console.log(result);
}

async function main(): Promise<void> {
  await workflowsCreateOrUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/workflowsDeleteSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to delete a Workflow resource
 *
 * @summary delete a Workflow resource
 * x-ms-original-file: 2025-06-01/Workflows_Delete_MaximumSet_Gen.json
 */
async function workflowsDeleteMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.workflows.delete("rgconfigurationmanager", "testname", "testname");
}

async function main(): Promise<void> {
  await workflowsDeleteMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/workflowsGetSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to get a Workflow resource
 *
 * @summary get a Workflow resource
 * x-ms-original-file: 2025-06-01/Workflows_Get_MaximumSet_Gen.json
 */
async function workflowsGetMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.workflows.get("rgconfigurationmanager", "testname", "testname");
  console.log(result);
}

async function main(): Promise<void> {
  await workflowsGetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/workflowsListByContextSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to list Workflow resources
 *
 * @summary list Workflow resources
 * x-ms-original-file: 2025-06-01/Workflows_ListByContext_MaximumSet_Gen.json
 */
async function workflowsListByContextMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.workflows.listByContext("rgconfigurationmanager", "testname")) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main(): Promise<void> {
  await workflowsListByContextMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/workflowsUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to update a Workflow resource
 *
 * @summary update a Workflow resource
 * x-ms-original-file: 2025-06-01/Workflows_Update_MaximumSet_Gen.json
 */
async function workflowsUpdateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.workflows.update("rgconfigurationmanager", "testname", "testname", {
    properties: {},
  });
  console.log(result);
}

async function main(): Promise<void> {
  await workflowsUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/workflowVersionsCreateOrUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to create or update a Workflow Version Resource
 *
 * @summary create or update a Workflow Version Resource
 * x-ms-original-file: 2025-06-01/WorkflowVersions_CreateOrUpdate_MaximumSet_Gen.json
 */
async function workflowVersionsCreateOrUpdateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.workflowVersions.createOrUpdate(
    "rgconfigurationmanager",
    "testname",
    "testname",
    "testname",
    {
      properties: {
        stageSpec: [
          {
            name: "amrbjd",
            specification: {},
            tasks: [
              {
                name: "xxmeyvmgydbcwxqwjhadjxjod",
                targetId:
                  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                specification: {},
              },
            ],
            taskOption: {
              concurrency: 3,
              errorAction: {
                mode: "stopOnAnyFailure",
                maxToleratedFailures: 0,
              },
            },
          },
        ],
        state: "InReview",
        specification: {},
      },
      extendedLocation: { name: "szjrwimeqyiue", type: "EdgeZone" },
    },
  );
  console.log(result);
}

async function main(): Promise<void> {
  await workflowVersionsCreateOrUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/workflowVersionsDeleteSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to delete a Workflow Version Resource
 *
 * @summary delete a Workflow Version Resource
 * x-ms-original-file: 2025-06-01/WorkflowVersions_Delete_MaximumSet_Gen.json
 */
async function workflowVersionsDeleteMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.workflowVersions.delete(
    "rgconfigurationmanager",
    "testname",
    "testname",
    "testname",
  );
}

async function main(): Promise<void> {
  await workflowVersionsDeleteMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/workflowVersionsGetSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to get a Workflow Version Resource
 *
 * @summary get a Workflow Version Resource
 * x-ms-original-file: 2025-06-01/WorkflowVersions_Get_MaximumSet_Gen.json
 */
async function workflowVersionsGetMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.workflowVersions.get(
    "rgconfigurationmanager",
    "testname",
    "testname",
    "testname",
  );
  console.log(result);
}

async function main(): Promise<void> {
  await workflowVersionsGetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/workflowVersionsListByWorkflowSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to list Workflow Version Resources
 *
 * @summary list Workflow Version Resources
 * x-ms-original-file: 2025-06-01/WorkflowVersions_ListByWorkflow_MaximumSet_Gen.json
 */
async function workflowVersionsListByWorkflowMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.workflowVersions.listByWorkflow(
    "rgconfigurationmanager",
    "testname",
    "testname",
  )) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main(): Promise<void> {
  await workflowVersionsListByWorkflowMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples/v1-beta/typescript/src/workflowVersionsUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to update an WorkflowVersion Resource
 *
 * @summary update an WorkflowVersion Resource
 * x-ms-original-file: 2025-06-01/WorkflowVersions_Update_MaximumSet_Gen.json
 */
async function workflowVersionsUpdateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.workflowVersions.update(
    "rgconfigurationmanager",
    "testname",
    "testname",
    "testname",
    {
      properties: {
        stageSpec: [
          {
            name: "amrbjd",
            specification: {},
            tasks: [
              {
                name: "xxmeyvmgydbcwxqwjhadjxjod",
                targetId:
                  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                specification: {},
              },
            ],
            taskOption: {
              concurrency: 3,
              errorAction: {
                mode: "stopOnAnyFailure",
                maxToleratedFailures: 0,
              },
            },
          },
        ],
        specification: {},
      },
    },
  );
  console.log(result);
}

async function main(): Promise<void> {
  await workflowVersionsUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/configTemplatesCreateOrUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to create or update a Config Template Resource
 *
 * @summary create or update a Config Template Resource
 * x-ms-original-file: 2025-06-01/ConfigTemplates_CreateOrUpdate_MaximumSet_Gen.json
 */
async function configTemplatesCreateOrUpdateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.configTemplates.createOrUpdate("rgconfigurationmanager", "testname", {
    properties: { description: "ccdyggozwmhyvemlcwlsnhijwg" },
    tags: { key6936: "vnqujuvnbxonbsgb" },
    location: "egqjo",
  });
  console.log(result);
}

async function main(): Promise<void> {
  await configTemplatesCreateOrUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/configTemplatesCreateVersionSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to create or update a Config Template Version Resource with the specified UpdateType
 *
 * @summary create or update a Config Template Version Resource with the specified UpdateType
 * x-ms-original-file: 2025-06-01/ConfigTemplates_CreateVersion_MaximumSet_Gen.json
 */
async function configTemplatesCreateVersionMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.configTemplates.createVersion("rgconfigurationmanager", "testname", {
    updateType: "Major",
    version: "1.0.0",
    configTemplateVersion: {
      properties: { configurations: "rgricnhvcbqykc" },
    },
  });
  console.log(result);
}

async function main(): Promise<void> {
  await configTemplatesCreateVersionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/configTemplatesDeleteSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to delete a Config Template Resource
 *
 * @summary delete a Config Template Resource
 * x-ms-original-file: 2025-06-01/ConfigTemplates_Delete_MaximumSet_Gen.json
 */
async function configTemplatesDeleteMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.configTemplates.delete("rgconfigurationmanager", "testname");
}

async function main(): Promise<void> {
  await configTemplatesDeleteMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/configTemplatesGetSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to get a Config Template Resource
 *
 * @summary get a Config Template Resource
 * x-ms-original-file: 2025-06-01/ConfigTemplates_Get_MaximumSet_Gen.json
 */
async function configTemplatesGetMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.configTemplates.get("rgconfigurationmanager", "testname");
  console.log(result);
}

async function main(): Promise<void> {
  await configTemplatesGetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/configTemplatesListByResourceGroupSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to list by specified resource group
 *
 * @summary list by specified resource group
 * x-ms-original-file: 2025-06-01/ConfigTemplates_ListByResourceGroup_MaximumSet_Gen.json
 */
async function configTemplatesListByResourceGroupMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.configTemplates.listByResourceGroup("rgconfigurationmanager")) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main(): Promise<void> {
  await configTemplatesListByResourceGroupMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/configTemplatesListBySubscriptionSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to list by subscription
 *
 * @summary list by subscription
 * x-ms-original-file: 2025-06-01/ConfigTemplates_ListBySubscription_MaximumSet_Gen.json
 */
async function configTemplatesListBySubscriptionMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.configTemplates.listBySubscription()) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main(): Promise<void> {
  await configTemplatesListBySubscriptionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/configTemplatesRemoveVersionSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to remove Config Template Version Resource
 *
 * @summary remove Config Template Version Resource
 * x-ms-original-file: 2025-06-01/ConfigTemplates_RemoveVersion_MaximumSet_Gen.json
 */
async function configTemplatesRemoveVersionMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.configTemplates.removeVersion("rgconfigurationmanager", "testname", {
    version: "ghtvdzgmzncaifrnuumg",
  });
  console.log(result);
}

async function main(): Promise<void> {
  await configTemplatesRemoveVersionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/configTemplatesUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to update a Config Template Resource
 *
 * @summary update a Config Template Resource
 * x-ms-original-file: 2025-06-01/ConfigTemplates_Update_MaximumSet_Gen.json
 */
async function configTemplatesUpdateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.configTemplates.update("rgconfigurationmanager", "testname", {
    properties: { description: "cavjiqnrbzsvedicrixhwnfj" },
    tags: { key7701: "wrsv" },
  });
  console.log(result);
}

async function main(): Promise<void> {
  await configTemplatesUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/configTemplateVersionsGetSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to get a Config Template Version Resource
 *
 * @summary get a Config Template Version Resource
 * x-ms-original-file: 2025-06-01/ConfigTemplateVersions_Get_MaximumSet_Gen.json
 */
async function configTemplateVersionsGetMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.configTemplateVersions.get(
    "rgconfigurationmanager",
    "testname",
    "1.0.0",
  );
  console.log(result);
}

async function main(): Promise<void> {
  await configTemplateVersionsGetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/configTemplateVersionsListByConfigTemplateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to list Config Template Version Resources
 *
 * @summary list Config Template Version Resources
 * x-ms-original-file: 2025-06-01/ConfigTemplateVersions_ListByConfigTemplate_MaximumSet_Gen.json
 */
async function configTemplateVersionsListByConfigTemplateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.configTemplateVersions.listByConfigTemplate(
    "rgconfigurationmanager",
    "testname",
  )) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main(): Promise<void> {
  await configTemplateVersionsListByConfigTemplateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/contextsCreateOrUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to create or update Context Resource
 *
 * @summary create or update Context Resource
 * x-ms-original-file: 2025-06-01/Contexts_CreateOrUpdate_MaximumSet_Gen.json
 */
async function contextsCreateOrUpdateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.contexts.createOrUpdate("rgconfigurationmanager", "testname", {
    properties: {
      capabilities: [
        {
          name: "tpylinjcmlnycfpofpxjtqmt",
          description: "banbenutsngwytoqh",
          state: "active",
        },
      ],
      hierarchies: [{ name: "upqe", description: "vg" }],
    },
    tags: { key3046: "clcnhzwypk" },
    location: "pkquwbplcp",
  });
  console.log(result);
}

async function main(): Promise<void> {
  await contextsCreateOrUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/contextsDeleteSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to delete Context Resource
 *
 * @summary delete Context Resource
 * x-ms-original-file: 2025-06-01/Contexts_Delete_MaximumSet_Gen.json
 */
async function contextsDeleteMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.contexts.delete("rgconfigurationmanager", "testname");
}

async function main(): Promise<void> {
  await contextsDeleteMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/contextsGetSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to get Context Resource
 *
 * @summary get Context Resource
 * x-ms-original-file: 2025-06-01/Contexts_Get_MaximumSet_Gen.json
 */
async function contextsGetMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.contexts.get("rgconfigurationmanager", "testname");
  console.log(result);
}

async function main(): Promise<void> {
  await contextsGetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/contextsListByResourceGroupSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to list by specified resource group
 *
 * @summary list by specified resource group
 * x-ms-original-file: 2025-06-01/Contexts_ListByResourceGroup_MaximumSet_Gen.json
 */
async function contextsListByResourceGroupMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.contexts.listByResourceGroup("rgconfigurationmanager")) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main(): Promise<void> {
  await contextsListByResourceGroupMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/contextsListBySubscriptionSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to list by subscription
 *
 * @summary list by subscription
 * x-ms-original-file: 2025-06-01/Contexts_ListBySubscription_MaximumSet_Gen.json
 */
async function contextsListBySubscriptionMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.contexts.listBySubscription()) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main(): Promise<void> {
  await contextsListBySubscriptionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/contextsUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to update an Context Resource
 *
 * @summary update an Context Resource
 * x-ms-original-file: 2025-06-01/Contexts_Update_MaximumSet_Gen.json
 */
async function contextsUpdateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.contexts.update("rgconfigurationmanager", "testname", {
    properties: {
      capabilities: [
        {
          name: "tpylinjcmlnycfpofpxjtqmt",
          description: "banbenutsngwytoqh",
          state: "active",
        },
      ],
      hierarchies: [{ name: "upqe", description: "vg" }],
    },
    tags: { key9545: "dhxykbzgliyqxxizttbjhuruhhv" },
  });
  console.log(result);
}

async function main(): Promise<void> {
  await contextsUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/diagnosticsCreateOrUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to creates new or updates existing Diagnostic resource.
 *
 * @summary creates new or updates existing Diagnostic resource.
 * x-ms-original-file: 2025-06-01/Diagnostics_CreateOrUpdate_MaximumSet_Gen.json
 */
async function diagnosticsCreateOrUpdateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.diagnostics.createOrUpdate("rgconfigurationmanager", "testname", {
    properties: {},
    extendedLocation: { name: "szjrwimeqyiue", type: "EdgeZone" },
    tags: { key4304: "mdrwpsdrcicagvximokxrrp" },
    location: "ouwfvnokjvivmjzqpupwrbsmls",
  });
  console.log(result);
}

async function main(): Promise<void> {
  await diagnosticsCreateOrUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/diagnosticsDeleteSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to deletes specified Diagnostic resource.
 *
 * @summary deletes specified Diagnostic resource.
 * x-ms-original-file: 2025-06-01/Diagnostics_Delete_MaximumSet_Gen.json
 */
async function diagnosticsDeleteMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.diagnostics.delete("rgconfigurationmanager", "testname");
}

async function main(): Promise<void> {
  await diagnosticsDeleteMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/diagnosticsGetSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to returns details of specified Diagnostic resource.
 *
 * @summary returns details of specified Diagnostic resource.
 * x-ms-original-file: 2025-06-01/Diagnostics_Get_MaximumSet_Gen.json
 */
async function diagnosticsGetMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.diagnostics.get("rgconfigurationmanager", "testname");
  console.log(result);
}

async function main(): Promise<void> {
  await diagnosticsGetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/diagnosticsListByResourceGroupSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to returns a collection of Diagnostic resources within the resource group.
 *
 * @summary returns a collection of Diagnostic resources within the resource group.
 * x-ms-original-file: 2025-06-01/Diagnostics_ListByResourceGroup_MaximumSet_Gen.json
 */
async function diagnosticsListByResourceGroupMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.diagnostics.listByResourceGroup("rgconfigurationmanager")) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main(): Promise<void> {
  await diagnosticsListByResourceGroupMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/diagnosticsListBySubscriptionSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to lists Diagnostics resources within an Azure subscription.
 *
 * @summary lists Diagnostics resources within an Azure subscription.
 * x-ms-original-file: 2025-06-01/Diagnostics_ListBySubscription_MaximumSet_Gen.json
 */
async function diagnosticsListBySubscriptionMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.diagnostics.listBySubscription()) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main(): Promise<void> {
  await diagnosticsListBySubscriptionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/diagnosticsUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to updates existing Diagnostic resource.
 *
 * @summary updates existing Diagnostic resource.
 * x-ms-original-file: 2025-06-01/Diagnostics_Update_MaximumSet_Gen.json
 */
async function diagnosticsUpdateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.diagnostics.update("rgconfigurationmanager", "testname", {
    properties: {},
    tags: { key1922: "efraipifhmdfekwgunngrgvsc" },
  });
  console.log(result);
}

async function main(): Promise<void> {
  await diagnosticsUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/dynamicSchemasCreateOrUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to create or update a DynamicSchema Resource
 *
 * @summary create or update a DynamicSchema Resource
 * x-ms-original-file: 2025-06-01/DynamicSchemas_CreateOrUpdate_MaximumSet_Gen.json
 */
async function dynamicSchemasCreateOrUpdateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.dynamicSchemas.createOrUpdate(
    "rgconfigurationmanager",
    "testname",
    "testname",
    {
      properties: {
        configurationType: "Shared",
        configurationModel: "Application",
      },
    },
  );
  console.log(result);
}

async function main(): Promise<void> {
  await dynamicSchemasCreateOrUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/dynamicSchemasDeleteSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to delete a DynamicSchema Resource
 *
 * @summary delete a DynamicSchema Resource
 * x-ms-original-file: 2025-06-01/DynamicSchemas_Delete_MaximumSet_Gen.json
 */
async function dynamicSchemasDeleteMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.dynamicSchemas.delete("rgconfigurationmanager", "testname", "testname");
}

async function main(): Promise<void> {
  await dynamicSchemasDeleteMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/dynamicSchemasGetSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to get a DynamicSchema Resource
 *
 * @summary get a DynamicSchema Resource
 * x-ms-original-file: 2025-06-01/DynamicSchemas_Get_MaximumSet_Gen.json
 */
async function dynamicSchemasGetMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.dynamicSchemas.get("rgconfigurationmanager", "testname", "testname");
  console.log(result);
}

async function main(): Promise<void> {
  await dynamicSchemasGetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/dynamicSchemasListBySchemaSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to list by Schema
 *
 * @summary list by Schema
 * x-ms-original-file: 2025-06-01/DynamicSchemas_ListBySchema_MaximumSet_Gen.json
 */
async function dynamicSchemasListBySchemaMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.dynamicSchemas.listBySchema(
    "rgconfigurationmanager",
    "testname",
  )) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main(): Promise<void> {
  await dynamicSchemasListBySchemaMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/dynamicSchemasUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to update a DynamicSchema Resource
 *
 * @summary update a DynamicSchema Resource
 * x-ms-original-file: 2025-06-01/DynamicSchemas_Update_MaximumSet_Gen.json
 */
async function dynamicSchemasUpdateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.dynamicSchemas.update(
    "rgconfigurationmanager",
    "testname",
    "testname",
    {
      properties: {
        configurationType: "Shared",
        configurationModel: "Application",
      },
    },
  );
  console.log(result);
}

async function main(): Promise<void> {
  await dynamicSchemasUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/dynamicSchemaVersionsCreateOrUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to create or update a Dynamic Schema Version Resource
 *
 * @summary create or update a Dynamic Schema Version Resource
 * x-ms-original-file: 2025-06-01/DynamicSchemaVersions_CreateOrUpdate_MaximumSet_Gen.json
 */
async function dynamicSchemaVersionsCreateOrUpdateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.dynamicSchemaVersions.createOrUpdate(
    "rgconfigurationmanager",
    "testname",
    "testname",
    "1.0.0",
    { properties: { value: "uiaqdwsi" } },
  );
  console.log(result);
}

async function main(): Promise<void> {
  await dynamicSchemaVersionsCreateOrUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/dynamicSchemaVersionsDeleteSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to delete a Dynamic Schema Version Resource
 *
 * @summary delete a Dynamic Schema Version Resource
 * x-ms-original-file: 2025-06-01/DynamicSchemaVersions_Delete_MaximumSet_Gen.json
 */
async function dynamicSchemaVersionsDeleteMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.dynamicSchemaVersions.delete(
    "rgconfigurationmanager",
    "testname",
    "testname",
    "1.0.0",
  );
}

async function main(): Promise<void> {
  await dynamicSchemaVersionsDeleteMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/dynamicSchemaVersionsGetSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to get a Dynamic Schema Version Resource
 *
 * @summary get a Dynamic Schema Version Resource
 * x-ms-original-file: 2025-06-01/DynamicSchemaVersions_Get_MaximumSet_Gen.json
 */
async function dynamicSchemaVersionsGetMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.dynamicSchemaVersions.get(
    "rgconfigurationmanager",
    "testname",
    "testname",
    "1.0.0",
  );
  console.log(result);
}

async function main(): Promise<void> {
  await dynamicSchemaVersionsGetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/dynamicSchemaVersionsListByDynamicSchemaSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to list by Dynamic Schema
 *
 * @summary list by Dynamic Schema
 * x-ms-original-file: 2025-06-01/DynamicSchemaVersions_ListByDynamicSchema_MaximumSet_Gen.json
 */
async function dynamicSchemaVersionsListByDynamicSchemaMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.dynamicSchemaVersions.listByDynamicSchema(
    "rgconfigurationmanager",
    "testname",
    "testname",
  )) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main(): Promise<void> {
  await dynamicSchemaVersionsListByDynamicSchemaMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/dynamicSchemaVersionsUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to update a Dynamic Schema Version Resource
 *
 * @summary update a Dynamic Schema Version Resource
 * x-ms-original-file: 2025-06-01/DynamicSchemaVersions_Update_MaximumSet_Gen.json
 */
async function dynamicSchemaVersionsUpdateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.dynamicSchemaVersions.update(
    "rgconfigurationmanager",
    "testname",
    "testname",
    "1.0.0",
    { properties: { value: "muezi" } },
  );
  console.log(result);
}

async function main(): Promise<void> {
  await dynamicSchemaVersionsUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/executionsCreateOrUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to create or update Execution Resource
 *
 * @summary create or update Execution Resource
 * x-ms-original-file: 2025-06-01/Executions_CreateOrUpdate_MaximumSet_Gen.json
 */
async function executionsCreateOrUpdateMaximumSetGeneratedByMaximumSetRule(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "EE6D9590-0D52-4B1C-935C-FE49DBF838EB";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.executions.createOrUpdate(
    "rgconfigurationmanager",
    "abcde",
    "abcde",
    "abcde",
    "abcde",
    {
      properties: {
        specification: {},
        status: {
          status: 999,
          stageHistory: [
            {
              status: 999,
              statusMessage: "wfymzartwvvqrgrmdwyhfaftszoc",
              stage: "gsostfpgjcsoeky",
              nextstage: "wjxvqbrocjxzhzfgmgbzt",
              errorMessage: "xsvwgovyatvlacmp",
              isActive: "active",
              inputs: {},
              outputs: {},
            },
          ],
          updateTime: new Date("2025-02-17T13:55:20.922Z"),
          statusMessage: "ebhukpnhnbu",
        },
        workflowVersionId: "souenlqwltljsojdcbpc",
      },
      extendedLocation: { name: "ugf", type: "EdgeZone" },
    },
  );
  console.log(result);
}

async function main(): Promise<void> {
  await executionsCreateOrUpdateMaximumSetGeneratedByMaximumSetRule();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/executionsDeleteSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to delete Execution Resource
 *
 * @summary delete Execution Resource
 * x-ms-original-file: 2025-06-01/Executions_Delete_MaximumSet_Gen.json
 */
async function executionsDeleteMaximumSetGeneratedByMaximumSetRule(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "EE6D9590-0D52-4B1C-935C-FE49DBF838EB";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.executions.delete("rgconfigurationmanager", "abcde", "abcde", "abcde", "abcde");
}

async function main(): Promise<void> {
  await executionsDeleteMaximumSetGeneratedByMaximumSetRule();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/executionsGetSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to get Execution Resource
 *
 * @summary get Execution Resource
 * x-ms-original-file: 2025-06-01/Executions_Get_MaximumSet_Gen.json
 */
async function executionsGetMaximumSetGeneratedByMaximumSetRule(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "EE6D9590-0D52-4B1C-935C-FE49DBF838EB";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.executions.get(
    "rgconfigurationmanager",
    "abcde",
    "abcde",
    "abcde",
    "abcde",
  );
  console.log(result);
}

async function main(): Promise<void> {
  await executionsGetMaximumSetGeneratedByMaximumSetRule();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/executionsListByWorkflowVersionSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to list Execution Resources
 *
 * @summary list Execution Resources
 * x-ms-original-file: 2025-06-01/Executions_ListByWorkflowVersion_MaximumSet_Gen.json
 */
async function executionsListByWorkflowVersionMaximumSetGeneratedByMaximumSetRule(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "EE6D9590-0D52-4B1C-935C-FE49DBF838EB";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.executions.listByWorkflowVersion(
    "rgconfigurationmanager",
    "abcde",
    "abcde",
    "abcde",
  )) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main(): Promise<void> {
  await executionsListByWorkflowVersionMaximumSetGeneratedByMaximumSetRule();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/executionsUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to update an Execution Resource
 *
 * @summary update an Execution Resource
 * x-ms-original-file: 2025-06-01/Executions_Update_MaximumSet_Gen.json
 */
async function executionsUpdateMaximumSetGeneratedByMaximumSetRule(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "FFA229AF-C1A3-4CB6-9E5D-62C25CFBE4D0";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.executions.update(
    "rgconfigurationmanager",
    "abcde",
    "abcde",
    "abcde",
    "abcde",
    { properties: { specification: {}, workflowVersionId: "xjsxzbfltzvbuvn" } },
  );
  console.log(result);
}

async function main(): Promise<void> {
  await executionsUpdateMaximumSetGeneratedByMaximumSetRule();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/instanceHistoriesGetSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to get InstanceHistory Resource
 *
 * @summary get InstanceHistory Resource
 * x-ms-original-file: 2025-06-01/InstanceHistories_Get_MaximumSet_Gen.json
 */
async function instanceHistoriesGetMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.instanceHistories.get(
    "rgconfigurationmanager",
    "testname",
    "testname",
    "testname",
    "testname",
  );
  console.log(result);
}

async function main(): Promise<void> {
  await instanceHistoriesGetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/instanceHistoriesListByInstanceSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to list InstanceHistory Resources
 *
 * @summary list InstanceHistory Resources
 * x-ms-original-file: 2025-06-01/InstanceHistories_ListByInstance_MaximumSet_Gen.json
 */
async function instanceHistoriesListByInstanceMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.instanceHistories.listByInstance(
    "rgconfigurationmanager",
    "testname",
    "testname",
    "testname",
  )) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main(): Promise<void> {
  await instanceHistoriesListByInstanceMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/instancesCreateOrUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to create or update Instance Resource
 *
 * @summary create or update Instance Resource
 * x-ms-original-file: 2025-06-01/Instances_CreateOrUpdate_MaximumSet_Gen.json
 */
async function instancesCreateOrUpdateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.instances.createOrUpdate(
    "rgconfigurationmanager",
    "testname",
    "testname",
    "testname",
    {
      properties: {
        solutionVersionId: "acpddbkfclsgxg",
        targetId: "eguutiftuxrsavvckjrv",
        activeState: "active",
        reconciliationPolicy: {
          state: "inactive",
          interval: "szucgzdbydcowvhprhx",
        },
        solutionScope: "testname",
        status: {
          lastModified: new Date("2025-06-09T10:12:04.224Z"),
          deployed: 24,
          expectedRunningJobId: 19,
          runningJobId: 6,
          status: "nnpksn",
          statusDetails: "bslqqnfciczenaltdcmrgg",
          generation: 21,
          targetStatuses: [
            {
              name: "jpbfbxmjvr",
              status: "gsgkxfwtyoaepwa",
              componentStatuses: [
                {
                  name: "lxzbkoblvaoubknkblwplf",
                  status: "txtthlvducufbblgtctegtgpzkzgyi",
                },
              ],
            },
          ],
        },
      },
      extendedLocation: { name: "szjrwimeqyiue", type: "EdgeZone" },
    },
  );
  console.log(result);
}

async function main(): Promise<void> {
  await instancesCreateOrUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/instancesDeleteSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to delete Instance Resource
 *
 * @summary delete Instance Resource
 * x-ms-original-file: 2025-06-01/Instances_Delete_MaximumSet_Gen.json
 */
async function instancesDeleteMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.instances.delete("rgconfigurationmanager", "testname", "testname", "testname");
}

async function main(): Promise<void> {
  await instancesDeleteMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/instancesGetSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to get Instance Resource
 *
 * @summary get Instance Resource
 * x-ms-original-file: 2025-06-01/Instances_Get_MaximumSet_Gen.json
 */
async function instancesGetMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.instances.get(
    "rgconfigurationmanager",
    "testname",
    "testname",
    "testname",
  );
  console.log(result);
}

async function main(): Promise<void> {
  await instancesGetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/instancesListBySolutionSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to list Instance Resources
 *
 * @summary list Instance Resources
 * x-ms-original-file: 2025-06-01/Instances_ListBySolution_MaximumSet_Gen.json
 */
async function instancesListBySolutionMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.instances.listBySolution(
    "rgconfigurationmanager",
    "testname",
    "testname",
  )) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main(): Promise<void> {
  await instancesListBySolutionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/instancesUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to update an Instance Resource
 *
 * @summary update an Instance Resource
 * x-ms-original-file: 2025-06-01/Instances_Update_MaximumSet_Gen.json
 */
async function instancesUpdateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.instances.update(
    "rgconfigurationmanager",
    "testname",
    "testname",
    "testname",
    {
      properties: {
        solutionVersionId: "vrpzlamkvanqibtjarpxit",
        targetId: "tqkdvc",
        activeState: "active",
        reconciliationPolicy: {
          state: "inactive",
          interval: "cmzlrjwnlshnkgv",
        },
        solutionScope: "testname",
      },
    },
  );
  console.log(result);
}

async function main(): Promise<void> {
  await instancesUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/jobsGetSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to get a Job resource
 *
 * @summary get a Job resource
 * x-ms-original-file: 2025-06-01/Jobs_Get_MaximumSet_Gen.json
 */
async function jobsGetMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "00000000-0000-0000-0000-00000000000";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.jobs.get("gt", "jobsName");
  console.log(result);
}

async function main(): Promise<void> {
  await jobsGetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/jobsListByTargetSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to list Jobs by parent resource
 *
 * @summary list Jobs by parent resource
 * x-ms-original-file: 2025-06-01/Jobs_ListByTarget_MaximumSet_Gen.json
 */
async function jobsListByTargetMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "00000000-0000-0000-0000-00000000000";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.jobs.listByTarget("gt")) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main(): Promise<void> {
  await jobsListByTargetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/schemaReferencesGetSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to get a Schema Reference Resource
 *
 * @summary get a Schema Reference Resource
 * x-ms-original-file: 2025-06-01/SchemaReferences_Get_MaximumSet_Gen.json
 */
async function schemaReferencesGetMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "00000000-0000-0000-0000-00000000000";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.schemaReferences.get("jdvtghygpz", "testname");
  console.log(result);
}

async function main(): Promise<void> {
  await schemaReferencesGetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/schemaReferencesListByResourceGroupSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to list by specified resource group
 *
 * @summary list by specified resource group
 * x-ms-original-file: 2025-06-01/SchemaReferences_ListByResourceGroup_MaximumSet_Gen.json
 */
async function schemaReferencesListByResourceGroupMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "00000000-0000-0000-0000-00000000000";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.schemaReferences.listByResourceGroup("jdvtghygpz")) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main(): Promise<void> {
  await schemaReferencesListByResourceGroupMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/schemasCreateOrUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to create or update a Schema Resource
 *
 * @summary create or update a Schema Resource
 * x-ms-original-file: 2025-06-01/Schemas_CreateOrUpdate_MaximumSet_Gen.json
 */
async function schemasCreateOrUpdateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.schemas.createOrUpdate("rgconfigurationmanager", "testname", {
    properties: {},
    tags: { key7017: "rdynaxxagwjzubehiz" },
    location: "alvi",
  });
  console.log(result);
}

async function main(): Promise<void> {
  await schemasCreateOrUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/schemasCreateVersionSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to create a Schema Version Resource
 *
 * @summary create a Schema Version Resource
 * x-ms-original-file: 2025-06-01/Schemas_CreateVersion_MaximumSet_Gen.json
 */
async function schemasCreateVersionMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.schemas.createVersion("rgconfigurationmanager", "testname", {
    updateType: "Major",
    version: "1.0.0",
    schemaVersion: { properties: { value: "uiaqdwsi" } },
  });
  console.log(result);
}

async function main(): Promise<void> {
  await schemasCreateVersionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/schemasDeleteSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to delete a Schema Resource
 *
 * @summary delete a Schema Resource
 * x-ms-original-file: 2025-06-01/Schemas_Delete_MaximumSet_Gen.json
 */
async function schemasDeleteMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.schemas.delete("rgconfigurationmanager", "testname");
}

async function main(): Promise<void> {
  await schemasDeleteMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/schemasGetSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to get a Schema Resource
 *
 * @summary get a Schema Resource
 * x-ms-original-file: 2025-06-01/Schemas_Get_MaximumSet_Gen.json
 */
async function schemasGetMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.schemas.get("rgconfigurationmanager", "testname");
  console.log(result);
}

async function main(): Promise<void> {
  await schemasGetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/schemasListByResourceGroupSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to list by specified resource group
 *
 * @summary list by specified resource group
 * x-ms-original-file: 2025-06-01/Schemas_ListByResourceGroup_MaximumSet_Gen.json
 */
async function schemasListByResourceGroupMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.schemas.listByResourceGroup("rgconfigurationmanager")) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main(): Promise<void> {
  await schemasListByResourceGroupMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/schemasListBySubscriptionSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to list by subscription
 *
 * @summary list by subscription
 * x-ms-original-file: 2025-06-01/Schemas_ListBySubscription_MaximumSet_Gen.json
 */
async function schemasListBySubscriptionMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.schemas.listBySubscription()) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main(): Promise<void> {
  await schemasListBySubscriptionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/schemasRemoveVersionSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to remove Schema Version Resource
 *
 * @summary remove Schema Version Resource
 * x-ms-original-file: 2025-06-01/Schemas_RemoveVersion_MaximumSet_Gen.json
 */
async function schemasRemoveVersionMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.schemas.removeVersion("rgconfigurationmanager", "testname", {
    version: "ghtvdzgmzncaifrnuumg",
  });
  console.log(result);
}

async function main(): Promise<void> {
  await schemasRemoveVersionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/schemasUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to update a Schema Resource
 *
 * @summary update a Schema Resource
 * x-ms-original-file: 2025-06-01/Schemas_Update_MaximumSet_Gen.json
 */
async function schemasUpdateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.schemas.update("rgconfigurationmanager", "testname", {
    properties: {},
    tags: { key6760: "lknwkzihsmzbzkezkartwgsv" },
  });
  console.log(result);
}

async function main(): Promise<void> {
  await schemasUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/schemaVersionsCreateOrUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to create or update a Schema Version Resource
 *
 * @summary create or update a Schema Version Resource
 * x-ms-original-file: 2025-06-01/SchemaVersions_CreateOrUpdate_MaximumSet_Gen.json
 */
async function schemaVersionsCreateOrUpdateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.schemaVersions.createOrUpdate(
    "rgconfigurationmanager",
    "testname",
    "1.0.0",
    { properties: { value: "uiaqdwsi" } },
  );
  console.log(result);
}

async function main(): Promise<void> {
  await schemaVersionsCreateOrUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/schemaVersionsDeleteSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to delete a Schema Version Resource
 *
 * @summary delete a Schema Version Resource
 * x-ms-original-file: 2025-06-01/SchemaVersions_Delete_MaximumSet_Gen.json
 */
async function schemaVersionsDeleteMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.schemaVersions.delete("rgconfigurationmanager", "testname", "1.0.0");
}

async function main(): Promise<void> {
  await schemaVersionsDeleteMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/schemaVersionsGetSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to get a Schema Version Resource
 *
 * @summary get a Schema Version Resource
 * x-ms-original-file: 2025-06-01/SchemaVersions_Get_MaximumSet_Gen.json
 */
async function schemaVersionsGetMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.schemaVersions.get("rgconfigurationmanager", "testname", "1.0.0");
  console.log(result);
}

async function main(): Promise<void> {
  await schemaVersionsGetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/schemaVersionsListBySchemaSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to list by specified resource group
 *
 * @summary list by specified resource group
 * x-ms-original-file: 2025-06-01/SchemaVersions_ListBySchema_MaximumSet_Gen.json
 */
async function schemaVersionsListBySchemaMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.schemaVersions.listBySchema(
    "rgconfigurationmanager",
    "testname",
  )) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main(): Promise<void> {
  await schemaVersionsListBySchemaMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/schemaVersionsUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to update a Schema Version Resource
 *
 * @summary update a Schema Version Resource
 * x-ms-original-file: 2025-06-01/SchemaVersions_Update_MaximumSet_Gen.json
 */
async function schemaVersionsUpdateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.schemaVersions.update("rgconfigurationmanager", "testname", "1.0.0", {
    properties: { value: "muezi" },
  });
  console.log(result);
}

async function main(): Promise<void> {
  await schemaVersionsUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/siteReferencesCreateOrUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to get Site Reference Resource
 *
 * @summary get Site Reference Resource
 * x-ms-original-file: 2025-06-01/SiteReferences_CreateOrUpdate_MaximumSet_Gen.json
 */
async function siteReferencesCreateOrUpdateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.siteReferences.createOrUpdate(
    "rgconfigurationmanager",
    "testname",
    "testname",
    { properties: { siteId: "xxjpxdcaumewwgpbwzkcrgrcw" } },
  );
  console.log(result);
}

async function main(): Promise<void> {
  await siteReferencesCreateOrUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/siteReferencesDeleteSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to get Site Reference Resource
 *
 * @summary get Site Reference Resource
 * x-ms-original-file: 2025-06-01/SiteReferences_Delete_MaximumSet_Gen.json
 */
async function siteReferencesDeleteMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.siteReferences.delete("rgconfigurationmanager", "testname", "testname");
}

async function main(): Promise<void> {
  await siteReferencesDeleteMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/siteReferencesGetSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to get Site Reference Resource
 *
 * @summary get Site Reference Resource
 * x-ms-original-file: 2025-06-01/SiteReferences_Get_MaximumSet_Gen.json
 */
async function siteReferencesGetMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.siteReferences.get("rgconfigurationmanager", "testname", "testname");
  console.log(result);
}

async function main(): Promise<void> {
  await siteReferencesGetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/siteReferencesListByContextSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to list Site Reference Resources
 *
 * @summary list Site Reference Resources
 * x-ms-original-file: 2025-06-01/SiteReferences_ListByContext_MaximumSet_Gen.json
 */
async function siteReferencesListByContextMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.siteReferences.listByContext(
    "rgconfigurationmanager",
    "testname",
  )) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main(): Promise<void> {
  await siteReferencesListByContextMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/siteReferencesUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to get Site Reference Resource
 *
 * @summary get Site Reference Resource
 * x-ms-original-file: 2025-06-01/SiteReferences_Update_MaximumSet_Gen.json
 */
async function siteReferencesUpdateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.siteReferences.update(
    "rgconfigurationmanager",
    "testname",
    "testname",
    { properties: { siteId: "nwiuyaro" } },
  );
  console.log(result);
}

async function main(): Promise<void> {
  await siteReferencesUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/solutionsCreateOrUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to create or update a Solution Resource
 *
 * @summary create or update a Solution Resource
 * x-ms-original-file: 2025-06-01/Solutions_CreateOrUpdate_MaximumSet_Gen.json
 */
async function solutionsCreateOrUpdateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.solutions.createOrUpdate(
    "rgconfigurationmanager",
    "testname",
    "testname",
    {
      properties: {},
      extendedLocation: { name: "szjrwimeqyiue", type: "EdgeZone" },
    },
  );
  console.log(result);
}

async function main(): Promise<void> {
  await solutionsCreateOrUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/solutionsDeleteSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to delete a Solution Resource
 *
 * @summary delete a Solution Resource
 * x-ms-original-file: 2025-06-01/Solutions_Delete_MaximumSet_Gen.json
 */
async function solutionsDeleteMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.solutions.delete("rgconfigurationmanager", "testname", "testname");
}

async function main(): Promise<void> {
  await solutionsDeleteMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/solutionsGetSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to get a Solution resource
 *
 * @summary get a Solution resource
 * x-ms-original-file: 2025-06-01/Solutions_Get_MaximumSet_Gen.json
 */
async function solutionsGetMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.solutions.get("rgconfigurationmanager", "testname", "testname");
  console.log(result);
}

async function main(): Promise<void> {
  await solutionsGetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/solutionsListByTargetSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to list Solution resources
 *
 * @summary list Solution resources
 * x-ms-original-file: 2025-06-01/Solutions_ListByTarget_MaximumSet_Gen.json
 */
async function solutionsListByTargetMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.solutions.listByTarget("rgconfigurationmanager", "testname")) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main(): Promise<void> {
  await solutionsListByTargetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/solutionsUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to update a Solution Resource
 *
 * @summary update a Solution Resource
 * x-ms-original-file: 2025-06-01/Solutions_Update_MaximumSet_Gen.json
 */
async function solutionsUpdateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.solutions.update("rgconfigurationmanager", "testname", "testname", {
    properties: {},
  });
  console.log(result);
}

async function main(): Promise<void> {
  await solutionsUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/solutionTemplatesCreateOrUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to create or update a Solution Template Resource
 *
 * @summary create or update a Solution Template Resource
 * x-ms-original-file: 2025-06-01/SolutionTemplates_CreateOrUpdate_MaximumSet_Gen.json
 */
async function solutionTemplatesCreateOrUpdateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.solutionTemplates.createOrUpdate(
    "rgconfigurationmanager",
    "testname",
    {
      properties: {
        description: "psrftehgzngcdlccivhjmwsmiz",
        capabilities: ["dfoyxbbknrhvlunhmuyyt"],
        state: "active",
        enableExternalValidation: true,
      },
      tags: { key5091: "dov" },
      location: "zheaaqvadewftnctxzpinrgeproqs",
    },
  );
  console.log(result);
}

async function main(): Promise<void> {
  await solutionTemplatesCreateOrUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/solutionTemplatesCreateVersionSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to create a Solution Template Version Resource
 *
 * @summary create a Solution Template Version Resource
 * x-ms-original-file: 2025-06-01/SolutionTemplates_CreateVersion_MaximumSet_Gen.json
 */
async function solutionTemplatesCreateVersionMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.solutionTemplates.createVersion(
    "rgconfigurationmanager",
    "testname",
    {
      updateType: "Major",
      version: "1.0.0",
      solutionTemplateVersion: {
        properties: {
          configurations: "ofqcsavwmeuwmvtjnqpoybtjvkmrlh",
          specification: {},
          orchestratorType: "TO",
        },
      },
    },
  );
  console.log(result);
}

async function main(): Promise<void> {
  await solutionTemplatesCreateVersionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/solutionTemplatesDeleteSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to delete a Solution Template Resource
 *
 * @summary delete a Solution Template Resource
 * x-ms-original-file: 2025-06-01/SolutionTemplates_Delete_MaximumSet_Gen.json
 */
async function solutionTemplatesDeleteMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.solutionTemplates.delete("rgconfigurationmanager", "testname");
}

async function main(): Promise<void> {
  await solutionTemplatesDeleteMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/solutionTemplatesGetSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to get a Solution Template Resource
 *
 * @summary get a Solution Template Resource
 * x-ms-original-file: 2025-06-01/SolutionTemplates_Get_MaximumSet_Gen.json
 */
async function solutionTemplatesGetMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.solutionTemplates.get("rgconfigurationmanager", "testname");
  console.log(result);
}

async function main(): Promise<void> {
  await solutionTemplatesGetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/solutionTemplatesListByResourceGroupSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to list by specified resource group
 *
 * @summary list by specified resource group
 * x-ms-original-file: 2025-06-01/SolutionTemplates_ListByResourceGroup_MaximumSet_Gen.json
 */
async function solutionTemplatesListByResourceGroupMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.solutionTemplates.listByResourceGroup("rgconfigurationmanager")) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main(): Promise<void> {
  await solutionTemplatesListByResourceGroupMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/solutionTemplatesListBySubscriptionSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to list by subscription
 *
 * @summary list by subscription
 * x-ms-original-file: 2025-06-01/SolutionTemplates_ListBySubscription_MaximumSet_Gen.json
 */
async function solutionTemplatesListBySubscriptionMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.solutionTemplates.listBySubscription()) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main(): Promise<void> {
  await solutionTemplatesListBySubscriptionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/solutionTemplatesRemoveVersionSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to remove Solution Template Version Resource
 *
 * @summary remove Solution Template Version Resource
 * x-ms-original-file: 2025-06-01/SolutionTemplates_RemoveVersion_MaximumSet_Gen.json
 */
async function solutionTemplatesRemoveVersionMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.solutionTemplates.removeVersion("rgconfigurationmanager", "testname", {
    version: "ghtvdzgmzncaifrnuumg",
  });
}

async function main(): Promise<void> {
  await solutionTemplatesRemoveVersionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/solutionTemplatesUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to update a Solution Template Resource
 *
 * @summary update a Solution Template Resource
 * x-ms-original-file: 2025-06-01/SolutionTemplates_Update_MaximumSet_Gen.json
 */
async function solutionTemplatesUpdateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.solutionTemplates.update("rgconfigurationmanager", "testname", {
    properties: {
      description: "onqlteg",
      capabilities: ["relsv"],
      state: "active",
      enableExternalValidation: true,
    },
    tags: { key8772: "vbdujmqklnwiepis" },
  });
  console.log(result);
}

async function main(): Promise<void> {
  await solutionTemplatesUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/solutionTemplateVersionsBulkDeploySolutionSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to post request for bulk deploy
 *
 * @summary post request for bulk deploy
 * x-ms-original-file: 2025-06-01/SolutionTemplateVersions_BulkDeploySolution_MaximumSet_Gen.json
 */
async function solutionTemplateVersionsBulkDeploySolutionMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.solutionTemplateVersions.bulkDeploySolution(
    "rgconfigurationmanager",
    "testname",
    "1.0.0",
    {
      targets: [
        {
          solutionVersionId:
            "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.Edge/Targets/target/Solutions/solution/Versions/solution-1.0.0.1",
        },
      ],
    },
  );
}

async function main(): Promise<void> {
  await solutionTemplateVersionsBulkDeploySolutionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/solutionTemplateVersionsBulkPublishSolutionSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to post request for bulk publish
 *
 * @summary post request for bulk publish
 * x-ms-original-file: 2025-06-01/SolutionTemplateVersions_BulkPublishSolution_MaximumSet_Gen.json
 */
async function solutionTemplateVersionsBulkPublishSolutionMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.solutionTemplateVersions.bulkPublishSolution(
    "rgconfigurationmanager",
    "testname",
    "1.0.0",
    {
      targets: [
        {
          targetId:
            "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.Edge/Targets/target",
          solutionInstanceName: "test-instance",
        },
      ],
      solutionInstanceName: "test-instance",
      solutionDependencies: [
        {
          solutionVersionId:
            "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.Edge/Targets/target/Solutions/solution/Versions/solution-1.0.0.1",
          solutionTemplateId:
            "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.Edge/SolutionTemplates/st",
          solutionTemplateVersion: "1.0.0",
          solutionInstanceName: "test-instance",
          targetId:
            "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.Edge/Targets/target",
          dependencies: [],
        },
      ],
    },
  );
}

async function main(): Promise<void> {
  await solutionTemplateVersionsBulkPublishSolutionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/solutionTemplateVersionsGetSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to get a Solution Template Version Resource
 *
 * @summary get a Solution Template Version Resource
 * x-ms-original-file: 2025-06-01/SolutionTemplateVersions_Get_MaximumSet_Gen.json
 */
async function solutionTemplateVersionsGetMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.solutionTemplateVersions.get(
    "rgconfigurationmanager",
    "testname",
    "1.0.0",
  );
  console.log(result);
}

async function main(): Promise<void> {
  await solutionTemplateVersionsGetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/solutionTemplateVersionsListBySolutionTemplateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to list Solution Template Version Resources
 *
 * @summary list Solution Template Version Resources
 * x-ms-original-file: 2025-06-01/SolutionTemplateVersions_ListBySolutionTemplate_MaximumSet_Gen.json
 */
async function solutionTemplateVersionsListBySolutionTemplateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.solutionTemplateVersions.listBySolutionTemplate(
    "rgconfigurationmanager",
    "testname",
  )) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main(): Promise<void> {
  await solutionTemplateVersionsListBySolutionTemplateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/solutionVersionsCreateOrUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to create or update a Solution Version Resource
 *
 * @summary create or update a Solution Version Resource
 * x-ms-original-file: 2025-06-01/SolutionVersions_CreateOrUpdate_MaximumSet_Gen.json
 */
async function solutionVersionsCreateOrUpdateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.solutionVersions.createOrUpdate(
    "rgconfigurationmanager",
    "testname",
    "testname",
    "testname",
    {
      properties: { specification: {}, state: "InReview", errorDetails: {} },
      extendedLocation: { name: "szjrwimeqyiue", type: "EdgeZone" },
    },
  );
  console.log(result);
}

async function main(): Promise<void> {
  await solutionVersionsCreateOrUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/solutionVersionsDeleteSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to delete a Solution Version Resource
 *
 * @summary delete a Solution Version Resource
 * x-ms-original-file: 2025-06-01/SolutionVersions_Delete_MaximumSet_Gen.json
 */
async function solutionVersionsDeleteMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.solutionVersions.delete(
    "rgconfigurationmanager",
    "testname",
    "testname",
    "testname",
  );
}

async function main(): Promise<void> {
  await solutionVersionsDeleteMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/solutionVersionsGetSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to get a Solution Version Resource
 *
 * @summary get a Solution Version Resource
 * x-ms-original-file: 2025-06-01/SolutionVersions_Get_MaximumSet_Gen.json
 */
async function solutionVersionsGetMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.solutionVersions.get(
    "rgconfigurationmanager",
    "testname",
    "testname",
    "testname",
  );
  console.log(result);
}

async function main(): Promise<void> {
  await solutionVersionsGetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/solutionVersionsListBySolutionSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to list Solution Version Resources
 *
 * @summary list Solution Version Resources
 * x-ms-original-file: 2025-06-01/SolutionVersions_ListBySolution_MaximumSet_Gen.json
 */
async function solutionVersionsListBySolutionMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.solutionVersions.listBySolution(
    "rgconfigurationmanager",
    "testname",
    "testname",
  )) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main(): Promise<void> {
  await solutionVersionsListBySolutionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/solutionVersionsUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to update a Solution Version Resource
 *
 * @summary update a Solution Version Resource
 * x-ms-original-file: 2025-06-01/SolutionVersions_Update_MaximumSet_Gen.json
 */
async function solutionVersionsUpdateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.solutionVersions.update(
    "rgconfigurationmanager",
    "testname",
    "testname",
    "testname",
    { properties: { specification: {} } },
  );
  console.log(result);
}

async function main(): Promise<void> {
  await solutionVersionsUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/targetsCreateOrUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to create or update a Target Resource
 *
 * @summary create or update a Target Resource
 * x-ms-original-file: 2025-06-01/Targets_CreateOrUpdate_MaximumSet_Gen.json
 */
async function targetsCreateOrUpdateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.targets.createOrUpdate("rgconfigurationmanager", "testname", {
    properties: {
      description: "riabrxtvhlmizyhffdpjeyhvw",
      displayName: "qjlbshhqzfmwxvvynibkoi",
      targetSpecification: {},
      capabilities: ["grjapghdidoao"],
      contextId:
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
      hierarchyLevel: "octqptfirejhjfavlnfqeiikqx",
      status: {
        lastModified: new Date("2025-06-09T10:12:04.224Z"),
        deployed: 24,
        expectedRunningJobId: 19,
        runningJobId: 6,
        status: "nnpksn",
        statusDetails: "bslqqnfciczenaltdcmrgg",
        generation: 21,
        targetStatuses: [
          {
            name: "jpbfbxmjvr",
            status: "gsgkxfwtyoaepwa",
            componentStatuses: [
              {
                name: "lxzbkoblvaoubknkblwplf",
                status: "txtthlvducufbblgtctegtgpzkzgyi",
              },
            ],
          },
        ],
      },
      solutionScope: "testname",
      state: "active",
    },
    extendedLocation: { name: "szjrwimeqyiue", type: "EdgeZone" },
    tags: { key612: "vtqzrk" },
    location: "kckloegmwsjgwtcl",
  });
  console.log(result);
}

async function main(): Promise<void> {
  await targetsCreateOrUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/targetsDeleteSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to delete a Target Resource
 *
 * @summary delete a Target Resource
 * x-ms-original-file: 2025-06-01/Targets_Delete_MaximumSet_Gen.json
 */
async function targetsDeleteMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.targets.delete("rgconfigurationmanager", "testname", {
    forceDelete: true,
  });
}

async function main(): Promise<void> {
  await targetsDeleteMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/targetsGetSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to get a Target Resource
 *
 * @summary get a Target Resource
 * x-ms-original-file: 2025-06-01/Targets_Get_MaximumSet_Gen.json
 */
async function targetsGetMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.targets.get("rgconfigurationmanager", "testname");
  console.log(result);
}

async function main(): Promise<void> {
  await targetsGetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/targetsInstallSolutionSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to post request to deploy
 *
 * @summary post request to deploy
 * x-ms-original-file: 2025-06-01/Targets_InstallSolution_MaximumSet_Gen.json
 */
async function targetsInstallSolutionMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.targets.installSolution("rgconfigurationmanager", "testname", {
    solutionVersionId:
      "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
  });
}

async function main(): Promise<void> {
  await targetsInstallSolutionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/targetsListByResourceGroupSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to list by specified resource group
 *
 * @summary list by specified resource group
 * x-ms-original-file: 2025-06-01/Targets_ListByResourceGroup_MaximumSet_Gen.json
 */
async function targetsListByResourceGroupMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.targets.listByResourceGroup("rgconfigurationmanager")) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main(): Promise<void> {
  await targetsListByResourceGroupMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/targetsListBySubscriptionSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to list by subscription
 *
 * @summary list by subscription
 * x-ms-original-file: 2025-06-01/Targets_ListBySubscription_MaximumSet_Gen.json
 */
async function targetsListBySubscriptionMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.targets.listBySubscription()) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main(): Promise<void> {
  await targetsListBySubscriptionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/targetsPublishSolutionVersionSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to post request to publish
 *
 * @summary post request to publish
 * x-ms-original-file: 2025-06-01/Targets_PublishSolutionVersion_MaximumSet_Gen.json
 */
async function targetsPublishSolutionVersionMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.targets.publishSolutionVersion("rgconfigurationmanager", "testname", {
    solutionVersionId:
      "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
  });
  console.log(result);
}

async function main(): Promise<void> {
  await targetsPublishSolutionVersionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/targetsRemoveRevisionSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to post request to remove solution version revision
 *
 * @summary post request to remove solution version revision
 * x-ms-original-file: 2025-06-01/Targets_RemoveRevision_MaximumSet_Gen.json
 */
async function targetsRemoveRevisionMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.targets.removeRevision("rgconfigurationmanager", "testname", {
    solutionTemplateId:
      "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
    solutionVersion: "tomwmqybqomwkfaeukjneva",
  });
}

async function main(): Promise<void> {
  await targetsRemoveRevisionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/targetsResolveConfigurationSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to post request to resolve configuration
 *
 * @summary post request to resolve configuration
 * x-ms-original-file: 2025-06-01/Targets_ResolveConfiguration_MaximumSet_Gen.json
 */
async function targetsResolveConfigurationMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.targets.resolveConfiguration("rgconfigurationmanager", "testname", {
    solutionTemplateVersionId:
      "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}/{resourceType}/{resourceName}",
    solutionInstanceName: "testname",
    solutionDependencies: [
      {
        solutionVersionId: "cydzqntmjlqtksbavjwteru",
        solutionTemplateId: "liqauthxnscodbiwktwfwrrsg",
        solutionTemplateVersion: "gordjasyxxrj",
        solutionInstanceName: "testname",
        targetId: "steadvphxtyhjokqicrtg",
        dependencies: [],
      },
    ],
  });
  console.log(result);
}

async function main(): Promise<void> {
  await targetsResolveConfigurationMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/targetsReviewSolutionVersionSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to post request to review configuration
 *
 * @summary post request to review configuration
 * x-ms-original-file: 2025-06-01/Targets_ReviewSolutionVersion_MaximumSet_Gen.json
 */
async function targetsReviewSolutionVersionMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.targets.reviewSolutionVersion("rgconfigurationmanager", "testname", {
    solutionTemplateVersionId:
      "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}/{resourceType}/{resourceName}",
    solutionInstanceName: "testname",
    solutionDependencies: [
      {
        solutionVersionId: "cydzqntmjlqtksbavjwteru",
        solutionTemplateId: "liqauthxnscodbiwktwfwrrsg",
        solutionTemplateVersion: "gordjasyxxrj",
        solutionInstanceName: "testname",
        targetId: "steadvphxtyhjokqicrtg",
        dependencies: [],
      },
    ],
  });
  console.log(result);
}

async function main(): Promise<void> {
  await targetsReviewSolutionVersionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/targetsUninstallSolutionSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to post request to uninstall
 *
 * @summary post request to uninstall
 * x-ms-original-file: 2025-06-01/Targets_UninstallSolution_MaximumSet_Gen.json
 */
async function targetsUninstallSolutionMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.targets.uninstallSolution("rgconfigurationmanager", "testname", {
    solutionTemplateId:
      "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
    solutionInstanceName: "lzihiumrcxbolmkqktvtuqyhg",
  });
}

async function main(): Promise<void> {
  await targetsUninstallSolutionMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/targetsUpdateExternalValidationStatusSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to post request to update external validation status
 *
 * @summary post request to update external validation status
 * x-ms-original-file: 2025-06-01/Targets_UpdateExternalValidationStatus_MaximumSet_Gen.json
 */
async function targetsUpdateExternalValidationStatusMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.targets.updateExternalValidationStatus(
    "rgconfigurationmanager",
    "testname",
    {
      solutionVersionId: "shntcsuwlmpehmuqkrbf",
      errorDetails: {},
      externalValidationId: "ivsjzwy",
      validationStatus: "Valid",
    },
  );
  console.log(result);
}

async function main(): Promise<void> {
  await targetsUpdateExternalValidationStatusMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/targetsUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to update a Target Resource
 *
 * @summary update a Target Resource
 * x-ms-original-file: 2025-06-01/Targets_Update_MaximumSet_Gen.json
 */
async function targetsUpdateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.targets.update("rgconfigurationmanager", "testname", {
    properties: {
      description: "yhnhdpznncdvncmnvoeohqjx",
      displayName: "pguujtzjjvixgjitugybrefp",
      targetSpecification: {},
      capabilities: ["dasqhyxfakivfzqb"],
      contextId:
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
      hierarchyLevel: "hfyntwxetgsmnucbjvvphtyxu",
      solutionScope: "testname",
      state: "active",
    },
    tags: { key8026: "yoosplotwgoquvpox" },
  });
  console.log(result);
}

async function main(): Promise<void> {
  await targetsUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/workflowsCreateOrUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to create or update a Workflow resource
 *
 * @summary create or update a Workflow resource
 * x-ms-original-file: 2025-06-01/Workflows_CreateOrUpdate_MaximumSet_Gen.json
 */
async function workflowsCreateOrUpdateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.workflows.createOrUpdate(
    "rgconfigurationmanager",
    "testname",
    "testname",
    {
      properties: {},
      extendedLocation: { name: "szjrwimeqyiue", type: "EdgeZone" },
    },
  );
  console.log(result);
}

async function main(): Promise<void> {
  await workflowsCreateOrUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/workflowsDeleteSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to delete a Workflow resource
 *
 * @summary delete a Workflow resource
 * x-ms-original-file: 2025-06-01/Workflows_Delete_MaximumSet_Gen.json
 */
async function workflowsDeleteMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.workflows.delete("rgconfigurationmanager", "testname", "testname");
}

async function main(): Promise<void> {
  await workflowsDeleteMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/workflowsGetSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to get a Workflow resource
 *
 * @summary get a Workflow resource
 * x-ms-original-file: 2025-06-01/Workflows_Get_MaximumSet_Gen.json
 */
async function workflowsGetMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.workflows.get("rgconfigurationmanager", "testname", "testname");
  console.log(result);
}

async function main(): Promise<void> {
  await workflowsGetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/workflowsListByContextSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to list Workflow resources
 *
 * @summary list Workflow resources
 * x-ms-original-file: 2025-06-01/Workflows_ListByContext_MaximumSet_Gen.json
 */
async function workflowsListByContextMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.workflows.listByContext("rgconfigurationmanager", "testname")) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main(): Promise<void> {
  await workflowsListByContextMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/workflowsUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to update a Workflow resource
 *
 * @summary update a Workflow resource
 * x-ms-original-file: 2025-06-01/Workflows_Update_MaximumSet_Gen.json
 */
async function workflowsUpdateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.workflows.update("rgconfigurationmanager", "testname", "testname", {
    properties: {},
  });
  console.log(result);
}

async function main(): Promise<void> {
  await workflowsUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/workflowVersionsCreateOrUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to create or update a Workflow Version Resource
 *
 * @summary create or update a Workflow Version Resource
 * x-ms-original-file: 2025-06-01/WorkflowVersions_CreateOrUpdate_MaximumSet_Gen.json
 */
async function workflowVersionsCreateOrUpdateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.workflowVersions.createOrUpdate(
    "rgconfigurationmanager",
    "testname",
    "testname",
    "testname",
    {
      properties: {
        stageSpec: [
          {
            name: "amrbjd",
            specification: {},
            tasks: [
              {
                name: "xxmeyvmgydbcwxqwjhadjxjod",
                targetId:
                  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                specification: {},
              },
            ],
            taskOption: {
              concurrency: 3,
              errorAction: {
                mode: "stopOnAnyFailure",
                maxToleratedFailures: 0,
              },
            },
          },
        ],
        state: "InReview",
        specification: {},
      },
      extendedLocation: { name: "szjrwimeqyiue", type: "EdgeZone" },
    },
  );
  console.log(result);
}

async function main(): Promise<void> {
  await workflowVersionsCreateOrUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/workflowVersionsDeleteSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to delete a Workflow Version Resource
 *
 * @summary delete a Workflow Version Resource
 * x-ms-original-file: 2025-06-01/WorkflowVersions_Delete_MaximumSet_Gen.json
 */
async function workflowVersionsDeleteMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  await client.workflowVersions.delete(
    "rgconfigurationmanager",
    "testname",
    "testname",
    "testname",
  );
}

async function main(): Promise<void> {
  await workflowVersionsDeleteMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/workflowVersionsGetSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to get a Workflow Version Resource
 *
 * @summary get a Workflow Version Resource
 * x-ms-original-file: 2025-06-01/WorkflowVersions_Get_MaximumSet_Gen.json
 */
async function workflowVersionsGetMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.workflowVersions.get(
    "rgconfigurationmanager",
    "testname",
    "testname",
    "testname",
  );
  console.log(result);
}

async function main(): Promise<void> {
  await workflowVersionsGetMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/workflowVersionsListByWorkflowSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to list Workflow Version Resources
 *
 * @summary list Workflow Version Resources
 * x-ms-original-file: 2025-06-01/WorkflowVersions_ListByWorkflow_MaximumSet_Gen.json
 */
async function workflowVersionsListByWorkflowMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const resArray = new Array();
  for await (const item of client.workflowVersions.listByWorkflow(
    "rgconfigurationmanager",
    "testname",
    "testname",
  )) {
    resArray.push(item);
  }

  console.log(resArray);
}

async function main(): Promise<void> {
  await workflowVersionsListByWorkflowMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/samples-dev/workflowVersionsUpdateSample.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "@azure/arm-workloadorchestration";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to update an WorkflowVersion Resource
 *
 * @summary update an WorkflowVersion Resource
 * x-ms-original-file: 2025-06-01/WorkflowVersions_Update_MaximumSet_Gen.json
 */
async function workflowVersionsUpdateMaximumSet(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
  const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  const result = await client.workflowVersions.update(
    "rgconfigurationmanager",
    "testname",
    "testname",
    "testname",
    {
      properties: {
        stageSpec: [
          {
            name: "amrbjd",
            specification: {},
            tasks: [
              {
                name: "xxmeyvmgydbcwxqwjhadjxjod",
                targetId:
                  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                specification: {},
              },
            ],
            taskOption: {
              concurrency: 3,
              errorAction: {
                mode: "stopOnAnyFailure",
                maxToleratedFailures: 0,
              },
            },
          },
        ],
        specification: {},
      },
    },
  );
  console.log(result);
}

async function main(): Promise<void> {
  await workflowVersionsUpdateMaximumSet();
}

main().catch(console.error);



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/index.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { AzureClouds, AzureSupportedClouds } from "./static-helpers/cloudSettingHelpers.js";
import {
  PageSettings,
  ContinuablePage,
  PagedAsyncIterableIterator,
} from "./static-helpers/pagingHelpers.js";

export { WorkloadOrchestrationManagementClient } from "./workloadOrchestrationManagementClient.js";
export { restorePoller, RestorePollerOptions } from "./restorePollerHelpers.js";
export {
  DynamicSchema,
  DynamicSchemaProperties,
  KnownConfigurationType,
  ConfigurationType,
  KnownConfigurationModel,
  ConfigurationModel,
  KnownProvisioningState,
  ProvisioningState,
  ProxyResource,
  Resource,
  SystemData,
  KnownCreatedByType,
  CreatedByType,
  ErrorResponse,
  ErrorDetail,
  ErrorAdditionalInfo,
  Schema,
  SchemaProperties,
  TrackedResource,
  SchemaUpdate,
  SchemaUpdateProperties,
  SchemaVersionWithUpdateType,
  KnownUpdateType,
  UpdateType,
  SchemaVersion,
  SchemaVersionProperties,
  VersionParameter,
  RemoveVersionResponse,
  SolutionVersion,
  SolutionVersionProperties,
  KnownState,
  State,
  SolutionDependency,
  KnownJobType,
  JobType,
  ExtendedLocation,
  KnownExtendedLocationType,
  ExtendedLocationType,
  Job,
  JobProperties,
  KnownJobStatus,
  JobStatus,
  JobParameterBase,
  JobParameterBaseUnion,
  DeployJobParameter,
  InstallSolutionParameter,
  JobStep,
  JobStepStatisticsBase,
  JobStepStatisticsBaseUnion,
  DeployJobStepStatistics,
  ExtensionResource,
  Target,
  TargetProperties,
  DeploymentStatus,
  TargetStatus,
  ComponentStatus,
  KnownResourceState,
  ResourceState,
  TargetUpdate,
  TargetUpdateProperties,
  UninstallSolutionParameter,
  RemoveRevisionParameter,
  SolutionTemplateParameter,
  SolutionDependencyParameter,
  ResolvedConfiguration,
  SolutionVersionParameter,
  UpdateExternalValidationStatusParameter,
  KnownValidationStatus,
  ValidationStatus,
  DynamicSchemaVersion,
  SchemaReference,
  SchemaReferenceProperties,
  Solution,
  SolutionProperties,
  AvailableSolutionTemplateVersion,
  SolutionUpdate,
  SolutionUpdateProperties,
  SolutionTemplateVersion,
  SolutionTemplateVersionProperties,
  KnownOrchestratorType,
  OrchestratorType,
  BulkDeploySolutionParameter,
  BulkDeployTargetDetails,
  BulkPublishSolutionParameter,
  BulkPublishTargetDetails,
  SolutionTemplate,
  SolutionTemplateProperties,
  SolutionTemplateUpdate,
  SolutionTemplateUpdateProperties,
  SolutionTemplateVersionWithUpdateType,
  Instance,
  InstanceProperties,
  KnownActiveState,
  ActiveState,
  ReconciliationPolicyProperties,
  KnownReconciliationState,
  ReconciliationState,
  InstanceHistory,
  InstanceHistoryProperties,
  SolutionVersionSnapshot,
  TargetSnapshot,
  ConfigTemplate,
  ConfigTemplateProperties,
  ConfigTemplateUpdate,
  ConfigTemplateUpdateProperties,
  ConfigTemplateVersionWithUpdateType,
  ConfigTemplateVersion,
  ConfigTemplateVersionProperties,
  Workflow,
  WorkflowProperties,
  WorkflowVersion,
  WorkflowVersionProperties,
  StageSpec,
  TaskSpec,
  TaskOption,
  ErrorAction,
  KnownErrorActionMode,
  ErrorActionMode,
  Execution,
  ExecutionProperties,
  ExecutionStatus,
  StageStatus,
  Diagnostic,
  DiagnosticProperties,
  DiagnosticUpdate,
  DiagnosticUpdateProperties,
  Context,
  ContextProperties,
  Capability,
  Hierarchy,
  ContextUpdate,
  ContextUpdateProperties,
  SiteReference,
  SiteReferenceProperties,
  KnownVersions,
} from "./models/index.js";
export { WorkloadOrchestrationManagementClientOptionalParams } from "./api/index.js";
export {
  ConfigTemplatesListBySubscriptionOptionalParams,
  ConfigTemplatesListByResourceGroupOptionalParams,
  ConfigTemplatesDeleteOptionalParams,
  ConfigTemplatesRemoveVersionOptionalParams,
  ConfigTemplatesCreateVersionOptionalParams,
  ConfigTemplatesUpdateOptionalParams,
  ConfigTemplatesCreateOrUpdateOptionalParams,
  ConfigTemplatesGetOptionalParams,
} from "./api/configTemplates/index.js";
export {
  ConfigTemplateVersionsListByConfigTemplateOptionalParams,
  ConfigTemplateVersionsGetOptionalParams,
} from "./api/configTemplateVersions/index.js";
export {
  ContextsDeleteOptionalParams,
  ContextsListBySubscriptionOptionalParams,
  ContextsListByResourceGroupOptionalParams,
  ContextsUpdateOptionalParams,
  ContextsCreateOrUpdateOptionalParams,
  ContextsGetOptionalParams,
} from "./api/contexts/index.js";
export {
  DiagnosticsListBySubscriptionOptionalParams,
  DiagnosticsListByResourceGroupOptionalParams,
  DiagnosticsDeleteOptionalParams,
  DiagnosticsUpdateOptionalParams,
  DiagnosticsCreateOrUpdateOptionalParams,
  DiagnosticsGetOptionalParams,
} from "./api/diagnostics/index.js";
export {
  DynamicSchemasListBySchemaOptionalParams,
  DynamicSchemasDeleteOptionalParams,
  DynamicSchemasUpdateOptionalParams,
  DynamicSchemasCreateOrUpdateOptionalParams,
  DynamicSchemasGetOptionalParams,
} from "./api/dynamicSchemas/index.js";
export {
  DynamicSchemaVersionsListByDynamicSchemaOptionalParams,
  DynamicSchemaVersionsDeleteOptionalParams,
  DynamicSchemaVersionsUpdateOptionalParams,
  DynamicSchemaVersionsCreateOrUpdateOptionalParams,
  DynamicSchemaVersionsGetOptionalParams,
} from "./api/dynamicSchemaVersions/index.js";
export {
  ExecutionsListByWorkflowVersionOptionalParams,
  ExecutionsDeleteOptionalParams,
  ExecutionsUpdateOptionalParams,
  ExecutionsCreateOrUpdateOptionalParams,
  ExecutionsGetOptionalParams,
} from "./api/executions/index.js";
export {
  InstanceHistoriesListByInstanceOptionalParams,
  InstanceHistoriesGetOptionalParams,
} from "./api/instanceHistories/index.js";
export {
  InstancesListBySolutionOptionalParams,
  InstancesDeleteOptionalParams,
  InstancesUpdateOptionalParams,
  InstancesCreateOrUpdateOptionalParams,
  InstancesGetOptionalParams,
} from "./api/instances/index.js";
export { JobsListByTargetOptionalParams, JobsGetOptionalParams } from "./api/jobs/index.js";
export {
  SchemaReferencesListByResourceGroupOptionalParams,
  SchemaReferencesGetOptionalParams,
} from "./api/schemaReferences/index.js";
export {
  SchemasListBySubscriptionOptionalParams,
  SchemasListByResourceGroupOptionalParams,
  SchemasRemoveVersionOptionalParams,
  SchemasCreateVersionOptionalParams,
  SchemasDeleteOptionalParams,
  SchemasUpdateOptionalParams,
  SchemasCreateOrUpdateOptionalParams,
  SchemasGetOptionalParams,
} from "./api/schemas/index.js";
export {
  SchemaVersionsListBySchemaOptionalParams,
  SchemaVersionsDeleteOptionalParams,
  SchemaVersionsUpdateOptionalParams,
  SchemaVersionsCreateOrUpdateOptionalParams,
  SchemaVersionsGetOptionalParams,
} from "./api/schemaVersions/index.js";
export {
  SiteReferencesListByContextOptionalParams,
  SiteReferencesDeleteOptionalParams,
  SiteReferencesUpdateOptionalParams,
  SiteReferencesCreateOrUpdateOptionalParams,
  SiteReferencesGetOptionalParams,
} from "./api/siteReferences/index.js";
export {
  SolutionsListByTargetOptionalParams,
  SolutionsDeleteOptionalParams,
  SolutionsUpdateOptionalParams,
  SolutionsCreateOrUpdateOptionalParams,
  SolutionsGetOptionalParams,
} from "./api/solutions/index.js";
export {
  SolutionTemplatesListBySubscriptionOptionalParams,
  SolutionTemplatesListByResourceGroupOptionalParams,
  SolutionTemplatesDeleteOptionalParams,
  SolutionTemplatesRemoveVersionOptionalParams,
  SolutionTemplatesCreateVersionOptionalParams,
  SolutionTemplatesUpdateOptionalParams,
  SolutionTemplatesCreateOrUpdateOptionalParams,
  SolutionTemplatesGetOptionalParams,
} from "./api/solutionTemplates/index.js";
export {
  SolutionTemplateVersionsBulkPublishSolutionOptionalParams,
  SolutionTemplateVersionsBulkDeploySolutionOptionalParams,
  SolutionTemplateVersionsListBySolutionTemplateOptionalParams,
  SolutionTemplateVersionsGetOptionalParams,
} from "./api/solutionTemplateVersions/index.js";
export {
  SolutionVersionsListBySolutionOptionalParams,
  SolutionVersionsDeleteOptionalParams,
  SolutionVersionsUpdateOptionalParams,
  SolutionVersionsCreateOrUpdateOptionalParams,
  SolutionVersionsGetOptionalParams,
} from "./api/solutionVersions/index.js";
export {
  TargetsUpdateExternalValidationStatusOptionalParams,
  TargetsPublishSolutionVersionOptionalParams,
  TargetsReviewSolutionVersionOptionalParams,
  TargetsResolveConfigurationOptionalParams,
  TargetsRemoveRevisionOptionalParams,
  TargetsUninstallSolutionOptionalParams,
  TargetsInstallSolutionOptionalParams,
  TargetsListBySubscriptionOptionalParams,
  TargetsListByResourceGroupOptionalParams,
  TargetsDeleteOptionalParams,
  TargetsUpdateOptionalParams,
  TargetsCreateOrUpdateOptionalParams,
  TargetsGetOptionalParams,
} from "./api/targets/index.js";
export {
  WorkflowsListByContextOptionalParams,
  WorkflowsDeleteOptionalParams,
  WorkflowsUpdateOptionalParams,
  WorkflowsCreateOrUpdateOptionalParams,
  WorkflowsGetOptionalParams,
} from "./api/workflows/index.js";
export {
  WorkflowVersionsListByWorkflowOptionalParams,
  WorkflowVersionsDeleteOptionalParams,
  WorkflowVersionsUpdateOptionalParams,
  WorkflowVersionsCreateOrUpdateOptionalParams,
  WorkflowVersionsGetOptionalParams,
} from "./api/workflowVersions/index.js";
export {
  ConfigTemplatesOperations,
  ConfigTemplateVersionsOperations,
  ContextsOperations,
  DiagnosticsOperations,
  DynamicSchemasOperations,
  DynamicSchemaVersionsOperations,
  ExecutionsOperations,
  InstanceHistoriesOperations,
  InstancesOperations,
  JobsOperations,
  SchemaReferencesOperations,
  SchemasOperations,
  SchemaVersionsOperations,
  SiteReferencesOperations,
  SolutionsOperations,
  SolutionTemplatesOperations,
  SolutionTemplateVersionsOperations,
  SolutionVersionsOperations,
  TargetsOperations,
  WorkflowsOperations,
  WorkflowVersionsOperations,
} from "./classic/index.js";
export { PageSettings, ContinuablePage, PagedAsyncIterableIterator };
export { AzureClouds, AzureSupportedClouds };



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/logger.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { createClientLogger } from "@azure/logger";
export const logger = createClientLogger("arm-workloadorchestration");



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/restorePollerHelpers.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "./workloadOrchestrationManagementClient.js";
import {
  _$deleteDeserialize,
  _updateDeserialize,
  _createOrUpdateDeserialize,
} from "./api/siteReferences/operations.js";
import {
  _$deleteDeserialize as _$deleteDeserializeContexts,
  _updateDeserialize as _updateDeserializeContexts,
  _createOrUpdateDeserialize as _createOrUpdateDeserializeContexts,
} from "./api/contexts/operations.js";
import {
  _$deleteDeserialize as _$deleteDeserializeDiagnostics,
  _updateDeserialize as _updateDeserializeDiagnostics,
  _createOrUpdateDeserialize as _createOrUpdateDeserializeDiagnostics,
} from "./api/diagnostics/operations.js";
import {
  _$deleteDeserialize as _$deleteDeserializeExecutions,
  _updateDeserialize as _updateDeserializeExecutions,
  _createOrUpdateDeserialize as _createOrUpdateDeserializeExecutions,
} from "./api/executions/operations.js";
import {
  _$deleteDeserialize as _$deleteDeserializeWorkflowVersions,
  _updateDeserialize as _updateDeserializeWorkflowVersions,
  _createOrUpdateDeserialize as _createOrUpdateDeserializeWorkflowVersions,
} from "./api/workflowVersions/operations.js";
import {
  _$deleteDeserialize as _$deleteDeserializeWorkflows,
  _updateDeserialize as _updateDeserializeWorkflows,
  _createOrUpdateDeserialize as _createOrUpdateDeserializeWorkflows,
} from "./api/workflows/operations.js";
import {
  _$deleteDeserialize as _$deleteDeserializeConfigTemplates,
  _createVersionDeserialize,
  _createOrUpdateDeserialize as _createOrUpdateDeserializeConfigTemplates,
} from "./api/configTemplates/operations.js";
import {
  _$deleteDeserialize as _$deleteDeserializeInstances,
  _updateDeserialize as _updateDeserializeInstances,
  _createOrUpdateDeserialize as _createOrUpdateDeserializeInstances,
} from "./api/instances/operations.js";
import {
  _$deleteDeserialize as _$deleteDeserializeSolutionTemplates,
  _removeVersionDeserialize,
  _createVersionDeserialize as _createVersionDeserializeSolutionTemplates,
  _createOrUpdateDeserialize as _createOrUpdateDeserializeSolutionTemplates,
} from "./api/solutionTemplates/operations.js";
import {
  _bulkPublishSolutionDeserialize,
  _bulkDeploySolutionDeserialize,
} from "./api/solutionTemplateVersions/operations.js";
import {
  _$deleteDeserialize as _$deleteDeserializeSolutions,
  _updateDeserialize as _updateDeserializeSolutions,
  _createOrUpdateDeserialize as _createOrUpdateDeserializeSolutions,
} from "./api/solutions/operations.js";
import {
  _$deleteDeserialize as _$deleteDeserializeDynamicSchemaVersions,
  _createOrUpdateDeserialize as _createOrUpdateDeserializeDynamicSchemaVersions,
} from "./api/dynamicSchemaVersions/operations.js";
import {
  _updateExternalValidationStatusDeserialize,
  _publishSolutionVersionDeserialize,
  _reviewSolutionVersionDeserialize,
  _resolveConfigurationDeserialize,
  _removeRevisionDeserialize,
  _uninstallSolutionDeserialize,
  _installSolutionDeserialize,
  _$deleteDeserialize as _$deleteDeserializeTargets,
  _updateDeserialize as _updateDeserializeTargets,
  _createOrUpdateDeserialize as _createOrUpdateDeserializeTargets,
} from "./api/targets/operations.js";
import {
  _$deleteDeserialize as _$deleteDeserializeSolutionVersions,
  _updateDeserialize as _updateDeserializeSolutionVersions,
  _createOrUpdateDeserialize as _createOrUpdateDeserializeSolutionVersions,
} from "./api/solutionVersions/operations.js";
import {
  _$deleteDeserialize as _$deleteDeserializeSchemaVersions,
  _createOrUpdateDeserialize as _createOrUpdateDeserializeSchemaVersions,
} from "./api/schemaVersions/operations.js";
import {
  _createVersionDeserialize as _createVersionDeserializeSchemas,
  _$deleteDeserialize as _$deleteDeserializeSchemas,
  _createOrUpdateDeserialize as _createOrUpdateDeserializeSchemas,
} from "./api/schemas/operations.js";
import {
  _$deleteDeserialize as _$deleteDeserializeDynamicSchemas,
  _createOrUpdateDeserialize as _createOrUpdateDeserializeDynamicSchemas,
} from "./api/dynamicSchemas/operations.js";
import { getLongRunningPoller } from "./static-helpers/pollingHelpers.js";
import { OperationOptions, PathUncheckedResponse } from "@azure-rest/core-client";
import { AbortSignalLike } from "@azure/abort-controller";
import {
  PollerLike,
  OperationState,
  deserializeState,
  ResourceLocationConfig,
} from "@azure/core-lro";

export interface RestorePollerOptions<
  TResult,
  TResponse extends PathUncheckedResponse = PathUncheckedResponse,
> extends OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /**
   * The signal which can be used to abort requests.
   */
  abortSignal?: AbortSignalLike;
  /** Deserialization function for raw response body */
  processResponseBody?: (result: TResponse) => Promise<TResult>;
}

/**
 * Creates a poller from the serialized state of another poller. This can be
 * useful when you want to create pollers on a different host or a poller
 * needs to be constructed after the original one is not in scope.
 */
export function restorePoller<TResponse extends PathUncheckedResponse, TResult>(
  client: WorkloadOrchestrationManagementClient,
  serializedState: string,
  sourceOperation: (...args: any[]) => PollerLike<OperationState<TResult>, TResult>,
  options?: RestorePollerOptions<TResult>,
): PollerLike<OperationState<TResult>, TResult> {
  const pollerConfig = deserializeState(serializedState).config;
  const { initialRequestUrl, requestMethod, metadata } = pollerConfig;
  if (!initialRequestUrl || !requestMethod) {
    throw new Error(
      `Invalid serialized state: ${serializedState} for sourceOperation ${sourceOperation?.name}`,
    );
  }
  const resourceLocationConfig = metadata?.["resourceLocationConfig"] as
    | ResourceLocationConfig
    | undefined;
  const { deserializer, expectedStatuses = [] } =
    getDeserializationHelper(initialRequestUrl, requestMethod) ?? {};
  const deserializeHelper = options?.processResponseBody ?? deserializer;
  if (!deserializeHelper) {
    throw new Error(
      `Please ensure the operation is in this client! We can't find its deserializeHelper for ${sourceOperation?.name}.`,
    );
  }
  return getLongRunningPoller(
    (client as any)["_client"] ?? client,
    deserializeHelper as (result: TResponse) => Promise<TResult>,
    expectedStatuses,
    {
      updateIntervalInMs: options?.updateIntervalInMs,
      abortSignal: options?.abortSignal,
      resourceLocationConfig,
      restoreFrom: serializedState,
      initialRequestUrl,
    },
  );
}

interface DeserializationHelper {
  deserializer: Function;
  expectedStatuses: string[];
}

const deserializeMap: Record<string, DeserializationHelper> = {
  "DELETE /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/siteReferences/{siteReferenceName}":
    {
      deserializer: _$deleteDeserialize,
      expectedStatuses: ["202", "204", "200"],
    },
  "PATCH /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/siteReferences/{siteReferenceName}":
    { deserializer: _updateDeserialize, expectedStatuses: ["200", "202"] },
  "PUT /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/siteReferences/{siteReferenceName}":
    {
      deserializer: _createOrUpdateDeserialize,
      expectedStatuses: ["200", "201", "202"],
    },
  "DELETE /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}":
    {
      deserializer: _$deleteDeserializeContexts,
      expectedStatuses: ["202", "204", "200"],
    },
  "PATCH /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}":
    {
      deserializer: _updateDeserializeContexts,
      expectedStatuses: ["200", "202"],
    },
  "PUT /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}":
    {
      deserializer: _createOrUpdateDeserializeContexts,
      expectedStatuses: ["200", "201", "202"],
    },
  "DELETE /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/diagnostics/{diagnosticName}":
    {
      deserializer: _$deleteDeserializeDiagnostics,
      expectedStatuses: ["202", "204", "200"],
    },
  "PATCH /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/diagnostics/{diagnosticName}":
    {
      deserializer: _updateDeserializeDiagnostics,
      expectedStatuses: ["200", "202"],
    },
  "PUT /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/diagnostics/{diagnosticName}":
    {
      deserializer: _createOrUpdateDeserializeDiagnostics,
      expectedStatuses: ["200", "201", "202"],
    },
  "DELETE /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions/{versionName}/executions/{executionName}":
    {
      deserializer: _$deleteDeserializeExecutions,
      expectedStatuses: ["202", "204", "200"],
    },
  "PATCH /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions/{versionName}/executions/{executionName}":
    {
      deserializer: _updateDeserializeExecutions,
      expectedStatuses: ["200", "202"],
    },
  "PUT /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions/{versionName}/executions/{executionName}":
    {
      deserializer: _createOrUpdateDeserializeExecutions,
      expectedStatuses: ["200", "201", "202"],
    },
  "DELETE /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions/{versionName}":
    {
      deserializer: _$deleteDeserializeWorkflowVersions,
      expectedStatuses: ["202", "204", "200"],
    },
  "PATCH /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions/{versionName}":
    {
      deserializer: _updateDeserializeWorkflowVersions,
      expectedStatuses: ["200", "202"],
    },
  "PUT /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions/{versionName}":
    {
      deserializer: _createOrUpdateDeserializeWorkflowVersions,
      expectedStatuses: ["200", "201", "202"],
    },
  "DELETE /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}":
    {
      deserializer: _$deleteDeserializeWorkflows,
      expectedStatuses: ["202", "204", "200"],
    },
  "PATCH /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}":
    {
      deserializer: _updateDeserializeWorkflows,
      expectedStatuses: ["200", "202"],
    },
  "PUT /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}":
    {
      deserializer: _createOrUpdateDeserializeWorkflows,
      expectedStatuses: ["200", "201", "202"],
    },
  "DELETE /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}":
    {
      deserializer: _$deleteDeserializeConfigTemplates,
      expectedStatuses: ["202", "204", "200"],
    },
  "POST /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}/createVersion":
    {
      deserializer: _createVersionDeserialize,
      expectedStatuses: ["202", "200"],
    },
  "PUT /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}":
    {
      deserializer: _createOrUpdateDeserializeConfigTemplates,
      expectedStatuses: ["200", "201", "202"],
    },
  "DELETE /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances/{instanceName}":
    {
      deserializer: _$deleteDeserializeInstances,
      expectedStatuses: ["202", "204", "200"],
    },
  "PATCH /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances/{instanceName}":
    {
      deserializer: _updateDeserializeInstances,
      expectedStatuses: ["200", "202"],
    },
  "PUT /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances/{instanceName}":
    {
      deserializer: _createOrUpdateDeserializeInstances,
      expectedStatuses: ["200", "201", "202"],
    },
  "DELETE /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}":
    {
      deserializer: _$deleteDeserializeSolutionTemplates,
      expectedStatuses: ["202", "204", "200"],
    },
  "POST /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}/removeVersion":
    {
      deserializer: _removeVersionDeserialize,
      expectedStatuses: ["202", "200"],
    },
  "POST /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}/createVersion":
    {
      deserializer: _createVersionDeserializeSolutionTemplates,
      expectedStatuses: ["202", "200"],
    },
  "PUT /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}":
    {
      deserializer: _createOrUpdateDeserializeSolutionTemplates,
      expectedStatuses: ["200", "201", "202"],
    },
  "POST /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}/versions/{solutionTemplateVersionName}/bulkPublishSolution":
    {
      deserializer: _bulkPublishSolutionDeserialize,
      expectedStatuses: ["202", "200"],
    },
  "POST /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}/versions/{solutionTemplateVersionName}/bulkDeploySolution":
    {
      deserializer: _bulkDeploySolutionDeserialize,
      expectedStatuses: ["202", "200"],
    },
  "DELETE /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}":
    {
      deserializer: _$deleteDeserializeSolutions,
      expectedStatuses: ["202", "204", "200"],
    },
  "PATCH /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}":
    {
      deserializer: _updateDeserializeSolutions,
      expectedStatuses: ["200", "202"],
    },
  "PUT /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}":
    {
      deserializer: _createOrUpdateDeserializeSolutions,
      expectedStatuses: ["200", "201", "202"],
    },
  "DELETE /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas/{dynamicSchemaName}/versions/{dynamicSchemaVersionName}":
    {
      deserializer: _$deleteDeserializeDynamicSchemaVersions,
      expectedStatuses: ["202", "204", "200"],
    },
  "PUT /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas/{dynamicSchemaName}/versions/{dynamicSchemaVersionName}":
    {
      deserializer: _createOrUpdateDeserializeDynamicSchemaVersions,
      expectedStatuses: ["200", "201", "202"],
    },
  "POST /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/updateExternalValidationStatus":
    {
      deserializer: _updateExternalValidationStatusDeserialize,
      expectedStatuses: ["202", "200"],
    },
  "POST /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/publishSolutionVersion":
    {
      deserializer: _publishSolutionVersionDeserialize,
      expectedStatuses: ["202", "200"],
    },
  "POST /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/reviewSolutionVersion":
    {
      deserializer: _reviewSolutionVersionDeserialize,
      expectedStatuses: ["202", "200"],
    },
  "POST /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/resolveConfiguration":
    {
      deserializer: _resolveConfigurationDeserialize,
      expectedStatuses: ["202", "200"],
    },
  "POST /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/removeRevision":
    {
      deserializer: _removeRevisionDeserialize,
      expectedStatuses: ["202", "200"],
    },
  "POST /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/uninstallSolution":
    {
      deserializer: _uninstallSolutionDeserialize,
      expectedStatuses: ["202", "200"],
    },
  "POST /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/installSolution":
    {
      deserializer: _installSolutionDeserialize,
      expectedStatuses: ["202", "200"],
    },
  "DELETE /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}":
    {
      deserializer: _$deleteDeserializeTargets,
      expectedStatuses: ["202", "204", "200"],
    },
  "PATCH /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}":
    {
      deserializer: _updateDeserializeTargets,
      expectedStatuses: ["200", "202"],
    },
  "PUT /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}":
    {
      deserializer: _createOrUpdateDeserializeTargets,
      expectedStatuses: ["200", "201", "202"],
    },
  "DELETE /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/versions/{solutionVersionName}":
    {
      deserializer: _$deleteDeserializeSolutionVersions,
      expectedStatuses: ["202", "204", "200"],
    },
  "PATCH /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/versions/{solutionVersionName}":
    {
      deserializer: _updateDeserializeSolutionVersions,
      expectedStatuses: ["200", "202"],
    },
  "PUT /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/versions/{solutionVersionName}":
    {
      deserializer: _createOrUpdateDeserializeSolutionVersions,
      expectedStatuses: ["200", "201", "202"],
    },
  "DELETE /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/versions/{schemaVersionName}":
    {
      deserializer: _$deleteDeserializeSchemaVersions,
      expectedStatuses: ["202", "204", "200"],
    },
  "PUT /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/versions/{schemaVersionName}":
    {
      deserializer: _createOrUpdateDeserializeSchemaVersions,
      expectedStatuses: ["200", "201", "202"],
    },
  "POST /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/createVersion":
    {
      deserializer: _createVersionDeserializeSchemas,
      expectedStatuses: ["202", "200"],
    },
  "DELETE /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}":
    {
      deserializer: _$deleteDeserializeSchemas,
      expectedStatuses: ["202", "204", "200"],
    },
  "PUT /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}":
    {
      deserializer: _createOrUpdateDeserializeSchemas,
      expectedStatuses: ["200", "201", "202"],
    },
  "DELETE /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas/{dynamicSchemaName}":
    {
      deserializer: _$deleteDeserializeDynamicSchemas,
      expectedStatuses: ["202", "204", "200"],
    },
  "PUT /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas/{dynamicSchemaName}":
    {
      deserializer: _createOrUpdateDeserializeDynamicSchemas,
      expectedStatuses: ["200", "201", "202"],
    },
};

function getDeserializationHelper(
  urlStr: string,
  method: string,
): DeserializationHelper | undefined {
  const path = new URL(urlStr).pathname;
  const pathParts = path.split("/");

  // Traverse list to match the longest candidate
  // matchedLen: the length of candidate path
  // matchedValue: the matched status code array
  let matchedLen = -1,
    matchedValue: DeserializationHelper | undefined;

  // Iterate the responseMap to find a match
  for (const [key, value] of Object.entries(deserializeMap)) {
    // Extracting the path from the map key which is in format
    // GET /path/foo
    if (!key.startsWith(method)) {
      continue;
    }
    const candidatePath = getPathFromMapKey(key);
    // Get each part of the url path
    const candidateParts = candidatePath.split("/");

    // track if we have found a match to return the values found.
    let found = true;
    for (let i = candidateParts.length - 1, j = pathParts.length - 1; i >= 1 && j >= 1; i--, j--) {
      if (candidateParts[i]?.startsWith("{") && candidateParts[i]?.indexOf("}") !== -1) {
        const start = candidateParts[i]!.indexOf("}") + 1,
          end = candidateParts[i]?.length;
        // If the current part of the candidate is a "template" part
        // Try to use the suffix of pattern to match the path
        // {guid} ==> $
        // {guid}:export ==> :export$
        const isMatched = new RegExp(`${candidateParts[i]?.slice(start, end)}`).test(
          pathParts[j] || "",
        );

        if (!isMatched) {
          found = false;
          break;
        }
        continue;
      }

      // If the candidate part is not a template and
      // the parts don't match mark the candidate as not found
      // to move on with the next candidate path.
      if (candidateParts[i] !== pathParts[j]) {
        found = false;
        break;
      }
    }

    // We finished evaluating the current candidate parts
    // Update the matched value if and only if we found the longer pattern
    if (found && candidatePath.length > matchedLen) {
      matchedLen = candidatePath.length;
      matchedValue = value;
    }
  }

  return matchedValue;
}

function getPathFromMapKey(mapKey: string): string {
  const pathStart = mapKey.indexOf("/");
  return mapKey.slice(pathStart);
}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/workloadOrchestrationManagementClient.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import {
  createWorkloadOrchestrationManagement,
  WorkloadOrchestrationManagementContext,
  WorkloadOrchestrationManagementClientOptionalParams,
} from "./api/index.js";
import {
  ConfigTemplateVersionsOperations,
  _getConfigTemplateVersionsOperations,
} from "./classic/configTemplateVersions/index.js";
import {
  ConfigTemplatesOperations,
  _getConfigTemplatesOperations,
} from "./classic/configTemplates/index.js";
import { ContextsOperations, _getContextsOperations } from "./classic/contexts/index.js";
import { DiagnosticsOperations, _getDiagnosticsOperations } from "./classic/diagnostics/index.js";
import {
  DynamicSchemaVersionsOperations,
  _getDynamicSchemaVersionsOperations,
} from "./classic/dynamicSchemaVersions/index.js";
import {
  DynamicSchemasOperations,
  _getDynamicSchemasOperations,
} from "./classic/dynamicSchemas/index.js";
import { ExecutionsOperations, _getExecutionsOperations } from "./classic/executions/index.js";
import {
  InstanceHistoriesOperations,
  _getInstanceHistoriesOperations,
} from "./classic/instanceHistories/index.js";
import { InstancesOperations, _getInstancesOperations } from "./classic/instances/index.js";
import { JobsOperations, _getJobsOperations } from "./classic/jobs/index.js";
import {
  SchemaReferencesOperations,
  _getSchemaReferencesOperations,
} from "./classic/schemaReferences/index.js";
import {
  SchemaVersionsOperations,
  _getSchemaVersionsOperations,
} from "./classic/schemaVersions/index.js";
import { SchemasOperations, _getSchemasOperations } from "./classic/schemas/index.js";
import {
  SiteReferencesOperations,
  _getSiteReferencesOperations,
} from "./classic/siteReferences/index.js";
import {
  SolutionTemplateVersionsOperations,
  _getSolutionTemplateVersionsOperations,
} from "./classic/solutionTemplateVersions/index.js";
import {
  SolutionTemplatesOperations,
  _getSolutionTemplatesOperations,
} from "./classic/solutionTemplates/index.js";
import {
  SolutionVersionsOperations,
  _getSolutionVersionsOperations,
} from "./classic/solutionVersions/index.js";
import { SolutionsOperations, _getSolutionsOperations } from "./classic/solutions/index.js";
import { TargetsOperations, _getTargetsOperations } from "./classic/targets/index.js";
import {
  WorkflowVersionsOperations,
  _getWorkflowVersionsOperations,
} from "./classic/workflowVersions/index.js";
import { WorkflowsOperations, _getWorkflowsOperations } from "./classic/workflows/index.js";
import { TokenCredential } from "@azure/core-auth";
import { Pipeline } from "@azure/core-rest-pipeline";

export { WorkloadOrchestrationManagementClientOptionalParams } from "./api/workloadOrchestrationManagementContext.js";

export class WorkloadOrchestrationManagementClient {
  private _client: WorkloadOrchestrationManagementContext;
  /** The pipeline used by this client to make requests */
  public readonly pipeline: Pipeline;

  /** Microsoft.Edge Resource Provider management API. */
  constructor(
    credential: TokenCredential,
    subscriptionId: string,
    options: WorkloadOrchestrationManagementClientOptionalParams = {},
  ) {
    const prefixFromOptions = options?.userAgentOptions?.userAgentPrefix;
    const userAgentPrefix = prefixFromOptions
      ? `${prefixFromOptions} azsdk-js-client`
      : `azsdk-js-client`;
    this._client = createWorkloadOrchestrationManagement(credential, subscriptionId, {
      ...options,
      userAgentOptions: { userAgentPrefix },
    });
    this.pipeline = this._client.pipeline;
    this.siteReferences = _getSiteReferencesOperations(this._client);
    this.contexts = _getContextsOperations(this._client);
    this.diagnostics = _getDiagnosticsOperations(this._client);
    this.executions = _getExecutionsOperations(this._client);
    this.workflowVersions = _getWorkflowVersionsOperations(this._client);
    this.workflows = _getWorkflowsOperations(this._client);
    this.configTemplateVersions = _getConfigTemplateVersionsOperations(this._client);
    this.configTemplates = _getConfigTemplatesOperations(this._client);
    this.instanceHistories = _getInstanceHistoriesOperations(this._client);
    this.instances = _getInstancesOperations(this._client);
    this.solutionTemplates = _getSolutionTemplatesOperations(this._client);
    this.solutionTemplateVersions = _getSolutionTemplateVersionsOperations(this._client);
    this.solutions = _getSolutionsOperations(this._client);
    this.schemaReferences = _getSchemaReferencesOperations(this._client);
    this.dynamicSchemaVersions = _getDynamicSchemaVersionsOperations(this._client);
    this.targets = _getTargetsOperations(this._client);
    this.jobs = _getJobsOperations(this._client);
    this.solutionVersions = _getSolutionVersionsOperations(this._client);
    this.schemaVersions = _getSchemaVersionsOperations(this._client);
    this.schemas = _getSchemasOperations(this._client);
    this.dynamicSchemas = _getDynamicSchemasOperations(this._client);
  }

  /** The operation groups for siteReferences */
  public readonly siteReferences: SiteReferencesOperations;
  /** The operation groups for contexts */
  public readonly contexts: ContextsOperations;
  /** The operation groups for diagnostics */
  public readonly diagnostics: DiagnosticsOperations;
  /** The operation groups for executions */
  public readonly executions: ExecutionsOperations;
  /** The operation groups for workflowVersions */
  public readonly workflowVersions: WorkflowVersionsOperations;
  /** The operation groups for workflows */
  public readonly workflows: WorkflowsOperations;
  /** The operation groups for configTemplateVersions */
  public readonly configTemplateVersions: ConfigTemplateVersionsOperations;
  /** The operation groups for configTemplates */
  public readonly configTemplates: ConfigTemplatesOperations;
  /** The operation groups for instanceHistories */
  public readonly instanceHistories: InstanceHistoriesOperations;
  /** The operation groups for instances */
  public readonly instances: InstancesOperations;
  /** The operation groups for solutionTemplates */
  public readonly solutionTemplates: SolutionTemplatesOperations;
  /** The operation groups for solutionTemplateVersions */
  public readonly solutionTemplateVersions: SolutionTemplateVersionsOperations;
  /** The operation groups for solutions */
  public readonly solutions: SolutionsOperations;
  /** The operation groups for schemaReferences */
  public readonly schemaReferences: SchemaReferencesOperations;
  /** The operation groups for dynamicSchemaVersions */
  public readonly dynamicSchemaVersions: DynamicSchemaVersionsOperations;
  /** The operation groups for targets */
  public readonly targets: TargetsOperations;
  /** The operation groups for jobs */
  public readonly jobs: JobsOperations;
  /** The operation groups for solutionVersions */
  public readonly solutionVersions: SolutionVersionsOperations;
  /** The operation groups for schemaVersions */
  public readonly schemaVersions: SchemaVersionsOperations;
  /** The operation groups for schemas */
  public readonly schemas: SchemasOperations;
  /** The operation groups for dynamicSchemas */
  public readonly dynamicSchemas: DynamicSchemasOperations;
}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/index.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

export {
  createWorkloadOrchestrationManagement,
  WorkloadOrchestrationManagementContext,
  WorkloadOrchestrationManagementClientOptionalParams,
} from "./workloadOrchestrationManagementContext.js";



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/workloadOrchestrationManagementContext.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { logger } from "../logger.js";
import { KnownVersions } from "../models/models.js";
import { AzureSupportedClouds, getArmEndpoint } from "../static-helpers/cloudSettingHelpers.js";
import { Client, ClientOptions, getClient } from "@azure-rest/core-client";
import { TokenCredential } from "@azure/core-auth";

/** Microsoft.Edge Resource Provider management API. */
export interface WorkloadOrchestrationManagementContext extends Client {
  /** The API version to use for this operation. */
  /** Known values of {@link KnownVersions} that the service accepts. */
  apiVersion: string;
  /** The ID of the target subscription. The value must be an UUID. */
  subscriptionId: string;
}

/** Optional parameters for the client. */
export interface WorkloadOrchestrationManagementClientOptionalParams extends ClientOptions {
  /** The API version to use for this operation. */
  /** Known values of {@link KnownVersions} that the service accepts. */
  apiVersion?: string;
  /** Specifies the Azure cloud environment for the client. */
  cloudSetting?: AzureSupportedClouds;
}

/** Microsoft.Edge Resource Provider management API. */
export function createWorkloadOrchestrationManagement(
  credential: TokenCredential,
  subscriptionId: string,
  options: WorkloadOrchestrationManagementClientOptionalParams = {},
): WorkloadOrchestrationManagementContext {
  const endpointUrl =
    options.endpoint ?? getArmEndpoint(options.cloudSetting) ?? "https://management.azure.com";
  const prefixFromOptions = options?.userAgentOptions?.userAgentPrefix;
  const userAgentInfo = `azsdk-js-arm-workloadorchestration/1.0.0-beta.1`;
  const userAgentPrefix = prefixFromOptions
    ? `${prefixFromOptions} azsdk-js-api ${userAgentInfo}`
    : `azsdk-js-api ${userAgentInfo}`;
  const { apiVersion: _, ...updatedOptions } = {
    ...options,
    userAgentOptions: { userAgentPrefix },
    loggingOptions: { logger: options.loggingOptions?.logger ?? logger.info },
    credentials: {
      scopes: options.credentials?.scopes ?? [`${endpointUrl}/.default`],
    },
  };
  const clientContext = getClient(endpointUrl, credential, updatedOptions);
  clientContext.pipeline.removePolicy({ name: "ApiVersionPolicy" });
  const apiVersion = options.apiVersion ?? "2025-06-01";
  clientContext.pipeline.addPolicy({
    name: "ClientApiVersionPolicy",
    sendRequest: (req, next) => {
      // Use the apiVersion defined in request url directly
      // Append one if there is no apiVersion and we have one at client options
      const url = new URL(req.url);
      if (!url.searchParams.get("api-version")) {
        req.url = `${req.url}${
          Array.from(url.searchParams.keys()).length > 0 ? "&" : "?"
        }api-version=${apiVersion}`;
      }

      return next(req);
    },
  });
  return {
    ...clientContext,
    apiVersion,
    subscriptionId,
  } as WorkloadOrchestrationManagementContext;
}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/configTemplates/index.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

export {
  listBySubscription,
  listByResourceGroup,
  $delete,
  removeVersion,
  createVersion,
  update,
  createOrUpdate,
  get,
} from "./operations.js";
export {
  ConfigTemplatesListBySubscriptionOptionalParams,
  ConfigTemplatesListByResourceGroupOptionalParams,
  ConfigTemplatesDeleteOptionalParams,
  ConfigTemplatesRemoveVersionOptionalParams,
  ConfigTemplatesCreateVersionOptionalParams,
  ConfigTemplatesUpdateOptionalParams,
  ConfigTemplatesCreateOrUpdateOptionalParams,
  ConfigTemplatesGetOptionalParams,
} from "./options.js";



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/configTemplates/operations.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementContext as Client } from "../index.js";
import {
  errorResponseDeserializer,
  VersionParameter,
  versionParameterSerializer,
  RemoveVersionResponse,
  removeVersionResponseDeserializer,
  ConfigTemplate,
  configTemplateSerializer,
  configTemplateDeserializer,
  ConfigTemplateUpdate,
  configTemplateUpdateSerializer,
  ConfigTemplateVersionWithUpdateType,
  configTemplateVersionWithUpdateTypeSerializer,
  ConfigTemplateVersion,
  configTemplateVersionDeserializer,
  _ConfigTemplateListResult,
  _configTemplateListResultDeserializer,
} from "../../models/models.js";
import {
  PagedAsyncIterableIterator,
  buildPagedAsyncIterator,
} from "../../static-helpers/pagingHelpers.js";
import { getLongRunningPoller } from "../../static-helpers/pollingHelpers.js";
import { expandUrlTemplate } from "../../static-helpers/urlTemplate.js";
import {
  ConfigTemplatesListBySubscriptionOptionalParams,
  ConfigTemplatesListByResourceGroupOptionalParams,
  ConfigTemplatesDeleteOptionalParams,
  ConfigTemplatesRemoveVersionOptionalParams,
  ConfigTemplatesCreateVersionOptionalParams,
  ConfigTemplatesUpdateOptionalParams,
  ConfigTemplatesCreateOrUpdateOptionalParams,
  ConfigTemplatesGetOptionalParams,
} from "./options.js";
import {
  StreamableMethod,
  PathUncheckedResponse,
  createRestError,
  operationOptionsToRequestParameters,
} from "@azure-rest/core-client";
import { PollerLike, OperationState } from "@azure/core-lro";

export function _listBySubscriptionSend(
  context: Client,
  options: ConfigTemplatesListBySubscriptionOptionalParams = {
    requestOptions: {},
  },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/providers/Microsoft.Edge/configTemplates{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).get({
    ...operationOptionsToRequestParameters(options),
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
  });
}

export async function _listBySubscriptionDeserialize(
  result: PathUncheckedResponse,
): Promise<_ConfigTemplateListResult> {
  const expectedStatuses = ["200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return _configTemplateListResultDeserializer(result.body);
}

/** List by subscription */
export function listBySubscription(
  context: Client,
  options: ConfigTemplatesListBySubscriptionOptionalParams = {
    requestOptions: {},
  },
): PagedAsyncIterableIterator<ConfigTemplate> {
  return buildPagedAsyncIterator(
    context,
    () => _listBySubscriptionSend(context, options),
    _listBySubscriptionDeserialize,
    ["200"],
    { itemName: "value", nextLinkName: "nextLink" },
  );
}

export function _listByResourceGroupSend(
  context: Client,
  resourceGroupName: string,
  options: ConfigTemplatesListByResourceGroupOptionalParams = {
    requestOptions: {},
  },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).get({
    ...operationOptionsToRequestParameters(options),
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
  });
}

export async function _listByResourceGroupDeserialize(
  result: PathUncheckedResponse,
): Promise<_ConfigTemplateListResult> {
  const expectedStatuses = ["200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return _configTemplateListResultDeserializer(result.body);
}

/** List by specified resource group */
export function listByResourceGroup(
  context: Client,
  resourceGroupName: string,
  options: ConfigTemplatesListByResourceGroupOptionalParams = {
    requestOptions: {},
  },
): PagedAsyncIterableIterator<ConfigTemplate> {
  return buildPagedAsyncIterator(
    context,
    () => _listByResourceGroupSend(context, resourceGroupName, options),
    _listByResourceGroupDeserialize,
    ["200"],
    { itemName: "value", nextLinkName: "nextLink" },
  );
}

export function _$deleteSend(
  context: Client,
  resourceGroupName: string,
  configTemplateName: string,
  options: ConfigTemplatesDeleteOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      configTemplateName: configTemplateName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).delete({ ...operationOptionsToRequestParameters(options) });
}

export async function _$deleteDeserialize(result: PathUncheckedResponse): Promise<void> {
  const expectedStatuses = ["202", "204", "200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return;
}

/** Delete a Config Template Resource */
/**
 *  @fixme delete is a reserved word that cannot be used as an operation name.
 *         Please add @clientName("clientName") or @clientName("<JS-Specific-Name>", "javascript")
 *         to the operation to override the generated name.
 */
export function $delete(
  context: Client,
  resourceGroupName: string,
  configTemplateName: string,
  options: ConfigTemplatesDeleteOptionalParams = { requestOptions: {} },
): PollerLike<OperationState<void>, void> {
  return getLongRunningPoller(context, _$deleteDeserialize, ["202", "204", "200"], {
    updateIntervalInMs: options?.updateIntervalInMs,
    abortSignal: options?.abortSignal,
    getInitialResponse: () => _$deleteSend(context, resourceGroupName, configTemplateName, options),
    resourceLocationConfig: "location",
  }) as PollerLike<OperationState<void>, void>;
}

export function _removeVersionSend(
  context: Client,
  resourceGroupName: string,
  configTemplateName: string,
  body: VersionParameter,
  options: ConfigTemplatesRemoveVersionOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}/removeVersion{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      configTemplateName: configTemplateName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).post({
    ...operationOptionsToRequestParameters(options),
    contentType: "application/json",
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
    body: versionParameterSerializer(body),
  });
}

export async function _removeVersionDeserialize(
  result: PathUncheckedResponse,
): Promise<RemoveVersionResponse> {
  const expectedStatuses = ["200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return removeVersionResponseDeserializer(result.body);
}

/** Remove Config Template Version Resource */
export async function removeVersion(
  context: Client,
  resourceGroupName: string,
  configTemplateName: string,
  body: VersionParameter,
  options: ConfigTemplatesRemoveVersionOptionalParams = { requestOptions: {} },
): Promise<RemoveVersionResponse> {
  const result = await _removeVersionSend(
    context,
    resourceGroupName,
    configTemplateName,
    body,
    options,
  );
  return _removeVersionDeserialize(result);
}

export function _createVersionSend(
  context: Client,
  resourceGroupName: string,
  configTemplateName: string,
  body: ConfigTemplateVersionWithUpdateType,
  options: ConfigTemplatesCreateVersionOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}/createVersion{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      configTemplateName: configTemplateName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).post({
    ...operationOptionsToRequestParameters(options),
    contentType: "application/json",
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
    body: configTemplateVersionWithUpdateTypeSerializer(body),
  });
}

export async function _createVersionDeserialize(
  result: PathUncheckedResponse,
): Promise<ConfigTemplateVersion> {
  const expectedStatuses = ["202", "200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return configTemplateVersionDeserializer(result.body);
}

/** Create or update a Config Template Version Resource with the specified UpdateType */
export function createVersion(
  context: Client,
  resourceGroupName: string,
  configTemplateName: string,
  body: ConfigTemplateVersionWithUpdateType,
  options: ConfigTemplatesCreateVersionOptionalParams = { requestOptions: {} },
): PollerLike<OperationState<ConfigTemplateVersion>, ConfigTemplateVersion> {
  return getLongRunningPoller(context, _createVersionDeserialize, ["202", "200"], {
    updateIntervalInMs: options?.updateIntervalInMs,
    abortSignal: options?.abortSignal,
    getInitialResponse: () =>
      _createVersionSend(context, resourceGroupName, configTemplateName, body, options),
    resourceLocationConfig: "location",
  }) as PollerLike<OperationState<ConfigTemplateVersion>, ConfigTemplateVersion>;
}

export function _updateSend(
  context: Client,
  resourceGroupName: string,
  configTemplateName: string,
  properties: ConfigTemplateUpdate,
  options: ConfigTemplatesUpdateOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      configTemplateName: configTemplateName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).patch({
    ...operationOptionsToRequestParameters(options),
    contentType: "application/json",
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
    body: configTemplateUpdateSerializer(properties),
  });
}

export async function _updateDeserialize(result: PathUncheckedResponse): Promise<ConfigTemplate> {
  const expectedStatuses = ["200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return configTemplateDeserializer(result.body);
}

/** update a Config Template Resource */
export async function update(
  context: Client,
  resourceGroupName: string,
  configTemplateName: string,
  properties: ConfigTemplateUpdate,
  options: ConfigTemplatesUpdateOptionalParams = { requestOptions: {} },
): Promise<ConfigTemplate> {
  const result = await _updateSend(
    context,
    resourceGroupName,
    configTemplateName,
    properties,
    options,
  );
  return _updateDeserialize(result);
}

export function _createOrUpdateSend(
  context: Client,
  resourceGroupName: string,
  configTemplateName: string,
  resource: ConfigTemplate,
  options: ConfigTemplatesCreateOrUpdateOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      configTemplateName: configTemplateName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).put({
    ...operationOptionsToRequestParameters(options),
    contentType: "application/json",
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
    body: configTemplateSerializer(resource),
  });
}

export async function _createOrUpdateDeserialize(
  result: PathUncheckedResponse,
): Promise<ConfigTemplate> {
  const expectedStatuses = ["200", "201", "202"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return configTemplateDeserializer(result.body);
}

/** Create or update a Config Template Resource */
export function createOrUpdate(
  context: Client,
  resourceGroupName: string,
  configTemplateName: string,
  resource: ConfigTemplate,
  options: ConfigTemplatesCreateOrUpdateOptionalParams = { requestOptions: {} },
): PollerLike<OperationState<ConfigTemplate>, ConfigTemplate> {
  return getLongRunningPoller(context, _createOrUpdateDeserialize, ["200", "201", "202"], {
    updateIntervalInMs: options?.updateIntervalInMs,
    abortSignal: options?.abortSignal,
    getInitialResponse: () =>
      _createOrUpdateSend(context, resourceGroupName, configTemplateName, resource, options),
    resourceLocationConfig: "azure-async-operation",
  }) as PollerLike<OperationState<ConfigTemplate>, ConfigTemplate>;
}

export function _getSend(
  context: Client,
  resourceGroupName: string,
  configTemplateName: string,
  options: ConfigTemplatesGetOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      configTemplateName: configTemplateName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).get({
    ...operationOptionsToRequestParameters(options),
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
  });
}

export async function _getDeserialize(result: PathUncheckedResponse): Promise<ConfigTemplate> {
  const expectedStatuses = ["200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return configTemplateDeserializer(result.body);
}

/** Get a Config Template Resource */
export async function get(
  context: Client,
  resourceGroupName: string,
  configTemplateName: string,
  options: ConfigTemplatesGetOptionalParams = { requestOptions: {} },
): Promise<ConfigTemplate> {
  const result = await _getSend(context, resourceGroupName, configTemplateName, options);
  return _getDeserialize(result);
}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/configTemplates/options.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { OperationOptions } from "@azure-rest/core-client";

/** Optional parameters. */
export interface ConfigTemplatesListBySubscriptionOptionalParams extends OperationOptions {}

/** Optional parameters. */
export interface ConfigTemplatesListByResourceGroupOptionalParams extends OperationOptions {}

/** Optional parameters. */
export interface ConfigTemplatesDeleteOptionalParams extends OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
}

/** Optional parameters. */
export interface ConfigTemplatesRemoveVersionOptionalParams extends OperationOptions {}

/** Optional parameters. */
export interface ConfigTemplatesCreateVersionOptionalParams extends OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
}

/** Optional parameters. */
export interface ConfigTemplatesUpdateOptionalParams extends OperationOptions {}

/** Optional parameters. */
export interface ConfigTemplatesCreateOrUpdateOptionalParams extends OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
}

/** Optional parameters. */
export interface ConfigTemplatesGetOptionalParams extends OperationOptions {}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/configTemplateVersions/index.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

export { listByConfigTemplate, get } from "./operations.js";
export {
  ConfigTemplateVersionsListByConfigTemplateOptionalParams,
  ConfigTemplateVersionsGetOptionalParams,
} from "./options.js";



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/configTemplateVersions/operations.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementContext as Client } from "../index.js";
import {
  errorResponseDeserializer,
  ConfigTemplateVersion,
  configTemplateVersionDeserializer,
  _ConfigTemplateVersionListResult,
  _configTemplateVersionListResultDeserializer,
} from "../../models/models.js";
import {
  PagedAsyncIterableIterator,
  buildPagedAsyncIterator,
} from "../../static-helpers/pagingHelpers.js";
import { expandUrlTemplate } from "../../static-helpers/urlTemplate.js";
import {
  ConfigTemplateVersionsListByConfigTemplateOptionalParams,
  ConfigTemplateVersionsGetOptionalParams,
} from "./options.js";
import {
  StreamableMethod,
  PathUncheckedResponse,
  createRestError,
  operationOptionsToRequestParameters,
} from "@azure-rest/core-client";

export function _listByConfigTemplateSend(
  context: Client,
  resourceGroupName: string,
  configTemplateName: string,
  options: ConfigTemplateVersionsListByConfigTemplateOptionalParams = {
    requestOptions: {},
  },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}/versions{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      configTemplateName: configTemplateName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).get({
    ...operationOptionsToRequestParameters(options),
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
  });
}

export async function _listByConfigTemplateDeserialize(
  result: PathUncheckedResponse,
): Promise<_ConfigTemplateVersionListResult> {
  const expectedStatuses = ["200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return _configTemplateVersionListResultDeserializer(result.body);
}

/** List Config Template Version Resources */
export function listByConfigTemplate(
  context: Client,
  resourceGroupName: string,
  configTemplateName: string,
  options: ConfigTemplateVersionsListByConfigTemplateOptionalParams = {
    requestOptions: {},
  },
): PagedAsyncIterableIterator<ConfigTemplateVersion> {
  return buildPagedAsyncIterator(
    context,
    () => _listByConfigTemplateSend(context, resourceGroupName, configTemplateName, options),
    _listByConfigTemplateDeserialize,
    ["200"],
    { itemName: "value", nextLinkName: "nextLink" },
  );
}

export function _getSend(
  context: Client,
  resourceGroupName: string,
  configTemplateName: string,
  configTemplateVersionName: string,
  options: ConfigTemplateVersionsGetOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}/versions/{configTemplateVersionName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      configTemplateName: configTemplateName,
      configTemplateVersionName: configTemplateVersionName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).get({
    ...operationOptionsToRequestParameters(options),
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
  });
}

export async function _getDeserialize(
  result: PathUncheckedResponse,
): Promise<ConfigTemplateVersion> {
  const expectedStatuses = ["200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return configTemplateVersionDeserializer(result.body);
}

/** Get a Config Template Version Resource */
export async function get(
  context: Client,
  resourceGroupName: string,
  configTemplateName: string,
  configTemplateVersionName: string,
  options: ConfigTemplateVersionsGetOptionalParams = { requestOptions: {} },
): Promise<ConfigTemplateVersion> {
  const result = await _getSend(
    context,
    resourceGroupName,
    configTemplateName,
    configTemplateVersionName,
    options,
  );
  return _getDeserialize(result);
}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/configTemplateVersions/options.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { OperationOptions } from "@azure-rest/core-client";

/** Optional parameters. */
export interface ConfigTemplateVersionsListByConfigTemplateOptionalParams
  extends OperationOptions {}

/** Optional parameters. */
export interface ConfigTemplateVersionsGetOptionalParams extends OperationOptions {}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/contexts/index.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

export {
  $delete,
  listBySubscription,
  listByResourceGroup,
  update,
  createOrUpdate,
  get,
} from "./operations.js";
export {
  ContextsDeleteOptionalParams,
  ContextsListBySubscriptionOptionalParams,
  ContextsListByResourceGroupOptionalParams,
  ContextsUpdateOptionalParams,
  ContextsCreateOrUpdateOptionalParams,
  ContextsGetOptionalParams,
} from "./options.js";



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/contexts/operations.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementContext as Client } from "../index.js";
import {
  errorResponseDeserializer,
  Context,
  contextSerializer,
  contextDeserializer,
  ContextUpdate,
  contextUpdateSerializer,
  _ContextListResult,
  _contextListResultDeserializer,
} from "../../models/models.js";
import {
  PagedAsyncIterableIterator,
  buildPagedAsyncIterator,
} from "../../static-helpers/pagingHelpers.js";
import { getLongRunningPoller } from "../../static-helpers/pollingHelpers.js";
import { expandUrlTemplate } from "../../static-helpers/urlTemplate.js";
import {
  ContextsDeleteOptionalParams,
  ContextsListBySubscriptionOptionalParams,
  ContextsListByResourceGroupOptionalParams,
  ContextsUpdateOptionalParams,
  ContextsCreateOrUpdateOptionalParams,
  ContextsGetOptionalParams,
} from "./options.js";
import {
  StreamableMethod,
  PathUncheckedResponse,
  createRestError,
  operationOptionsToRequestParameters,
} from "@azure-rest/core-client";
import { PollerLike, OperationState } from "@azure/core-lro";

export function _$deleteSend(
  context: Client,
  resourceGroupName: string,
  contextName: string,
  options: ContextsDeleteOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      contextName: contextName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).delete({ ...operationOptionsToRequestParameters(options) });
}

export async function _$deleteDeserialize(result: PathUncheckedResponse): Promise<void> {
  const expectedStatuses = ["202", "204", "200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return;
}

/** Delete Context Resource */
/**
 *  @fixme delete is a reserved word that cannot be used as an operation name.
 *         Please add @clientName("clientName") or @clientName("<JS-Specific-Name>", "javascript")
 *         to the operation to override the generated name.
 */
export function $delete(
  context: Client,
  resourceGroupName: string,
  contextName: string,
  options: ContextsDeleteOptionalParams = { requestOptions: {} },
): PollerLike<OperationState<void>, void> {
  return getLongRunningPoller(context, _$deleteDeserialize, ["202", "204", "200"], {
    updateIntervalInMs: options?.updateIntervalInMs,
    abortSignal: options?.abortSignal,
    getInitialResponse: () => _$deleteSend(context, resourceGroupName, contextName, options),
    resourceLocationConfig: "location",
  }) as PollerLike<OperationState<void>, void>;
}

export function _listBySubscriptionSend(
  context: Client,
  options: ContextsListBySubscriptionOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/providers/Microsoft.Edge/contexts{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).get({
    ...operationOptionsToRequestParameters(options),
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
  });
}

export async function _listBySubscriptionDeserialize(
  result: PathUncheckedResponse,
): Promise<_ContextListResult> {
  const expectedStatuses = ["200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return _contextListResultDeserializer(result.body);
}

/** List by subscription */
export function listBySubscription(
  context: Client,
  options: ContextsListBySubscriptionOptionalParams = { requestOptions: {} },
): PagedAsyncIterableIterator<Context> {
  return buildPagedAsyncIterator(
    context,
    () => _listBySubscriptionSend(context, options),
    _listBySubscriptionDeserialize,
    ["200"],
    { itemName: "value", nextLinkName: "nextLink" },
  );
}

export function _listByResourceGroupSend(
  context: Client,
  resourceGroupName: string,
  options: ContextsListByResourceGroupOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).get({
    ...operationOptionsToRequestParameters(options),
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
  });
}

export async function _listByResourceGroupDeserialize(
  result: PathUncheckedResponse,
): Promise<_ContextListResult> {
  const expectedStatuses = ["200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return _contextListResultDeserializer(result.body);
}

/** List by specified resource group */
export function listByResourceGroup(
  context: Client,
  resourceGroupName: string,
  options: ContextsListByResourceGroupOptionalParams = { requestOptions: {} },
): PagedAsyncIterableIterator<Context> {
  return buildPagedAsyncIterator(
    context,
    () => _listByResourceGroupSend(context, resourceGroupName, options),
    _listByResourceGroupDeserialize,
    ["200"],
    { itemName: "value", nextLinkName: "nextLink" },
  );
}

export function _updateSend(
  context: Client,
  resourceGroupName: string,
  contextName: string,
  properties: ContextUpdate,
  options: ContextsUpdateOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      contextName: contextName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).patch({
    ...operationOptionsToRequestParameters(options),
    contentType: "application/json",
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
    body: contextUpdateSerializer(properties),
  });
}

export async function _updateDeserialize(result: PathUncheckedResponse): Promise<Context> {
  const expectedStatuses = ["200", "202"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return contextDeserializer(result.body);
}

/** update an Context Resource */
export function update(
  context: Client,
  resourceGroupName: string,
  contextName: string,
  properties: ContextUpdate,
  options: ContextsUpdateOptionalParams = { requestOptions: {} },
): PollerLike<OperationState<Context>, Context> {
  return getLongRunningPoller(context, _updateDeserialize, ["200", "202"], {
    updateIntervalInMs: options?.updateIntervalInMs,
    abortSignal: options?.abortSignal,
    getInitialResponse: () =>
      _updateSend(context, resourceGroupName, contextName, properties, options),
    resourceLocationConfig: "location",
  }) as PollerLike<OperationState<Context>, Context>;
}

export function _createOrUpdateSend(
  context: Client,
  resourceGroupName: string,
  contextName: string,
  resource: Context,
  options: ContextsCreateOrUpdateOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      contextName: contextName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).put({
    ...operationOptionsToRequestParameters(options),
    contentType: "application/json",
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
    body: contextSerializer(resource),
  });
}

export async function _createOrUpdateDeserialize(result: PathUncheckedResponse): Promise<Context> {
  const expectedStatuses = ["200", "201", "202"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return contextDeserializer(result.body);
}

/** Create or update Context Resource */
export function createOrUpdate(
  context: Client,
  resourceGroupName: string,
  contextName: string,
  resource: Context,
  options: ContextsCreateOrUpdateOptionalParams = { requestOptions: {} },
): PollerLike<OperationState<Context>, Context> {
  return getLongRunningPoller(context, _createOrUpdateDeserialize, ["200", "201", "202"], {
    updateIntervalInMs: options?.updateIntervalInMs,
    abortSignal: options?.abortSignal,
    getInitialResponse: () =>
      _createOrUpdateSend(context, resourceGroupName, contextName, resource, options),
    resourceLocationConfig: "azure-async-operation",
  }) as PollerLike<OperationState<Context>, Context>;
}

export function _getSend(
  context: Client,
  resourceGroupName: string,
  contextName: string,
  options: ContextsGetOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      contextName: contextName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).get({
    ...operationOptionsToRequestParameters(options),
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
  });
}

export async function _getDeserialize(result: PathUncheckedResponse): Promise<Context> {
  const expectedStatuses = ["200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return contextDeserializer(result.body);
}

/** Get Context Resource */
export async function get(
  context: Client,
  resourceGroupName: string,
  contextName: string,
  options: ContextsGetOptionalParams = { requestOptions: {} },
): Promise<Context> {
  const result = await _getSend(context, resourceGroupName, contextName, options);
  return _getDeserialize(result);
}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/contexts/options.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { OperationOptions } from "@azure-rest/core-client";

/** Optional parameters. */
export interface ContextsDeleteOptionalParams extends OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
}

/** Optional parameters. */
export interface ContextsListBySubscriptionOptionalParams extends OperationOptions {}

/** Optional parameters. */
export interface ContextsListByResourceGroupOptionalParams extends OperationOptions {}

/** Optional parameters. */
export interface ContextsUpdateOptionalParams extends OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
}

/** Optional parameters. */
export interface ContextsCreateOrUpdateOptionalParams extends OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
}

/** Optional parameters. */
export interface ContextsGetOptionalParams extends OperationOptions {}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/diagnostics/index.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

export {
  listBySubscription,
  listByResourceGroup,
  $delete,
  update,
  createOrUpdate,
  get,
} from "./operations.js";
export {
  DiagnosticsListBySubscriptionOptionalParams,
  DiagnosticsListByResourceGroupOptionalParams,
  DiagnosticsDeleteOptionalParams,
  DiagnosticsUpdateOptionalParams,
  DiagnosticsCreateOrUpdateOptionalParams,
  DiagnosticsGetOptionalParams,
} from "./options.js";



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/diagnostics/operations.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementContext as Client } from "../index.js";
import {
  errorResponseDeserializer,
  Diagnostic,
  diagnosticSerializer,
  diagnosticDeserializer,
  DiagnosticUpdate,
  diagnosticUpdateSerializer,
  _DiagnosticListResult,
  _diagnosticListResultDeserializer,
} from "../../models/models.js";
import {
  PagedAsyncIterableIterator,
  buildPagedAsyncIterator,
} from "../../static-helpers/pagingHelpers.js";
import { getLongRunningPoller } from "../../static-helpers/pollingHelpers.js";
import { expandUrlTemplate } from "../../static-helpers/urlTemplate.js";
import {
  DiagnosticsListBySubscriptionOptionalParams,
  DiagnosticsListByResourceGroupOptionalParams,
  DiagnosticsDeleteOptionalParams,
  DiagnosticsUpdateOptionalParams,
  DiagnosticsCreateOrUpdateOptionalParams,
  DiagnosticsGetOptionalParams,
} from "./options.js";
import {
  StreamableMethod,
  PathUncheckedResponse,
  createRestError,
  operationOptionsToRequestParameters,
} from "@azure-rest/core-client";
import { PollerLike, OperationState } from "@azure/core-lro";

export function _listBySubscriptionSend(
  context: Client,
  options: DiagnosticsListBySubscriptionOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/providers/Microsoft.Edge/diagnostics{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).get({
    ...operationOptionsToRequestParameters(options),
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
  });
}

export async function _listBySubscriptionDeserialize(
  result: PathUncheckedResponse,
): Promise<_DiagnosticListResult> {
  const expectedStatuses = ["200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return _diagnosticListResultDeserializer(result.body);
}

/** Lists Diagnostics resources within an Azure subscription. */
export function listBySubscription(
  context: Client,
  options: DiagnosticsListBySubscriptionOptionalParams = { requestOptions: {} },
): PagedAsyncIterableIterator<Diagnostic> {
  return buildPagedAsyncIterator(
    context,
    () => _listBySubscriptionSend(context, options),
    _listBySubscriptionDeserialize,
    ["200"],
    { itemName: "value", nextLinkName: "nextLink" },
  );
}

export function _listByResourceGroupSend(
  context: Client,
  resourceGroupName: string,
  options: DiagnosticsListByResourceGroupOptionalParams = {
    requestOptions: {},
  },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/diagnostics{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).get({
    ...operationOptionsToRequestParameters(options),
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
  });
}

export async function _listByResourceGroupDeserialize(
  result: PathUncheckedResponse,
): Promise<_DiagnosticListResult> {
  const expectedStatuses = ["200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return _diagnosticListResultDeserializer(result.body);
}

/** Returns a collection of Diagnostic resources within the resource group. */
export function listByResourceGroup(
  context: Client,
  resourceGroupName: string,
  options: DiagnosticsListByResourceGroupOptionalParams = {
    requestOptions: {},
  },
): PagedAsyncIterableIterator<Diagnostic> {
  return buildPagedAsyncIterator(
    context,
    () => _listByResourceGroupSend(context, resourceGroupName, options),
    _listByResourceGroupDeserialize,
    ["200"],
    { itemName: "value", nextLinkName: "nextLink" },
  );
}

export function _$deleteSend(
  context: Client,
  resourceGroupName: string,
  diagnosticName: string,
  options: DiagnosticsDeleteOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/diagnostics/{diagnosticName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      diagnosticName: diagnosticName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).delete({ ...operationOptionsToRequestParameters(options) });
}

export async function _$deleteDeserialize(result: PathUncheckedResponse): Promise<void> {
  const expectedStatuses = ["202", "204", "200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return;
}

/** Deletes specified Diagnostic resource. */
/**
 *  @fixme delete is a reserved word that cannot be used as an operation name.
 *         Please add @clientName("clientName") or @clientName("<JS-Specific-Name>", "javascript")
 *         to the operation to override the generated name.
 */
export function $delete(
  context: Client,
  resourceGroupName: string,
  diagnosticName: string,
  options: DiagnosticsDeleteOptionalParams = { requestOptions: {} },
): PollerLike<OperationState<void>, void> {
  return getLongRunningPoller(context, _$deleteDeserialize, ["202", "204", "200"], {
    updateIntervalInMs: options?.updateIntervalInMs,
    abortSignal: options?.abortSignal,
    getInitialResponse: () => _$deleteSend(context, resourceGroupName, diagnosticName, options),
    resourceLocationConfig: "location",
  }) as PollerLike<OperationState<void>, void>;
}

export function _updateSend(
  context: Client,
  resourceGroupName: string,
  diagnosticName: string,
  properties: DiagnosticUpdate,
  options: DiagnosticsUpdateOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/diagnostics/{diagnosticName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      diagnosticName: diagnosticName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).patch({
    ...operationOptionsToRequestParameters(options),
    contentType: "application/json",
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
    body: diagnosticUpdateSerializer(properties),
  });
}

export async function _updateDeserialize(result: PathUncheckedResponse): Promise<Diagnostic> {
  const expectedStatuses = ["200", "202"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return diagnosticDeserializer(result.body);
}

/** Updates existing Diagnostic resource. */
export function update(
  context: Client,
  resourceGroupName: string,
  diagnosticName: string,
  properties: DiagnosticUpdate,
  options: DiagnosticsUpdateOptionalParams = { requestOptions: {} },
): PollerLike<OperationState<Diagnostic>, Diagnostic> {
  return getLongRunningPoller(context, _updateDeserialize, ["200", "202"], {
    updateIntervalInMs: options?.updateIntervalInMs,
    abortSignal: options?.abortSignal,
    getInitialResponse: () =>
      _updateSend(context, resourceGroupName, diagnosticName, properties, options),
    resourceLocationConfig: "location",
  }) as PollerLike<OperationState<Diagnostic>, Diagnostic>;
}

export function _createOrUpdateSend(
  context: Client,
  resourceGroupName: string,
  diagnosticName: string,
  resource: Diagnostic,
  options: DiagnosticsCreateOrUpdateOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/diagnostics/{diagnosticName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      diagnosticName: diagnosticName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).put({
    ...operationOptionsToRequestParameters(options),
    contentType: "application/json",
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
    body: diagnosticSerializer(resource),
  });
}

export async function _createOrUpdateDeserialize(
  result: PathUncheckedResponse,
): Promise<Diagnostic> {
  const expectedStatuses = ["200", "201", "202"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return diagnosticDeserializer(result.body);
}

/** Creates new or updates existing Diagnostic resource. */
export function createOrUpdate(
  context: Client,
  resourceGroupName: string,
  diagnosticName: string,
  resource: Diagnostic,
  options: DiagnosticsCreateOrUpdateOptionalParams = { requestOptions: {} },
): PollerLike<OperationState<Diagnostic>, Diagnostic> {
  return getLongRunningPoller(context, _createOrUpdateDeserialize, ["200", "201", "202"], {
    updateIntervalInMs: options?.updateIntervalInMs,
    abortSignal: options?.abortSignal,
    getInitialResponse: () =>
      _createOrUpdateSend(context, resourceGroupName, diagnosticName, resource, options),
    resourceLocationConfig: "azure-async-operation",
  }) as PollerLike<OperationState<Diagnostic>, Diagnostic>;
}

export function _getSend(
  context: Client,
  resourceGroupName: string,
  diagnosticName: string,
  options: DiagnosticsGetOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/diagnostics/{diagnosticName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      diagnosticName: diagnosticName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).get({
    ...operationOptionsToRequestParameters(options),
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
  });
}

export async function _getDeserialize(result: PathUncheckedResponse): Promise<Diagnostic> {
  const expectedStatuses = ["200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return diagnosticDeserializer(result.body);
}

/** Returns details of specified Diagnostic resource. */
export async function get(
  context: Client,
  resourceGroupName: string,
  diagnosticName: string,
  options: DiagnosticsGetOptionalParams = { requestOptions: {} },
): Promise<Diagnostic> {
  const result = await _getSend(context, resourceGroupName, diagnosticName, options);
  return _getDeserialize(result);
}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/diagnostics/options.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { OperationOptions } from "@azure-rest/core-client";

/** Optional parameters. */
export interface DiagnosticsListBySubscriptionOptionalParams extends OperationOptions {}

/** Optional parameters. */
export interface DiagnosticsListByResourceGroupOptionalParams extends OperationOptions {}

/** Optional parameters. */
export interface DiagnosticsDeleteOptionalParams extends OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
}

/** Optional parameters. */
export interface DiagnosticsUpdateOptionalParams extends OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
}

/** Optional parameters. */
export interface DiagnosticsCreateOrUpdateOptionalParams extends OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
}

/** Optional parameters. */
export interface DiagnosticsGetOptionalParams extends OperationOptions {}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/dynamicSchemas/index.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

export { listBySchema, $delete, update, createOrUpdate, get } from "./operations.js";
export {
  DynamicSchemasListBySchemaOptionalParams,
  DynamicSchemasDeleteOptionalParams,
  DynamicSchemasUpdateOptionalParams,
  DynamicSchemasCreateOrUpdateOptionalParams,
  DynamicSchemasGetOptionalParams,
} from "./options.js";



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/dynamicSchemas/operations.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementContext as Client } from "../index.js";
import {
  DynamicSchema,
  dynamicSchemaSerializer,
  dynamicSchemaDeserializer,
  errorResponseDeserializer,
  _DynamicSchemaListResult,
  _dynamicSchemaListResultDeserializer,
} from "../../models/models.js";
import {
  PagedAsyncIterableIterator,
  buildPagedAsyncIterator,
} from "../../static-helpers/pagingHelpers.js";
import { getLongRunningPoller } from "../../static-helpers/pollingHelpers.js";
import { expandUrlTemplate } from "../../static-helpers/urlTemplate.js";
import {
  DynamicSchemasListBySchemaOptionalParams,
  DynamicSchemasDeleteOptionalParams,
  DynamicSchemasUpdateOptionalParams,
  DynamicSchemasCreateOrUpdateOptionalParams,
  DynamicSchemasGetOptionalParams,
} from "./options.js";
import {
  StreamableMethod,
  PathUncheckedResponse,
  createRestError,
  operationOptionsToRequestParameters,
} from "@azure-rest/core-client";
import { PollerLike, OperationState } from "@azure/core-lro";

export function _listBySchemaSend(
  context: Client,
  resourceGroupName: string,
  schemaName: string,
  options: DynamicSchemasListBySchemaOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      schemaName: schemaName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).get({
    ...operationOptionsToRequestParameters(options),
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
  });
}

export async function _listBySchemaDeserialize(
  result: PathUncheckedResponse,
): Promise<_DynamicSchemaListResult> {
  const expectedStatuses = ["200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return _dynamicSchemaListResultDeserializer(result.body);
}

/** List by Schema */
export function listBySchema(
  context: Client,
  resourceGroupName: string,
  schemaName: string,
  options: DynamicSchemasListBySchemaOptionalParams = { requestOptions: {} },
): PagedAsyncIterableIterator<DynamicSchema> {
  return buildPagedAsyncIterator(
    context,
    () => _listBySchemaSend(context, resourceGroupName, schemaName, options),
    _listBySchemaDeserialize,
    ["200"],
    { itemName: "value", nextLinkName: "nextLink" },
  );
}

export function _$deleteSend(
  context: Client,
  resourceGroupName: string,
  schemaName: string,
  dynamicSchemaName: string,
  options: DynamicSchemasDeleteOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas/{dynamicSchemaName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      schemaName: schemaName,
      dynamicSchemaName: dynamicSchemaName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).delete({ ...operationOptionsToRequestParameters(options) });
}

export async function _$deleteDeserialize(result: PathUncheckedResponse): Promise<void> {
  const expectedStatuses = ["202", "204", "200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return;
}

/** Delete a DynamicSchema Resource */
/**
 *  @fixme delete is a reserved word that cannot be used as an operation name.
 *         Please add @clientName("clientName") or @clientName("<JS-Specific-Name>", "javascript")
 *         to the operation to override the generated name.
 */
export function $delete(
  context: Client,
  resourceGroupName: string,
  schemaName: string,
  dynamicSchemaName: string,
  options: DynamicSchemasDeleteOptionalParams = { requestOptions: {} },
): PollerLike<OperationState<void>, void> {
  return getLongRunningPoller(context, _$deleteDeserialize, ["202", "204", "200"], {
    updateIntervalInMs: options?.updateIntervalInMs,
    abortSignal: options?.abortSignal,
    getInitialResponse: () =>
      _$deleteSend(context, resourceGroupName, schemaName, dynamicSchemaName, options),
    resourceLocationConfig: "location",
  }) as PollerLike<OperationState<void>, void>;
}

export function _updateSend(
  context: Client,
  resourceGroupName: string,
  schemaName: string,
  dynamicSchemaName: string,
  properties: DynamicSchema,
  options: DynamicSchemasUpdateOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas/{dynamicSchemaName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      schemaName: schemaName,
      dynamicSchemaName: dynamicSchemaName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).patch({
    ...operationOptionsToRequestParameters(options),
    contentType: "application/json",
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
    body: dynamicSchemaSerializer(properties),
  });
}

export async function _updateDeserialize(result: PathUncheckedResponse): Promise<DynamicSchema> {
  const expectedStatuses = ["200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return dynamicSchemaDeserializer(result.body);
}

/** update a DynamicSchema Resource */
export async function update(
  context: Client,
  resourceGroupName: string,
  schemaName: string,
  dynamicSchemaName: string,
  properties: DynamicSchema,
  options: DynamicSchemasUpdateOptionalParams = { requestOptions: {} },
): Promise<DynamicSchema> {
  const result = await _updateSend(
    context,
    resourceGroupName,
    schemaName,
    dynamicSchemaName,
    properties,
    options,
  );
  return _updateDeserialize(result);
}

export function _createOrUpdateSend(
  context: Client,
  resourceGroupName: string,
  schemaName: string,
  dynamicSchemaName: string,
  resource: DynamicSchema,
  options: DynamicSchemasCreateOrUpdateOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas/{dynamicSchemaName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      schemaName: schemaName,
      dynamicSchemaName: dynamicSchemaName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).put({
    ...operationOptionsToRequestParameters(options),
    contentType: "application/json",
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
    body: dynamicSchemaSerializer(resource),
  });
}

export async function _createOrUpdateDeserialize(
  result: PathUncheckedResponse,
): Promise<DynamicSchema> {
  const expectedStatuses = ["200", "201", "202"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return dynamicSchemaDeserializer(result.body);
}

/** Create or update a DynamicSchema Resource */
export function createOrUpdate(
  context: Client,
  resourceGroupName: string,
  schemaName: string,
  dynamicSchemaName: string,
  resource: DynamicSchema,
  options: DynamicSchemasCreateOrUpdateOptionalParams = { requestOptions: {} },
): PollerLike<OperationState<DynamicSchema>, DynamicSchema> {
  return getLongRunningPoller(context, _createOrUpdateDeserialize, ["200", "201", "202"], {
    updateIntervalInMs: options?.updateIntervalInMs,
    abortSignal: options?.abortSignal,
    getInitialResponse: () =>
      _createOrUpdateSend(
        context,
        resourceGroupName,
        schemaName,
        dynamicSchemaName,
        resource,
        options,
      ),
    resourceLocationConfig: "azure-async-operation",
  }) as PollerLike<OperationState<DynamicSchema>, DynamicSchema>;
}

export function _getSend(
  context: Client,
  resourceGroupName: string,
  schemaName: string,
  dynamicSchemaName: string,
  options: DynamicSchemasGetOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas/{dynamicSchemaName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      schemaName: schemaName,
      dynamicSchemaName: dynamicSchemaName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).get({
    ...operationOptionsToRequestParameters(options),
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
  });
}

export async function _getDeserialize(result: PathUncheckedResponse): Promise<DynamicSchema> {
  const expectedStatuses = ["200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return dynamicSchemaDeserializer(result.body);
}

/** Get a DynamicSchema Resource */
export async function get(
  context: Client,
  resourceGroupName: string,
  schemaName: string,
  dynamicSchemaName: string,
  options: DynamicSchemasGetOptionalParams = { requestOptions: {} },
): Promise<DynamicSchema> {
  const result = await _getSend(context, resourceGroupName, schemaName, dynamicSchemaName, options);
  return _getDeserialize(result);
}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/dynamicSchemas/options.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { OperationOptions } from "@azure-rest/core-client";

/** Optional parameters. */
export interface DynamicSchemasListBySchemaOptionalParams extends OperationOptions {}

/** Optional parameters. */
export interface DynamicSchemasDeleteOptionalParams extends OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
}

/** Optional parameters. */
export interface DynamicSchemasUpdateOptionalParams extends OperationOptions {}

/** Optional parameters. */
export interface DynamicSchemasCreateOrUpdateOptionalParams extends OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
}

/** Optional parameters. */
export interface DynamicSchemasGetOptionalParams extends OperationOptions {}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/dynamicSchemaVersions/index.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

export { listByDynamicSchema, $delete, update, createOrUpdate, get } from "./operations.js";
export {
  DynamicSchemaVersionsListByDynamicSchemaOptionalParams,
  DynamicSchemaVersionsDeleteOptionalParams,
  DynamicSchemaVersionsUpdateOptionalParams,
  DynamicSchemaVersionsCreateOrUpdateOptionalParams,
  DynamicSchemaVersionsGetOptionalParams,
} from "./options.js";



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/dynamicSchemaVersions/operations.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementContext as Client } from "../index.js";
import {
  errorResponseDeserializer,
  DynamicSchemaVersion,
  dynamicSchemaVersionSerializer,
  dynamicSchemaVersionDeserializer,
  _DynamicSchemaVersionListResult,
  _dynamicSchemaVersionListResultDeserializer,
} from "../../models/models.js";
import {
  PagedAsyncIterableIterator,
  buildPagedAsyncIterator,
} from "../../static-helpers/pagingHelpers.js";
import { getLongRunningPoller } from "../../static-helpers/pollingHelpers.js";
import { expandUrlTemplate } from "../../static-helpers/urlTemplate.js";
import {
  DynamicSchemaVersionsListByDynamicSchemaOptionalParams,
  DynamicSchemaVersionsDeleteOptionalParams,
  DynamicSchemaVersionsUpdateOptionalParams,
  DynamicSchemaVersionsCreateOrUpdateOptionalParams,
  DynamicSchemaVersionsGetOptionalParams,
} from "./options.js";
import {
  StreamableMethod,
  PathUncheckedResponse,
  createRestError,
  operationOptionsToRequestParameters,
} from "@azure-rest/core-client";
import { PollerLike, OperationState } from "@azure/core-lro";

export function _listByDynamicSchemaSend(
  context: Client,
  resourceGroupName: string,
  schemaName: string,
  dynamicSchemaName: string,
  options: DynamicSchemaVersionsListByDynamicSchemaOptionalParams = {
    requestOptions: {},
  },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas/{dynamicSchemaName}/versions{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      schemaName: schemaName,
      dynamicSchemaName: dynamicSchemaName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).get({
    ...operationOptionsToRequestParameters(options),
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
  });
}

export async function _listByDynamicSchemaDeserialize(
  result: PathUncheckedResponse,
): Promise<_DynamicSchemaVersionListResult> {
  const expectedStatuses = ["200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return _dynamicSchemaVersionListResultDeserializer(result.body);
}

/** List by Dynamic Schema */
export function listByDynamicSchema(
  context: Client,
  resourceGroupName: string,
  schemaName: string,
  dynamicSchemaName: string,
  options: DynamicSchemaVersionsListByDynamicSchemaOptionalParams = {
    requestOptions: {},
  },
): PagedAsyncIterableIterator<DynamicSchemaVersion> {
  return buildPagedAsyncIterator(
    context,
    () =>
      _listByDynamicSchemaSend(context, resourceGroupName, schemaName, dynamicSchemaName, options),
    _listByDynamicSchemaDeserialize,
    ["200"],
    { itemName: "value", nextLinkName: "nextLink" },
  );
}

export function _$deleteSend(
  context: Client,
  resourceGroupName: string,
  schemaName: string,
  dynamicSchemaName: string,
  dynamicSchemaVersionName: string,
  options: DynamicSchemaVersionsDeleteOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas/{dynamicSchemaName}/versions/{dynamicSchemaVersionName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      schemaName: schemaName,
      dynamicSchemaName: dynamicSchemaName,
      dynamicSchemaVersionName: dynamicSchemaVersionName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).delete({ ...operationOptionsToRequestParameters(options) });
}

export async function _$deleteDeserialize(result: PathUncheckedResponse): Promise<void> {
  const expectedStatuses = ["202", "204", "200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return;
}

/** Delete a Dynamic Schema Version Resource */
/**
 *  @fixme delete is a reserved word that cannot be used as an operation name.
 *         Please add @clientName("clientName") or @clientName("<JS-Specific-Name>", "javascript")
 *         to the operation to override the generated name.
 */
export function $delete(
  context: Client,
  resourceGroupName: string,
  schemaName: string,
  dynamicSchemaName: string,
  dynamicSchemaVersionName: string,
  options: DynamicSchemaVersionsDeleteOptionalParams = { requestOptions: {} },
): PollerLike<OperationState<void>, void> {
  return getLongRunningPoller(context, _$deleteDeserialize, ["202", "204", "200"], {
    updateIntervalInMs: options?.updateIntervalInMs,
    abortSignal: options?.abortSignal,
    getInitialResponse: () =>
      _$deleteSend(
        context,
        resourceGroupName,
        schemaName,
        dynamicSchemaName,
        dynamicSchemaVersionName,
        options,
      ),
    resourceLocationConfig: "location",
  }) as PollerLike<OperationState<void>, void>;
}

export function _updateSend(
  context: Client,
  resourceGroupName: string,
  schemaName: string,
  dynamicSchemaName: string,
  dynamicSchemaVersionName: string,
  properties: DynamicSchemaVersion,
  options: DynamicSchemaVersionsUpdateOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas/{dynamicSchemaName}/versions/{dynamicSchemaVersionName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      schemaName: schemaName,
      dynamicSchemaName: dynamicSchemaName,
      dynamicSchemaVersionName: dynamicSchemaVersionName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).patch({
    ...operationOptionsToRequestParameters(options),
    contentType: "application/json",
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
    body: dynamicSchemaVersionSerializer(properties),
  });
}

export async function _updateDeserialize(
  result: PathUncheckedResponse,
): Promise<DynamicSchemaVersion> {
  const expectedStatuses = ["200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return dynamicSchemaVersionDeserializer(result.body);
}

/** update a Dynamic Schema Version Resource */
export async function update(
  context: Client,
  resourceGroupName: string,
  schemaName: string,
  dynamicSchemaName: string,
  dynamicSchemaVersionName: string,
  properties: DynamicSchemaVersion,
  options: DynamicSchemaVersionsUpdateOptionalParams = { requestOptions: {} },
): Promise<DynamicSchemaVersion> {
  const result = await _updateSend(
    context,
    resourceGroupName,
    schemaName,
    dynamicSchemaName,
    dynamicSchemaVersionName,
    properties,
    options,
  );
  return _updateDeserialize(result);
}

export function _createOrUpdateSend(
  context: Client,
  resourceGroupName: string,
  schemaName: string,
  dynamicSchemaName: string,
  dynamicSchemaVersionName: string,
  resource: DynamicSchemaVersion,
  options: DynamicSchemaVersionsCreateOrUpdateOptionalParams = {
    requestOptions: {},
  },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas/{dynamicSchemaName}/versions/{dynamicSchemaVersionName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      schemaName: schemaName,
      dynamicSchemaName: dynamicSchemaName,
      dynamicSchemaVersionName: dynamicSchemaVersionName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).put({
    ...operationOptionsToRequestParameters(options),
    contentType: "application/json",
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
    body: dynamicSchemaVersionSerializer(resource),
  });
}

export async function _createOrUpdateDeserialize(
  result: PathUncheckedResponse,
): Promise<DynamicSchemaVersion> {
  const expectedStatuses = ["200", "201", "202"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return dynamicSchemaVersionDeserializer(result.body);
}

/** Create or update a Dynamic Schema Version Resource */
export function createOrUpdate(
  context: Client,
  resourceGroupName: string,
  schemaName: string,
  dynamicSchemaName: string,
  dynamicSchemaVersionName: string,
  resource: DynamicSchemaVersion,
  options: DynamicSchemaVersionsCreateOrUpdateOptionalParams = {
    requestOptions: {},
  },
): PollerLike<OperationState<DynamicSchemaVersion>, DynamicSchemaVersion> {
  return getLongRunningPoller(context, _createOrUpdateDeserialize, ["200", "201", "202"], {
    updateIntervalInMs: options?.updateIntervalInMs,
    abortSignal: options?.abortSignal,
    getInitialResponse: () =>
      _createOrUpdateSend(
        context,
        resourceGroupName,
        schemaName,
        dynamicSchemaName,
        dynamicSchemaVersionName,
        resource,
        options,
      ),
    resourceLocationConfig: "azure-async-operation",
  }) as PollerLike<OperationState<DynamicSchemaVersion>, DynamicSchemaVersion>;
}

export function _getSend(
  context: Client,
  resourceGroupName: string,
  schemaName: string,
  dynamicSchemaName: string,
  dynamicSchemaVersionName: string,
  options: DynamicSchemaVersionsGetOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas/{dynamicSchemaName}/versions/{dynamicSchemaVersionName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      schemaName: schemaName,
      dynamicSchemaName: dynamicSchemaName,
      dynamicSchemaVersionName: dynamicSchemaVersionName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).get({
    ...operationOptionsToRequestParameters(options),
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
  });
}

export async function _getDeserialize(
  result: PathUncheckedResponse,
): Promise<DynamicSchemaVersion> {
  const expectedStatuses = ["200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return dynamicSchemaVersionDeserializer(result.body);
}

/** Get a Dynamic Schema Version Resource */
export async function get(
  context: Client,
  resourceGroupName: string,
  schemaName: string,
  dynamicSchemaName: string,
  dynamicSchemaVersionName: string,
  options: DynamicSchemaVersionsGetOptionalParams = { requestOptions: {} },
): Promise<DynamicSchemaVersion> {
  const result = await _getSend(
    context,
    resourceGroupName,
    schemaName,
    dynamicSchemaName,
    dynamicSchemaVersionName,
    options,
  );
  return _getDeserialize(result);
}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/dynamicSchemaVersions/options.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { OperationOptions } from "@azure-rest/core-client";

/** Optional parameters. */
export interface DynamicSchemaVersionsListByDynamicSchemaOptionalParams extends OperationOptions {}

/** Optional parameters. */
export interface DynamicSchemaVersionsDeleteOptionalParams extends OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
}

/** Optional parameters. */
export interface DynamicSchemaVersionsUpdateOptionalParams extends OperationOptions {}

/** Optional parameters. */
export interface DynamicSchemaVersionsCreateOrUpdateOptionalParams extends OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
}

/** Optional parameters. */
export interface DynamicSchemaVersionsGetOptionalParams extends OperationOptions {}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/executions/index.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

export { listByWorkflowVersion, $delete, update, createOrUpdate, get } from "./operations.js";
export {
  ExecutionsListByWorkflowVersionOptionalParams,
  ExecutionsDeleteOptionalParams,
  ExecutionsUpdateOptionalParams,
  ExecutionsCreateOrUpdateOptionalParams,
  ExecutionsGetOptionalParams,
} from "./options.js";



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/executions/operations.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementContext as Client } from "../index.js";
import {
  errorResponseDeserializer,
  Execution,
  executionSerializer,
  executionDeserializer,
  _ExecutionListResult,
  _executionListResultDeserializer,
} from "../../models/models.js";
import {
  PagedAsyncIterableIterator,
  buildPagedAsyncIterator,
} from "../../static-helpers/pagingHelpers.js";
import { getLongRunningPoller } from "../../static-helpers/pollingHelpers.js";
import { expandUrlTemplate } from "../../static-helpers/urlTemplate.js";
import {
  ExecutionsListByWorkflowVersionOptionalParams,
  ExecutionsDeleteOptionalParams,
  ExecutionsUpdateOptionalParams,
  ExecutionsCreateOrUpdateOptionalParams,
  ExecutionsGetOptionalParams,
} from "./options.js";
import {
  StreamableMethod,
  PathUncheckedResponse,
  createRestError,
  operationOptionsToRequestParameters,
} from "@azure-rest/core-client";
import { PollerLike, OperationState } from "@azure/core-lro";

export function _listByWorkflowVersionSend(
  context: Client,
  resourceGroupName: string,
  contextName: string,
  workflowName: string,
  versionName: string,
  options: ExecutionsListByWorkflowVersionOptionalParams = {
    requestOptions: {},
  },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions/{versionName}/executions{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      contextName: contextName,
      workflowName: workflowName,
      versionName: versionName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).get({
    ...operationOptionsToRequestParameters(options),
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
  });
}

export async function _listByWorkflowVersionDeserialize(
  result: PathUncheckedResponse,
): Promise<_ExecutionListResult> {
  const expectedStatuses = ["200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return _executionListResultDeserializer(result.body);
}

/** List Execution Resources */
export function listByWorkflowVersion(
  context: Client,
  resourceGroupName: string,
  contextName: string,
  workflowName: string,
  versionName: string,
  options: ExecutionsListByWorkflowVersionOptionalParams = {
    requestOptions: {},
  },
): PagedAsyncIterableIterator<Execution> {
  return buildPagedAsyncIterator(
    context,
    () =>
      _listByWorkflowVersionSend(
        context,
        resourceGroupName,
        contextName,
        workflowName,
        versionName,
        options,
      ),
    _listByWorkflowVersionDeserialize,
    ["200"],
    { itemName: "value", nextLinkName: "nextLink" },
  );
}

export function _$deleteSend(
  context: Client,
  resourceGroupName: string,
  contextName: string,
  workflowName: string,
  versionName: string,
  executionName: string,
  options: ExecutionsDeleteOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions/{versionName}/executions/{executionName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      contextName: contextName,
      workflowName: workflowName,
      versionName: versionName,
      executionName: executionName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).delete({ ...operationOptionsToRequestParameters(options) });
}

export async function _$deleteDeserialize(result: PathUncheckedResponse): Promise<void> {
  const expectedStatuses = ["202", "204", "200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return;
}

/** Delete Execution Resource */
/**
 *  @fixme delete is a reserved word that cannot be used as an operation name.
 *         Please add @clientName("clientName") or @clientName("<JS-Specific-Name>", "javascript")
 *         to the operation to override the generated name.
 */
export function $delete(
  context: Client,
  resourceGroupName: string,
  contextName: string,
  workflowName: string,
  versionName: string,
  executionName: string,
  options: ExecutionsDeleteOptionalParams = { requestOptions: {} },
): PollerLike<OperationState<void>, void> {
  return getLongRunningPoller(context, _$deleteDeserialize, ["202", "204", "200"], {
    updateIntervalInMs: options?.updateIntervalInMs,
    abortSignal: options?.abortSignal,
    getInitialResponse: () =>
      _$deleteSend(
        context,
        resourceGroupName,
        contextName,
        workflowName,
        versionName,
        executionName,
        options,
      ),
    resourceLocationConfig: "location",
  }) as PollerLike<OperationState<void>, void>;
}

export function _updateSend(
  context: Client,
  resourceGroupName: string,
  contextName: string,
  workflowName: string,
  versionName: string,
  executionName: string,
  properties: Execution,
  options: ExecutionsUpdateOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions/{versionName}/executions/{executionName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      contextName: contextName,
      workflowName: workflowName,
      versionName: versionName,
      executionName: executionName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).patch({
    ...operationOptionsToRequestParameters(options),
    contentType: "application/json",
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
    body: executionSerializer(properties),
  });
}

export async function _updateDeserialize(result: PathUncheckedResponse): Promise<Execution> {
  const expectedStatuses = ["200", "202"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return executionDeserializer(result.body);
}

/** update an Execution Resource */
export function update(
  context: Client,
  resourceGroupName: string,
  contextName: string,
  workflowName: string,
  versionName: string,
  executionName: string,
  properties: Execution,
  options: ExecutionsUpdateOptionalParams = { requestOptions: {} },
): PollerLike<OperationState<Execution>, Execution> {
  return getLongRunningPoller(context, _updateDeserialize, ["200", "202"], {
    updateIntervalInMs: options?.updateIntervalInMs,
    abortSignal: options?.abortSignal,
    getInitialResponse: () =>
      _updateSend(
        context,
        resourceGroupName,
        contextName,
        workflowName,
        versionName,
        executionName,
        properties,
        options,
      ),
    resourceLocationConfig: "location",
  }) as PollerLike<OperationState<Execution>, Execution>;
}

export function _createOrUpdateSend(
  context: Client,
  resourceGroupName: string,
  contextName: string,
  workflowName: string,
  versionName: string,
  executionName: string,
  resource: Execution,
  options: ExecutionsCreateOrUpdateOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions/{versionName}/executions/{executionName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      contextName: contextName,
      workflowName: workflowName,
      versionName: versionName,
      executionName: executionName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).put({
    ...operationOptionsToRequestParameters(options),
    contentType: "application/json",
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
    body: executionSerializer(resource),
  });
}

export async function _createOrUpdateDeserialize(
  result: PathUncheckedResponse,
): Promise<Execution> {
  const expectedStatuses = ["200", "201", "202"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return executionDeserializer(result.body);
}

/** Create or update Execution Resource */
export function createOrUpdate(
  context: Client,
  resourceGroupName: string,
  contextName: string,
  workflowName: string,
  versionName: string,
  executionName: string,
  resource: Execution,
  options: ExecutionsCreateOrUpdateOptionalParams = { requestOptions: {} },
): PollerLike<OperationState<Execution>, Execution> {
  return getLongRunningPoller(context, _createOrUpdateDeserialize, ["200", "201", "202"], {
    updateIntervalInMs: options?.updateIntervalInMs,
    abortSignal: options?.abortSignal,
    getInitialResponse: () =>
      _createOrUpdateSend(
        context,
        resourceGroupName,
        contextName,
        workflowName,
        versionName,
        executionName,
        resource,
        options,
      ),
    resourceLocationConfig: "azure-async-operation",
  }) as PollerLike<OperationState<Execution>, Execution>;
}

export function _getSend(
  context: Client,
  resourceGroupName: string,
  contextName: string,
  workflowName: string,
  versionName: string,
  executionName: string,
  options: ExecutionsGetOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions/{versionName}/executions/{executionName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      contextName: contextName,
      workflowName: workflowName,
      versionName: versionName,
      executionName: executionName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).get({
    ...operationOptionsToRequestParameters(options),
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
  });
}

export async function _getDeserialize(result: PathUncheckedResponse): Promise<Execution> {
  const expectedStatuses = ["200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return executionDeserializer(result.body);
}

/** Get Execution Resource */
export async function get(
  context: Client,
  resourceGroupName: string,
  contextName: string,
  workflowName: string,
  versionName: string,
  executionName: string,
  options: ExecutionsGetOptionalParams = { requestOptions: {} },
): Promise<Execution> {
  const result = await _getSend(
    context,
    resourceGroupName,
    contextName,
    workflowName,
    versionName,
    executionName,
    options,
  );
  return _getDeserialize(result);
}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/executions/options.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { OperationOptions } from "@azure-rest/core-client";

/** Optional parameters. */
export interface ExecutionsListByWorkflowVersionOptionalParams extends OperationOptions {}

/** Optional parameters. */
export interface ExecutionsDeleteOptionalParams extends OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
}

/** Optional parameters. */
export interface ExecutionsUpdateOptionalParams extends OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
}

/** Optional parameters. */
export interface ExecutionsCreateOrUpdateOptionalParams extends OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
}

/** Optional parameters. */
export interface ExecutionsGetOptionalParams extends OperationOptions {}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/instanceHistories/index.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

export { listByInstance, get } from "./operations.js";
export {
  InstanceHistoriesListByInstanceOptionalParams,
  InstanceHistoriesGetOptionalParams,
} from "./options.js";



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/instanceHistories/operations.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementContext as Client } from "../index.js";
import {
  errorResponseDeserializer,
  InstanceHistory,
  instanceHistoryDeserializer,
  _InstanceHistoryListResult,
  _instanceHistoryListResultDeserializer,
} from "../../models/models.js";
import {
  PagedAsyncIterableIterator,
  buildPagedAsyncIterator,
} from "../../static-helpers/pagingHelpers.js";
import { expandUrlTemplate } from "../../static-helpers/urlTemplate.js";
import {
  InstanceHistoriesListByInstanceOptionalParams,
  InstanceHistoriesGetOptionalParams,
} from "./options.js";
import {
  StreamableMethod,
  PathUncheckedResponse,
  createRestError,
  operationOptionsToRequestParameters,
} from "@azure-rest/core-client";

export function _listByInstanceSend(
  context: Client,
  resourceGroupName: string,
  targetName: string,
  solutionName: string,
  instanceName: string,
  options: InstanceHistoriesListByInstanceOptionalParams = {
    requestOptions: {},
  },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances/{instanceName}/histories{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      targetName: targetName,
      solutionName: solutionName,
      instanceName: instanceName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).get({
    ...operationOptionsToRequestParameters(options),
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
  });
}

export async function _listByInstanceDeserialize(
  result: PathUncheckedResponse,
): Promise<_InstanceHistoryListResult> {
  const expectedStatuses = ["200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return _instanceHistoryListResultDeserializer(result.body);
}

/** List InstanceHistory Resources */
export function listByInstance(
  context: Client,
  resourceGroupName: string,
  targetName: string,
  solutionName: string,
  instanceName: string,
  options: InstanceHistoriesListByInstanceOptionalParams = {
    requestOptions: {},
  },
): PagedAsyncIterableIterator<InstanceHistory> {
  return buildPagedAsyncIterator(
    context,
    () =>
      _listByInstanceSend(
        context,
        resourceGroupName,
        targetName,
        solutionName,
        instanceName,
        options,
      ),
    _listByInstanceDeserialize,
    ["200"],
    { itemName: "value", nextLinkName: "nextLink" },
  );
}

export function _getSend(
  context: Client,
  resourceGroupName: string,
  targetName: string,
  solutionName: string,
  instanceName: string,
  instanceHistoryName: string,
  options: InstanceHistoriesGetOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances/{instanceName}/histories/{instanceHistoryName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      targetName: targetName,
      solutionName: solutionName,
      instanceName: instanceName,
      instanceHistoryName: instanceHistoryName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).get({
    ...operationOptionsToRequestParameters(options),
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
  });
}

export async function _getDeserialize(result: PathUncheckedResponse): Promise<InstanceHistory> {
  const expectedStatuses = ["200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return instanceHistoryDeserializer(result.body);
}

/** Get InstanceHistory Resource */
export async function get(
  context: Client,
  resourceGroupName: string,
  targetName: string,
  solutionName: string,
  instanceName: string,
  instanceHistoryName: string,
  options: InstanceHistoriesGetOptionalParams = { requestOptions: {} },
): Promise<InstanceHistory> {
  const result = await _getSend(
    context,
    resourceGroupName,
    targetName,
    solutionName,
    instanceName,
    instanceHistoryName,
    options,
  );
  return _getDeserialize(result);
}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/instanceHistories/options.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { OperationOptions } from "@azure-rest/core-client";

/** Optional parameters. */
export interface InstanceHistoriesListByInstanceOptionalParams extends OperationOptions {}

/** Optional parameters. */
export interface InstanceHistoriesGetOptionalParams extends OperationOptions {}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/instances/index.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

export { listBySolution, $delete, update, createOrUpdate, get } from "./operations.js";
export {
  InstancesListBySolutionOptionalParams,
  InstancesDeleteOptionalParams,
  InstancesUpdateOptionalParams,
  InstancesCreateOrUpdateOptionalParams,
  InstancesGetOptionalParams,
} from "./options.js";



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/instances/operations.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementContext as Client } from "../index.js";
import {
  errorResponseDeserializer,
  Instance,
  instanceSerializer,
  instanceDeserializer,
  _InstanceListResult,
  _instanceListResultDeserializer,
} from "../../models/models.js";
import {
  PagedAsyncIterableIterator,
  buildPagedAsyncIterator,
} from "../../static-helpers/pagingHelpers.js";
import { getLongRunningPoller } from "../../static-helpers/pollingHelpers.js";
import { expandUrlTemplate } from "../../static-helpers/urlTemplate.js";
import {
  InstancesListBySolutionOptionalParams,
  InstancesDeleteOptionalParams,
  InstancesUpdateOptionalParams,
  InstancesCreateOrUpdateOptionalParams,
  InstancesGetOptionalParams,
} from "./options.js";
import {
  StreamableMethod,
  PathUncheckedResponse,
  createRestError,
  operationOptionsToRequestParameters,
} from "@azure-rest/core-client";
import { PollerLike, OperationState } from "@azure/core-lro";

export function _listBySolutionSend(
  context: Client,
  resourceGroupName: string,
  targetName: string,
  solutionName: string,
  options: InstancesListBySolutionOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      targetName: targetName,
      solutionName: solutionName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).get({
    ...operationOptionsToRequestParameters(options),
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
  });
}

export async function _listBySolutionDeserialize(
  result: PathUncheckedResponse,
): Promise<_InstanceListResult> {
  const expectedStatuses = ["200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return _instanceListResultDeserializer(result.body);
}

/** List Instance Resources */
export function listBySolution(
  context: Client,
  resourceGroupName: string,
  targetName: string,
  solutionName: string,
  options: InstancesListBySolutionOptionalParams = { requestOptions: {} },
): PagedAsyncIterableIterator<Instance> {
  return buildPagedAsyncIterator(
    context,
    () => _listBySolutionSend(context, resourceGroupName, targetName, solutionName, options),
    _listBySolutionDeserialize,
    ["200"],
    { itemName: "value", nextLinkName: "nextLink" },
  );
}

export function _$deleteSend(
  context: Client,
  resourceGroupName: string,
  targetName: string,
  solutionName: string,
  instanceName: string,
  options: InstancesDeleteOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances/{instanceName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      targetName: targetName,
      solutionName: solutionName,
      instanceName: instanceName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).delete({ ...operationOptionsToRequestParameters(options) });
}

export async function _$deleteDeserialize(result: PathUncheckedResponse): Promise<void> {
  const expectedStatuses = ["202", "204", "200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return;
}

/** Delete Instance Resource */
/**
 *  @fixme delete is a reserved word that cannot be used as an operation name.
 *         Please add @clientName("clientName") or @clientName("<JS-Specific-Name>", "javascript")
 *         to the operation to override the generated name.
 */
export function $delete(
  context: Client,
  resourceGroupName: string,
  targetName: string,
  solutionName: string,
  instanceName: string,
  options: InstancesDeleteOptionalParams = { requestOptions: {} },
): PollerLike<OperationState<void>, void> {
  return getLongRunningPoller(context, _$deleteDeserialize, ["202", "204", "200"], {
    updateIntervalInMs: options?.updateIntervalInMs,
    abortSignal: options?.abortSignal,
    getInitialResponse: () =>
      _$deleteSend(context, resourceGroupName, targetName, solutionName, instanceName, options),
    resourceLocationConfig: "location",
  }) as PollerLike<OperationState<void>, void>;
}

export function _updateSend(
  context: Client,
  resourceGroupName: string,
  targetName: string,
  solutionName: string,
  instanceName: string,
  properties: Instance,
  options: InstancesUpdateOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances/{instanceName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      targetName: targetName,
      solutionName: solutionName,
      instanceName: instanceName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).patch({
    ...operationOptionsToRequestParameters(options),
    contentType: "application/json",
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
    body: instanceSerializer(properties),
  });
}

export async function _updateDeserialize(result: PathUncheckedResponse): Promise<Instance> {
  const expectedStatuses = ["200", "202"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return instanceDeserializer(result.body);
}

/** Update an Instance Resource */
export function update(
  context: Client,
  resourceGroupName: string,
  targetName: string,
  solutionName: string,
  instanceName: string,
  properties: Instance,
  options: InstancesUpdateOptionalParams = { requestOptions: {} },
): PollerLike<OperationState<Instance>, Instance> {
  return getLongRunningPoller(context, _updateDeserialize, ["200", "202"], {
    updateIntervalInMs: options?.updateIntervalInMs,
    abortSignal: options?.abortSignal,
    getInitialResponse: () =>
      _updateSend(
        context,
        resourceGroupName,
        targetName,
        solutionName,
        instanceName,
        properties,
        options,
      ),
    resourceLocationConfig: "location",
  }) as PollerLike<OperationState<Instance>, Instance>;
}

export function _createOrUpdateSend(
  context: Client,
  resourceGroupName: string,
  targetName: string,
  solutionName: string,
  instanceName: string,
  resource: Instance,
  options: InstancesCreateOrUpdateOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances/{instanceName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      targetName: targetName,
      solutionName: solutionName,
      instanceName: instanceName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).put({
    ...operationOptionsToRequestParameters(options),
    contentType: "application/json",
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
    body: instanceSerializer(resource),
  });
}

export async function _createOrUpdateDeserialize(result: PathUncheckedResponse): Promise<Instance> {
  const expectedStatuses = ["200", "201", "202"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return instanceDeserializer(result.body);
}

/** Create or update Instance Resource */
export function createOrUpdate(
  context: Client,
  resourceGroupName: string,
  targetName: string,
  solutionName: string,
  instanceName: string,
  resource: Instance,
  options: InstancesCreateOrUpdateOptionalParams = { requestOptions: {} },
): PollerLike<OperationState<Instance>, Instance> {
  return getLongRunningPoller(context, _createOrUpdateDeserialize, ["200", "201", "202"], {
    updateIntervalInMs: options?.updateIntervalInMs,
    abortSignal: options?.abortSignal,
    getInitialResponse: () =>
      _createOrUpdateSend(
        context,
        resourceGroupName,
        targetName,
        solutionName,
        instanceName,
        resource,
        options,
      ),
    resourceLocationConfig: "azure-async-operation",
  }) as PollerLike<OperationState<Instance>, Instance>;
}

export function _getSend(
  context: Client,
  resourceGroupName: string,
  targetName: string,
  solutionName: string,
  instanceName: string,
  options: InstancesGetOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances/{instanceName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      targetName: targetName,
      solutionName: solutionName,
      instanceName: instanceName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).get({
    ...operationOptionsToRequestParameters(options),
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
  });
}

export async function _getDeserialize(result: PathUncheckedResponse): Promise<Instance> {
  const expectedStatuses = ["200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return instanceDeserializer(result.body);
}

/** Get Instance Resource */
export async function get(
  context: Client,
  resourceGroupName: string,
  targetName: string,
  solutionName: string,
  instanceName: string,
  options: InstancesGetOptionalParams = { requestOptions: {} },
): Promise<Instance> {
  const result = await _getSend(
    context,
    resourceGroupName,
    targetName,
    solutionName,
    instanceName,
    options,
  );
  return _getDeserialize(result);
}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/instances/options.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { OperationOptions } from "@azure-rest/core-client";

/** Optional parameters. */
export interface InstancesListBySolutionOptionalParams extends OperationOptions {}

/** Optional parameters. */
export interface InstancesDeleteOptionalParams extends OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
}

/** Optional parameters. */
export interface InstancesUpdateOptionalParams extends OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
}

/** Optional parameters. */
export interface InstancesCreateOrUpdateOptionalParams extends OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
}

/** Optional parameters. */
export interface InstancesGetOptionalParams extends OperationOptions {}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/jobs/index.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

export { listByTarget, get } from "./operations.js";
export { JobsListByTargetOptionalParams, JobsGetOptionalParams } from "./options.js";



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/jobs/operations.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementContext as Client } from "../index.js";
import {
  errorResponseDeserializer,
  Job,
  jobDeserializer,
  _JobListResult,
  _jobListResultDeserializer,
} from "../../models/models.js";
import {
  PagedAsyncIterableIterator,
  buildPagedAsyncIterator,
} from "../../static-helpers/pagingHelpers.js";
import { expandUrlTemplate } from "../../static-helpers/urlTemplate.js";
import { JobsListByTargetOptionalParams, JobsGetOptionalParams } from "./options.js";
import {
  StreamableMethod,
  PathUncheckedResponse,
  createRestError,
  operationOptionsToRequestParameters,
} from "@azure-rest/core-client";

export function _listByTargetSend(
  context: Client,
  resourceUri: string,
  options: JobsListByTargetOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/{+resourceUri}/providers/Microsoft.Edge/jobs{?api%2Dversion}",
    {
      resourceUri: resourceUri,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).get({
    ...operationOptionsToRequestParameters(options),
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
  });
}

export async function _listByTargetDeserialize(
  result: PathUncheckedResponse,
): Promise<_JobListResult> {
  const expectedStatuses = ["200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return _jobListResultDeserializer(result.body);
}

/** List Jobs by parent resource */
export function listByTarget(
  context: Client,
  resourceUri: string,
  options: JobsListByTargetOptionalParams = { requestOptions: {} },
): PagedAsyncIterableIterator<Job> {
  return buildPagedAsyncIterator(
    context,
    () => _listByTargetSend(context, resourceUri, options),
    _listByTargetDeserialize,
    ["200"],
    { itemName: "value", nextLinkName: "nextLink" },
  );
}

export function _getSend(
  context: Client,
  resourceUri: string,
  jobName: string,
  options: JobsGetOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/{+resourceUri}/providers/Microsoft.Edge/jobs/{jobName}{?api%2Dversion}",
    {
      resourceUri: resourceUri,
      jobName: jobName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).get({
    ...operationOptionsToRequestParameters(options),
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
  });
}

export async function _getDeserialize(result: PathUncheckedResponse): Promise<Job> {
  const expectedStatuses = ["200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return jobDeserializer(result.body);
}

/** Get a Job resource */
export async function get(
  context: Client,
  resourceUri: string,
  jobName: string,
  options: JobsGetOptionalParams = { requestOptions: {} },
): Promise<Job> {
  const result = await _getSend(context, resourceUri, jobName, options);
  return _getDeserialize(result);
}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/jobs/options.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { OperationOptions } from "@azure-rest/core-client";

/** Optional parameters. */
export interface JobsListByTargetOptionalParams extends OperationOptions {}

/** Optional parameters. */
export interface JobsGetOptionalParams extends OperationOptions {}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/schemaReferences/index.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

export { listByResourceGroup, get } from "./operations.js";
export {
  SchemaReferencesListByResourceGroupOptionalParams,
  SchemaReferencesGetOptionalParams,
} from "./options.js";



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/schemaReferences/operations.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementContext as Client } from "../index.js";
import {
  errorResponseDeserializer,
  SchemaReference,
  schemaReferenceDeserializer,
  _SchemaReferenceListResult,
  _schemaReferenceListResultDeserializer,
} from "../../models/models.js";
import {
  PagedAsyncIterableIterator,
  buildPagedAsyncIterator,
} from "../../static-helpers/pagingHelpers.js";
import { expandUrlTemplate } from "../../static-helpers/urlTemplate.js";
import {
  SchemaReferencesListByResourceGroupOptionalParams,
  SchemaReferencesGetOptionalParams,
} from "./options.js";
import {
  StreamableMethod,
  PathUncheckedResponse,
  createRestError,
  operationOptionsToRequestParameters,
} from "@azure-rest/core-client";

export function _listByResourceGroupSend(
  context: Client,
  resourceUri: string,
  options: SchemaReferencesListByResourceGroupOptionalParams = {
    requestOptions: {},
  },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/{+resourceUri}/providers/Microsoft.Edge/schemaReferences{?api%2Dversion}",
    {
      resourceUri: resourceUri,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).get({
    ...operationOptionsToRequestParameters(options),
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
  });
}

export async function _listByResourceGroupDeserialize(
  result: PathUncheckedResponse,
): Promise<_SchemaReferenceListResult> {
  const expectedStatuses = ["200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return _schemaReferenceListResultDeserializer(result.body);
}

/** List by specified resource group */
export function listByResourceGroup(
  context: Client,
  resourceUri: string,
  options: SchemaReferencesListByResourceGroupOptionalParams = {
    requestOptions: {},
  },
): PagedAsyncIterableIterator<SchemaReference> {
  return buildPagedAsyncIterator(
    context,
    () => _listByResourceGroupSend(context, resourceUri, options),
    _listByResourceGroupDeserialize,
    ["200"],
    { itemName: "value", nextLinkName: "nextLink" },
  );
}

export function _getSend(
  context: Client,
  resourceUri: string,
  schemaReferenceName: string,
  options: SchemaReferencesGetOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/{+resourceUri}/providers/Microsoft.Edge/schemaReferences/{schemaReferenceName}{?api%2Dversion}",
    {
      resourceUri: resourceUri,
      schemaReferenceName: schemaReferenceName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).get({
    ...operationOptionsToRequestParameters(options),
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
  });
}

export async function _getDeserialize(result: PathUncheckedResponse): Promise<SchemaReference> {
  const expectedStatuses = ["200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return schemaReferenceDeserializer(result.body);
}

/** Get a Schema Reference Resource */
export async function get(
  context: Client,
  resourceUri: string,
  schemaReferenceName: string,
  options: SchemaReferencesGetOptionalParams = { requestOptions: {} },
): Promise<SchemaReference> {
  const result = await _getSend(context, resourceUri, schemaReferenceName, options);
  return _getDeserialize(result);
}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/schemaReferences/options.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { OperationOptions } from "@azure-rest/core-client";

/** Optional parameters. */
export interface SchemaReferencesListByResourceGroupOptionalParams extends OperationOptions {}

/** Optional parameters. */
export interface SchemaReferencesGetOptionalParams extends OperationOptions {}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/schemas/index.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

export {
  listBySubscription,
  listByResourceGroup,
  removeVersion,
  createVersion,
  $delete,
  update,
  createOrUpdate,
  get,
} from "./operations.js";
export {
  SchemasListBySubscriptionOptionalParams,
  SchemasListByResourceGroupOptionalParams,
  SchemasRemoveVersionOptionalParams,
  SchemasCreateVersionOptionalParams,
  SchemasDeleteOptionalParams,
  SchemasUpdateOptionalParams,
  SchemasCreateOrUpdateOptionalParams,
  SchemasGetOptionalParams,
} from "./options.js";



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/schemas/operations.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementContext as Client } from "../index.js";
import {
  errorResponseDeserializer,
  Schema,
  schemaSerializer,
  schemaDeserializer,
  SchemaUpdate,
  schemaUpdateSerializer,
  SchemaVersionWithUpdateType,
  schemaVersionWithUpdateTypeSerializer,
  SchemaVersion,
  schemaVersionDeserializer,
  VersionParameter,
  versionParameterSerializer,
  RemoveVersionResponse,
  removeVersionResponseDeserializer,
  _SchemaListResult,
  _schemaListResultDeserializer,
} from "../../models/models.js";
import {
  PagedAsyncIterableIterator,
  buildPagedAsyncIterator,
} from "../../static-helpers/pagingHelpers.js";
import { getLongRunningPoller } from "../../static-helpers/pollingHelpers.js";
import { expandUrlTemplate } from "../../static-helpers/urlTemplate.js";
import {
  SchemasListBySubscriptionOptionalParams,
  SchemasListByResourceGroupOptionalParams,
  SchemasRemoveVersionOptionalParams,
  SchemasCreateVersionOptionalParams,
  SchemasDeleteOptionalParams,
  SchemasUpdateOptionalParams,
  SchemasCreateOrUpdateOptionalParams,
  SchemasGetOptionalParams,
} from "./options.js";
import {
  StreamableMethod,
  PathUncheckedResponse,
  createRestError,
  operationOptionsToRequestParameters,
} from "@azure-rest/core-client";
import { PollerLike, OperationState } from "@azure/core-lro";

export function _listBySubscriptionSend(
  context: Client,
  options: SchemasListBySubscriptionOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/providers/Microsoft.Edge/schemas{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).get({
    ...operationOptionsToRequestParameters(options),
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
  });
}

export async function _listBySubscriptionDeserialize(
  result: PathUncheckedResponse,
): Promise<_SchemaListResult> {
  const expectedStatuses = ["200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return _schemaListResultDeserializer(result.body);
}

/** List by subscription */
export function listBySubscription(
  context: Client,
  options: SchemasListBySubscriptionOptionalParams = { requestOptions: {} },
): PagedAsyncIterableIterator<Schema> {
  return buildPagedAsyncIterator(
    context,
    () => _listBySubscriptionSend(context, options),
    _listBySubscriptionDeserialize,
    ["200"],
    { itemName: "value", nextLinkName: "nextLink" },
  );
}

export function _listByResourceGroupSend(
  context: Client,
  resourceGroupName: string,
  options: SchemasListByResourceGroupOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).get({
    ...operationOptionsToRequestParameters(options),
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
  });
}

export async function _listByResourceGroupDeserialize(
  result: PathUncheckedResponse,
): Promise<_SchemaListResult> {
  const expectedStatuses = ["200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return _schemaListResultDeserializer(result.body);
}

/** List by specified resource group */
export function listByResourceGroup(
  context: Client,
  resourceGroupName: string,
  options: SchemasListByResourceGroupOptionalParams = { requestOptions: {} },
): PagedAsyncIterableIterator<Schema> {
  return buildPagedAsyncIterator(
    context,
    () => _listByResourceGroupSend(context, resourceGroupName, options),
    _listByResourceGroupDeserialize,
    ["200"],
    { itemName: "value", nextLinkName: "nextLink" },
  );
}

export function _removeVersionSend(
  context: Client,
  resourceGroupName: string,
  schemaName: string,
  body: VersionParameter,
  options: SchemasRemoveVersionOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/removeVersion{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      schemaName: schemaName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).post({
    ...operationOptionsToRequestParameters(options),
    contentType: "application/json",
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
    body: versionParameterSerializer(body),
  });
}

export async function _removeVersionDeserialize(
  result: PathUncheckedResponse,
): Promise<RemoveVersionResponse> {
  const expectedStatuses = ["200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return removeVersionResponseDeserializer(result.body);
}

/** Remove Schema Version Resource */
export async function removeVersion(
  context: Client,
  resourceGroupName: string,
  schemaName: string,
  body: VersionParameter,
  options: SchemasRemoveVersionOptionalParams = { requestOptions: {} },
): Promise<RemoveVersionResponse> {
  const result = await _removeVersionSend(context, resourceGroupName, schemaName, body, options);
  return _removeVersionDeserialize(result);
}

export function _createVersionSend(
  context: Client,
  resourceGroupName: string,
  schemaName: string,
  body: SchemaVersionWithUpdateType,
  options: SchemasCreateVersionOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/createVersion{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      schemaName: schemaName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).post({
    ...operationOptionsToRequestParameters(options),
    contentType: "application/json",
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
    body: schemaVersionWithUpdateTypeSerializer(body),
  });
}

export async function _createVersionDeserialize(
  result: PathUncheckedResponse,
): Promise<SchemaVersion> {
  const expectedStatuses = ["202", "200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return schemaVersionDeserializer(result.body);
}

/** Create a Schema Version Resource */
export function createVersion(
  context: Client,
  resourceGroupName: string,
  schemaName: string,
  body: SchemaVersionWithUpdateType,
  options: SchemasCreateVersionOptionalParams = { requestOptions: {} },
): PollerLike<OperationState<SchemaVersion>, SchemaVersion> {
  return getLongRunningPoller(context, _createVersionDeserialize, ["202", "200"], {
    updateIntervalInMs: options?.updateIntervalInMs,
    abortSignal: options?.abortSignal,
    getInitialResponse: () =>
      _createVersionSend(context, resourceGroupName, schemaName, body, options),
    resourceLocationConfig: "location",
  }) as PollerLike<OperationState<SchemaVersion>, SchemaVersion>;
}

export function _$deleteSend(
  context: Client,
  resourceGroupName: string,
  schemaName: string,
  options: SchemasDeleteOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      schemaName: schemaName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).delete({ ...operationOptionsToRequestParameters(options) });
}

export async function _$deleteDeserialize(result: PathUncheckedResponse): Promise<void> {
  const expectedStatuses = ["202", "204", "200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return;
}

/** Delete a Schema Resource */
/**
 *  @fixme delete is a reserved word that cannot be used as an operation name.
 *         Please add @clientName("clientName") or @clientName("<JS-Specific-Name>", "javascript")
 *         to the operation to override the generated name.
 */
export function $delete(
  context: Client,
  resourceGroupName: string,
  schemaName: string,
  options: SchemasDeleteOptionalParams = { requestOptions: {} },
): PollerLike<OperationState<void>, void> {
  return getLongRunningPoller(context, _$deleteDeserialize, ["202", "204", "200"], {
    updateIntervalInMs: options?.updateIntervalInMs,
    abortSignal: options?.abortSignal,
    getInitialResponse: () => _$deleteSend(context, resourceGroupName, schemaName, options),
    resourceLocationConfig: "location",
  }) as PollerLike<OperationState<void>, void>;
}

export function _updateSend(
  context: Client,
  resourceGroupName: string,
  schemaName: string,
  properties: SchemaUpdate,
  options: SchemasUpdateOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      schemaName: schemaName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).patch({
    ...operationOptionsToRequestParameters(options),
    contentType: "application/json",
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
    body: schemaUpdateSerializer(properties),
  });
}

export async function _updateDeserialize(result: PathUncheckedResponse): Promise<Schema> {
  const expectedStatuses = ["200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return schemaDeserializer(result.body);
}

/** update a Schema Resource */
export async function update(
  context: Client,
  resourceGroupName: string,
  schemaName: string,
  properties: SchemaUpdate,
  options: SchemasUpdateOptionalParams = { requestOptions: {} },
): Promise<Schema> {
  const result = await _updateSend(context, resourceGroupName, schemaName, properties, options);
  return _updateDeserialize(result);
}

export function _createOrUpdateSend(
  context: Client,
  resourceGroupName: string,
  schemaName: string,
  resource: Schema,
  options: SchemasCreateOrUpdateOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      schemaName: schemaName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).put({
    ...operationOptionsToRequestParameters(options),
    contentType: "application/json",
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
    body: schemaSerializer(resource),
  });
}

export async function _createOrUpdateDeserialize(result: PathUncheckedResponse): Promise<Schema> {
  const expectedStatuses = ["200", "201", "202"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return schemaDeserializer(result.body);
}

/** Create or update a Schema Resource */
export function createOrUpdate(
  context: Client,
  resourceGroupName: string,
  schemaName: string,
  resource: Schema,
  options: SchemasCreateOrUpdateOptionalParams = { requestOptions: {} },
): PollerLike<OperationState<Schema>, Schema> {
  return getLongRunningPoller(context, _createOrUpdateDeserialize, ["200", "201", "202"], {
    updateIntervalInMs: options?.updateIntervalInMs,
    abortSignal: options?.abortSignal,
    getInitialResponse: () =>
      _createOrUpdateSend(context, resourceGroupName, schemaName, resource, options),
    resourceLocationConfig: "azure-async-operation",
  }) as PollerLike<OperationState<Schema>, Schema>;
}

export function _getSend(
  context: Client,
  resourceGroupName: string,
  schemaName: string,
  options: SchemasGetOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      schemaName: schemaName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).get({
    ...operationOptionsToRequestParameters(options),
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
  });
}

export async function _getDeserialize(result: PathUncheckedResponse): Promise<Schema> {
  const expectedStatuses = ["200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return schemaDeserializer(result.body);
}

/** Get a Schema Resource */
export async function get(
  context: Client,
  resourceGroupName: string,
  schemaName: string,
  options: SchemasGetOptionalParams = { requestOptions: {} },
): Promise<Schema> {
  const result = await _getSend(context, resourceGroupName, schemaName, options);
  return _getDeserialize(result);
}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/schemas/options.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { OperationOptions } from "@azure-rest/core-client";

/** Optional parameters. */
export interface SchemasListBySubscriptionOptionalParams extends OperationOptions {}

/** Optional parameters. */
export interface SchemasListByResourceGroupOptionalParams extends OperationOptions {}

/** Optional parameters. */
export interface SchemasRemoveVersionOptionalParams extends OperationOptions {}

/** Optional parameters. */
export interface SchemasCreateVersionOptionalParams extends OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
}

/** Optional parameters. */
export interface SchemasDeleteOptionalParams extends OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
}

/** Optional parameters. */
export interface SchemasUpdateOptionalParams extends OperationOptions {}

/** Optional parameters. */
export interface SchemasCreateOrUpdateOptionalParams extends OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
}

/** Optional parameters. */
export interface SchemasGetOptionalParams extends OperationOptions {}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/schemaVersions/index.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

export { listBySchema, $delete, update, createOrUpdate, get } from "./operations.js";
export {
  SchemaVersionsListBySchemaOptionalParams,
  SchemaVersionsDeleteOptionalParams,
  SchemaVersionsUpdateOptionalParams,
  SchemaVersionsCreateOrUpdateOptionalParams,
  SchemaVersionsGetOptionalParams,
} from "./options.js";



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/schemaVersions/operations.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementContext as Client } from "../index.js";
import {
  errorResponseDeserializer,
  SchemaVersion,
  schemaVersionSerializer,
  schemaVersionDeserializer,
  _SchemaVersionListResult,
  _schemaVersionListResultDeserializer,
} from "../../models/models.js";
import {
  PagedAsyncIterableIterator,
  buildPagedAsyncIterator,
} from "../../static-helpers/pagingHelpers.js";
import { getLongRunningPoller } from "../../static-helpers/pollingHelpers.js";
import { expandUrlTemplate } from "../../static-helpers/urlTemplate.js";
import {
  SchemaVersionsListBySchemaOptionalParams,
  SchemaVersionsDeleteOptionalParams,
  SchemaVersionsUpdateOptionalParams,
  SchemaVersionsCreateOrUpdateOptionalParams,
  SchemaVersionsGetOptionalParams,
} from "./options.js";
import {
  StreamableMethod,
  PathUncheckedResponse,
  createRestError,
  operationOptionsToRequestParameters,
} from "@azure-rest/core-client";
import { PollerLike, OperationState } from "@azure/core-lro";

export function _listBySchemaSend(
  context: Client,
  resourceGroupName: string,
  schemaName: string,
  options: SchemaVersionsListBySchemaOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/versions{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      schemaName: schemaName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).get({
    ...operationOptionsToRequestParameters(options),
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
  });
}

export async function _listBySchemaDeserialize(
  result: PathUncheckedResponse,
): Promise<_SchemaVersionListResult> {
  const expectedStatuses = ["200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return _schemaVersionListResultDeserializer(result.body);
}

/** List by specified resource group */
export function listBySchema(
  context: Client,
  resourceGroupName: string,
  schemaName: string,
  options: SchemaVersionsListBySchemaOptionalParams = { requestOptions: {} },
): PagedAsyncIterableIterator<SchemaVersion> {
  return buildPagedAsyncIterator(
    context,
    () => _listBySchemaSend(context, resourceGroupName, schemaName, options),
    _listBySchemaDeserialize,
    ["200"],
    { itemName: "value", nextLinkName: "nextLink" },
  );
}

export function _$deleteSend(
  context: Client,
  resourceGroupName: string,
  schemaName: string,
  schemaVersionName: string,
  options: SchemaVersionsDeleteOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/versions/{schemaVersionName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      schemaName: schemaName,
      schemaVersionName: schemaVersionName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).delete({ ...operationOptionsToRequestParameters(options) });
}

export async function _$deleteDeserialize(result: PathUncheckedResponse): Promise<void> {
  const expectedStatuses = ["202", "204", "200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return;
}

/** Delete a Schema Version Resource */
/**
 *  @fixme delete is a reserved word that cannot be used as an operation name.
 *         Please add @clientName("clientName") or @clientName("<JS-Specific-Name>", "javascript")
 *         to the operation to override the generated name.
 */
export function $delete(
  context: Client,
  resourceGroupName: string,
  schemaName: string,
  schemaVersionName: string,
  options: SchemaVersionsDeleteOptionalParams = { requestOptions: {} },
): PollerLike<OperationState<void>, void> {
  return getLongRunningPoller(context, _$deleteDeserialize, ["202", "204", "200"], {
    updateIntervalInMs: options?.updateIntervalInMs,
    abortSignal: options?.abortSignal,
    getInitialResponse: () =>
      _$deleteSend(context, resourceGroupName, schemaName, schemaVersionName, options),
    resourceLocationConfig: "location",
  }) as PollerLike<OperationState<void>, void>;
}

export function _updateSend(
  context: Client,
  resourceGroupName: string,
  schemaName: string,
  schemaVersionName: string,
  properties: SchemaVersion,
  options: SchemaVersionsUpdateOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/versions/{schemaVersionName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      schemaName: schemaName,
      schemaVersionName: schemaVersionName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).patch({
    ...operationOptionsToRequestParameters(options),
    contentType: "application/json",
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
    body: schemaVersionSerializer(properties),
  });
}

export async function _updateDeserialize(result: PathUncheckedResponse): Promise<SchemaVersion> {
  const expectedStatuses = ["200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return schemaVersionDeserializer(result.body);
}

/** update a Schema Version Resource */
export async function update(
  context: Client,
  resourceGroupName: string,
  schemaName: string,
  schemaVersionName: string,
  properties: SchemaVersion,
  options: SchemaVersionsUpdateOptionalParams = { requestOptions: {} },
): Promise<SchemaVersion> {
  const result = await _updateSend(
    context,
    resourceGroupName,
    schemaName,
    schemaVersionName,
    properties,
    options,
  );
  return _updateDeserialize(result);
}

export function _createOrUpdateSend(
  context: Client,
  resourceGroupName: string,
  schemaName: string,
  schemaVersionName: string,
  resource: SchemaVersion,
  options: SchemaVersionsCreateOrUpdateOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/versions/{schemaVersionName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      schemaName: schemaName,
      schemaVersionName: schemaVersionName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).put({
    ...operationOptionsToRequestParameters(options),
    contentType: "application/json",
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
    body: schemaVersionSerializer(resource),
  });
}

export async function _createOrUpdateDeserialize(
  result: PathUncheckedResponse,
): Promise<SchemaVersion> {
  const expectedStatuses = ["200", "201", "202"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return schemaVersionDeserializer(result.body);
}

/** Create or update a Schema Version Resource */
export function createOrUpdate(
  context: Client,
  resourceGroupName: string,
  schemaName: string,
  schemaVersionName: string,
  resource: SchemaVersion,
  options: SchemaVersionsCreateOrUpdateOptionalParams = { requestOptions: {} },
): PollerLike<OperationState<SchemaVersion>, SchemaVersion> {
  return getLongRunningPoller(context, _createOrUpdateDeserialize, ["200", "201", "202"], {
    updateIntervalInMs: options?.updateIntervalInMs,
    abortSignal: options?.abortSignal,
    getInitialResponse: () =>
      _createOrUpdateSend(
        context,
        resourceGroupName,
        schemaName,
        schemaVersionName,
        resource,
        options,
      ),
    resourceLocationConfig: "azure-async-operation",
  }) as PollerLike<OperationState<SchemaVersion>, SchemaVersion>;
}

export function _getSend(
  context: Client,
  resourceGroupName: string,
  schemaName: string,
  schemaVersionName: string,
  options: SchemaVersionsGetOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/versions/{schemaVersionName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      schemaName: schemaName,
      schemaVersionName: schemaVersionName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).get({
    ...operationOptionsToRequestParameters(options),
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
  });
}

export async function _getDeserialize(result: PathUncheckedResponse): Promise<SchemaVersion> {
  const expectedStatuses = ["200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return schemaVersionDeserializer(result.body);
}

/** Get a Schema Version Resource */
export async function get(
  context: Client,
  resourceGroupName: string,
  schemaName: string,
  schemaVersionName: string,
  options: SchemaVersionsGetOptionalParams = { requestOptions: {} },
): Promise<SchemaVersion> {
  const result = await _getSend(context, resourceGroupName, schemaName, schemaVersionName, options);
  return _getDeserialize(result);
}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/schemaVersions/options.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { OperationOptions } from "@azure-rest/core-client";

/** Optional parameters. */
export interface SchemaVersionsListBySchemaOptionalParams extends OperationOptions {}

/** Optional parameters. */
export interface SchemaVersionsDeleteOptionalParams extends OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
}

/** Optional parameters. */
export interface SchemaVersionsUpdateOptionalParams extends OperationOptions {}

/** Optional parameters. */
export interface SchemaVersionsCreateOrUpdateOptionalParams extends OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
}

/** Optional parameters. */
export interface SchemaVersionsGetOptionalParams extends OperationOptions {}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/siteReferences/index.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

export { listByContext, $delete, update, createOrUpdate, get } from "./operations.js";
export {
  SiteReferencesListByContextOptionalParams,
  SiteReferencesDeleteOptionalParams,
  SiteReferencesUpdateOptionalParams,
  SiteReferencesCreateOrUpdateOptionalParams,
  SiteReferencesGetOptionalParams,
} from "./options.js";



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/siteReferences/operations.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementContext as Client } from "../index.js";
import {
  errorResponseDeserializer,
  SiteReference,
  siteReferenceSerializer,
  siteReferenceDeserializer,
  _SiteReferenceListResult,
  _siteReferenceListResultDeserializer,
} from "../../models/models.js";
import {
  PagedAsyncIterableIterator,
  buildPagedAsyncIterator,
} from "../../static-helpers/pagingHelpers.js";
import { getLongRunningPoller } from "../../static-helpers/pollingHelpers.js";
import { expandUrlTemplate } from "../../static-helpers/urlTemplate.js";
import {
  SiteReferencesListByContextOptionalParams,
  SiteReferencesDeleteOptionalParams,
  SiteReferencesUpdateOptionalParams,
  SiteReferencesCreateOrUpdateOptionalParams,
  SiteReferencesGetOptionalParams,
} from "./options.js";
import {
  StreamableMethod,
  PathUncheckedResponse,
  createRestError,
  operationOptionsToRequestParameters,
} from "@azure-rest/core-client";
import { PollerLike, OperationState } from "@azure/core-lro";

export function _listByContextSend(
  context: Client,
  resourceGroupName: string,
  contextName: string,
  options: SiteReferencesListByContextOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/siteReferences{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      contextName: contextName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).get({
    ...operationOptionsToRequestParameters(options),
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
  });
}

export async function _listByContextDeserialize(
  result: PathUncheckedResponse,
): Promise<_SiteReferenceListResult> {
  const expectedStatuses = ["200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return _siteReferenceListResultDeserializer(result.body);
}

/** List Site Reference Resources */
export function listByContext(
  context: Client,
  resourceGroupName: string,
  contextName: string,
  options: SiteReferencesListByContextOptionalParams = { requestOptions: {} },
): PagedAsyncIterableIterator<SiteReference> {
  return buildPagedAsyncIterator(
    context,
    () => _listByContextSend(context, resourceGroupName, contextName, options),
    _listByContextDeserialize,
    ["200"],
    { itemName: "value", nextLinkName: "nextLink" },
  );
}

export function _$deleteSend(
  context: Client,
  resourceGroupName: string,
  contextName: string,
  siteReferenceName: string,
  options: SiteReferencesDeleteOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/siteReferences/{siteReferenceName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      contextName: contextName,
      siteReferenceName: siteReferenceName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).delete({ ...operationOptionsToRequestParameters(options) });
}

export async function _$deleteDeserialize(result: PathUncheckedResponse): Promise<void> {
  const expectedStatuses = ["202", "204", "200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return;
}

/** Get Site Reference Resource */
/**
 *  @fixme delete is a reserved word that cannot be used as an operation name.
 *         Please add @clientName("clientName") or @clientName("<JS-Specific-Name>", "javascript")
 *         to the operation to override the generated name.
 */
export function $delete(
  context: Client,
  resourceGroupName: string,
  contextName: string,
  siteReferenceName: string,
  options: SiteReferencesDeleteOptionalParams = { requestOptions: {} },
): PollerLike<OperationState<void>, void> {
  return getLongRunningPoller(context, _$deleteDeserialize, ["202", "204", "200"], {
    updateIntervalInMs: options?.updateIntervalInMs,
    abortSignal: options?.abortSignal,
    getInitialResponse: () =>
      _$deleteSend(context, resourceGroupName, contextName, siteReferenceName, options),
    resourceLocationConfig: "location",
  }) as PollerLike<OperationState<void>, void>;
}

export function _updateSend(
  context: Client,
  resourceGroupName: string,
  contextName: string,
  siteReferenceName: string,
  properties: SiteReference,
  options: SiteReferencesUpdateOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/siteReferences/{siteReferenceName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      contextName: contextName,
      siteReferenceName: siteReferenceName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).patch({
    ...operationOptionsToRequestParameters(options),
    contentType: "application/json",
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
    body: siteReferenceSerializer(properties),
  });
}

export async function _updateDeserialize(result: PathUncheckedResponse): Promise<SiteReference> {
  const expectedStatuses = ["200", "202"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return siteReferenceDeserializer(result.body);
}

/** Get Site Reference Resource */
export function update(
  context: Client,
  resourceGroupName: string,
  contextName: string,
  siteReferenceName: string,
  properties: SiteReference,
  options: SiteReferencesUpdateOptionalParams = { requestOptions: {} },
): PollerLike<OperationState<SiteReference>, SiteReference> {
  return getLongRunningPoller(context, _updateDeserialize, ["200", "202"], {
    updateIntervalInMs: options?.updateIntervalInMs,
    abortSignal: options?.abortSignal,
    getInitialResponse: () =>
      _updateSend(context, resourceGroupName, contextName, siteReferenceName, properties, options),
    resourceLocationConfig: "location",
  }) as PollerLike<OperationState<SiteReference>, SiteReference>;
}

export function _createOrUpdateSend(
  context: Client,
  resourceGroupName: string,
  contextName: string,
  siteReferenceName: string,
  resource: SiteReference,
  options: SiteReferencesCreateOrUpdateOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/siteReferences/{siteReferenceName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      contextName: contextName,
      siteReferenceName: siteReferenceName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).put({
    ...operationOptionsToRequestParameters(options),
    contentType: "application/json",
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
    body: siteReferenceSerializer(resource),
  });
}

export async function _createOrUpdateDeserialize(
  result: PathUncheckedResponse,
): Promise<SiteReference> {
  const expectedStatuses = ["200", "201", "202"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return siteReferenceDeserializer(result.body);
}

/** Get Site Reference Resource */
export function createOrUpdate(
  context: Client,
  resourceGroupName: string,
  contextName: string,
  siteReferenceName: string,
  resource: SiteReference,
  options: SiteReferencesCreateOrUpdateOptionalParams = { requestOptions: {} },
): PollerLike<OperationState<SiteReference>, SiteReference> {
  return getLongRunningPoller(context, _createOrUpdateDeserialize, ["200", "201", "202"], {
    updateIntervalInMs: options?.updateIntervalInMs,
    abortSignal: options?.abortSignal,
    getInitialResponse: () =>
      _createOrUpdateSend(
        context,
        resourceGroupName,
        contextName,
        siteReferenceName,
        resource,
        options,
      ),
    resourceLocationConfig: "azure-async-operation",
  }) as PollerLike<OperationState<SiteReference>, SiteReference>;
}

export function _getSend(
  context: Client,
  resourceGroupName: string,
  contextName: string,
  siteReferenceName: string,
  options: SiteReferencesGetOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/siteReferences/{siteReferenceName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      contextName: contextName,
      siteReferenceName: siteReferenceName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).get({
    ...operationOptionsToRequestParameters(options),
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
  });
}

export async function _getDeserialize(result: PathUncheckedResponse): Promise<SiteReference> {
  const expectedStatuses = ["200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return siteReferenceDeserializer(result.body);
}

/** Get Site Reference Resource */
export async function get(
  context: Client,
  resourceGroupName: string,
  contextName: string,
  siteReferenceName: string,
  options: SiteReferencesGetOptionalParams = { requestOptions: {} },
): Promise<SiteReference> {
  const result = await _getSend(
    context,
    resourceGroupName,
    contextName,
    siteReferenceName,
    options,
  );
  return _getDeserialize(result);
}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/siteReferences/options.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { OperationOptions } from "@azure-rest/core-client";

/** Optional parameters. */
export interface SiteReferencesListByContextOptionalParams extends OperationOptions {}

/** Optional parameters. */
export interface SiteReferencesDeleteOptionalParams extends OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
}

/** Optional parameters. */
export interface SiteReferencesUpdateOptionalParams extends OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
}

/** Optional parameters. */
export interface SiteReferencesCreateOrUpdateOptionalParams extends OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
}

/** Optional parameters. */
export interface SiteReferencesGetOptionalParams extends OperationOptions {}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/solutions/index.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

export { listByTarget, $delete, update, createOrUpdate, get } from "./operations.js";
export {
  SolutionsListByTargetOptionalParams,
  SolutionsDeleteOptionalParams,
  SolutionsUpdateOptionalParams,
  SolutionsCreateOrUpdateOptionalParams,
  SolutionsGetOptionalParams,
} from "./options.js";



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/solutions/operations.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementContext as Client } from "../index.js";
import {
  errorResponseDeserializer,
  Solution,
  solutionSerializer,
  solutionDeserializer,
  SolutionUpdate,
  solutionUpdateSerializer,
  _SolutionListResult,
  _solutionListResultDeserializer,
} from "../../models/models.js";
import {
  PagedAsyncIterableIterator,
  buildPagedAsyncIterator,
} from "../../static-helpers/pagingHelpers.js";
import { getLongRunningPoller } from "../../static-helpers/pollingHelpers.js";
import { expandUrlTemplate } from "../../static-helpers/urlTemplate.js";
import {
  SolutionsListByTargetOptionalParams,
  SolutionsDeleteOptionalParams,
  SolutionsUpdateOptionalParams,
  SolutionsCreateOrUpdateOptionalParams,
  SolutionsGetOptionalParams,
} from "./options.js";
import {
  StreamableMethod,
  PathUncheckedResponse,
  createRestError,
  operationOptionsToRequestParameters,
} from "@azure-rest/core-client";
import { PollerLike, OperationState } from "@azure/core-lro";

export function _listByTargetSend(
  context: Client,
  resourceGroupName: string,
  targetName: string,
  options: SolutionsListByTargetOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      targetName: targetName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).get({
    ...operationOptionsToRequestParameters(options),
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
  });
}

export async function _listByTargetDeserialize(
  result: PathUncheckedResponse,
): Promise<_SolutionListResult> {
  const expectedStatuses = ["200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return _solutionListResultDeserializer(result.body);
}

/** List Solution resources */
export function listByTarget(
  context: Client,
  resourceGroupName: string,
  targetName: string,
  options: SolutionsListByTargetOptionalParams = { requestOptions: {} },
): PagedAsyncIterableIterator<Solution> {
  return buildPagedAsyncIterator(
    context,
    () => _listByTargetSend(context, resourceGroupName, targetName, options),
    _listByTargetDeserialize,
    ["200"],
    { itemName: "value", nextLinkName: "nextLink" },
  );
}

export function _$deleteSend(
  context: Client,
  resourceGroupName: string,
  targetName: string,
  solutionName: string,
  options: SolutionsDeleteOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      targetName: targetName,
      solutionName: solutionName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).delete({ ...operationOptionsToRequestParameters(options) });
}

export async function _$deleteDeserialize(result: PathUncheckedResponse): Promise<void> {
  const expectedStatuses = ["202", "204", "200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return;
}

/** Delete a Solution Resource */
/**
 *  @fixme delete is a reserved word that cannot be used as an operation name.
 *         Please add @clientName("clientName") or @clientName("<JS-Specific-Name>", "javascript")
 *         to the operation to override the generated name.
 */
export function $delete(
  context: Client,
  resourceGroupName: string,
  targetName: string,
  solutionName: string,
  options: SolutionsDeleteOptionalParams = { requestOptions: {} },
): PollerLike<OperationState<void>, void> {
  return getLongRunningPoller(context, _$deleteDeserialize, ["202", "204", "200"], {
    updateIntervalInMs: options?.updateIntervalInMs,
    abortSignal: options?.abortSignal,
    getInitialResponse: () =>
      _$deleteSend(context, resourceGroupName, targetName, solutionName, options),
    resourceLocationConfig: "location",
  }) as PollerLike<OperationState<void>, void>;
}

export function _updateSend(
  context: Client,
  resourceGroupName: string,
  targetName: string,
  solutionName: string,
  properties: SolutionUpdate,
  options: SolutionsUpdateOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      targetName: targetName,
      solutionName: solutionName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).patch({
    ...operationOptionsToRequestParameters(options),
    contentType: "application/json",
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
    body: solutionUpdateSerializer(properties),
  });
}

export async function _updateDeserialize(result: PathUncheckedResponse): Promise<Solution> {
  const expectedStatuses = ["200", "202"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return solutionDeserializer(result.body);
}

/** Update a Solution Resource */
export function update(
  context: Client,
  resourceGroupName: string,
  targetName: string,
  solutionName: string,
  properties: SolutionUpdate,
  options: SolutionsUpdateOptionalParams = { requestOptions: {} },
): PollerLike<OperationState<Solution>, Solution> {
  return getLongRunningPoller(context, _updateDeserialize, ["200", "202"], {
    updateIntervalInMs: options?.updateIntervalInMs,
    abortSignal: options?.abortSignal,
    getInitialResponse: () =>
      _updateSend(context, resourceGroupName, targetName, solutionName, properties, options),
    resourceLocationConfig: "location",
  }) as PollerLike<OperationState<Solution>, Solution>;
}

export function _createOrUpdateSend(
  context: Client,
  resourceGroupName: string,
  targetName: string,
  solutionName: string,
  resource: Solution,
  options: SolutionsCreateOrUpdateOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      targetName: targetName,
      solutionName: solutionName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).put({
    ...operationOptionsToRequestParameters(options),
    contentType: "application/json",
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
    body: solutionSerializer(resource),
  });
}

export async function _createOrUpdateDeserialize(result: PathUncheckedResponse): Promise<Solution> {
  const expectedStatuses = ["200", "201", "202"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return solutionDeserializer(result.body);
}

/** Create or update a Solution Resource */
export function createOrUpdate(
  context: Client,
  resourceGroupName: string,
  targetName: string,
  solutionName: string,
  resource: Solution,
  options: SolutionsCreateOrUpdateOptionalParams = { requestOptions: {} },
): PollerLike<OperationState<Solution>, Solution> {
  return getLongRunningPoller(context, _createOrUpdateDeserialize, ["200", "201", "202"], {
    updateIntervalInMs: options?.updateIntervalInMs,
    abortSignal: options?.abortSignal,
    getInitialResponse: () =>
      _createOrUpdateSend(context, resourceGroupName, targetName, solutionName, resource, options),
    resourceLocationConfig: "azure-async-operation",
  }) as PollerLike<OperationState<Solution>, Solution>;
}

export function _getSend(
  context: Client,
  resourceGroupName: string,
  targetName: string,
  solutionName: string,
  options: SolutionsGetOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      targetName: targetName,
      solutionName: solutionName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).get({
    ...operationOptionsToRequestParameters(options),
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
  });
}

export async function _getDeserialize(result: PathUncheckedResponse): Promise<Solution> {
  const expectedStatuses = ["200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return solutionDeserializer(result.body);
}

/** Get a Solution resource */
export async function get(
  context: Client,
  resourceGroupName: string,
  targetName: string,
  solutionName: string,
  options: SolutionsGetOptionalParams = { requestOptions: {} },
): Promise<Solution> {
  const result = await _getSend(context, resourceGroupName, targetName, solutionName, options);
  return _getDeserialize(result);
}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/solutions/options.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { OperationOptions } from "@azure-rest/core-client";

/** Optional parameters. */
export interface SolutionsListByTargetOptionalParams extends OperationOptions {}

/** Optional parameters. */
export interface SolutionsDeleteOptionalParams extends OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
}

/** Optional parameters. */
export interface SolutionsUpdateOptionalParams extends OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
}

/** Optional parameters. */
export interface SolutionsCreateOrUpdateOptionalParams extends OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
}

/** Optional parameters. */
export interface SolutionsGetOptionalParams extends OperationOptions {}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/solutionTemplates/index.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

export {
  listBySubscription,
  listByResourceGroup,
  $delete,
  removeVersion,
  createVersion,
  update,
  createOrUpdate,
  get,
} from "./operations.js";
export {
  SolutionTemplatesListBySubscriptionOptionalParams,
  SolutionTemplatesListByResourceGroupOptionalParams,
  SolutionTemplatesDeleteOptionalParams,
  SolutionTemplatesRemoveVersionOptionalParams,
  SolutionTemplatesCreateVersionOptionalParams,
  SolutionTemplatesUpdateOptionalParams,
  SolutionTemplatesCreateOrUpdateOptionalParams,
  SolutionTemplatesGetOptionalParams,
} from "./options.js";



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/solutionTemplates/operations.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementContext as Client } from "../index.js";
import {
  errorResponseDeserializer,
  VersionParameter,
  versionParameterSerializer,
  SolutionTemplateVersion,
  solutionTemplateVersionDeserializer,
  SolutionTemplate,
  solutionTemplateSerializer,
  solutionTemplateDeserializer,
  SolutionTemplateUpdate,
  solutionTemplateUpdateSerializer,
  SolutionTemplateVersionWithUpdateType,
  solutionTemplateVersionWithUpdateTypeSerializer,
  _SolutionTemplateListResult,
  _solutionTemplateListResultDeserializer,
} from "../../models/models.js";
import {
  PagedAsyncIterableIterator,
  buildPagedAsyncIterator,
} from "../../static-helpers/pagingHelpers.js";
import { getLongRunningPoller } from "../../static-helpers/pollingHelpers.js";
import { expandUrlTemplate } from "../../static-helpers/urlTemplate.js";
import {
  SolutionTemplatesListBySubscriptionOptionalParams,
  SolutionTemplatesListByResourceGroupOptionalParams,
  SolutionTemplatesDeleteOptionalParams,
  SolutionTemplatesRemoveVersionOptionalParams,
  SolutionTemplatesCreateVersionOptionalParams,
  SolutionTemplatesUpdateOptionalParams,
  SolutionTemplatesCreateOrUpdateOptionalParams,
  SolutionTemplatesGetOptionalParams,
} from "./options.js";
import {
  StreamableMethod,
  PathUncheckedResponse,
  createRestError,
  operationOptionsToRequestParameters,
} from "@azure-rest/core-client";
import { PollerLike, OperationState } from "@azure/core-lro";

export function _listBySubscriptionSend(
  context: Client,
  options: SolutionTemplatesListBySubscriptionOptionalParams = {
    requestOptions: {},
  },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/providers/Microsoft.Edge/solutionTemplates{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).get({
    ...operationOptionsToRequestParameters(options),
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
  });
}

export async function _listBySubscriptionDeserialize(
  result: PathUncheckedResponse,
): Promise<_SolutionTemplateListResult> {
  const expectedStatuses = ["200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return _solutionTemplateListResultDeserializer(result.body);
}

/** List by subscription */
export function listBySubscription(
  context: Client,
  options: SolutionTemplatesListBySubscriptionOptionalParams = {
    requestOptions: {},
  },
): PagedAsyncIterableIterator<SolutionTemplate> {
  return buildPagedAsyncIterator(
    context,
    () => _listBySubscriptionSend(context, options),
    _listBySubscriptionDeserialize,
    ["200"],
    { itemName: "value", nextLinkName: "nextLink" },
  );
}

export function _listByResourceGroupSend(
  context: Client,
  resourceGroupName: string,
  options: SolutionTemplatesListByResourceGroupOptionalParams = {
    requestOptions: {},
  },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).get({
    ...operationOptionsToRequestParameters(options),
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
  });
}

export async function _listByResourceGroupDeserialize(
  result: PathUncheckedResponse,
): Promise<_SolutionTemplateListResult> {
  const expectedStatuses = ["200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return _solutionTemplateListResultDeserializer(result.body);
}

/** List by specified resource group */
export function listByResourceGroup(
  context: Client,
  resourceGroupName: string,
  options: SolutionTemplatesListByResourceGroupOptionalParams = {
    requestOptions: {},
  },
): PagedAsyncIterableIterator<SolutionTemplate> {
  return buildPagedAsyncIterator(
    context,
    () => _listByResourceGroupSend(context, resourceGroupName, options),
    _listByResourceGroupDeserialize,
    ["200"],
    { itemName: "value", nextLinkName: "nextLink" },
  );
}

export function _$deleteSend(
  context: Client,
  resourceGroupName: string,
  solutionTemplateName: string,
  options: SolutionTemplatesDeleteOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      solutionTemplateName: solutionTemplateName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).delete({ ...operationOptionsToRequestParameters(options) });
}

export async function _$deleteDeserialize(result: PathUncheckedResponse): Promise<void> {
  const expectedStatuses = ["202", "204", "200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return;
}

/** Delete a Solution Template Resource */
/**
 *  @fixme delete is a reserved word that cannot be used as an operation name.
 *         Please add @clientName("clientName") or @clientName("<JS-Specific-Name>", "javascript")
 *         to the operation to override the generated name.
 */
export function $delete(
  context: Client,
  resourceGroupName: string,
  solutionTemplateName: string,
  options: SolutionTemplatesDeleteOptionalParams = { requestOptions: {} },
): PollerLike<OperationState<void>, void> {
  return getLongRunningPoller(context, _$deleteDeserialize, ["202", "204", "200"], {
    updateIntervalInMs: options?.updateIntervalInMs,
    abortSignal: options?.abortSignal,
    getInitialResponse: () =>
      _$deleteSend(context, resourceGroupName, solutionTemplateName, options),
    resourceLocationConfig: "location",
  }) as PollerLike<OperationState<void>, void>;
}

export function _removeVersionSend(
  context: Client,
  resourceGroupName: string,
  solutionTemplateName: string,
  body: VersionParameter,
  options: SolutionTemplatesRemoveVersionOptionalParams = {
    requestOptions: {},
  },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}/removeVersion{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      solutionTemplateName: solutionTemplateName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).post({
    ...operationOptionsToRequestParameters(options),
    contentType: "application/json",
    body: versionParameterSerializer(body),
  });
}

export async function _removeVersionDeserialize(result: PathUncheckedResponse): Promise<void> {
  const expectedStatuses = ["202", "200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return;
}

/** Remove Solution Template Version Resource */
export function removeVersion(
  context: Client,
  resourceGroupName: string,
  solutionTemplateName: string,
  body: VersionParameter,
  options: SolutionTemplatesRemoveVersionOptionalParams = {
    requestOptions: {},
  },
): PollerLike<OperationState<void>, void> {
  return getLongRunningPoller(context, _removeVersionDeserialize, ["202", "200"], {
    updateIntervalInMs: options?.updateIntervalInMs,
    abortSignal: options?.abortSignal,
    getInitialResponse: () =>
      _removeVersionSend(context, resourceGroupName, solutionTemplateName, body, options),
    resourceLocationConfig: "location",
  }) as PollerLike<OperationState<void>, void>;
}

export function _createVersionSend(
  context: Client,
  resourceGroupName: string,
  solutionTemplateName: string,
  body: SolutionTemplateVersionWithUpdateType,
  options: SolutionTemplatesCreateVersionOptionalParams = {
    requestOptions: {},
  },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}/createVersion{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      solutionTemplateName: solutionTemplateName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).post({
    ...operationOptionsToRequestParameters(options),
    contentType: "application/json",
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
    body: solutionTemplateVersionWithUpdateTypeSerializer(body),
  });
}

export async function _createVersionDeserialize(
  result: PathUncheckedResponse,
): Promise<SolutionTemplateVersion> {
  const expectedStatuses = ["202", "200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return solutionTemplateVersionDeserializer(result.body);
}

/** Create a Solution Template Version Resource */
export function createVersion(
  context: Client,
  resourceGroupName: string,
  solutionTemplateName: string,
  body: SolutionTemplateVersionWithUpdateType,
  options: SolutionTemplatesCreateVersionOptionalParams = {
    requestOptions: {},
  },
): PollerLike<OperationState<SolutionTemplateVersion>, SolutionTemplateVersion> {
  return getLongRunningPoller(context, _createVersionDeserialize, ["202", "200"], {
    updateIntervalInMs: options?.updateIntervalInMs,
    abortSignal: options?.abortSignal,
    getInitialResponse: () =>
      _createVersionSend(context, resourceGroupName, solutionTemplateName, body, options),
    resourceLocationConfig: "location",
  }) as PollerLike<OperationState<SolutionTemplateVersion>, SolutionTemplateVersion>;
}

export function _updateSend(
  context: Client,
  resourceGroupName: string,
  solutionTemplateName: string,
  properties: SolutionTemplateUpdate,
  options: SolutionTemplatesUpdateOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      solutionTemplateName: solutionTemplateName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).patch({
    ...operationOptionsToRequestParameters(options),
    contentType: "application/json",
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
    body: solutionTemplateUpdateSerializer(properties),
  });
}

export async function _updateDeserialize(result: PathUncheckedResponse): Promise<SolutionTemplate> {
  const expectedStatuses = ["200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return solutionTemplateDeserializer(result.body);
}

/** update a Solution Template Resource */
export async function update(
  context: Client,
  resourceGroupName: string,
  solutionTemplateName: string,
  properties: SolutionTemplateUpdate,
  options: SolutionTemplatesUpdateOptionalParams = { requestOptions: {} },
): Promise<SolutionTemplate> {
  const result = await _updateSend(
    context,
    resourceGroupName,
    solutionTemplateName,
    properties,
    options,
  );
  return _updateDeserialize(result);
}

export function _createOrUpdateSend(
  context: Client,
  resourceGroupName: string,
  solutionTemplateName: string,
  resource: SolutionTemplate,
  options: SolutionTemplatesCreateOrUpdateOptionalParams = {
    requestOptions: {},
  },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      solutionTemplateName: solutionTemplateName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).put({
    ...operationOptionsToRequestParameters(options),
    contentType: "application/json",
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
    body: solutionTemplateSerializer(resource),
  });
}

export async function _createOrUpdateDeserialize(
  result: PathUncheckedResponse,
): Promise<SolutionTemplate> {
  const expectedStatuses = ["200", "201", "202"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return solutionTemplateDeserializer(result.body);
}

/** Create or update a Solution Template Resource */
export function createOrUpdate(
  context: Client,
  resourceGroupName: string,
  solutionTemplateName: string,
  resource: SolutionTemplate,
  options: SolutionTemplatesCreateOrUpdateOptionalParams = {
    requestOptions: {},
  },
): PollerLike<OperationState<SolutionTemplate>, SolutionTemplate> {
  return getLongRunningPoller(context, _createOrUpdateDeserialize, ["200", "201", "202"], {
    updateIntervalInMs: options?.updateIntervalInMs,
    abortSignal: options?.abortSignal,
    getInitialResponse: () =>
      _createOrUpdateSend(context, resourceGroupName, solutionTemplateName, resource, options),
    resourceLocationConfig: "azure-async-operation",
  }) as PollerLike<OperationState<SolutionTemplate>, SolutionTemplate>;
}

export function _getSend(
  context: Client,
  resourceGroupName: string,
  solutionTemplateName: string,
  options: SolutionTemplatesGetOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      solutionTemplateName: solutionTemplateName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).get({
    ...operationOptionsToRequestParameters(options),
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
  });
}

export async function _getDeserialize(result: PathUncheckedResponse): Promise<SolutionTemplate> {
  const expectedStatuses = ["200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return solutionTemplateDeserializer(result.body);
}

/** Get a Solution Template Resource */
export async function get(
  context: Client,
  resourceGroupName: string,
  solutionTemplateName: string,
  options: SolutionTemplatesGetOptionalParams = { requestOptions: {} },
): Promise<SolutionTemplate> {
  const result = await _getSend(context, resourceGroupName, solutionTemplateName, options);
  return _getDeserialize(result);
}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/solutionTemplates/options.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { OperationOptions } from "@azure-rest/core-client";

/** Optional parameters. */
export interface SolutionTemplatesListBySubscriptionOptionalParams extends OperationOptions {}

/** Optional parameters. */
export interface SolutionTemplatesListByResourceGroupOptionalParams extends OperationOptions {}

/** Optional parameters. */
export interface SolutionTemplatesDeleteOptionalParams extends OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
}

/** Optional parameters. */
export interface SolutionTemplatesRemoveVersionOptionalParams extends OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
}

/** Optional parameters. */
export interface SolutionTemplatesCreateVersionOptionalParams extends OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
}

/** Optional parameters. */
export interface SolutionTemplatesUpdateOptionalParams extends OperationOptions {}

/** Optional parameters. */
export interface SolutionTemplatesCreateOrUpdateOptionalParams extends OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
}

/** Optional parameters. */
export interface SolutionTemplatesGetOptionalParams extends OperationOptions {}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/solutionTemplateVersions/index.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

export {
  bulkPublishSolution,
  bulkDeploySolution,
  listBySolutionTemplate,
  get,
} from "./operations.js";
export {
  SolutionTemplateVersionsBulkPublishSolutionOptionalParams,
  SolutionTemplateVersionsBulkDeploySolutionOptionalParams,
  SolutionTemplateVersionsListBySolutionTemplateOptionalParams,
  SolutionTemplateVersionsGetOptionalParams,
} from "./options.js";



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/solutionTemplateVersions/operations.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementContext as Client } from "../index.js";
import {
  errorResponseDeserializer,
  SolutionTemplateVersion,
  solutionTemplateVersionDeserializer,
  _SolutionTemplateVersionListResult,
  _solutionTemplateVersionListResultDeserializer,
  BulkDeploySolutionParameter,
  bulkDeploySolutionParameterSerializer,
  BulkPublishSolutionParameter,
  bulkPublishSolutionParameterSerializer,
} from "../../models/models.js";
import {
  PagedAsyncIterableIterator,
  buildPagedAsyncIterator,
} from "../../static-helpers/pagingHelpers.js";
import { getLongRunningPoller } from "../../static-helpers/pollingHelpers.js";
import { expandUrlTemplate } from "../../static-helpers/urlTemplate.js";
import {
  SolutionTemplateVersionsBulkPublishSolutionOptionalParams,
  SolutionTemplateVersionsBulkDeploySolutionOptionalParams,
  SolutionTemplateVersionsListBySolutionTemplateOptionalParams,
  SolutionTemplateVersionsGetOptionalParams,
} from "./options.js";
import {
  StreamableMethod,
  PathUncheckedResponse,
  createRestError,
  operationOptionsToRequestParameters,
} from "@azure-rest/core-client";
import { PollerLike, OperationState } from "@azure/core-lro";

export function _bulkPublishSolutionSend(
  context: Client,
  resourceGroupName: string,
  solutionTemplateName: string,
  solutionTemplateVersionName: string,
  body: BulkPublishSolutionParameter,
  options: SolutionTemplateVersionsBulkPublishSolutionOptionalParams = {
    requestOptions: {},
  },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}/versions/{solutionTemplateVersionName}/bulkPublishSolution{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      solutionTemplateName: solutionTemplateName,
      solutionTemplateVersionName: solutionTemplateVersionName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).post({
    ...operationOptionsToRequestParameters(options),
    contentType: "application/json",
    body: bulkPublishSolutionParameterSerializer(body),
  });
}

export async function _bulkPublishSolutionDeserialize(
  result: PathUncheckedResponse,
): Promise<void> {
  const expectedStatuses = ["202", "200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return;
}

/** Post request for bulk publish */
export function bulkPublishSolution(
  context: Client,
  resourceGroupName: string,
  solutionTemplateName: string,
  solutionTemplateVersionName: string,
  body: BulkPublishSolutionParameter,
  options: SolutionTemplateVersionsBulkPublishSolutionOptionalParams = {
    requestOptions: {},
  },
): PollerLike<OperationState<void>, void> {
  return getLongRunningPoller(context, _bulkPublishSolutionDeserialize, ["202", "200"], {
    updateIntervalInMs: options?.updateIntervalInMs,
    abortSignal: options?.abortSignal,
    getInitialResponse: () =>
      _bulkPublishSolutionSend(
        context,
        resourceGroupName,
        solutionTemplateName,
        solutionTemplateVersionName,
        body,
        options,
      ),
    resourceLocationConfig: "location",
  }) as PollerLike<OperationState<void>, void>;
}

export function _bulkDeploySolutionSend(
  context: Client,
  resourceGroupName: string,
  solutionTemplateName: string,
  solutionTemplateVersionName: string,
  body: BulkDeploySolutionParameter,
  options: SolutionTemplateVersionsBulkDeploySolutionOptionalParams = {
    requestOptions: {},
  },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}/versions/{solutionTemplateVersionName}/bulkDeploySolution{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      solutionTemplateName: solutionTemplateName,
      solutionTemplateVersionName: solutionTemplateVersionName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).post({
    ...operationOptionsToRequestParameters(options),
    contentType: "application/json",
    body: bulkDeploySolutionParameterSerializer(body),
  });
}

export async function _bulkDeploySolutionDeserialize(result: PathUncheckedResponse): Promise<void> {
  const expectedStatuses = ["202", "200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return;
}

/** Post request for bulk deploy */
export function bulkDeploySolution(
  context: Client,
  resourceGroupName: string,
  solutionTemplateName: string,
  solutionTemplateVersionName: string,
  body: BulkDeploySolutionParameter,
  options: SolutionTemplateVersionsBulkDeploySolutionOptionalParams = {
    requestOptions: {},
  },
): PollerLike<OperationState<void>, void> {
  return getLongRunningPoller(context, _bulkDeploySolutionDeserialize, ["202", "200"], {
    updateIntervalInMs: options?.updateIntervalInMs,
    abortSignal: options?.abortSignal,
    getInitialResponse: () =>
      _bulkDeploySolutionSend(
        context,
        resourceGroupName,
        solutionTemplateName,
        solutionTemplateVersionName,
        body,
        options,
      ),
    resourceLocationConfig: "location",
  }) as PollerLike<OperationState<void>, void>;
}

export function _listBySolutionTemplateSend(
  context: Client,
  resourceGroupName: string,
  solutionTemplateName: string,
  options: SolutionTemplateVersionsListBySolutionTemplateOptionalParams = {
    requestOptions: {},
  },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}/versions{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      solutionTemplateName: solutionTemplateName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).get({
    ...operationOptionsToRequestParameters(options),
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
  });
}

export async function _listBySolutionTemplateDeserialize(
  result: PathUncheckedResponse,
): Promise<_SolutionTemplateVersionListResult> {
  const expectedStatuses = ["200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return _solutionTemplateVersionListResultDeserializer(result.body);
}

/** List Solution Template Version Resources */
export function listBySolutionTemplate(
  context: Client,
  resourceGroupName: string,
  solutionTemplateName: string,
  options: SolutionTemplateVersionsListBySolutionTemplateOptionalParams = {
    requestOptions: {},
  },
): PagedAsyncIterableIterator<SolutionTemplateVersion> {
  return buildPagedAsyncIterator(
    context,
    () => _listBySolutionTemplateSend(context, resourceGroupName, solutionTemplateName, options),
    _listBySolutionTemplateDeserialize,
    ["200"],
    { itemName: "value", nextLinkName: "nextLink" },
  );
}

export function _getSend(
  context: Client,
  resourceGroupName: string,
  solutionTemplateName: string,
  solutionTemplateVersionName: string,
  options: SolutionTemplateVersionsGetOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}/versions/{solutionTemplateVersionName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      solutionTemplateName: solutionTemplateName,
      solutionTemplateVersionName: solutionTemplateVersionName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).get({
    ...operationOptionsToRequestParameters(options),
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
  });
}

export async function _getDeserialize(
  result: PathUncheckedResponse,
): Promise<SolutionTemplateVersion> {
  const expectedStatuses = ["200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return solutionTemplateVersionDeserializer(result.body);
}

/** Get a Solution Template Version Resource */
export async function get(
  context: Client,
  resourceGroupName: string,
  solutionTemplateName: string,
  solutionTemplateVersionName: string,
  options: SolutionTemplateVersionsGetOptionalParams = { requestOptions: {} },
): Promise<SolutionTemplateVersion> {
  const result = await _getSend(
    context,
    resourceGroupName,
    solutionTemplateName,
    solutionTemplateVersionName,
    options,
  );
  return _getDeserialize(result);
}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/solutionTemplateVersions/options.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { OperationOptions } from "@azure-rest/core-client";

/** Optional parameters. */
export interface SolutionTemplateVersionsBulkPublishSolutionOptionalParams
  extends OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
}

/** Optional parameters. */
export interface SolutionTemplateVersionsBulkDeploySolutionOptionalParams extends OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
}

/** Optional parameters. */
export interface SolutionTemplateVersionsListBySolutionTemplateOptionalParams
  extends OperationOptions {}

/** Optional parameters. */
export interface SolutionTemplateVersionsGetOptionalParams extends OperationOptions {}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/solutionVersions/index.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

export { listBySolution, $delete, update, createOrUpdate, get } from "./operations.js";
export {
  SolutionVersionsListBySolutionOptionalParams,
  SolutionVersionsDeleteOptionalParams,
  SolutionVersionsUpdateOptionalParams,
  SolutionVersionsCreateOrUpdateOptionalParams,
  SolutionVersionsGetOptionalParams,
} from "./options.js";



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/solutionVersions/operations.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementContext as Client } from "../index.js";
import {
  errorResponseDeserializer,
  SolutionVersion,
  solutionVersionSerializer,
  solutionVersionDeserializer,
  _SolutionVersionListResult,
  _solutionVersionListResultDeserializer,
} from "../../models/models.js";
import {
  PagedAsyncIterableIterator,
  buildPagedAsyncIterator,
} from "../../static-helpers/pagingHelpers.js";
import { getLongRunningPoller } from "../../static-helpers/pollingHelpers.js";
import { expandUrlTemplate } from "../../static-helpers/urlTemplate.js";
import {
  SolutionVersionsListBySolutionOptionalParams,
  SolutionVersionsDeleteOptionalParams,
  SolutionVersionsUpdateOptionalParams,
  SolutionVersionsCreateOrUpdateOptionalParams,
  SolutionVersionsGetOptionalParams,
} from "./options.js";
import {
  StreamableMethod,
  PathUncheckedResponse,
  createRestError,
  operationOptionsToRequestParameters,
} from "@azure-rest/core-client";
import { PollerLike, OperationState } from "@azure/core-lro";

export function _listBySolutionSend(
  context: Client,
  resourceGroupName: string,
  targetName: string,
  solutionName: string,
  options: SolutionVersionsListBySolutionOptionalParams = {
    requestOptions: {},
  },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/versions{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      targetName: targetName,
      solutionName: solutionName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).get({
    ...operationOptionsToRequestParameters(options),
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
  });
}

export async function _listBySolutionDeserialize(
  result: PathUncheckedResponse,
): Promise<_SolutionVersionListResult> {
  const expectedStatuses = ["200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return _solutionVersionListResultDeserializer(result.body);
}

/** List Solution Version Resources */
export function listBySolution(
  context: Client,
  resourceGroupName: string,
  targetName: string,
  solutionName: string,
  options: SolutionVersionsListBySolutionOptionalParams = {
    requestOptions: {},
  },
): PagedAsyncIterableIterator<SolutionVersion> {
  return buildPagedAsyncIterator(
    context,
    () => _listBySolutionSend(context, resourceGroupName, targetName, solutionName, options),
    _listBySolutionDeserialize,
    ["200"],
    { itemName: "value", nextLinkName: "nextLink" },
  );
}

export function _$deleteSend(
  context: Client,
  resourceGroupName: string,
  targetName: string,
  solutionName: string,
  solutionVersionName: string,
  options: SolutionVersionsDeleteOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/versions/{solutionVersionName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      targetName: targetName,
      solutionName: solutionName,
      solutionVersionName: solutionVersionName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).delete({ ...operationOptionsToRequestParameters(options) });
}

export async function _$deleteDeserialize(result: PathUncheckedResponse): Promise<void> {
  const expectedStatuses = ["202", "204", "200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return;
}

/** Delete a Solution Version Resource */
/**
 *  @fixme delete is a reserved word that cannot be used as an operation name.
 *         Please add @clientName("clientName") or @clientName("<JS-Specific-Name>", "javascript")
 *         to the operation to override the generated name.
 */
export function $delete(
  context: Client,
  resourceGroupName: string,
  targetName: string,
  solutionName: string,
  solutionVersionName: string,
  options: SolutionVersionsDeleteOptionalParams = { requestOptions: {} },
): PollerLike<OperationState<void>, void> {
  return getLongRunningPoller(context, _$deleteDeserialize, ["202", "204", "200"], {
    updateIntervalInMs: options?.updateIntervalInMs,
    abortSignal: options?.abortSignal,
    getInitialResponse: () =>
      _$deleteSend(
        context,
        resourceGroupName,
        targetName,
        solutionName,
        solutionVersionName,
        options,
      ),
    resourceLocationConfig: "location",
  }) as PollerLike<OperationState<void>, void>;
}

export function _updateSend(
  context: Client,
  resourceGroupName: string,
  targetName: string,
  solutionName: string,
  solutionVersionName: string,
  properties: SolutionVersion,
  options: SolutionVersionsUpdateOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/versions/{solutionVersionName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      targetName: targetName,
      solutionName: solutionName,
      solutionVersionName: solutionVersionName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).patch({
    ...operationOptionsToRequestParameters(options),
    contentType: "application/json",
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
    body: solutionVersionSerializer(properties),
  });
}

export async function _updateDeserialize(result: PathUncheckedResponse): Promise<SolutionVersion> {
  const expectedStatuses = ["200", "202"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return solutionVersionDeserializer(result.body);
}

/** Update a Solution Version Resource */
export function update(
  context: Client,
  resourceGroupName: string,
  targetName: string,
  solutionName: string,
  solutionVersionName: string,
  properties: SolutionVersion,
  options: SolutionVersionsUpdateOptionalParams = { requestOptions: {} },
): PollerLike<OperationState<SolutionVersion>, SolutionVersion> {
  return getLongRunningPoller(context, _updateDeserialize, ["200", "202"], {
    updateIntervalInMs: options?.updateIntervalInMs,
    abortSignal: options?.abortSignal,
    getInitialResponse: () =>
      _updateSend(
        context,
        resourceGroupName,
        targetName,
        solutionName,
        solutionVersionName,
        properties,
        options,
      ),
    resourceLocationConfig: "location",
  }) as PollerLike<OperationState<SolutionVersion>, SolutionVersion>;
}

export function _createOrUpdateSend(
  context: Client,
  resourceGroupName: string,
  targetName: string,
  solutionName: string,
  solutionVersionName: string,
  resource: SolutionVersion,
  options: SolutionVersionsCreateOrUpdateOptionalParams = {
    requestOptions: {},
  },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/versions/{solutionVersionName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      targetName: targetName,
      solutionName: solutionName,
      solutionVersionName: solutionVersionName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).put({
    ...operationOptionsToRequestParameters(options),
    contentType: "application/json",
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
    body: solutionVersionSerializer(resource),
  });
}

export async function _createOrUpdateDeserialize(
  result: PathUncheckedResponse,
): Promise<SolutionVersion> {
  const expectedStatuses = ["200", "201", "202"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return solutionVersionDeserializer(result.body);
}

/** Create or update a Solution Version Resource */
export function createOrUpdate(
  context: Client,
  resourceGroupName: string,
  targetName: string,
  solutionName: string,
  solutionVersionName: string,
  resource: SolutionVersion,
  options: SolutionVersionsCreateOrUpdateOptionalParams = {
    requestOptions: {},
  },
): PollerLike<OperationState<SolutionVersion>, SolutionVersion> {
  return getLongRunningPoller(context, _createOrUpdateDeserialize, ["200", "201", "202"], {
    updateIntervalInMs: options?.updateIntervalInMs,
    abortSignal: options?.abortSignal,
    getInitialResponse: () =>
      _createOrUpdateSend(
        context,
        resourceGroupName,
        targetName,
        solutionName,
        solutionVersionName,
        resource,
        options,
      ),
    resourceLocationConfig: "azure-async-operation",
  }) as PollerLike<OperationState<SolutionVersion>, SolutionVersion>;
}

export function _getSend(
  context: Client,
  resourceGroupName: string,
  targetName: string,
  solutionName: string,
  solutionVersionName: string,
  options: SolutionVersionsGetOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/versions/{solutionVersionName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      targetName: targetName,
      solutionName: solutionName,
      solutionVersionName: solutionVersionName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).get({
    ...operationOptionsToRequestParameters(options),
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
  });
}

export async function _getDeserialize(result: PathUncheckedResponse): Promise<SolutionVersion> {
  const expectedStatuses = ["200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return solutionVersionDeserializer(result.body);
}

/** Get a Solution Version Resource */
export async function get(
  context: Client,
  resourceGroupName: string,
  targetName: string,
  solutionName: string,
  solutionVersionName: string,
  options: SolutionVersionsGetOptionalParams = { requestOptions: {} },
): Promise<SolutionVersion> {
  const result = await _getSend(
    context,
    resourceGroupName,
    targetName,
    solutionName,
    solutionVersionName,
    options,
  );
  return _getDeserialize(result);
}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/solutionVersions/options.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { OperationOptions } from "@azure-rest/core-client";

/** Optional parameters. */
export interface SolutionVersionsListBySolutionOptionalParams extends OperationOptions {}

/** Optional parameters. */
export interface SolutionVersionsDeleteOptionalParams extends OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
}

/** Optional parameters. */
export interface SolutionVersionsUpdateOptionalParams extends OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
}

/** Optional parameters. */
export interface SolutionVersionsCreateOrUpdateOptionalParams extends OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
}

/** Optional parameters. */
export interface SolutionVersionsGetOptionalParams extends OperationOptions {}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/targets/index.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

export {
  updateExternalValidationStatus,
  publishSolutionVersion,
  reviewSolutionVersion,
  resolveConfiguration,
  removeRevision,
  uninstallSolution,
  installSolution,
  listBySubscription,
  listByResourceGroup,
  $delete,
  update,
  createOrUpdate,
  get,
} from "./operations.js";
export {
  TargetsUpdateExternalValidationStatusOptionalParams,
  TargetsPublishSolutionVersionOptionalParams,
  TargetsReviewSolutionVersionOptionalParams,
  TargetsResolveConfigurationOptionalParams,
  TargetsRemoveRevisionOptionalParams,
  TargetsUninstallSolutionOptionalParams,
  TargetsInstallSolutionOptionalParams,
  TargetsListBySubscriptionOptionalParams,
  TargetsListByResourceGroupOptionalParams,
  TargetsDeleteOptionalParams,
  TargetsUpdateOptionalParams,
  TargetsCreateOrUpdateOptionalParams,
  TargetsGetOptionalParams,
} from "./options.js";



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/targets/operations.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementContext as Client } from "../index.js";
import {
  errorResponseDeserializer,
  SolutionVersion,
  solutionVersionDeserializer,
  InstallSolutionParameter,
  installSolutionParameterSerializer,
  Target,
  targetSerializer,
  targetDeserializer,
  TargetUpdate,
  targetUpdateSerializer,
  _TargetListResult,
  _targetListResultDeserializer,
  UninstallSolutionParameter,
  uninstallSolutionParameterSerializer,
  RemoveRevisionParameter,
  removeRevisionParameterSerializer,
  SolutionTemplateParameter,
  solutionTemplateParameterSerializer,
  ResolvedConfiguration,
  resolvedConfigurationDeserializer,
  SolutionVersionParameter,
  solutionVersionParameterSerializer,
  UpdateExternalValidationStatusParameter,
  updateExternalValidationStatusParameterSerializer,
} from "../../models/models.js";
import {
  PagedAsyncIterableIterator,
  buildPagedAsyncIterator,
} from "../../static-helpers/pagingHelpers.js";
import { getLongRunningPoller } from "../../static-helpers/pollingHelpers.js";
import { expandUrlTemplate } from "../../static-helpers/urlTemplate.js";
import {
  TargetsUpdateExternalValidationStatusOptionalParams,
  TargetsPublishSolutionVersionOptionalParams,
  TargetsReviewSolutionVersionOptionalParams,
  TargetsResolveConfigurationOptionalParams,
  TargetsRemoveRevisionOptionalParams,
  TargetsUninstallSolutionOptionalParams,
  TargetsInstallSolutionOptionalParams,
  TargetsListBySubscriptionOptionalParams,
  TargetsListByResourceGroupOptionalParams,
  TargetsDeleteOptionalParams,
  TargetsUpdateOptionalParams,
  TargetsCreateOrUpdateOptionalParams,
  TargetsGetOptionalParams,
} from "./options.js";
import {
  StreamableMethod,
  PathUncheckedResponse,
  createRestError,
  operationOptionsToRequestParameters,
} from "@azure-rest/core-client";
import { PollerLike, OperationState } from "@azure/core-lro";

export function _updateExternalValidationStatusSend(
  context: Client,
  resourceGroupName: string,
  targetName: string,
  body: UpdateExternalValidationStatusParameter,
  options: TargetsUpdateExternalValidationStatusOptionalParams = {
    requestOptions: {},
  },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/updateExternalValidationStatus{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      targetName: targetName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).post({
    ...operationOptionsToRequestParameters(options),
    contentType: "application/json",
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
    body: updateExternalValidationStatusParameterSerializer(body),
  });
}

export async function _updateExternalValidationStatusDeserialize(
  result: PathUncheckedResponse,
): Promise<SolutionVersion> {
  const expectedStatuses = ["202", "200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return solutionVersionDeserializer(result.body);
}

/** Post request to update external validation status */
export function updateExternalValidationStatus(
  context: Client,
  resourceGroupName: string,
  targetName: string,
  body: UpdateExternalValidationStatusParameter,
  options: TargetsUpdateExternalValidationStatusOptionalParams = {
    requestOptions: {},
  },
): PollerLike<OperationState<SolutionVersion>, SolutionVersion> {
  return getLongRunningPoller(context, _updateExternalValidationStatusDeserialize, ["202", "200"], {
    updateIntervalInMs: options?.updateIntervalInMs,
    abortSignal: options?.abortSignal,
    getInitialResponse: () =>
      _updateExternalValidationStatusSend(context, resourceGroupName, targetName, body, options),
    resourceLocationConfig: "location",
  }) as PollerLike<OperationState<SolutionVersion>, SolutionVersion>;
}

export function _publishSolutionVersionSend(
  context: Client,
  resourceGroupName: string,
  targetName: string,
  body: SolutionVersionParameter,
  options: TargetsPublishSolutionVersionOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/publishSolutionVersion{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      targetName: targetName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).post({
    ...operationOptionsToRequestParameters(options),
    contentType: "application/json",
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
    body: solutionVersionParameterSerializer(body),
  });
}

export async function _publishSolutionVersionDeserialize(
  result: PathUncheckedResponse,
): Promise<SolutionVersion> {
  const expectedStatuses = ["202", "200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return solutionVersionDeserializer(result.body);
}

/** Post request to publish */
export function publishSolutionVersion(
  context: Client,
  resourceGroupName: string,
  targetName: string,
  body: SolutionVersionParameter,
  options: TargetsPublishSolutionVersionOptionalParams = { requestOptions: {} },
): PollerLike<OperationState<SolutionVersion>, SolutionVersion> {
  return getLongRunningPoller(context, _publishSolutionVersionDeserialize, ["202", "200"], {
    updateIntervalInMs: options?.updateIntervalInMs,
    abortSignal: options?.abortSignal,
    getInitialResponse: () =>
      _publishSolutionVersionSend(context, resourceGroupName, targetName, body, options),
    resourceLocationConfig: "location",
  }) as PollerLike<OperationState<SolutionVersion>, SolutionVersion>;
}

export function _reviewSolutionVersionSend(
  context: Client,
  resourceGroupName: string,
  targetName: string,
  body: SolutionTemplateParameter,
  options: TargetsReviewSolutionVersionOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/reviewSolutionVersion{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      targetName: targetName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).post({
    ...operationOptionsToRequestParameters(options),
    contentType: "application/json",
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
    body: solutionTemplateParameterSerializer(body),
  });
}

export async function _reviewSolutionVersionDeserialize(
  result: PathUncheckedResponse,
): Promise<SolutionVersion> {
  const expectedStatuses = ["202", "200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return solutionVersionDeserializer(result.body);
}

/** Post request to review configuration */
export function reviewSolutionVersion(
  context: Client,
  resourceGroupName: string,
  targetName: string,
  body: SolutionTemplateParameter,
  options: TargetsReviewSolutionVersionOptionalParams = { requestOptions: {} },
): PollerLike<OperationState<SolutionVersion>, SolutionVersion> {
  return getLongRunningPoller(context, _reviewSolutionVersionDeserialize, ["202", "200"], {
    updateIntervalInMs: options?.updateIntervalInMs,
    abortSignal: options?.abortSignal,
    getInitialResponse: () =>
      _reviewSolutionVersionSend(context, resourceGroupName, targetName, body, options),
    resourceLocationConfig: "location",
  }) as PollerLike<OperationState<SolutionVersion>, SolutionVersion>;
}

export function _resolveConfigurationSend(
  context: Client,
  resourceGroupName: string,
  targetName: string,
  body: SolutionTemplateParameter,
  options: TargetsResolveConfigurationOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/resolveConfiguration{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      targetName: targetName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).post({
    ...operationOptionsToRequestParameters(options),
    contentType: "application/json",
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
    body: solutionTemplateParameterSerializer(body),
  });
}

export async function _resolveConfigurationDeserialize(
  result: PathUncheckedResponse,
): Promise<ResolvedConfiguration> {
  const expectedStatuses = ["202", "200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return resolvedConfigurationDeserializer(result.body);
}

/** Post request to resolve configuration */
export function resolveConfiguration(
  context: Client,
  resourceGroupName: string,
  targetName: string,
  body: SolutionTemplateParameter,
  options: TargetsResolveConfigurationOptionalParams = { requestOptions: {} },
): PollerLike<OperationState<ResolvedConfiguration>, ResolvedConfiguration> {
  return getLongRunningPoller(context, _resolveConfigurationDeserialize, ["202", "200"], {
    updateIntervalInMs: options?.updateIntervalInMs,
    abortSignal: options?.abortSignal,
    getInitialResponse: () =>
      _resolveConfigurationSend(context, resourceGroupName, targetName, body, options),
    resourceLocationConfig: "location",
  }) as PollerLike<OperationState<ResolvedConfiguration>, ResolvedConfiguration>;
}

export function _removeRevisionSend(
  context: Client,
  resourceGroupName: string,
  targetName: string,
  body: RemoveRevisionParameter,
  options: TargetsRemoveRevisionOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/removeRevision{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      targetName: targetName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).post({
    ...operationOptionsToRequestParameters(options),
    contentType: "application/json",
    body: removeRevisionParameterSerializer(body),
  });
}

export async function _removeRevisionDeserialize(result: PathUncheckedResponse): Promise<void> {
  const expectedStatuses = ["202", "200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return;
}

/** Post request to remove solution version revision */
export function removeRevision(
  context: Client,
  resourceGroupName: string,
  targetName: string,
  body: RemoveRevisionParameter,
  options: TargetsRemoveRevisionOptionalParams = { requestOptions: {} },
): PollerLike<OperationState<void>, void> {
  return getLongRunningPoller(context, _removeRevisionDeserialize, ["202", "200"], {
    updateIntervalInMs: options?.updateIntervalInMs,
    abortSignal: options?.abortSignal,
    getInitialResponse: () =>
      _removeRevisionSend(context, resourceGroupName, targetName, body, options),
    resourceLocationConfig: "location",
  }) as PollerLike<OperationState<void>, void>;
}

export function _uninstallSolutionSend(
  context: Client,
  resourceGroupName: string,
  targetName: string,
  body: UninstallSolutionParameter,
  options: TargetsUninstallSolutionOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/uninstallSolution{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      targetName: targetName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).post({
    ...operationOptionsToRequestParameters(options),
    contentType: "application/json",
    body: uninstallSolutionParameterSerializer(body),
  });
}

export async function _uninstallSolutionDeserialize(result: PathUncheckedResponse): Promise<void> {
  const expectedStatuses = ["202", "200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return;
}

/** Post request to uninstall */
export function uninstallSolution(
  context: Client,
  resourceGroupName: string,
  targetName: string,
  body: UninstallSolutionParameter,
  options: TargetsUninstallSolutionOptionalParams = { requestOptions: {} },
): PollerLike<OperationState<void>, void> {
  return getLongRunningPoller(context, _uninstallSolutionDeserialize, ["202", "200"], {
    updateIntervalInMs: options?.updateIntervalInMs,
    abortSignal: options?.abortSignal,
    getInitialResponse: () =>
      _uninstallSolutionSend(context, resourceGroupName, targetName, body, options),
    resourceLocationConfig: "location",
  }) as PollerLike<OperationState<void>, void>;
}

export function _installSolutionSend(
  context: Client,
  resourceGroupName: string,
  targetName: string,
  body: InstallSolutionParameter,
  options: TargetsInstallSolutionOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/installSolution{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      targetName: targetName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).post({
    ...operationOptionsToRequestParameters(options),
    contentType: "application/json",
    body: installSolutionParameterSerializer(body),
  });
}

export async function _installSolutionDeserialize(result: PathUncheckedResponse): Promise<void> {
  const expectedStatuses = ["202", "200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return;
}

/** Post request to deploy */
export function installSolution(
  context: Client,
  resourceGroupName: string,
  targetName: string,
  body: InstallSolutionParameter,
  options: TargetsInstallSolutionOptionalParams = { requestOptions: {} },
): PollerLike<OperationState<void>, void> {
  return getLongRunningPoller(context, _installSolutionDeserialize, ["202", "200"], {
    updateIntervalInMs: options?.updateIntervalInMs,
    abortSignal: options?.abortSignal,
    getInitialResponse: () =>
      _installSolutionSend(context, resourceGroupName, targetName, body, options),
    resourceLocationConfig: "location",
  }) as PollerLike<OperationState<void>, void>;
}

export function _listBySubscriptionSend(
  context: Client,
  options: TargetsListBySubscriptionOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/providers/Microsoft.Edge/targets{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).get({
    ...operationOptionsToRequestParameters(options),
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
  });
}

export async function _listBySubscriptionDeserialize(
  result: PathUncheckedResponse,
): Promise<_TargetListResult> {
  const expectedStatuses = ["200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return _targetListResultDeserializer(result.body);
}

/** List by subscription */
export function listBySubscription(
  context: Client,
  options: TargetsListBySubscriptionOptionalParams = { requestOptions: {} },
): PagedAsyncIterableIterator<Target> {
  return buildPagedAsyncIterator(
    context,
    () => _listBySubscriptionSend(context, options),
    _listBySubscriptionDeserialize,
    ["200"],
    { itemName: "value", nextLinkName: "nextLink" },
  );
}

export function _listByResourceGroupSend(
  context: Client,
  resourceGroupName: string,
  options: TargetsListByResourceGroupOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).get({
    ...operationOptionsToRequestParameters(options),
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
  });
}

export async function _listByResourceGroupDeserialize(
  result: PathUncheckedResponse,
): Promise<_TargetListResult> {
  const expectedStatuses = ["200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return _targetListResultDeserializer(result.body);
}

/** List by specified resource group */
export function listByResourceGroup(
  context: Client,
  resourceGroupName: string,
  options: TargetsListByResourceGroupOptionalParams = { requestOptions: {} },
): PagedAsyncIterableIterator<Target> {
  return buildPagedAsyncIterator(
    context,
    () => _listByResourceGroupSend(context, resourceGroupName, options),
    _listByResourceGroupDeserialize,
    ["200"],
    { itemName: "value", nextLinkName: "nextLink" },
  );
}

export function _$deleteSend(
  context: Client,
  resourceGroupName: string,
  targetName: string,
  options: TargetsDeleteOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}{?api%2Dversion,forceDelete}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      targetName: targetName,
      "api%2Dversion": context.apiVersion,
      forceDelete: options?.forceDelete,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).delete({ ...operationOptionsToRequestParameters(options) });
}

export async function _$deleteDeserialize(result: PathUncheckedResponse): Promise<void> {
  const expectedStatuses = ["202", "204", "200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return;
}

/** Delete a Target Resource */
/**
 *  @fixme delete is a reserved word that cannot be used as an operation name.
 *         Please add @clientName("clientName") or @clientName("<JS-Specific-Name>", "javascript")
 *         to the operation to override the generated name.
 */
export function $delete(
  context: Client,
  resourceGroupName: string,
  targetName: string,
  options: TargetsDeleteOptionalParams = { requestOptions: {} },
): PollerLike<OperationState<void>, void> {
  return getLongRunningPoller(context, _$deleteDeserialize, ["202", "204", "200"], {
    updateIntervalInMs: options?.updateIntervalInMs,
    abortSignal: options?.abortSignal,
    getInitialResponse: () => _$deleteSend(context, resourceGroupName, targetName, options),
    resourceLocationConfig: "location",
  }) as PollerLike<OperationState<void>, void>;
}

export function _updateSend(
  context: Client,
  resourceGroupName: string,
  targetName: string,
  properties: TargetUpdate,
  options: TargetsUpdateOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      targetName: targetName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).patch({
    ...operationOptionsToRequestParameters(options),
    contentType: "application/json",
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
    body: targetUpdateSerializer(properties),
  });
}

export async function _updateDeserialize(result: PathUncheckedResponse): Promise<Target> {
  const expectedStatuses = ["200", "202"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return targetDeserializer(result.body);
}

/** update a Target Resource */
export function update(
  context: Client,
  resourceGroupName: string,
  targetName: string,
  properties: TargetUpdate,
  options: TargetsUpdateOptionalParams = { requestOptions: {} },
): PollerLike<OperationState<Target>, Target> {
  return getLongRunningPoller(context, _updateDeserialize, ["200", "202"], {
    updateIntervalInMs: options?.updateIntervalInMs,
    abortSignal: options?.abortSignal,
    getInitialResponse: () =>
      _updateSend(context, resourceGroupName, targetName, properties, options),
    resourceLocationConfig: "location",
  }) as PollerLike<OperationState<Target>, Target>;
}

export function _createOrUpdateSend(
  context: Client,
  resourceGroupName: string,
  targetName: string,
  resource: Target,
  options: TargetsCreateOrUpdateOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      targetName: targetName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).put({
    ...operationOptionsToRequestParameters(options),
    contentType: "application/json",
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
    body: targetSerializer(resource),
  });
}

export async function _createOrUpdateDeserialize(result: PathUncheckedResponse): Promise<Target> {
  const expectedStatuses = ["200", "201", "202"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return targetDeserializer(result.body);
}

/** Create or update a Target Resource */
export function createOrUpdate(
  context: Client,
  resourceGroupName: string,
  targetName: string,
  resource: Target,
  options: TargetsCreateOrUpdateOptionalParams = { requestOptions: {} },
): PollerLike<OperationState<Target>, Target> {
  return getLongRunningPoller(context, _createOrUpdateDeserialize, ["200", "201", "202"], {
    updateIntervalInMs: options?.updateIntervalInMs,
    abortSignal: options?.abortSignal,
    getInitialResponse: () =>
      _createOrUpdateSend(context, resourceGroupName, targetName, resource, options),
    resourceLocationConfig: "azure-async-operation",
  }) as PollerLike<OperationState<Target>, Target>;
}

export function _getSend(
  context: Client,
  resourceGroupName: string,
  targetName: string,
  options: TargetsGetOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      targetName: targetName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).get({
    ...operationOptionsToRequestParameters(options),
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
  });
}

export async function _getDeserialize(result: PathUncheckedResponse): Promise<Target> {
  const expectedStatuses = ["200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return targetDeserializer(result.body);
}

/** Get a Target Resource */
export async function get(
  context: Client,
  resourceGroupName: string,
  targetName: string,
  options: TargetsGetOptionalParams = { requestOptions: {} },
): Promise<Target> {
  const result = await _getSend(context, resourceGroupName, targetName, options);
  return _getDeserialize(result);
}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/targets/options.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { OperationOptions } from "@azure-rest/core-client";

/** Optional parameters. */
export interface TargetsUpdateExternalValidationStatusOptionalParams extends OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
}

/** Optional parameters. */
export interface TargetsPublishSolutionVersionOptionalParams extends OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
}

/** Optional parameters. */
export interface TargetsReviewSolutionVersionOptionalParams extends OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
}

/** Optional parameters. */
export interface TargetsResolveConfigurationOptionalParams extends OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
}

/** Optional parameters. */
export interface TargetsRemoveRevisionOptionalParams extends OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
}

/** Optional parameters. */
export interface TargetsUninstallSolutionOptionalParams extends OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
}

/** Optional parameters. */
export interface TargetsInstallSolutionOptionalParams extends OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
}

/** Optional parameters. */
export interface TargetsListBySubscriptionOptionalParams extends OperationOptions {}

/** Optional parameters. */
export interface TargetsListByResourceGroupOptionalParams extends OperationOptions {}

/** Optional parameters. */
export interface TargetsDeleteOptionalParams extends OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** Force delete */
  forceDelete?: boolean;
}

/** Optional parameters. */
export interface TargetsUpdateOptionalParams extends OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
}

/** Optional parameters. */
export interface TargetsCreateOrUpdateOptionalParams extends OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
}

/** Optional parameters. */
export interface TargetsGetOptionalParams extends OperationOptions {}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/workflows/index.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

export { listByContext, $delete, update, createOrUpdate, get } from "./operations.js";
export {
  WorkflowsListByContextOptionalParams,
  WorkflowsDeleteOptionalParams,
  WorkflowsUpdateOptionalParams,
  WorkflowsCreateOrUpdateOptionalParams,
  WorkflowsGetOptionalParams,
} from "./options.js";



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/workflows/operations.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementContext as Client } from "../index.js";
import {
  errorResponseDeserializer,
  Workflow,
  workflowSerializer,
  workflowDeserializer,
  _WorkflowListResult,
  _workflowListResultDeserializer,
} from "../../models/models.js";
import {
  PagedAsyncIterableIterator,
  buildPagedAsyncIterator,
} from "../../static-helpers/pagingHelpers.js";
import { getLongRunningPoller } from "../../static-helpers/pollingHelpers.js";
import { expandUrlTemplate } from "../../static-helpers/urlTemplate.js";
import {
  WorkflowsListByContextOptionalParams,
  WorkflowsDeleteOptionalParams,
  WorkflowsUpdateOptionalParams,
  WorkflowsCreateOrUpdateOptionalParams,
  WorkflowsGetOptionalParams,
} from "./options.js";
import {
  StreamableMethod,
  PathUncheckedResponse,
  createRestError,
  operationOptionsToRequestParameters,
} from "@azure-rest/core-client";
import { PollerLike, OperationState } from "@azure/core-lro";

export function _listByContextSend(
  context: Client,
  resourceGroupName: string,
  contextName: string,
  options: WorkflowsListByContextOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      contextName: contextName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).get({
    ...operationOptionsToRequestParameters(options),
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
  });
}

export async function _listByContextDeserialize(
  result: PathUncheckedResponse,
): Promise<_WorkflowListResult> {
  const expectedStatuses = ["200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return _workflowListResultDeserializer(result.body);
}

/** List Workflow resources */
export function listByContext(
  context: Client,
  resourceGroupName: string,
  contextName: string,
  options: WorkflowsListByContextOptionalParams = { requestOptions: {} },
): PagedAsyncIterableIterator<Workflow> {
  return buildPagedAsyncIterator(
    context,
    () => _listByContextSend(context, resourceGroupName, contextName, options),
    _listByContextDeserialize,
    ["200"],
    { itemName: "value", nextLinkName: "nextLink" },
  );
}

export function _$deleteSend(
  context: Client,
  resourceGroupName: string,
  contextName: string,
  workflowName: string,
  options: WorkflowsDeleteOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      contextName: contextName,
      workflowName: workflowName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).delete({ ...operationOptionsToRequestParameters(options) });
}

export async function _$deleteDeserialize(result: PathUncheckedResponse): Promise<void> {
  const expectedStatuses = ["202", "204", "200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return;
}

/** Delete a Workflow resource */
/**
 *  @fixme delete is a reserved word that cannot be used as an operation name.
 *         Please add @clientName("clientName") or @clientName("<JS-Specific-Name>", "javascript")
 *         to the operation to override the generated name.
 */
export function $delete(
  context: Client,
  resourceGroupName: string,
  contextName: string,
  workflowName: string,
  options: WorkflowsDeleteOptionalParams = { requestOptions: {} },
): PollerLike<OperationState<void>, void> {
  return getLongRunningPoller(context, _$deleteDeserialize, ["202", "204", "200"], {
    updateIntervalInMs: options?.updateIntervalInMs,
    abortSignal: options?.abortSignal,
    getInitialResponse: () =>
      _$deleteSend(context, resourceGroupName, contextName, workflowName, options),
    resourceLocationConfig: "location",
  }) as PollerLike<OperationState<void>, void>;
}

export function _updateSend(
  context: Client,
  resourceGroupName: string,
  contextName: string,
  workflowName: string,
  properties: Workflow,
  options: WorkflowsUpdateOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      contextName: contextName,
      workflowName: workflowName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).patch({
    ...operationOptionsToRequestParameters(options),
    contentType: "application/json",
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
    body: workflowSerializer(properties),
  });
}

export async function _updateDeserialize(result: PathUncheckedResponse): Promise<Workflow> {
  const expectedStatuses = ["200", "202"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return workflowDeserializer(result.body);
}

/** update a Workflow resource */
export function update(
  context: Client,
  resourceGroupName: string,
  contextName: string,
  workflowName: string,
  properties: Workflow,
  options: WorkflowsUpdateOptionalParams = { requestOptions: {} },
): PollerLike<OperationState<Workflow>, Workflow> {
  return getLongRunningPoller(context, _updateDeserialize, ["200", "202"], {
    updateIntervalInMs: options?.updateIntervalInMs,
    abortSignal: options?.abortSignal,
    getInitialResponse: () =>
      _updateSend(context, resourceGroupName, contextName, workflowName, properties, options),
    resourceLocationConfig: "location",
  }) as PollerLike<OperationState<Workflow>, Workflow>;
}

export function _createOrUpdateSend(
  context: Client,
  resourceGroupName: string,
  contextName: string,
  workflowName: string,
  resource: Workflow,
  options: WorkflowsCreateOrUpdateOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      contextName: contextName,
      workflowName: workflowName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).put({
    ...operationOptionsToRequestParameters(options),
    contentType: "application/json",
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
    body: workflowSerializer(resource),
  });
}

export async function _createOrUpdateDeserialize(result: PathUncheckedResponse): Promise<Workflow> {
  const expectedStatuses = ["200", "201", "202"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return workflowDeserializer(result.body);
}

/** Create or update a Workflow resource */
export function createOrUpdate(
  context: Client,
  resourceGroupName: string,
  contextName: string,
  workflowName: string,
  resource: Workflow,
  options: WorkflowsCreateOrUpdateOptionalParams = { requestOptions: {} },
): PollerLike<OperationState<Workflow>, Workflow> {
  return getLongRunningPoller(context, _createOrUpdateDeserialize, ["200", "201", "202"], {
    updateIntervalInMs: options?.updateIntervalInMs,
    abortSignal: options?.abortSignal,
    getInitialResponse: () =>
      _createOrUpdateSend(context, resourceGroupName, contextName, workflowName, resource, options),
    resourceLocationConfig: "azure-async-operation",
  }) as PollerLike<OperationState<Workflow>, Workflow>;
}

export function _getSend(
  context: Client,
  resourceGroupName: string,
  contextName: string,
  workflowName: string,
  options: WorkflowsGetOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      contextName: contextName,
      workflowName: workflowName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).get({
    ...operationOptionsToRequestParameters(options),
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
  });
}

export async function _getDeserialize(result: PathUncheckedResponse): Promise<Workflow> {
  const expectedStatuses = ["200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return workflowDeserializer(result.body);
}

/** Get a Workflow resource */
export async function get(
  context: Client,
  resourceGroupName: string,
  contextName: string,
  workflowName: string,
  options: WorkflowsGetOptionalParams = { requestOptions: {} },
): Promise<Workflow> {
  const result = await _getSend(context, resourceGroupName, contextName, workflowName, options);
  return _getDeserialize(result);
}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/workflows/options.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { OperationOptions } from "@azure-rest/core-client";

/** Optional parameters. */
export interface WorkflowsListByContextOptionalParams extends OperationOptions {}

/** Optional parameters. */
export interface WorkflowsDeleteOptionalParams extends OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
}

/** Optional parameters. */
export interface WorkflowsUpdateOptionalParams extends OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
}

/** Optional parameters. */
export interface WorkflowsCreateOrUpdateOptionalParams extends OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
}

/** Optional parameters. */
export interface WorkflowsGetOptionalParams extends OperationOptions {}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/workflowVersions/index.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

export { listByWorkflow, $delete, update, createOrUpdate, get } from "./operations.js";
export {
  WorkflowVersionsListByWorkflowOptionalParams,
  WorkflowVersionsDeleteOptionalParams,
  WorkflowVersionsUpdateOptionalParams,
  WorkflowVersionsCreateOrUpdateOptionalParams,
  WorkflowVersionsGetOptionalParams,
} from "./options.js";



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/workflowVersions/operations.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementContext as Client } from "../index.js";
import {
  errorResponseDeserializer,
  WorkflowVersion,
  workflowVersionSerializer,
  workflowVersionDeserializer,
  _WorkflowVersionListResult,
  _workflowVersionListResultDeserializer,
} from "../../models/models.js";
import {
  PagedAsyncIterableIterator,
  buildPagedAsyncIterator,
} from "../../static-helpers/pagingHelpers.js";
import { getLongRunningPoller } from "../../static-helpers/pollingHelpers.js";
import { expandUrlTemplate } from "../../static-helpers/urlTemplate.js";
import {
  WorkflowVersionsListByWorkflowOptionalParams,
  WorkflowVersionsDeleteOptionalParams,
  WorkflowVersionsUpdateOptionalParams,
  WorkflowVersionsCreateOrUpdateOptionalParams,
  WorkflowVersionsGetOptionalParams,
} from "./options.js";
import {
  StreamableMethod,
  PathUncheckedResponse,
  createRestError,
  operationOptionsToRequestParameters,
} from "@azure-rest/core-client";
import { PollerLike, OperationState } from "@azure/core-lro";

export function _listByWorkflowSend(
  context: Client,
  resourceGroupName: string,
  contextName: string,
  workflowName: string,
  options: WorkflowVersionsListByWorkflowOptionalParams = {
    requestOptions: {},
  },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      contextName: contextName,
      workflowName: workflowName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).get({
    ...operationOptionsToRequestParameters(options),
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
  });
}

export async function _listByWorkflowDeserialize(
  result: PathUncheckedResponse,
): Promise<_WorkflowVersionListResult> {
  const expectedStatuses = ["200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return _workflowVersionListResultDeserializer(result.body);
}

/** List Workflow Version Resources */
export function listByWorkflow(
  context: Client,
  resourceGroupName: string,
  contextName: string,
  workflowName: string,
  options: WorkflowVersionsListByWorkflowOptionalParams = {
    requestOptions: {},
  },
): PagedAsyncIterableIterator<WorkflowVersion> {
  return buildPagedAsyncIterator(
    context,
    () => _listByWorkflowSend(context, resourceGroupName, contextName, workflowName, options),
    _listByWorkflowDeserialize,
    ["200"],
    { itemName: "value", nextLinkName: "nextLink" },
  );
}

export function _$deleteSend(
  context: Client,
  resourceGroupName: string,
  contextName: string,
  workflowName: string,
  versionName: string,
  options: WorkflowVersionsDeleteOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions/{versionName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      contextName: contextName,
      workflowName: workflowName,
      versionName: versionName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).delete({ ...operationOptionsToRequestParameters(options) });
}

export async function _$deleteDeserialize(result: PathUncheckedResponse): Promise<void> {
  const expectedStatuses = ["202", "204", "200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return;
}

/** Delete a Workflow Version Resource */
/**
 *  @fixme delete is a reserved word that cannot be used as an operation name.
 *         Please add @clientName("clientName") or @clientName("<JS-Specific-Name>", "javascript")
 *         to the operation to override the generated name.
 */
export function $delete(
  context: Client,
  resourceGroupName: string,
  contextName: string,
  workflowName: string,
  versionName: string,
  options: WorkflowVersionsDeleteOptionalParams = { requestOptions: {} },
): PollerLike<OperationState<void>, void> {
  return getLongRunningPoller(context, _$deleteDeserialize, ["202", "204", "200"], {
    updateIntervalInMs: options?.updateIntervalInMs,
    abortSignal: options?.abortSignal,
    getInitialResponse: () =>
      _$deleteSend(context, resourceGroupName, contextName, workflowName, versionName, options),
    resourceLocationConfig: "location",
  }) as PollerLike<OperationState<void>, void>;
}

export function _updateSend(
  context: Client,
  resourceGroupName: string,
  contextName: string,
  workflowName: string,
  versionName: string,
  properties: WorkflowVersion,
  options: WorkflowVersionsUpdateOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions/{versionName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      contextName: contextName,
      workflowName: workflowName,
      versionName: versionName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).patch({
    ...operationOptionsToRequestParameters(options),
    contentType: "application/json",
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
    body: workflowVersionSerializer(properties),
  });
}

export async function _updateDeserialize(result: PathUncheckedResponse): Promise<WorkflowVersion> {
  const expectedStatuses = ["200", "202"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return workflowVersionDeserializer(result.body);
}

/** update an WorkflowVersion Resource */
export function update(
  context: Client,
  resourceGroupName: string,
  contextName: string,
  workflowName: string,
  versionName: string,
  properties: WorkflowVersion,
  options: WorkflowVersionsUpdateOptionalParams = { requestOptions: {} },
): PollerLike<OperationState<WorkflowVersion>, WorkflowVersion> {
  return getLongRunningPoller(context, _updateDeserialize, ["200", "202"], {
    updateIntervalInMs: options?.updateIntervalInMs,
    abortSignal: options?.abortSignal,
    getInitialResponse: () =>
      _updateSend(
        context,
        resourceGroupName,
        contextName,
        workflowName,
        versionName,
        properties,
        options,
      ),
    resourceLocationConfig: "location",
  }) as PollerLike<OperationState<WorkflowVersion>, WorkflowVersion>;
}

export function _createOrUpdateSend(
  context: Client,
  resourceGroupName: string,
  contextName: string,
  workflowName: string,
  versionName: string,
  resource: WorkflowVersion,
  options: WorkflowVersionsCreateOrUpdateOptionalParams = {
    requestOptions: {},
  },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions/{versionName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      contextName: contextName,
      workflowName: workflowName,
      versionName: versionName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).put({
    ...operationOptionsToRequestParameters(options),
    contentType: "application/json",
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
    body: workflowVersionSerializer(resource),
  });
}

export async function _createOrUpdateDeserialize(
  result: PathUncheckedResponse,
): Promise<WorkflowVersion> {
  const expectedStatuses = ["200", "201", "202"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return workflowVersionDeserializer(result.body);
}

/** Create or update a Workflow Version Resource */
export function createOrUpdate(
  context: Client,
  resourceGroupName: string,
  contextName: string,
  workflowName: string,
  versionName: string,
  resource: WorkflowVersion,
  options: WorkflowVersionsCreateOrUpdateOptionalParams = {
    requestOptions: {},
  },
): PollerLike<OperationState<WorkflowVersion>, WorkflowVersion> {
  return getLongRunningPoller(context, _createOrUpdateDeserialize, ["200", "201", "202"], {
    updateIntervalInMs: options?.updateIntervalInMs,
    abortSignal: options?.abortSignal,
    getInitialResponse: () =>
      _createOrUpdateSend(
        context,
        resourceGroupName,
        contextName,
        workflowName,
        versionName,
        resource,
        options,
      ),
    resourceLocationConfig: "azure-async-operation",
  }) as PollerLike<OperationState<WorkflowVersion>, WorkflowVersion>;
}

export function _getSend(
  context: Client,
  resourceGroupName: string,
  contextName: string,
  workflowName: string,
  versionName: string,
  options: WorkflowVersionsGetOptionalParams = { requestOptions: {} },
): StreamableMethod {
  const path = expandUrlTemplate(
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions/{versionName}{?api%2Dversion}",
    {
      subscriptionId: context.subscriptionId,
      resourceGroupName: resourceGroupName,
      contextName: contextName,
      workflowName: workflowName,
      versionName: versionName,
      "api%2Dversion": context.apiVersion,
    },
    {
      allowReserved: options?.requestOptions?.skipUrlEncoding,
    },
  );
  return context.path(path).get({
    ...operationOptionsToRequestParameters(options),
    headers: {
      accept: "application/json",
      ...options.requestOptions?.headers,
    },
  });
}

export async function _getDeserialize(result: PathUncheckedResponse): Promise<WorkflowVersion> {
  const expectedStatuses = ["200"];
  if (!expectedStatuses.includes(result.status)) {
    const error = createRestError(result);
    error.details = errorResponseDeserializer(result.body);
    throw error;
  }

  return workflowVersionDeserializer(result.body);
}

/** Get a Workflow Version Resource */
export async function get(
  context: Client,
  resourceGroupName: string,
  contextName: string,
  workflowName: string,
  versionName: string,
  options: WorkflowVersionsGetOptionalParams = { requestOptions: {} },
): Promise<WorkflowVersion> {
  const result = await _getSend(
    context,
    resourceGroupName,
    contextName,
    workflowName,
    versionName,
    options,
  );
  return _getDeserialize(result);
}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/api/workflowVersions/options.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { OperationOptions } from "@azure-rest/core-client";

/** Optional parameters. */
export interface WorkflowVersionsListByWorkflowOptionalParams extends OperationOptions {}

/** Optional parameters. */
export interface WorkflowVersionsDeleteOptionalParams extends OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
}

/** Optional parameters. */
export interface WorkflowVersionsUpdateOptionalParams extends OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
}

/** Optional parameters. */
export interface WorkflowVersionsCreateOrUpdateOptionalParams extends OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
}

/** Optional parameters. */
export interface WorkflowVersionsGetOptionalParams extends OperationOptions {}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/classic/index.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

export { ConfigTemplatesOperations } from "./configTemplates/index.js";
export { ConfigTemplateVersionsOperations } from "./configTemplateVersions/index.js";
export { ContextsOperations } from "./contexts/index.js";
export { DiagnosticsOperations } from "./diagnostics/index.js";
export { DynamicSchemasOperations } from "./dynamicSchemas/index.js";
export { DynamicSchemaVersionsOperations } from "./dynamicSchemaVersions/index.js";
export { ExecutionsOperations } from "./executions/index.js";
export { InstanceHistoriesOperations } from "./instanceHistories/index.js";
export { InstancesOperations } from "./instances/index.js";
export { JobsOperations } from "./jobs/index.js";
export { SchemaReferencesOperations } from "./schemaReferences/index.js";
export { SchemasOperations } from "./schemas/index.js";
export { SchemaVersionsOperations } from "./schemaVersions/index.js";
export { SiteReferencesOperations } from "./siteReferences/index.js";
export { SolutionsOperations } from "./solutions/index.js";
export { SolutionTemplatesOperations } from "./solutionTemplates/index.js";
export { SolutionTemplateVersionsOperations } from "./solutionTemplateVersions/index.js";
export { SolutionVersionsOperations } from "./solutionVersions/index.js";
export { TargetsOperations } from "./targets/index.js";
export { WorkflowsOperations } from "./workflows/index.js";
export { WorkflowVersionsOperations } from "./workflowVersions/index.js";



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/classic/configTemplates/index.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementContext } from "../../api/workloadOrchestrationManagementContext.js";
import {
  listBySubscription,
  listByResourceGroup,
  $delete,
  removeVersion,
  createVersion,
  update,
  createOrUpdate,
  get,
} from "../../api/configTemplates/operations.js";
import {
  ConfigTemplatesListBySubscriptionOptionalParams,
  ConfigTemplatesListByResourceGroupOptionalParams,
  ConfigTemplatesDeleteOptionalParams,
  ConfigTemplatesRemoveVersionOptionalParams,
  ConfigTemplatesCreateVersionOptionalParams,
  ConfigTemplatesUpdateOptionalParams,
  ConfigTemplatesCreateOrUpdateOptionalParams,
  ConfigTemplatesGetOptionalParams,
} from "../../api/configTemplates/options.js";
import {
  VersionParameter,
  RemoveVersionResponse,
  ConfigTemplate,
  ConfigTemplateUpdate,
  ConfigTemplateVersionWithUpdateType,
  ConfigTemplateVersion,
} from "../../models/models.js";
import { PagedAsyncIterableIterator } from "../../static-helpers/pagingHelpers.js";
import { PollerLike, OperationState } from "@azure/core-lro";

/** Interface representing a ConfigTemplates operations. */
export interface ConfigTemplatesOperations {
  /** List by subscription */
  listBySubscription: (
    options?: ConfigTemplatesListBySubscriptionOptionalParams,
  ) => PagedAsyncIterableIterator<ConfigTemplate>;
  /** List by specified resource group */
  listByResourceGroup: (
    resourceGroupName: string,
    options?: ConfigTemplatesListByResourceGroupOptionalParams,
  ) => PagedAsyncIterableIterator<ConfigTemplate>;
  /** Delete a Config Template Resource */
  /**
   *  @fixme delete is a reserved word that cannot be used as an operation name.
   *         Please add @clientName("clientName") or @clientName("<JS-Specific-Name>", "javascript")
   *         to the operation to override the generated name.
   */
  delete: (
    resourceGroupName: string,
    configTemplateName: string,
    options?: ConfigTemplatesDeleteOptionalParams,
  ) => PollerLike<OperationState<void>, void>;
  /** Remove Config Template Version Resource */
  removeVersion: (
    resourceGroupName: string,
    configTemplateName: string,
    body: VersionParameter,
    options?: ConfigTemplatesRemoveVersionOptionalParams,
  ) => Promise<RemoveVersionResponse>;
  /** Create or update a Config Template Version Resource with the specified UpdateType */
  createVersion: (
    resourceGroupName: string,
    configTemplateName: string,
    body: ConfigTemplateVersionWithUpdateType,
    options?: ConfigTemplatesCreateVersionOptionalParams,
  ) => PollerLike<OperationState<ConfigTemplateVersion>, ConfigTemplateVersion>;
  /** update a Config Template Resource */
  update: (
    resourceGroupName: string,
    configTemplateName: string,
    properties: ConfigTemplateUpdate,
    options?: ConfigTemplatesUpdateOptionalParams,
  ) => Promise<ConfigTemplate>;
  /** Create or update a Config Template Resource */
  createOrUpdate: (
    resourceGroupName: string,
    configTemplateName: string,
    resource: ConfigTemplate,
    options?: ConfigTemplatesCreateOrUpdateOptionalParams,
  ) => PollerLike<OperationState<ConfigTemplate>, ConfigTemplate>;
  /** Get a Config Template Resource */
  get: (
    resourceGroupName: string,
    configTemplateName: string,
    options?: ConfigTemplatesGetOptionalParams,
  ) => Promise<ConfigTemplate>;
}

function _getConfigTemplates(context: WorkloadOrchestrationManagementContext) {
  return {
    listBySubscription: (options?: ConfigTemplatesListBySubscriptionOptionalParams) =>
      listBySubscription(context, options),
    listByResourceGroup: (
      resourceGroupName: string,
      options?: ConfigTemplatesListByResourceGroupOptionalParams,
    ) => listByResourceGroup(context, resourceGroupName, options),
    delete: (
      resourceGroupName: string,
      configTemplateName: string,
      options?: ConfigTemplatesDeleteOptionalParams,
    ) => $delete(context, resourceGroupName, configTemplateName, options),
    removeVersion: (
      resourceGroupName: string,
      configTemplateName: string,
      body: VersionParameter,
      options?: ConfigTemplatesRemoveVersionOptionalParams,
    ) => removeVersion(context, resourceGroupName, configTemplateName, body, options),
    createVersion: (
      resourceGroupName: string,
      configTemplateName: string,
      body: ConfigTemplateVersionWithUpdateType,
      options?: ConfigTemplatesCreateVersionOptionalParams,
    ) => createVersion(context, resourceGroupName, configTemplateName, body, options),
    update: (
      resourceGroupName: string,
      configTemplateName: string,
      properties: ConfigTemplateUpdate,
      options?: ConfigTemplatesUpdateOptionalParams,
    ) => update(context, resourceGroupName, configTemplateName, properties, options),
    createOrUpdate: (
      resourceGroupName: string,
      configTemplateName: string,
      resource: ConfigTemplate,
      options?: ConfigTemplatesCreateOrUpdateOptionalParams,
    ) => createOrUpdate(context, resourceGroupName, configTemplateName, resource, options),
    get: (
      resourceGroupName: string,
      configTemplateName: string,
      options?: ConfigTemplatesGetOptionalParams,
    ) => get(context, resourceGroupName, configTemplateName, options),
  };
}

export function _getConfigTemplatesOperations(
  context: WorkloadOrchestrationManagementContext,
): ConfigTemplatesOperations {
  return {
    ..._getConfigTemplates(context),
  };
}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/classic/configTemplateVersions/index.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementContext } from "../../api/workloadOrchestrationManagementContext.js";
import { listByConfigTemplate, get } from "../../api/configTemplateVersions/operations.js";
import {
  ConfigTemplateVersionsListByConfigTemplateOptionalParams,
  ConfigTemplateVersionsGetOptionalParams,
} from "../../api/configTemplateVersions/options.js";
import { ConfigTemplateVersion } from "../../models/models.js";
import { PagedAsyncIterableIterator } from "../../static-helpers/pagingHelpers.js";

/** Interface representing a ConfigTemplateVersions operations. */
export interface ConfigTemplateVersionsOperations {
  /** List Config Template Version Resources */
  listByConfigTemplate: (
    resourceGroupName: string,
    configTemplateName: string,
    options?: ConfigTemplateVersionsListByConfigTemplateOptionalParams,
  ) => PagedAsyncIterableIterator<ConfigTemplateVersion>;
  /** Get a Config Template Version Resource */
  get: (
    resourceGroupName: string,
    configTemplateName: string,
    configTemplateVersionName: string,
    options?: ConfigTemplateVersionsGetOptionalParams,
  ) => Promise<ConfigTemplateVersion>;
}

function _getConfigTemplateVersions(context: WorkloadOrchestrationManagementContext) {
  return {
    listByConfigTemplate: (
      resourceGroupName: string,
      configTemplateName: string,
      options?: ConfigTemplateVersionsListByConfigTemplateOptionalParams,
    ) => listByConfigTemplate(context, resourceGroupName, configTemplateName, options),
    get: (
      resourceGroupName: string,
      configTemplateName: string,
      configTemplateVersionName: string,
      options?: ConfigTemplateVersionsGetOptionalParams,
    ) => get(context, resourceGroupName, configTemplateName, configTemplateVersionName, options),
  };
}

export function _getConfigTemplateVersionsOperations(
  context: WorkloadOrchestrationManagementContext,
): ConfigTemplateVersionsOperations {
  return {
    ..._getConfigTemplateVersions(context),
  };
}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/classic/contexts/index.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementContext } from "../../api/workloadOrchestrationManagementContext.js";
import {
  $delete,
  listBySubscription,
  listByResourceGroup,
  update,
  createOrUpdate,
  get,
} from "../../api/contexts/operations.js";
import {
  ContextsDeleteOptionalParams,
  ContextsListBySubscriptionOptionalParams,
  ContextsListByResourceGroupOptionalParams,
  ContextsUpdateOptionalParams,
  ContextsCreateOrUpdateOptionalParams,
  ContextsGetOptionalParams,
} from "../../api/contexts/options.js";
import { Context, ContextUpdate } from "../../models/models.js";
import { PagedAsyncIterableIterator } from "../../static-helpers/pagingHelpers.js";
import { PollerLike, OperationState } from "@azure/core-lro";

/** Interface representing a Contexts operations. */
export interface ContextsOperations {
  /** Delete Context Resource */
  /**
   *  @fixme delete is a reserved word that cannot be used as an operation name.
   *         Please add @clientName("clientName") or @clientName("<JS-Specific-Name>", "javascript")
   *         to the operation to override the generated name.
   */
  delete: (
    resourceGroupName: string,
    contextName: string,
    options?: ContextsDeleteOptionalParams,
  ) => PollerLike<OperationState<void>, void>;
  /** List by subscription */
  listBySubscription: (
    options?: ContextsListBySubscriptionOptionalParams,
  ) => PagedAsyncIterableIterator<Context>;
  /** List by specified resource group */
  listByResourceGroup: (
    resourceGroupName: string,
    options?: ContextsListByResourceGroupOptionalParams,
  ) => PagedAsyncIterableIterator<Context>;
  /** update an Context Resource */
  update: (
    resourceGroupName: string,
    contextName: string,
    properties: ContextUpdate,
    options?: ContextsUpdateOptionalParams,
  ) => PollerLike<OperationState<Context>, Context>;
  /** Create or update Context Resource */
  createOrUpdate: (
    resourceGroupName: string,
    contextName: string,
    resource: Context,
    options?: ContextsCreateOrUpdateOptionalParams,
  ) => PollerLike<OperationState<Context>, Context>;
  /** Get Context Resource */
  get: (
    resourceGroupName: string,
    contextName: string,
    options?: ContextsGetOptionalParams,
  ) => Promise<Context>;
}

function _getContexts(context: WorkloadOrchestrationManagementContext) {
  return {
    delete: (
      resourceGroupName: string,
      contextName: string,
      options?: ContextsDeleteOptionalParams,
    ) => $delete(context, resourceGroupName, contextName, options),
    listBySubscription: (options?: ContextsListBySubscriptionOptionalParams) =>
      listBySubscription(context, options),
    listByResourceGroup: (
      resourceGroupName: string,
      options?: ContextsListByResourceGroupOptionalParams,
    ) => listByResourceGroup(context, resourceGroupName, options),
    update: (
      resourceGroupName: string,
      contextName: string,
      properties: ContextUpdate,
      options?: ContextsUpdateOptionalParams,
    ) => update(context, resourceGroupName, contextName, properties, options),
    createOrUpdate: (
      resourceGroupName: string,
      contextName: string,
      resource: Context,
      options?: ContextsCreateOrUpdateOptionalParams,
    ) => createOrUpdate(context, resourceGroupName, contextName, resource, options),
    get: (resourceGroupName: string, contextName: string, options?: ContextsGetOptionalParams) =>
      get(context, resourceGroupName, contextName, options),
  };
}

export function _getContextsOperations(
  context: WorkloadOrchestrationManagementContext,
): ContextsOperations {
  return {
    ..._getContexts(context),
  };
}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/classic/diagnostics/index.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementContext } from "../../api/workloadOrchestrationManagementContext.js";
import {
  listBySubscription,
  listByResourceGroup,
  $delete,
  update,
  createOrUpdate,
  get,
} from "../../api/diagnostics/operations.js";
import {
  DiagnosticsListBySubscriptionOptionalParams,
  DiagnosticsListByResourceGroupOptionalParams,
  DiagnosticsDeleteOptionalParams,
  DiagnosticsUpdateOptionalParams,
  DiagnosticsCreateOrUpdateOptionalParams,
  DiagnosticsGetOptionalParams,
} from "../../api/diagnostics/options.js";
import { Diagnostic, DiagnosticUpdate } from "../../models/models.js";
import { PagedAsyncIterableIterator } from "../../static-helpers/pagingHelpers.js";
import { PollerLike, OperationState } from "@azure/core-lro";

/** Interface representing a Diagnostics operations. */
export interface DiagnosticsOperations {
  /** Lists Diagnostics resources within an Azure subscription. */
  listBySubscription: (
    options?: DiagnosticsListBySubscriptionOptionalParams,
  ) => PagedAsyncIterableIterator<Diagnostic>;
  /** Returns a collection of Diagnostic resources within the resource group. */
  listByResourceGroup: (
    resourceGroupName: string,
    options?: DiagnosticsListByResourceGroupOptionalParams,
  ) => PagedAsyncIterableIterator<Diagnostic>;
  /** Deletes specified Diagnostic resource. */
  /**
   *  @fixme delete is a reserved word that cannot be used as an operation name.
   *         Please add @clientName("clientName") or @clientName("<JS-Specific-Name>", "javascript")
   *         to the operation to override the generated name.
   */
  delete: (
    resourceGroupName: string,
    diagnosticName: string,
    options?: DiagnosticsDeleteOptionalParams,
  ) => PollerLike<OperationState<void>, void>;
  /** Updates existing Diagnostic resource. */
  update: (
    resourceGroupName: string,
    diagnosticName: string,
    properties: DiagnosticUpdate,
    options?: DiagnosticsUpdateOptionalParams,
  ) => PollerLike<OperationState<Diagnostic>, Diagnostic>;
  /** Creates new or updates existing Diagnostic resource. */
  createOrUpdate: (
    resourceGroupName: string,
    diagnosticName: string,
    resource: Diagnostic,
    options?: DiagnosticsCreateOrUpdateOptionalParams,
  ) => PollerLike<OperationState<Diagnostic>, Diagnostic>;
  /** Returns details of specified Diagnostic resource. */
  get: (
    resourceGroupName: string,
    diagnosticName: string,
    options?: DiagnosticsGetOptionalParams,
  ) => Promise<Diagnostic>;
}

function _getDiagnostics(context: WorkloadOrchestrationManagementContext) {
  return {
    listBySubscription: (options?: DiagnosticsListBySubscriptionOptionalParams) =>
      listBySubscription(context, options),
    listByResourceGroup: (
      resourceGroupName: string,
      options?: DiagnosticsListByResourceGroupOptionalParams,
    ) => listByResourceGroup(context, resourceGroupName, options),
    delete: (
      resourceGroupName: string,
      diagnosticName: string,
      options?: DiagnosticsDeleteOptionalParams,
    ) => $delete(context, resourceGroupName, diagnosticName, options),
    update: (
      resourceGroupName: string,
      diagnosticName: string,
      properties: DiagnosticUpdate,
      options?: DiagnosticsUpdateOptionalParams,
    ) => update(context, resourceGroupName, diagnosticName, properties, options),
    createOrUpdate: (
      resourceGroupName: string,
      diagnosticName: string,
      resource: Diagnostic,
      options?: DiagnosticsCreateOrUpdateOptionalParams,
    ) => createOrUpdate(context, resourceGroupName, diagnosticName, resource, options),
    get: (
      resourceGroupName: string,
      diagnosticName: string,
      options?: DiagnosticsGetOptionalParams,
    ) => get(context, resourceGroupName, diagnosticName, options),
  };
}

export function _getDiagnosticsOperations(
  context: WorkloadOrchestrationManagementContext,
): DiagnosticsOperations {
  return {
    ..._getDiagnostics(context),
  };
}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/classic/dynamicSchemas/index.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementContext } from "../../api/workloadOrchestrationManagementContext.js";
import {
  listBySchema,
  $delete,
  update,
  createOrUpdate,
  get,
} from "../../api/dynamicSchemas/operations.js";
import {
  DynamicSchemasListBySchemaOptionalParams,
  DynamicSchemasDeleteOptionalParams,
  DynamicSchemasUpdateOptionalParams,
  DynamicSchemasCreateOrUpdateOptionalParams,
  DynamicSchemasGetOptionalParams,
} from "../../api/dynamicSchemas/options.js";
import { DynamicSchema } from "../../models/models.js";
import { PagedAsyncIterableIterator } from "../../static-helpers/pagingHelpers.js";
import { PollerLike, OperationState } from "@azure/core-lro";

/** Interface representing a DynamicSchemas operations. */
export interface DynamicSchemasOperations {
  /** List by Schema */
  listBySchema: (
    resourceGroupName: string,
    schemaName: string,
    options?: DynamicSchemasListBySchemaOptionalParams,
  ) => PagedAsyncIterableIterator<DynamicSchema>;
  /** Delete a DynamicSchema Resource */
  /**
   *  @fixme delete is a reserved word that cannot be used as an operation name.
   *         Please add @clientName("clientName") or @clientName("<JS-Specific-Name>", "javascript")
   *         to the operation to override the generated name.
   */
  delete: (
    resourceGroupName: string,
    schemaName: string,
    dynamicSchemaName: string,
    options?: DynamicSchemasDeleteOptionalParams,
  ) => PollerLike<OperationState<void>, void>;
  /** update a DynamicSchema Resource */
  update: (
    resourceGroupName: string,
    schemaName: string,
    dynamicSchemaName: string,
    properties: DynamicSchema,
    options?: DynamicSchemasUpdateOptionalParams,
  ) => Promise<DynamicSchema>;
  /** Create or update a DynamicSchema Resource */
  createOrUpdate: (
    resourceGroupName: string,
    schemaName: string,
    dynamicSchemaName: string,
    resource: DynamicSchema,
    options?: DynamicSchemasCreateOrUpdateOptionalParams,
  ) => PollerLike<OperationState<DynamicSchema>, DynamicSchema>;
  /** Get a DynamicSchema Resource */
  get: (
    resourceGroupName: string,
    schemaName: string,
    dynamicSchemaName: string,
    options?: DynamicSchemasGetOptionalParams,
  ) => Promise<DynamicSchema>;
}

function _getDynamicSchemas(context: WorkloadOrchestrationManagementContext) {
  return {
    listBySchema: (
      resourceGroupName: string,
      schemaName: string,
      options?: DynamicSchemasListBySchemaOptionalParams,
    ) => listBySchema(context, resourceGroupName, schemaName, options),
    delete: (
      resourceGroupName: string,
      schemaName: string,
      dynamicSchemaName: string,
      options?: DynamicSchemasDeleteOptionalParams,
    ) => $delete(context, resourceGroupName, schemaName, dynamicSchemaName, options),
    update: (
      resourceGroupName: string,
      schemaName: string,
      dynamicSchemaName: string,
      properties: DynamicSchema,
      options?: DynamicSchemasUpdateOptionalParams,
    ) => update(context, resourceGroupName, schemaName, dynamicSchemaName, properties, options),
    createOrUpdate: (
      resourceGroupName: string,
      schemaName: string,
      dynamicSchemaName: string,
      resource: DynamicSchema,
      options?: DynamicSchemasCreateOrUpdateOptionalParams,
    ) =>
      createOrUpdate(context, resourceGroupName, schemaName, dynamicSchemaName, resource, options),
    get: (
      resourceGroupName: string,
      schemaName: string,
      dynamicSchemaName: string,
      options?: DynamicSchemasGetOptionalParams,
    ) => get(context, resourceGroupName, schemaName, dynamicSchemaName, options),
  };
}

export function _getDynamicSchemasOperations(
  context: WorkloadOrchestrationManagementContext,
): DynamicSchemasOperations {
  return {
    ..._getDynamicSchemas(context),
  };
}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/classic/dynamicSchemaVersions/index.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementContext } from "../../api/workloadOrchestrationManagementContext.js";
import {
  listByDynamicSchema,
  $delete,
  update,
  createOrUpdate,
  get,
} from "../../api/dynamicSchemaVersions/operations.js";
import {
  DynamicSchemaVersionsListByDynamicSchemaOptionalParams,
  DynamicSchemaVersionsDeleteOptionalParams,
  DynamicSchemaVersionsUpdateOptionalParams,
  DynamicSchemaVersionsCreateOrUpdateOptionalParams,
  DynamicSchemaVersionsGetOptionalParams,
} from "../../api/dynamicSchemaVersions/options.js";
import { DynamicSchemaVersion } from "../../models/models.js";
import { PagedAsyncIterableIterator } from "../../static-helpers/pagingHelpers.js";
import { PollerLike, OperationState } from "@azure/core-lro";

/** Interface representing a DynamicSchemaVersions operations. */
export interface DynamicSchemaVersionsOperations {
  /** List by Dynamic Schema */
  listByDynamicSchema: (
    resourceGroupName: string,
    schemaName: string,
    dynamicSchemaName: string,
    options?: DynamicSchemaVersionsListByDynamicSchemaOptionalParams,
  ) => PagedAsyncIterableIterator<DynamicSchemaVersion>;
  /** Delete a Dynamic Schema Version Resource */
  /**
   *  @fixme delete is a reserved word that cannot be used as an operation name.
   *         Please add @clientName("clientName") or @clientName("<JS-Specific-Name>", "javascript")
   *         to the operation to override the generated name.
   */
  delete: (
    resourceGroupName: string,
    schemaName: string,
    dynamicSchemaName: string,
    dynamicSchemaVersionName: string,
    options?: DynamicSchemaVersionsDeleteOptionalParams,
  ) => PollerLike<OperationState<void>, void>;
  /** update a Dynamic Schema Version Resource */
  update: (
    resourceGroupName: string,
    schemaName: string,
    dynamicSchemaName: string,
    dynamicSchemaVersionName: string,
    properties: DynamicSchemaVersion,
    options?: DynamicSchemaVersionsUpdateOptionalParams,
  ) => Promise<DynamicSchemaVersion>;
  /** Create or update a Dynamic Schema Version Resource */
  createOrUpdate: (
    resourceGroupName: string,
    schemaName: string,
    dynamicSchemaName: string,
    dynamicSchemaVersionName: string,
    resource: DynamicSchemaVersion,
    options?: DynamicSchemaVersionsCreateOrUpdateOptionalParams,
  ) => PollerLike<OperationState<DynamicSchemaVersion>, DynamicSchemaVersion>;
  /** Get a Dynamic Schema Version Resource */
  get: (
    resourceGroupName: string,
    schemaName: string,
    dynamicSchemaName: string,
    dynamicSchemaVersionName: string,
    options?: DynamicSchemaVersionsGetOptionalParams,
  ) => Promise<DynamicSchemaVersion>;
}

function _getDynamicSchemaVersions(context: WorkloadOrchestrationManagementContext) {
  return {
    listByDynamicSchema: (
      resourceGroupName: string,
      schemaName: string,
      dynamicSchemaName: string,
      options?: DynamicSchemaVersionsListByDynamicSchemaOptionalParams,
    ) => listByDynamicSchema(context, resourceGroupName, schemaName, dynamicSchemaName, options),
    delete: (
      resourceGroupName: string,
      schemaName: string,
      dynamicSchemaName: string,
      dynamicSchemaVersionName: string,
      options?: DynamicSchemaVersionsDeleteOptionalParams,
    ) =>
      $delete(
        context,
        resourceGroupName,
        schemaName,
        dynamicSchemaName,
        dynamicSchemaVersionName,
        options,
      ),
    update: (
      resourceGroupName: string,
      schemaName: string,
      dynamicSchemaName: string,
      dynamicSchemaVersionName: string,
      properties: DynamicSchemaVersion,
      options?: DynamicSchemaVersionsUpdateOptionalParams,
    ) =>
      update(
        context,
        resourceGroupName,
        schemaName,
        dynamicSchemaName,
        dynamicSchemaVersionName,
        properties,
        options,
      ),
    createOrUpdate: (
      resourceGroupName: string,
      schemaName: string,
      dynamicSchemaName: string,
      dynamicSchemaVersionName: string,
      resource: DynamicSchemaVersion,
      options?: DynamicSchemaVersionsCreateOrUpdateOptionalParams,
    ) =>
      createOrUpdate(
        context,
        resourceGroupName,
        schemaName,
        dynamicSchemaName,
        dynamicSchemaVersionName,
        resource,
        options,
      ),
    get: (
      resourceGroupName: string,
      schemaName: string,
      dynamicSchemaName: string,
      dynamicSchemaVersionName: string,
      options?: DynamicSchemaVersionsGetOptionalParams,
    ) =>
      get(
        context,
        resourceGroupName,
        schemaName,
        dynamicSchemaName,
        dynamicSchemaVersionName,
        options,
      ),
  };
}

export function _getDynamicSchemaVersionsOperations(
  context: WorkloadOrchestrationManagementContext,
): DynamicSchemaVersionsOperations {
  return {
    ..._getDynamicSchemaVersions(context),
  };
}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/classic/executions/index.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementContext } from "../../api/workloadOrchestrationManagementContext.js";
import {
  listByWorkflowVersion,
  $delete,
  update,
  createOrUpdate,
  get,
} from "../../api/executions/operations.js";
import {
  ExecutionsListByWorkflowVersionOptionalParams,
  ExecutionsDeleteOptionalParams,
  ExecutionsUpdateOptionalParams,
  ExecutionsCreateOrUpdateOptionalParams,
  ExecutionsGetOptionalParams,
} from "../../api/executions/options.js";
import { Execution } from "../../models/models.js";
import { PagedAsyncIterableIterator } from "../../static-helpers/pagingHelpers.js";
import { PollerLike, OperationState } from "@azure/core-lro";

/** Interface representing a Executions operations. */
export interface ExecutionsOperations {
  /** List Execution Resources */
  listByWorkflowVersion: (
    resourceGroupName: string,
    contextName: string,
    workflowName: string,
    versionName: string,
    options?: ExecutionsListByWorkflowVersionOptionalParams,
  ) => PagedAsyncIterableIterator<Execution>;
  /** Delete Execution Resource */
  /**
   *  @fixme delete is a reserved word that cannot be used as an operation name.
   *         Please add @clientName("clientName") or @clientName("<JS-Specific-Name>", "javascript")
   *         to the operation to override the generated name.
   */
  delete: (
    resourceGroupName: string,
    contextName: string,
    workflowName: string,
    versionName: string,
    executionName: string,
    options?: ExecutionsDeleteOptionalParams,
  ) => PollerLike<OperationState<void>, void>;
  /** update an Execution Resource */
  update: (
    resourceGroupName: string,
    contextName: string,
    workflowName: string,
    versionName: string,
    executionName: string,
    properties: Execution,
    options?: ExecutionsUpdateOptionalParams,
  ) => PollerLike<OperationState<Execution>, Execution>;
  /** Create or update Execution Resource */
  createOrUpdate: (
    resourceGroupName: string,
    contextName: string,
    workflowName: string,
    versionName: string,
    executionName: string,
    resource: Execution,
    options?: ExecutionsCreateOrUpdateOptionalParams,
  ) => PollerLike<OperationState<Execution>, Execution>;
  /** Get Execution Resource */
  get: (
    resourceGroupName: string,
    contextName: string,
    workflowName: string,
    versionName: string,
    executionName: string,
    options?: ExecutionsGetOptionalParams,
  ) => Promise<Execution>;
}

function _getExecutions(context: WorkloadOrchestrationManagementContext) {
  return {
    listByWorkflowVersion: (
      resourceGroupName: string,
      contextName: string,
      workflowName: string,
      versionName: string,
      options?: ExecutionsListByWorkflowVersionOptionalParams,
    ) =>
      listByWorkflowVersion(
        context,
        resourceGroupName,
        contextName,
        workflowName,
        versionName,
        options,
      ),
    delete: (
      resourceGroupName: string,
      contextName: string,
      workflowName: string,
      versionName: string,
      executionName: string,
      options?: ExecutionsDeleteOptionalParams,
    ) =>
      $delete(
        context,
        resourceGroupName,
        contextName,
        workflowName,
        versionName,
        executionName,
        options,
      ),
    update: (
      resourceGroupName: string,
      contextName: string,
      workflowName: string,
      versionName: string,
      executionName: string,
      properties: Execution,
      options?: ExecutionsUpdateOptionalParams,
    ) =>
      update(
        context,
        resourceGroupName,
        contextName,
        workflowName,
        versionName,
        executionName,
        properties,
        options,
      ),
    createOrUpdate: (
      resourceGroupName: string,
      contextName: string,
      workflowName: string,
      versionName: string,
      executionName: string,
      resource: Execution,
      options?: ExecutionsCreateOrUpdateOptionalParams,
    ) =>
      createOrUpdate(
        context,
        resourceGroupName,
        contextName,
        workflowName,
        versionName,
        executionName,
        resource,
        options,
      ),
    get: (
      resourceGroupName: string,
      contextName: string,
      workflowName: string,
      versionName: string,
      executionName: string,
      options?: ExecutionsGetOptionalParams,
    ) =>
      get(
        context,
        resourceGroupName,
        contextName,
        workflowName,
        versionName,
        executionName,
        options,
      ),
  };
}

export function _getExecutionsOperations(
  context: WorkloadOrchestrationManagementContext,
): ExecutionsOperations {
  return {
    ..._getExecutions(context),
  };
}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/classic/instanceHistories/index.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementContext } from "../../api/workloadOrchestrationManagementContext.js";
import { listByInstance, get } from "../../api/instanceHistories/operations.js";
import {
  InstanceHistoriesListByInstanceOptionalParams,
  InstanceHistoriesGetOptionalParams,
} from "../../api/instanceHistories/options.js";
import { InstanceHistory } from "../../models/models.js";
import { PagedAsyncIterableIterator } from "../../static-helpers/pagingHelpers.js";

/** Interface representing a InstanceHistories operations. */
export interface InstanceHistoriesOperations {
  /** List InstanceHistory Resources */
  listByInstance: (
    resourceGroupName: string,
    targetName: string,
    solutionName: string,
    instanceName: string,
    options?: InstanceHistoriesListByInstanceOptionalParams,
  ) => PagedAsyncIterableIterator<InstanceHistory>;
  /** Get InstanceHistory Resource */
  get: (
    resourceGroupName: string,
    targetName: string,
    solutionName: string,
    instanceName: string,
    instanceHistoryName: string,
    options?: InstanceHistoriesGetOptionalParams,
  ) => Promise<InstanceHistory>;
}

function _getInstanceHistories(context: WorkloadOrchestrationManagementContext) {
  return {
    listByInstance: (
      resourceGroupName: string,
      targetName: string,
      solutionName: string,
      instanceName: string,
      options?: InstanceHistoriesListByInstanceOptionalParams,
    ) =>
      listByInstance(context, resourceGroupName, targetName, solutionName, instanceName, options),
    get: (
      resourceGroupName: string,
      targetName: string,
      solutionName: string,
      instanceName: string,
      instanceHistoryName: string,
      options?: InstanceHistoriesGetOptionalParams,
    ) =>
      get(
        context,
        resourceGroupName,
        targetName,
        solutionName,
        instanceName,
        instanceHistoryName,
        options,
      ),
  };
}

export function _getInstanceHistoriesOperations(
  context: WorkloadOrchestrationManagementContext,
): InstanceHistoriesOperations {
  return {
    ..._getInstanceHistories(context),
  };
}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/classic/instances/index.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementContext } from "../../api/workloadOrchestrationManagementContext.js";
import {
  listBySolution,
  $delete,
  update,
  createOrUpdate,
  get,
} from "../../api/instances/operations.js";
import {
  InstancesListBySolutionOptionalParams,
  InstancesDeleteOptionalParams,
  InstancesUpdateOptionalParams,
  InstancesCreateOrUpdateOptionalParams,
  InstancesGetOptionalParams,
} from "../../api/instances/options.js";
import { Instance } from "../../models/models.js";
import { PagedAsyncIterableIterator } from "../../static-helpers/pagingHelpers.js";
import { PollerLike, OperationState } from "@azure/core-lro";

/** Interface representing a Instances operations. */
export interface InstancesOperations {
  /** List Instance Resources */
  listBySolution: (
    resourceGroupName: string,
    targetName: string,
    solutionName: string,
    options?: InstancesListBySolutionOptionalParams,
  ) => PagedAsyncIterableIterator<Instance>;
  /** Delete Instance Resource */
  /**
   *  @fixme delete is a reserved word that cannot be used as an operation name.
   *         Please add @clientName("clientName") or @clientName("<JS-Specific-Name>", "javascript")
   *         to the operation to override the generated name.
   */
  delete: (
    resourceGroupName: string,
    targetName: string,
    solutionName: string,
    instanceName: string,
    options?: InstancesDeleteOptionalParams,
  ) => PollerLike<OperationState<void>, void>;
  /** Update an Instance Resource */
  update: (
    resourceGroupName: string,
    targetName: string,
    solutionName: string,
    instanceName: string,
    properties: Instance,
    options?: InstancesUpdateOptionalParams,
  ) => PollerLike<OperationState<Instance>, Instance>;
  /** Create or update Instance Resource */
  createOrUpdate: (
    resourceGroupName: string,
    targetName: string,
    solutionName: string,
    instanceName: string,
    resource: Instance,
    options?: InstancesCreateOrUpdateOptionalParams,
  ) => PollerLike<OperationState<Instance>, Instance>;
  /** Get Instance Resource */
  get: (
    resourceGroupName: string,
    targetName: string,
    solutionName: string,
    instanceName: string,
    options?: InstancesGetOptionalParams,
  ) => Promise<Instance>;
}

function _getInstances(context: WorkloadOrchestrationManagementContext) {
  return {
    listBySolution: (
      resourceGroupName: string,
      targetName: string,
      solutionName: string,
      options?: InstancesListBySolutionOptionalParams,
    ) => listBySolution(context, resourceGroupName, targetName, solutionName, options),
    delete: (
      resourceGroupName: string,
      targetName: string,
      solutionName: string,
      instanceName: string,
      options?: InstancesDeleteOptionalParams,
    ) => $delete(context, resourceGroupName, targetName, solutionName, instanceName, options),
    update: (
      resourceGroupName: string,
      targetName: string,
      solutionName: string,
      instanceName: string,
      properties: Instance,
      options?: InstancesUpdateOptionalParams,
    ) =>
      update(
        context,
        resourceGroupName,
        targetName,
        solutionName,
        instanceName,
        properties,
        options,
      ),
    createOrUpdate: (
      resourceGroupName: string,
      targetName: string,
      solutionName: string,
      instanceName: string,
      resource: Instance,
      options?: InstancesCreateOrUpdateOptionalParams,
    ) =>
      createOrUpdate(
        context,
        resourceGroupName,
        targetName,
        solutionName,
        instanceName,
        resource,
        options,
      ),
    get: (
      resourceGroupName: string,
      targetName: string,
      solutionName: string,
      instanceName: string,
      options?: InstancesGetOptionalParams,
    ) => get(context, resourceGroupName, targetName, solutionName, instanceName, options),
  };
}

export function _getInstancesOperations(
  context: WorkloadOrchestrationManagementContext,
): InstancesOperations {
  return {
    ..._getInstances(context),
  };
}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/classic/jobs/index.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementContext } from "../../api/workloadOrchestrationManagementContext.js";
import { listByTarget, get } from "../../api/jobs/operations.js";
import { JobsListByTargetOptionalParams, JobsGetOptionalParams } from "../../api/jobs/options.js";
import { Job } from "../../models/models.js";
import { PagedAsyncIterableIterator } from "../../static-helpers/pagingHelpers.js";

/** Interface representing a Jobs operations. */
export interface JobsOperations {
  /** List Jobs by parent resource */
  listByTarget: (
    resourceUri: string,
    options?: JobsListByTargetOptionalParams,
  ) => PagedAsyncIterableIterator<Job>;
  /** Get a Job resource */
  get: (resourceUri: string, jobName: string, options?: JobsGetOptionalParams) => Promise<Job>;
}

function _getJobs(context: WorkloadOrchestrationManagementContext) {
  return {
    listByTarget: (resourceUri: string, options?: JobsListByTargetOptionalParams) =>
      listByTarget(context, resourceUri, options),
    get: (resourceUri: string, jobName: string, options?: JobsGetOptionalParams) =>
      get(context, resourceUri, jobName, options),
  };
}

export function _getJobsOperations(
  context: WorkloadOrchestrationManagementContext,
): JobsOperations {
  return {
    ..._getJobs(context),
  };
}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/classic/schemaReferences/index.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementContext } from "../../api/workloadOrchestrationManagementContext.js";
import { listByResourceGroup, get } from "../../api/schemaReferences/operations.js";
import {
  SchemaReferencesListByResourceGroupOptionalParams,
  SchemaReferencesGetOptionalParams,
} from "../../api/schemaReferences/options.js";
import { SchemaReference } from "../../models/models.js";
import { PagedAsyncIterableIterator } from "../../static-helpers/pagingHelpers.js";

/** Interface representing a SchemaReferences operations. */
export interface SchemaReferencesOperations {
  /** List by specified resource group */
  listByResourceGroup: (
    resourceUri: string,
    options?: SchemaReferencesListByResourceGroupOptionalParams,
  ) => PagedAsyncIterableIterator<SchemaReference>;
  /** Get a Schema Reference Resource */
  get: (
    resourceUri: string,
    schemaReferenceName: string,
    options?: SchemaReferencesGetOptionalParams,
  ) => Promise<SchemaReference>;
}

function _getSchemaReferences(context: WorkloadOrchestrationManagementContext) {
  return {
    listByResourceGroup: (
      resourceUri: string,
      options?: SchemaReferencesListByResourceGroupOptionalParams,
    ) => listByResourceGroup(context, resourceUri, options),
    get: (
      resourceUri: string,
      schemaReferenceName: string,
      options?: SchemaReferencesGetOptionalParams,
    ) => get(context, resourceUri, schemaReferenceName, options),
  };
}

export function _getSchemaReferencesOperations(
  context: WorkloadOrchestrationManagementContext,
): SchemaReferencesOperations {
  return {
    ..._getSchemaReferences(context),
  };
}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/classic/schemas/index.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementContext } from "../../api/workloadOrchestrationManagementContext.js";
import {
  listBySubscription,
  listByResourceGroup,
  removeVersion,
  createVersion,
  $delete,
  update,
  createOrUpdate,
  get,
} from "../../api/schemas/operations.js";
import {
  SchemasListBySubscriptionOptionalParams,
  SchemasListByResourceGroupOptionalParams,
  SchemasRemoveVersionOptionalParams,
  SchemasCreateVersionOptionalParams,
  SchemasDeleteOptionalParams,
  SchemasUpdateOptionalParams,
  SchemasCreateOrUpdateOptionalParams,
  SchemasGetOptionalParams,
} from "../../api/schemas/options.js";
import {
  Schema,
  SchemaUpdate,
  SchemaVersionWithUpdateType,
  SchemaVersion,
  VersionParameter,
  RemoveVersionResponse,
} from "../../models/models.js";
import { PagedAsyncIterableIterator } from "../../static-helpers/pagingHelpers.js";
import { PollerLike, OperationState } from "@azure/core-lro";

/** Interface representing a Schemas operations. */
export interface SchemasOperations {
  /** List by subscription */
  listBySubscription: (
    options?: SchemasListBySubscriptionOptionalParams,
  ) => PagedAsyncIterableIterator<Schema>;
  /** List by specified resource group */
  listByResourceGroup: (
    resourceGroupName: string,
    options?: SchemasListByResourceGroupOptionalParams,
  ) => PagedAsyncIterableIterator<Schema>;
  /** Remove Schema Version Resource */
  removeVersion: (
    resourceGroupName: string,
    schemaName: string,
    body: VersionParameter,
    options?: SchemasRemoveVersionOptionalParams,
  ) => Promise<RemoveVersionResponse>;
  /** Create a Schema Version Resource */
  createVersion: (
    resourceGroupName: string,
    schemaName: string,
    body: SchemaVersionWithUpdateType,
    options?: SchemasCreateVersionOptionalParams,
  ) => PollerLike<OperationState<SchemaVersion>, SchemaVersion>;
  /** Delete a Schema Resource */
  /**
   *  @fixme delete is a reserved word that cannot be used as an operation name.
   *         Please add @clientName("clientName") or @clientName("<JS-Specific-Name>", "javascript")
   *         to the operation to override the generated name.
   */
  delete: (
    resourceGroupName: string,
    schemaName: string,
    options?: SchemasDeleteOptionalParams,
  ) => PollerLike<OperationState<void>, void>;
  /** update a Schema Resource */
  update: (
    resourceGroupName: string,
    schemaName: string,
    properties: SchemaUpdate,
    options?: SchemasUpdateOptionalParams,
  ) => Promise<Schema>;
  /** Create or update a Schema Resource */
  createOrUpdate: (
    resourceGroupName: string,
    schemaName: string,
    resource: Schema,
    options?: SchemasCreateOrUpdateOptionalParams,
  ) => PollerLike<OperationState<Schema>, Schema>;
  /** Get a Schema Resource */
  get: (
    resourceGroupName: string,
    schemaName: string,
    options?: SchemasGetOptionalParams,
  ) => Promise<Schema>;
}

function _getSchemas(context: WorkloadOrchestrationManagementContext) {
  return {
    listBySubscription: (options?: SchemasListBySubscriptionOptionalParams) =>
      listBySubscription(context, options),
    listByResourceGroup: (
      resourceGroupName: string,
      options?: SchemasListByResourceGroupOptionalParams,
    ) => listByResourceGroup(context, resourceGroupName, options),
    removeVersion: (
      resourceGroupName: string,
      schemaName: string,
      body: VersionParameter,
      options?: SchemasRemoveVersionOptionalParams,
    ) => removeVersion(context, resourceGroupName, schemaName, body, options),
    createVersion: (
      resourceGroupName: string,
      schemaName: string,
      body: SchemaVersionWithUpdateType,
      options?: SchemasCreateVersionOptionalParams,
    ) => createVersion(context, resourceGroupName, schemaName, body, options),
    delete: (
      resourceGroupName: string,
      schemaName: string,
      options?: SchemasDeleteOptionalParams,
    ) => $delete(context, resourceGroupName, schemaName, options),
    update: (
      resourceGroupName: string,
      schemaName: string,
      properties: SchemaUpdate,
      options?: SchemasUpdateOptionalParams,
    ) => update(context, resourceGroupName, schemaName, properties, options),
    createOrUpdate: (
      resourceGroupName: string,
      schemaName: string,
      resource: Schema,
      options?: SchemasCreateOrUpdateOptionalParams,
    ) => createOrUpdate(context, resourceGroupName, schemaName, resource, options),
    get: (resourceGroupName: string, schemaName: string, options?: SchemasGetOptionalParams) =>
      get(context, resourceGroupName, schemaName, options),
  };
}

export function _getSchemasOperations(
  context: WorkloadOrchestrationManagementContext,
): SchemasOperations {
  return {
    ..._getSchemas(context),
  };
}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/classic/schemaVersions/index.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementContext } from "../../api/workloadOrchestrationManagementContext.js";
import {
  listBySchema,
  $delete,
  update,
  createOrUpdate,
  get,
} from "../../api/schemaVersions/operations.js";
import {
  SchemaVersionsListBySchemaOptionalParams,
  SchemaVersionsDeleteOptionalParams,
  SchemaVersionsUpdateOptionalParams,
  SchemaVersionsCreateOrUpdateOptionalParams,
  SchemaVersionsGetOptionalParams,
} from "../../api/schemaVersions/options.js";
import { SchemaVersion } from "../../models/models.js";
import { PagedAsyncIterableIterator } from "../../static-helpers/pagingHelpers.js";
import { PollerLike, OperationState } from "@azure/core-lro";

/** Interface representing a SchemaVersions operations. */
export interface SchemaVersionsOperations {
  /** List by specified resource group */
  listBySchema: (
    resourceGroupName: string,
    schemaName: string,
    options?: SchemaVersionsListBySchemaOptionalParams,
  ) => PagedAsyncIterableIterator<SchemaVersion>;
  /** Delete a Schema Version Resource */
  /**
   *  @fixme delete is a reserved word that cannot be used as an operation name.
   *         Please add @clientName("clientName") or @clientName("<JS-Specific-Name>", "javascript")
   *         to the operation to override the generated name.
   */
  delete: (
    resourceGroupName: string,
    schemaName: string,
    schemaVersionName: string,
    options?: SchemaVersionsDeleteOptionalParams,
  ) => PollerLike<OperationState<void>, void>;
  /** update a Schema Version Resource */
  update: (
    resourceGroupName: string,
    schemaName: string,
    schemaVersionName: string,
    properties: SchemaVersion,
    options?: SchemaVersionsUpdateOptionalParams,
  ) => Promise<SchemaVersion>;
  /** Create or update a Schema Version Resource */
  createOrUpdate: (
    resourceGroupName: string,
    schemaName: string,
    schemaVersionName: string,
    resource: SchemaVersion,
    options?: SchemaVersionsCreateOrUpdateOptionalParams,
  ) => PollerLike<OperationState<SchemaVersion>, SchemaVersion>;
  /** Get a Schema Version Resource */
  get: (
    resourceGroupName: string,
    schemaName: string,
    schemaVersionName: string,
    options?: SchemaVersionsGetOptionalParams,
  ) => Promise<SchemaVersion>;
}

function _getSchemaVersions(context: WorkloadOrchestrationManagementContext) {
  return {
    listBySchema: (
      resourceGroupName: string,
      schemaName: string,
      options?: SchemaVersionsListBySchemaOptionalParams,
    ) => listBySchema(context, resourceGroupName, schemaName, options),
    delete: (
      resourceGroupName: string,
      schemaName: string,
      schemaVersionName: string,
      options?: SchemaVersionsDeleteOptionalParams,
    ) => $delete(context, resourceGroupName, schemaName, schemaVersionName, options),
    update: (
      resourceGroupName: string,
      schemaName: string,
      schemaVersionName: string,
      properties: SchemaVersion,
      options?: SchemaVersionsUpdateOptionalParams,
    ) => update(context, resourceGroupName, schemaName, schemaVersionName, properties, options),
    createOrUpdate: (
      resourceGroupName: string,
      schemaName: string,
      schemaVersionName: string,
      resource: SchemaVersion,
      options?: SchemaVersionsCreateOrUpdateOptionalParams,
    ) =>
      createOrUpdate(context, resourceGroupName, schemaName, schemaVersionName, resource, options),
    get: (
      resourceGroupName: string,
      schemaName: string,
      schemaVersionName: string,
      options?: SchemaVersionsGetOptionalParams,
    ) => get(context, resourceGroupName, schemaName, schemaVersionName, options),
  };
}

export function _getSchemaVersionsOperations(
  context: WorkloadOrchestrationManagementContext,
): SchemaVersionsOperations {
  return {
    ..._getSchemaVersions(context),
  };
}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/classic/siteReferences/index.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementContext } from "../../api/workloadOrchestrationManagementContext.js";
import {
  listByContext,
  $delete,
  update,
  createOrUpdate,
  get,
} from "../../api/siteReferences/operations.js";
import {
  SiteReferencesListByContextOptionalParams,
  SiteReferencesDeleteOptionalParams,
  SiteReferencesUpdateOptionalParams,
  SiteReferencesCreateOrUpdateOptionalParams,
  SiteReferencesGetOptionalParams,
} from "../../api/siteReferences/options.js";
import { SiteReference } from "../../models/models.js";
import { PagedAsyncIterableIterator } from "../../static-helpers/pagingHelpers.js";
import { PollerLike, OperationState } from "@azure/core-lro";

/** Interface representing a SiteReferences operations. */
export interface SiteReferencesOperations {
  /** List Site Reference Resources */
  listByContext: (
    resourceGroupName: string,
    contextName: string,
    options?: SiteReferencesListByContextOptionalParams,
  ) => PagedAsyncIterableIterator<SiteReference>;
  /** Get Site Reference Resource */
  /**
   *  @fixme delete is a reserved word that cannot be used as an operation name.
   *         Please add @clientName("clientName") or @clientName("<JS-Specific-Name>", "javascript")
   *         to the operation to override the generated name.
   */
  delete: (
    resourceGroupName: string,
    contextName: string,
    siteReferenceName: string,
    options?: SiteReferencesDeleteOptionalParams,
  ) => PollerLike<OperationState<void>, void>;
  /** Get Site Reference Resource */
  update: (
    resourceGroupName: string,
    contextName: string,
    siteReferenceName: string,
    properties: SiteReference,
    options?: SiteReferencesUpdateOptionalParams,
  ) => PollerLike<OperationState<SiteReference>, SiteReference>;
  /** Get Site Reference Resource */
  createOrUpdate: (
    resourceGroupName: string,
    contextName: string,
    siteReferenceName: string,
    resource: SiteReference,
    options?: SiteReferencesCreateOrUpdateOptionalParams,
  ) => PollerLike<OperationState<SiteReference>, SiteReference>;
  /** Get Site Reference Resource */
  get: (
    resourceGroupName: string,
    contextName: string,
    siteReferenceName: string,
    options?: SiteReferencesGetOptionalParams,
  ) => Promise<SiteReference>;
}

function _getSiteReferences(context: WorkloadOrchestrationManagementContext) {
  return {
    listByContext: (
      resourceGroupName: string,
      contextName: string,
      options?: SiteReferencesListByContextOptionalParams,
    ) => listByContext(context, resourceGroupName, contextName, options),
    delete: (
      resourceGroupName: string,
      contextName: string,
      siteReferenceName: string,
      options?: SiteReferencesDeleteOptionalParams,
    ) => $delete(context, resourceGroupName, contextName, siteReferenceName, options),
    update: (
      resourceGroupName: string,
      contextName: string,
      siteReferenceName: string,
      properties: SiteReference,
      options?: SiteReferencesUpdateOptionalParams,
    ) => update(context, resourceGroupName, contextName, siteReferenceName, properties, options),
    createOrUpdate: (
      resourceGroupName: string,
      contextName: string,
      siteReferenceName: string,
      resource: SiteReference,
      options?: SiteReferencesCreateOrUpdateOptionalParams,
    ) =>
      createOrUpdate(context, resourceGroupName, contextName, siteReferenceName, resource, options),
    get: (
      resourceGroupName: string,
      contextName: string,
      siteReferenceName: string,
      options?: SiteReferencesGetOptionalParams,
    ) => get(context, resourceGroupName, contextName, siteReferenceName, options),
  };
}

export function _getSiteReferencesOperations(
  context: WorkloadOrchestrationManagementContext,
): SiteReferencesOperations {
  return {
    ..._getSiteReferences(context),
  };
}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/classic/solutions/index.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementContext } from "../../api/workloadOrchestrationManagementContext.js";
import {
  listByTarget,
  $delete,
  update,
  createOrUpdate,
  get,
} from "../../api/solutions/operations.js";
import {
  SolutionsListByTargetOptionalParams,
  SolutionsDeleteOptionalParams,
  SolutionsUpdateOptionalParams,
  SolutionsCreateOrUpdateOptionalParams,
  SolutionsGetOptionalParams,
} from "../../api/solutions/options.js";
import { Solution, SolutionUpdate } from "../../models/models.js";
import { PagedAsyncIterableIterator } from "../../static-helpers/pagingHelpers.js";
import { PollerLike, OperationState } from "@azure/core-lro";

/** Interface representing a Solutions operations. */
export interface SolutionsOperations {
  /** List Solution resources */
  listByTarget: (
    resourceGroupName: string,
    targetName: string,
    options?: SolutionsListByTargetOptionalParams,
  ) => PagedAsyncIterableIterator<Solution>;
  /** Delete a Solution Resource */
  /**
   *  @fixme delete is a reserved word that cannot be used as an operation name.
   *         Please add @clientName("clientName") or @clientName("<JS-Specific-Name>", "javascript")
   *         to the operation to override the generated name.
   */
  delete: (
    resourceGroupName: string,
    targetName: string,
    solutionName: string,
    options?: SolutionsDeleteOptionalParams,
  ) => PollerLike<OperationState<void>, void>;
  /** Update a Solution Resource */
  update: (
    resourceGroupName: string,
    targetName: string,
    solutionName: string,
    properties: SolutionUpdate,
    options?: SolutionsUpdateOptionalParams,
  ) => PollerLike<OperationState<Solution>, Solution>;
  /** Create or update a Solution Resource */
  createOrUpdate: (
    resourceGroupName: string,
    targetName: string,
    solutionName: string,
    resource: Solution,
    options?: SolutionsCreateOrUpdateOptionalParams,
  ) => PollerLike<OperationState<Solution>, Solution>;
  /** Get a Solution resource */
  get: (
    resourceGroupName: string,
    targetName: string,
    solutionName: string,
    options?: SolutionsGetOptionalParams,
  ) => Promise<Solution>;
}

function _getSolutions(context: WorkloadOrchestrationManagementContext) {
  return {
    listByTarget: (
      resourceGroupName: string,
      targetName: string,
      options?: SolutionsListByTargetOptionalParams,
    ) => listByTarget(context, resourceGroupName, targetName, options),
    delete: (
      resourceGroupName: string,
      targetName: string,
      solutionName: string,
      options?: SolutionsDeleteOptionalParams,
    ) => $delete(context, resourceGroupName, targetName, solutionName, options),
    update: (
      resourceGroupName: string,
      targetName: string,
      solutionName: string,
      properties: SolutionUpdate,
      options?: SolutionsUpdateOptionalParams,
    ) => update(context, resourceGroupName, targetName, solutionName, properties, options),
    createOrUpdate: (
      resourceGroupName: string,
      targetName: string,
      solutionName: string,
      resource: Solution,
      options?: SolutionsCreateOrUpdateOptionalParams,
    ) => createOrUpdate(context, resourceGroupName, targetName, solutionName, resource, options),
    get: (
      resourceGroupName: string,
      targetName: string,
      solutionName: string,
      options?: SolutionsGetOptionalParams,
    ) => get(context, resourceGroupName, targetName, solutionName, options),
  };
}

export function _getSolutionsOperations(
  context: WorkloadOrchestrationManagementContext,
): SolutionsOperations {
  return {
    ..._getSolutions(context),
  };
}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/classic/solutionTemplates/index.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementContext } from "../../api/workloadOrchestrationManagementContext.js";
import {
  listBySubscription,
  listByResourceGroup,
  $delete,
  removeVersion,
  createVersion,
  update,
  createOrUpdate,
  get,
} from "../../api/solutionTemplates/operations.js";
import {
  SolutionTemplatesListBySubscriptionOptionalParams,
  SolutionTemplatesListByResourceGroupOptionalParams,
  SolutionTemplatesDeleteOptionalParams,
  SolutionTemplatesRemoveVersionOptionalParams,
  SolutionTemplatesCreateVersionOptionalParams,
  SolutionTemplatesUpdateOptionalParams,
  SolutionTemplatesCreateOrUpdateOptionalParams,
  SolutionTemplatesGetOptionalParams,
} from "../../api/solutionTemplates/options.js";
import {
  VersionParameter,
  SolutionTemplateVersion,
  SolutionTemplate,
  SolutionTemplateUpdate,
  SolutionTemplateVersionWithUpdateType,
} from "../../models/models.js";
import { PagedAsyncIterableIterator } from "../../static-helpers/pagingHelpers.js";
import { PollerLike, OperationState } from "@azure/core-lro";

/** Interface representing a SolutionTemplates operations. */
export interface SolutionTemplatesOperations {
  /** List by subscription */
  listBySubscription: (
    options?: SolutionTemplatesListBySubscriptionOptionalParams,
  ) => PagedAsyncIterableIterator<SolutionTemplate>;
  /** List by specified resource group */
  listByResourceGroup: (
    resourceGroupName: string,
    options?: SolutionTemplatesListByResourceGroupOptionalParams,
  ) => PagedAsyncIterableIterator<SolutionTemplate>;
  /** Delete a Solution Template Resource */
  /**
   *  @fixme delete is a reserved word that cannot be used as an operation name.
   *         Please add @clientName("clientName") or @clientName("<JS-Specific-Name>", "javascript")
   *         to the operation to override the generated name.
   */
  delete: (
    resourceGroupName: string,
    solutionTemplateName: string,
    options?: SolutionTemplatesDeleteOptionalParams,
  ) => PollerLike<OperationState<void>, void>;
  /** Remove Solution Template Version Resource */
  removeVersion: (
    resourceGroupName: string,
    solutionTemplateName: string,
    body: VersionParameter,
    options?: SolutionTemplatesRemoveVersionOptionalParams,
  ) => PollerLike<OperationState<void>, void>;
  /** Create a Solution Template Version Resource */
  createVersion: (
    resourceGroupName: string,
    solutionTemplateName: string,
    body: SolutionTemplateVersionWithUpdateType,
    options?: SolutionTemplatesCreateVersionOptionalParams,
  ) => PollerLike<OperationState<SolutionTemplateVersion>, SolutionTemplateVersion>;
  /** update a Solution Template Resource */
  update: (
    resourceGroupName: string,
    solutionTemplateName: string,
    properties: SolutionTemplateUpdate,
    options?: SolutionTemplatesUpdateOptionalParams,
  ) => Promise<SolutionTemplate>;
  /** Create or update a Solution Template Resource */
  createOrUpdate: (
    resourceGroupName: string,
    solutionTemplateName: string,
    resource: SolutionTemplate,
    options?: SolutionTemplatesCreateOrUpdateOptionalParams,
  ) => PollerLike<OperationState<SolutionTemplate>, SolutionTemplate>;
  /** Get a Solution Template Resource */
  get: (
    resourceGroupName: string,
    solutionTemplateName: string,
    options?: SolutionTemplatesGetOptionalParams,
  ) => Promise<SolutionTemplate>;
}

function _getSolutionTemplates(context: WorkloadOrchestrationManagementContext) {
  return {
    listBySubscription: (options?: SolutionTemplatesListBySubscriptionOptionalParams) =>
      listBySubscription(context, options),
    listByResourceGroup: (
      resourceGroupName: string,
      options?: SolutionTemplatesListByResourceGroupOptionalParams,
    ) => listByResourceGroup(context, resourceGroupName, options),
    delete: (
      resourceGroupName: string,
      solutionTemplateName: string,
      options?: SolutionTemplatesDeleteOptionalParams,
    ) => $delete(context, resourceGroupName, solutionTemplateName, options),
    removeVersion: (
      resourceGroupName: string,
      solutionTemplateName: string,
      body: VersionParameter,
      options?: SolutionTemplatesRemoveVersionOptionalParams,
    ) => removeVersion(context, resourceGroupName, solutionTemplateName, body, options),
    createVersion: (
      resourceGroupName: string,
      solutionTemplateName: string,
      body: SolutionTemplateVersionWithUpdateType,
      options?: SolutionTemplatesCreateVersionOptionalParams,
    ) => createVersion(context, resourceGroupName, solutionTemplateName, body, options),
    update: (
      resourceGroupName: string,
      solutionTemplateName: string,
      properties: SolutionTemplateUpdate,
      options?: SolutionTemplatesUpdateOptionalParams,
    ) => update(context, resourceGroupName, solutionTemplateName, properties, options),
    createOrUpdate: (
      resourceGroupName: string,
      solutionTemplateName: string,
      resource: SolutionTemplate,
      options?: SolutionTemplatesCreateOrUpdateOptionalParams,
    ) => createOrUpdate(context, resourceGroupName, solutionTemplateName, resource, options),
    get: (
      resourceGroupName: string,
      solutionTemplateName: string,
      options?: SolutionTemplatesGetOptionalParams,
    ) => get(context, resourceGroupName, solutionTemplateName, options),
  };
}

export function _getSolutionTemplatesOperations(
  context: WorkloadOrchestrationManagementContext,
): SolutionTemplatesOperations {
  return {
    ..._getSolutionTemplates(context),
  };
}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/classic/solutionTemplateVersions/index.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementContext } from "../../api/workloadOrchestrationManagementContext.js";
import {
  bulkPublishSolution,
  bulkDeploySolution,
  listBySolutionTemplate,
  get,
} from "../../api/solutionTemplateVersions/operations.js";
import {
  SolutionTemplateVersionsBulkPublishSolutionOptionalParams,
  SolutionTemplateVersionsBulkDeploySolutionOptionalParams,
  SolutionTemplateVersionsListBySolutionTemplateOptionalParams,
  SolutionTemplateVersionsGetOptionalParams,
} from "../../api/solutionTemplateVersions/options.js";
import {
  SolutionTemplateVersion,
  BulkDeploySolutionParameter,
  BulkPublishSolutionParameter,
} from "../../models/models.js";
import { PagedAsyncIterableIterator } from "../../static-helpers/pagingHelpers.js";
import { PollerLike, OperationState } from "@azure/core-lro";

/** Interface representing a SolutionTemplateVersions operations. */
export interface SolutionTemplateVersionsOperations {
  /** Post request for bulk publish */
  bulkPublishSolution: (
    resourceGroupName: string,
    solutionTemplateName: string,
    solutionTemplateVersionName: string,
    body: BulkPublishSolutionParameter,
    options?: SolutionTemplateVersionsBulkPublishSolutionOptionalParams,
  ) => PollerLike<OperationState<void>, void>;
  /** Post request for bulk deploy */
  bulkDeploySolution: (
    resourceGroupName: string,
    solutionTemplateName: string,
    solutionTemplateVersionName: string,
    body: BulkDeploySolutionParameter,
    options?: SolutionTemplateVersionsBulkDeploySolutionOptionalParams,
  ) => PollerLike<OperationState<void>, void>;
  /** List Solution Template Version Resources */
  listBySolutionTemplate: (
    resourceGroupName: string,
    solutionTemplateName: string,
    options?: SolutionTemplateVersionsListBySolutionTemplateOptionalParams,
  ) => PagedAsyncIterableIterator<SolutionTemplateVersion>;
  /** Get a Solution Template Version Resource */
  get: (
    resourceGroupName: string,
    solutionTemplateName: string,
    solutionTemplateVersionName: string,
    options?: SolutionTemplateVersionsGetOptionalParams,
  ) => Promise<SolutionTemplateVersion>;
}

function _getSolutionTemplateVersions(context: WorkloadOrchestrationManagementContext) {
  return {
    bulkPublishSolution: (
      resourceGroupName: string,
      solutionTemplateName: string,
      solutionTemplateVersionName: string,
      body: BulkPublishSolutionParameter,
      options?: SolutionTemplateVersionsBulkPublishSolutionOptionalParams,
    ) =>
      bulkPublishSolution(
        context,
        resourceGroupName,
        solutionTemplateName,
        solutionTemplateVersionName,
        body,
        options,
      ),
    bulkDeploySolution: (
      resourceGroupName: string,
      solutionTemplateName: string,
      solutionTemplateVersionName: string,
      body: BulkDeploySolutionParameter,
      options?: SolutionTemplateVersionsBulkDeploySolutionOptionalParams,
    ) =>
      bulkDeploySolution(
        context,
        resourceGroupName,
        solutionTemplateName,
        solutionTemplateVersionName,
        body,
        options,
      ),
    listBySolutionTemplate: (
      resourceGroupName: string,
      solutionTemplateName: string,
      options?: SolutionTemplateVersionsListBySolutionTemplateOptionalParams,
    ) => listBySolutionTemplate(context, resourceGroupName, solutionTemplateName, options),
    get: (
      resourceGroupName: string,
      solutionTemplateName: string,
      solutionTemplateVersionName: string,
      options?: SolutionTemplateVersionsGetOptionalParams,
    ) =>
      get(context, resourceGroupName, solutionTemplateName, solutionTemplateVersionName, options),
  };
}

export function _getSolutionTemplateVersionsOperations(
  context: WorkloadOrchestrationManagementContext,
): SolutionTemplateVersionsOperations {
  return {
    ..._getSolutionTemplateVersions(context),
  };
}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/classic/solutionVersions/index.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementContext } from "../../api/workloadOrchestrationManagementContext.js";
import {
  listBySolution,
  $delete,
  update,
  createOrUpdate,
  get,
} from "../../api/solutionVersions/operations.js";
import {
  SolutionVersionsListBySolutionOptionalParams,
  SolutionVersionsDeleteOptionalParams,
  SolutionVersionsUpdateOptionalParams,
  SolutionVersionsCreateOrUpdateOptionalParams,
  SolutionVersionsGetOptionalParams,
} from "../../api/solutionVersions/options.js";
import { SolutionVersion } from "../../models/models.js";
import { PagedAsyncIterableIterator } from "../../static-helpers/pagingHelpers.js";
import { PollerLike, OperationState } from "@azure/core-lro";

/** Interface representing a SolutionVersions operations. */
export interface SolutionVersionsOperations {
  /** List Solution Version Resources */
  listBySolution: (
    resourceGroupName: string,
    targetName: string,
    solutionName: string,
    options?: SolutionVersionsListBySolutionOptionalParams,
  ) => PagedAsyncIterableIterator<SolutionVersion>;
  /** Delete a Solution Version Resource */
  /**
   *  @fixme delete is a reserved word that cannot be used as an operation name.
   *         Please add @clientName("clientName") or @clientName("<JS-Specific-Name>", "javascript")
   *         to the operation to override the generated name.
   */
  delete: (
    resourceGroupName: string,
    targetName: string,
    solutionName: string,
    solutionVersionName: string,
    options?: SolutionVersionsDeleteOptionalParams,
  ) => PollerLike<OperationState<void>, void>;
  /** Update a Solution Version Resource */
  update: (
    resourceGroupName: string,
    targetName: string,
    solutionName: string,
    solutionVersionName: string,
    properties: SolutionVersion,
    options?: SolutionVersionsUpdateOptionalParams,
  ) => PollerLike<OperationState<SolutionVersion>, SolutionVersion>;
  /** Create or update a Solution Version Resource */
  createOrUpdate: (
    resourceGroupName: string,
    targetName: string,
    solutionName: string,
    solutionVersionName: string,
    resource: SolutionVersion,
    options?: SolutionVersionsCreateOrUpdateOptionalParams,
  ) => PollerLike<OperationState<SolutionVersion>, SolutionVersion>;
  /** Get a Solution Version Resource */
  get: (
    resourceGroupName: string,
    targetName: string,
    solutionName: string,
    solutionVersionName: string,
    options?: SolutionVersionsGetOptionalParams,
  ) => Promise<SolutionVersion>;
}

function _getSolutionVersions(context: WorkloadOrchestrationManagementContext) {
  return {
    listBySolution: (
      resourceGroupName: string,
      targetName: string,
      solutionName: string,
      options?: SolutionVersionsListBySolutionOptionalParams,
    ) => listBySolution(context, resourceGroupName, targetName, solutionName, options),
    delete: (
      resourceGroupName: string,
      targetName: string,
      solutionName: string,
      solutionVersionName: string,
      options?: SolutionVersionsDeleteOptionalParams,
    ) =>
      $delete(context, resourceGroupName, targetName, solutionName, solutionVersionName, options),
    update: (
      resourceGroupName: string,
      targetName: string,
      solutionName: string,
      solutionVersionName: string,
      properties: SolutionVersion,
      options?: SolutionVersionsUpdateOptionalParams,
    ) =>
      update(
        context,
        resourceGroupName,
        targetName,
        solutionName,
        solutionVersionName,
        properties,
        options,
      ),
    createOrUpdate: (
      resourceGroupName: string,
      targetName: string,
      solutionName: string,
      solutionVersionName: string,
      resource: SolutionVersion,
      options?: SolutionVersionsCreateOrUpdateOptionalParams,
    ) =>
      createOrUpdate(
        context,
        resourceGroupName,
        targetName,
        solutionName,
        solutionVersionName,
        resource,
        options,
      ),
    get: (
      resourceGroupName: string,
      targetName: string,
      solutionName: string,
      solutionVersionName: string,
      options?: SolutionVersionsGetOptionalParams,
    ) => get(context, resourceGroupName, targetName, solutionName, solutionVersionName, options),
  };
}

export function _getSolutionVersionsOperations(
  context: WorkloadOrchestrationManagementContext,
): SolutionVersionsOperations {
  return {
    ..._getSolutionVersions(context),
  };
}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/classic/targets/index.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementContext } from "../../api/workloadOrchestrationManagementContext.js";
import {
  updateExternalValidationStatus,
  publishSolutionVersion,
  reviewSolutionVersion,
  resolveConfiguration,
  removeRevision,
  uninstallSolution,
  installSolution,
  listBySubscription,
  listByResourceGroup,
  $delete,
  update,
  createOrUpdate,
  get,
} from "../../api/targets/operations.js";
import {
  TargetsUpdateExternalValidationStatusOptionalParams,
  TargetsPublishSolutionVersionOptionalParams,
  TargetsReviewSolutionVersionOptionalParams,
  TargetsResolveConfigurationOptionalParams,
  TargetsRemoveRevisionOptionalParams,
  TargetsUninstallSolutionOptionalParams,
  TargetsInstallSolutionOptionalParams,
  TargetsListBySubscriptionOptionalParams,
  TargetsListByResourceGroupOptionalParams,
  TargetsDeleteOptionalParams,
  TargetsUpdateOptionalParams,
  TargetsCreateOrUpdateOptionalParams,
  TargetsGetOptionalParams,
} from "../../api/targets/options.js";
import {
  SolutionVersion,
  InstallSolutionParameter,
  Target,
  TargetUpdate,
  UninstallSolutionParameter,
  RemoveRevisionParameter,
  SolutionTemplateParameter,
  ResolvedConfiguration,
  SolutionVersionParameter,
  UpdateExternalValidationStatusParameter,
} from "../../models/models.js";
import { PagedAsyncIterableIterator } from "../../static-helpers/pagingHelpers.js";
import { PollerLike, OperationState } from "@azure/core-lro";

/** Interface representing a Targets operations. */
export interface TargetsOperations {
  /** Post request to update external validation status */
  updateExternalValidationStatus: (
    resourceGroupName: string,
    targetName: string,
    body: UpdateExternalValidationStatusParameter,
    options?: TargetsUpdateExternalValidationStatusOptionalParams,
  ) => PollerLike<OperationState<SolutionVersion>, SolutionVersion>;
  /** Post request to publish */
  publishSolutionVersion: (
    resourceGroupName: string,
    targetName: string,
    body: SolutionVersionParameter,
    options?: TargetsPublishSolutionVersionOptionalParams,
  ) => PollerLike<OperationState<SolutionVersion>, SolutionVersion>;
  /** Post request to review configuration */
  reviewSolutionVersion: (
    resourceGroupName: string,
    targetName: string,
    body: SolutionTemplateParameter,
    options?: TargetsReviewSolutionVersionOptionalParams,
  ) => PollerLike<OperationState<SolutionVersion>, SolutionVersion>;
  /** Post request to resolve configuration */
  resolveConfiguration: (
    resourceGroupName: string,
    targetName: string,
    body: SolutionTemplateParameter,
    options?: TargetsResolveConfigurationOptionalParams,
  ) => PollerLike<OperationState<ResolvedConfiguration>, ResolvedConfiguration>;
  /** Post request to remove solution version revision */
  removeRevision: (
    resourceGroupName: string,
    targetName: string,
    body: RemoveRevisionParameter,
    options?: TargetsRemoveRevisionOptionalParams,
  ) => PollerLike<OperationState<void>, void>;
  /** Post request to uninstall */
  uninstallSolution: (
    resourceGroupName: string,
    targetName: string,
    body: UninstallSolutionParameter,
    options?: TargetsUninstallSolutionOptionalParams,
  ) => PollerLike<OperationState<void>, void>;
  /** Post request to deploy */
  installSolution: (
    resourceGroupName: string,
    targetName: string,
    body: InstallSolutionParameter,
    options?: TargetsInstallSolutionOptionalParams,
  ) => PollerLike<OperationState<void>, void>;
  /** List by subscription */
  listBySubscription: (
    options?: TargetsListBySubscriptionOptionalParams,
  ) => PagedAsyncIterableIterator<Target>;
  /** List by specified resource group */
  listByResourceGroup: (
    resourceGroupName: string,
    options?: TargetsListByResourceGroupOptionalParams,
  ) => PagedAsyncIterableIterator<Target>;
  /** Delete a Target Resource */
  /**
   *  @fixme delete is a reserved word that cannot be used as an operation name.
   *         Please add @clientName("clientName") or @clientName("<JS-Specific-Name>", "javascript")
   *         to the operation to override the generated name.
   */
  delete: (
    resourceGroupName: string,
    targetName: string,
    options?: TargetsDeleteOptionalParams,
  ) => PollerLike<OperationState<void>, void>;
  /** update a Target Resource */
  update: (
    resourceGroupName: string,
    targetName: string,
    properties: TargetUpdate,
    options?: TargetsUpdateOptionalParams,
  ) => PollerLike<OperationState<Target>, Target>;
  /** Create or update a Target Resource */
  createOrUpdate: (
    resourceGroupName: string,
    targetName: string,
    resource: Target,
    options?: TargetsCreateOrUpdateOptionalParams,
  ) => PollerLike<OperationState<Target>, Target>;
  /** Get a Target Resource */
  get: (
    resourceGroupName: string,
    targetName: string,
    options?: TargetsGetOptionalParams,
  ) => Promise<Target>;
}

function _getTargets(context: WorkloadOrchestrationManagementContext) {
  return {
    updateExternalValidationStatus: (
      resourceGroupName: string,
      targetName: string,
      body: UpdateExternalValidationStatusParameter,
      options?: TargetsUpdateExternalValidationStatusOptionalParams,
    ) => updateExternalValidationStatus(context, resourceGroupName, targetName, body, options),
    publishSolutionVersion: (
      resourceGroupName: string,
      targetName: string,
      body: SolutionVersionParameter,
      options?: TargetsPublishSolutionVersionOptionalParams,
    ) => publishSolutionVersion(context, resourceGroupName, targetName, body, options),
    reviewSolutionVersion: (
      resourceGroupName: string,
      targetName: string,
      body: SolutionTemplateParameter,
      options?: TargetsReviewSolutionVersionOptionalParams,
    ) => reviewSolutionVersion(context, resourceGroupName, targetName, body, options),
    resolveConfiguration: (
      resourceGroupName: string,
      targetName: string,
      body: SolutionTemplateParameter,
      options?: TargetsResolveConfigurationOptionalParams,
    ) => resolveConfiguration(context, resourceGroupName, targetName, body, options),
    removeRevision: (
      resourceGroupName: string,
      targetName: string,
      body: RemoveRevisionParameter,
      options?: TargetsRemoveRevisionOptionalParams,
    ) => removeRevision(context, resourceGroupName, targetName, body, options),
    uninstallSolution: (
      resourceGroupName: string,
      targetName: string,
      body: UninstallSolutionParameter,
      options?: TargetsUninstallSolutionOptionalParams,
    ) => uninstallSolution(context, resourceGroupName, targetName, body, options),
    installSolution: (
      resourceGroupName: string,
      targetName: string,
      body: InstallSolutionParameter,
      options?: TargetsInstallSolutionOptionalParams,
    ) => installSolution(context, resourceGroupName, targetName, body, options),
    listBySubscription: (options?: TargetsListBySubscriptionOptionalParams) =>
      listBySubscription(context, options),
    listByResourceGroup: (
      resourceGroupName: string,
      options?: TargetsListByResourceGroupOptionalParams,
    ) => listByResourceGroup(context, resourceGroupName, options),
    delete: (
      resourceGroupName: string,
      targetName: string,
      options?: TargetsDeleteOptionalParams,
    ) => $delete(context, resourceGroupName, targetName, options),
    update: (
      resourceGroupName: string,
      targetName: string,
      properties: TargetUpdate,
      options?: TargetsUpdateOptionalParams,
    ) => update(context, resourceGroupName, targetName, properties, options),
    createOrUpdate: (
      resourceGroupName: string,
      targetName: string,
      resource: Target,
      options?: TargetsCreateOrUpdateOptionalParams,
    ) => createOrUpdate(context, resourceGroupName, targetName, resource, options),
    get: (resourceGroupName: string, targetName: string, options?: TargetsGetOptionalParams) =>
      get(context, resourceGroupName, targetName, options),
  };
}

export function _getTargetsOperations(
  context: WorkloadOrchestrationManagementContext,
): TargetsOperations {
  return {
    ..._getTargets(context),
  };
}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/classic/workflows/index.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementContext } from "../../api/workloadOrchestrationManagementContext.js";
import {
  listByContext,
  $delete,
  update,
  createOrUpdate,
  get,
} from "../../api/workflows/operations.js";
import {
  WorkflowsListByContextOptionalParams,
  WorkflowsDeleteOptionalParams,
  WorkflowsUpdateOptionalParams,
  WorkflowsCreateOrUpdateOptionalParams,
  WorkflowsGetOptionalParams,
} from "../../api/workflows/options.js";
import { Workflow } from "../../models/models.js";
import { PagedAsyncIterableIterator } from "../../static-helpers/pagingHelpers.js";
import { PollerLike, OperationState } from "@azure/core-lro";

/** Interface representing a Workflows operations. */
export interface WorkflowsOperations {
  /** List Workflow resources */
  listByContext: (
    resourceGroupName: string,
    contextName: string,
    options?: WorkflowsListByContextOptionalParams,
  ) => PagedAsyncIterableIterator<Workflow>;
  /** Delete a Workflow resource */
  /**
   *  @fixme delete is a reserved word that cannot be used as an operation name.
   *         Please add @clientName("clientName") or @clientName("<JS-Specific-Name>", "javascript")
   *         to the operation to override the generated name.
   */
  delete: (
    resourceGroupName: string,
    contextName: string,
    workflowName: string,
    options?: WorkflowsDeleteOptionalParams,
  ) => PollerLike<OperationState<void>, void>;
  /** update a Workflow resource */
  update: (
    resourceGroupName: string,
    contextName: string,
    workflowName: string,
    properties: Workflow,
    options?: WorkflowsUpdateOptionalParams,
  ) => PollerLike<OperationState<Workflow>, Workflow>;
  /** Create or update a Workflow resource */
  createOrUpdate: (
    resourceGroupName: string,
    contextName: string,
    workflowName: string,
    resource: Workflow,
    options?: WorkflowsCreateOrUpdateOptionalParams,
  ) => PollerLike<OperationState<Workflow>, Workflow>;
  /** Get a Workflow resource */
  get: (
    resourceGroupName: string,
    contextName: string,
    workflowName: string,
    options?: WorkflowsGetOptionalParams,
  ) => Promise<Workflow>;
}

function _getWorkflows(context: WorkloadOrchestrationManagementContext) {
  return {
    listByContext: (
      resourceGroupName: string,
      contextName: string,
      options?: WorkflowsListByContextOptionalParams,
    ) => listByContext(context, resourceGroupName, contextName, options),
    delete: (
      resourceGroupName: string,
      contextName: string,
      workflowName: string,
      options?: WorkflowsDeleteOptionalParams,
    ) => $delete(context, resourceGroupName, contextName, workflowName, options),
    update: (
      resourceGroupName: string,
      contextName: string,
      workflowName: string,
      properties: Workflow,
      options?: WorkflowsUpdateOptionalParams,
    ) => update(context, resourceGroupName, contextName, workflowName, properties, options),
    createOrUpdate: (
      resourceGroupName: string,
      contextName: string,
      workflowName: string,
      resource: Workflow,
      options?: WorkflowsCreateOrUpdateOptionalParams,
    ) => createOrUpdate(context, resourceGroupName, contextName, workflowName, resource, options),
    get: (
      resourceGroupName: string,
      contextName: string,
      workflowName: string,
      options?: WorkflowsGetOptionalParams,
    ) => get(context, resourceGroupName, contextName, workflowName, options),
  };
}

export function _getWorkflowsOperations(
  context: WorkloadOrchestrationManagementContext,
): WorkflowsOperations {
  return {
    ..._getWorkflows(context),
  };
}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/classic/workflowVersions/index.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementContext } from "../../api/workloadOrchestrationManagementContext.js";
import {
  listByWorkflow,
  $delete,
  update,
  createOrUpdate,
  get,
} from "../../api/workflowVersions/operations.js";
import {
  WorkflowVersionsListByWorkflowOptionalParams,
  WorkflowVersionsDeleteOptionalParams,
  WorkflowVersionsUpdateOptionalParams,
  WorkflowVersionsCreateOrUpdateOptionalParams,
  WorkflowVersionsGetOptionalParams,
} from "../../api/workflowVersions/options.js";
import { WorkflowVersion } from "../../models/models.js";
import { PagedAsyncIterableIterator } from "../../static-helpers/pagingHelpers.js";
import { PollerLike, OperationState } from "@azure/core-lro";

/** Interface representing a WorkflowVersions operations. */
export interface WorkflowVersionsOperations {
  /** List Workflow Version Resources */
  listByWorkflow: (
    resourceGroupName: string,
    contextName: string,
    workflowName: string,
    options?: WorkflowVersionsListByWorkflowOptionalParams,
  ) => PagedAsyncIterableIterator<WorkflowVersion>;
  /** Delete a Workflow Version Resource */
  /**
   *  @fixme delete is a reserved word that cannot be used as an operation name.
   *         Please add @clientName("clientName") or @clientName("<JS-Specific-Name>", "javascript")
   *         to the operation to override the generated name.
   */
  delete: (
    resourceGroupName: string,
    contextName: string,
    workflowName: string,
    versionName: string,
    options?: WorkflowVersionsDeleteOptionalParams,
  ) => PollerLike<OperationState<void>, void>;
  /** update an WorkflowVersion Resource */
  update: (
    resourceGroupName: string,
    contextName: string,
    workflowName: string,
    versionName: string,
    properties: WorkflowVersion,
    options?: WorkflowVersionsUpdateOptionalParams,
  ) => PollerLike<OperationState<WorkflowVersion>, WorkflowVersion>;
  /** Create or update a Workflow Version Resource */
  createOrUpdate: (
    resourceGroupName: string,
    contextName: string,
    workflowName: string,
    versionName: string,
    resource: WorkflowVersion,
    options?: WorkflowVersionsCreateOrUpdateOptionalParams,
  ) => PollerLike<OperationState<WorkflowVersion>, WorkflowVersion>;
  /** Get a Workflow Version Resource */
  get: (
    resourceGroupName: string,
    contextName: string,
    workflowName: string,
    versionName: string,
    options?: WorkflowVersionsGetOptionalParams,
  ) => Promise<WorkflowVersion>;
}

function _getWorkflowVersions(context: WorkloadOrchestrationManagementContext) {
  return {
    listByWorkflow: (
      resourceGroupName: string,
      contextName: string,
      workflowName: string,
      options?: WorkflowVersionsListByWorkflowOptionalParams,
    ) => listByWorkflow(context, resourceGroupName, contextName, workflowName, options),
    delete: (
      resourceGroupName: string,
      contextName: string,
      workflowName: string,
      versionName: string,
      options?: WorkflowVersionsDeleteOptionalParams,
    ) => $delete(context, resourceGroupName, contextName, workflowName, versionName, options),
    update: (
      resourceGroupName: string,
      contextName: string,
      workflowName: string,
      versionName: string,
      properties: WorkflowVersion,
      options?: WorkflowVersionsUpdateOptionalParams,
    ) =>
      update(
        context,
        resourceGroupName,
        contextName,
        workflowName,
        versionName,
        properties,
        options,
      ),
    createOrUpdate: (
      resourceGroupName: string,
      contextName: string,
      workflowName: string,
      versionName: string,
      resource: WorkflowVersion,
      options?: WorkflowVersionsCreateOrUpdateOptionalParams,
    ) =>
      createOrUpdate(
        context,
        resourceGroupName,
        contextName,
        workflowName,
        versionName,
        resource,
        options,
      ),
    get: (
      resourceGroupName: string,
      contextName: string,
      workflowName: string,
      versionName: string,
      options?: WorkflowVersionsGetOptionalParams,
    ) => get(context, resourceGroupName, contextName, workflowName, versionName, options),
  };
}

export function _getWorkflowVersionsOperations(
  context: WorkloadOrchestrationManagementContext,
): WorkflowVersionsOperations {
  return {
    ..._getWorkflowVersions(context),
  };
}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/models/index.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

export {
  DynamicSchema,
  DynamicSchemaProperties,
  KnownConfigurationType,
  ConfigurationType,
  KnownConfigurationModel,
  ConfigurationModel,
  KnownProvisioningState,
  ProvisioningState,
  ProxyResource,
  Resource,
  SystemData,
  KnownCreatedByType,
  CreatedByType,
  ErrorResponse,
  ErrorDetail,
  ErrorAdditionalInfo,
  Schema,
  SchemaProperties,
  TrackedResource,
  SchemaUpdate,
  SchemaUpdateProperties,
  SchemaVersionWithUpdateType,
  KnownUpdateType,
  UpdateType,
  SchemaVersion,
  SchemaVersionProperties,
  VersionParameter,
  RemoveVersionResponse,
  SolutionVersion,
  SolutionVersionProperties,
  KnownState,
  State,
  SolutionDependency,
  KnownJobType,
  JobType,
  ExtendedLocation,
  KnownExtendedLocationType,
  ExtendedLocationType,
  Job,
  JobProperties,
  KnownJobStatus,
  JobStatus,
  JobParameterBase,
  JobParameterBaseUnion,
  DeployJobParameter,
  InstallSolutionParameter,
  JobStep,
  JobStepStatisticsBase,
  JobStepStatisticsBaseUnion,
  DeployJobStepStatistics,
  ExtensionResource,
  Target,
  TargetProperties,
  DeploymentStatus,
  TargetStatus,
  ComponentStatus,
  KnownResourceState,
  ResourceState,
  TargetUpdate,
  TargetUpdateProperties,
  UninstallSolutionParameter,
  RemoveRevisionParameter,
  SolutionTemplateParameter,
  SolutionDependencyParameter,
  ResolvedConfiguration,
  SolutionVersionParameter,
  UpdateExternalValidationStatusParameter,
  KnownValidationStatus,
  ValidationStatus,
  DynamicSchemaVersion,
  SchemaReference,
  SchemaReferenceProperties,
  Solution,
  SolutionProperties,
  AvailableSolutionTemplateVersion,
  SolutionUpdate,
  SolutionUpdateProperties,
  SolutionTemplateVersion,
  SolutionTemplateVersionProperties,
  KnownOrchestratorType,
  OrchestratorType,
  BulkDeploySolutionParameter,
  BulkDeployTargetDetails,
  BulkPublishSolutionParameter,
  BulkPublishTargetDetails,
  SolutionTemplate,
  SolutionTemplateProperties,
  SolutionTemplateUpdate,
  SolutionTemplateUpdateProperties,
  SolutionTemplateVersionWithUpdateType,
  Instance,
  InstanceProperties,
  KnownActiveState,
  ActiveState,
  ReconciliationPolicyProperties,
  KnownReconciliationState,
  ReconciliationState,
  InstanceHistory,
  InstanceHistoryProperties,
  SolutionVersionSnapshot,
  TargetSnapshot,
  ConfigTemplate,
  ConfigTemplateProperties,
  ConfigTemplateUpdate,
  ConfigTemplateUpdateProperties,
  ConfigTemplateVersionWithUpdateType,
  ConfigTemplateVersion,
  ConfigTemplateVersionProperties,
  Workflow,
  WorkflowProperties,
  WorkflowVersion,
  WorkflowVersionProperties,
  StageSpec,
  TaskSpec,
  TaskOption,
  ErrorAction,
  KnownErrorActionMode,
  ErrorActionMode,
  Execution,
  ExecutionProperties,
  ExecutionStatus,
  StageStatus,
  Diagnostic,
  DiagnosticProperties,
  DiagnosticUpdate,
  DiagnosticUpdateProperties,
  Context,
  ContextProperties,
  Capability,
  Hierarchy,
  ContextUpdate,
  ContextUpdateProperties,
  SiteReference,
  SiteReferenceProperties,
  KnownVersions,
} from "./models.js";



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/static-helpers/cloudSettingHelpers.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

/** An enum to describe Azure Cloud. */
export enum AzureClouds {
  /** Azure public cloud, which is the default cloud for Azure SDKs. */
  AZURE_PUBLIC_CLOUD = "AZURE_PUBLIC_CLOUD",
  /** Azure China cloud */
  AZURE_CHINA_CLOUD = "AZURE_CHINA_CLOUD",
  /** Azure US government cloud */
  AZURE_US_GOVERNMENT = "AZURE_US_GOVERNMENT",
}

/** The supported values for cloud setting as a string literal type */
export type AzureSupportedClouds = `${AzureClouds}`;

export function getArmEndpoint(cloudSetting?: AzureSupportedClouds): string | undefined {
  if (cloudSetting === undefined) {
    return undefined;
  }
  const cloudEndpoints: Record<keyof typeof AzureClouds, string> = {
    AZURE_CHINA_CLOUD: "https://management.chinacloudapi.cn/",
    AZURE_US_GOVERNMENT: "https://management.usgovcloudapi.net/",
    AZURE_PUBLIC_CLOUD: "https://management.azure.com/",
  };
  if (cloudSetting in cloudEndpoints) {
    return cloudEndpoints[cloudSetting];
  } else {
    throw new Error(
      `Unknown cloud setting: ${cloudSetting}. Please refer to the enum AzureClouds for possible values.`,
    );
  }
}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/static-helpers/pagingHelpers.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { Client, createRestError, PathUncheckedResponse } from "@azure-rest/core-client";
import { RestError } from "@azure/core-rest-pipeline";

/**
 * Options for the byPage method
 */
export interface PageSettings {
  /**
   * A reference to a specific page to start iterating from.
   */
  continuationToken?: string;
}

/**
 * An interface that describes a page of results.
 */
export type ContinuablePage<TElement, TPage = TElement[]> = TPage & {
  /**
   * The token that keeps track of where to continue the iterator
   */
  continuationToken?: string;
};

/**
 * An interface that allows async iterable iteration both to completion and by page.
 */
export interface PagedAsyncIterableIterator<
  TElement,
  TPage = TElement[],
  TPageSettings extends PageSettings = PageSettings,
> {
  /**
   * The next method, part of the iteration protocol
   */
  next(): Promise<IteratorResult<TElement>>;
  /**
   * The connection to the async iterator, part of the iteration protocol
   */
  [Symbol.asyncIterator](): PagedAsyncIterableIterator<TElement, TPage, TPageSettings>;
  /**
   * Return an AsyncIterableIterator that works a page at a time
   */
  byPage: (settings?: TPageSettings) => AsyncIterableIterator<ContinuablePage<TElement, TPage>>;
}

/**
 * An interface that describes how to communicate with the service.
 */
export interface PagedResult<
  TElement,
  TPage = TElement[],
  TPageSettings extends PageSettings = PageSettings,
> {
  /**
   * Link to the first page of results.
   */
  firstPageLink?: string;
  /**
   * A method that returns a page of results.
   */
  getPage: (pageLink?: string) => Promise<{ page: TPage; nextPageLink?: string } | undefined>;
  /**
   * a function to implement the `byPage` method on the paged async iterator.
   */
  byPage?: (settings?: TPageSettings) => AsyncIterableIterator<ContinuablePage<TElement, TPage>>;

  /**
   * A function to extract elements from a page.
   */
  toElements?: (page: TPage) => TElement[];
}

/**
 * Options for the paging helper
 */
export interface BuildPagedAsyncIteratorOptions {
  itemName?: string;
  nextLinkName?: string;
}

/**
 * Helper to paginate results in a generic way and return a PagedAsyncIterableIterator
 */
export function buildPagedAsyncIterator<
  TElement,
  TPage = TElement[],
  TPageSettings extends PageSettings = PageSettings,
  TResponse extends PathUncheckedResponse = PathUncheckedResponse,
>(
  client: Client,
  getInitialResponse: () => PromiseLike<TResponse>,
  processResponseBody: (result: TResponse) => PromiseLike<unknown>,
  expectedStatuses: string[],
  options: BuildPagedAsyncIteratorOptions = {},
): PagedAsyncIterableIterator<TElement, TPage, TPageSettings> {
  const itemName = options.itemName ?? "value";
  const nextLinkName = options.nextLinkName ?? "nextLink";
  const pagedResult: PagedResult<TElement, TPage, TPageSettings> = {
    getPage: async (pageLink?: string) => {
      const result =
        pageLink === undefined
          ? await getInitialResponse()
          : await client.pathUnchecked(pageLink).get();
      checkPagingRequest(result, expectedStatuses);
      const results = await processResponseBody(result as TResponse);
      const nextLink = getNextLink(results, nextLinkName);
      const values = getElements<TElement>(results, itemName) as TPage;
      return {
        page: values,
        nextPageLink: nextLink,
      };
    },
    byPage: (settings?: TPageSettings) => {
      const { continuationToken } = settings ?? {};
      return getPageAsyncIterator(pagedResult, {
        pageLink: continuationToken,
      });
    },
  };
  return getPagedAsyncIterator(pagedResult);
}

/**
 * returns an async iterator that iterates over results. It also has a `byPage`
 * method that returns pages of items at once.
 *
 * @param pagedResult - an object that specifies how to get pages.
 * @returns a paged async iterator that iterates over results.
 */

function getPagedAsyncIterator<
  TElement,
  TPage = TElement[],
  TPageSettings extends PageSettings = PageSettings,
>(
  pagedResult: PagedResult<TElement, TPage, TPageSettings>,
): PagedAsyncIterableIterator<TElement, TPage, TPageSettings> {
  const iter = getItemAsyncIterator<TElement, TPage, TPageSettings>(pagedResult);
  return {
    next() {
      return iter.next();
    },
    [Symbol.asyncIterator]() {
      return this;
    },
    byPage:
      pagedResult?.byPage ??
      ((settings?: TPageSettings) => {
        const { continuationToken } = settings ?? {};
        return getPageAsyncIterator(pagedResult, {
          pageLink: continuationToken,
        });
      }),
  };
}

async function* getItemAsyncIterator<TElement, TPage, TPageSettings extends PageSettings>(
  pagedResult: PagedResult<TElement, TPage, TPageSettings>,
): AsyncIterableIterator<TElement> {
  const pages = getPageAsyncIterator(pagedResult);
  for await (const page of pages) {
    yield* page as unknown as TElement[];
  }
}

async function* getPageAsyncIterator<TElement, TPage, TPageSettings extends PageSettings>(
  pagedResult: PagedResult<TElement, TPage, TPageSettings>,
  options: {
    pageLink?: string;
  } = {},
): AsyncIterableIterator<ContinuablePage<TElement, TPage>> {
  const { pageLink } = options;
  let response = await pagedResult.getPage(pageLink ?? pagedResult.firstPageLink);
  if (!response) {
    return;
  }
  let result = response.page as ContinuablePage<TElement, TPage>;
  result.continuationToken = response.nextPageLink;
  yield result;
  while (response.nextPageLink) {
    response = await pagedResult.getPage(response.nextPageLink);
    if (!response) {
      return;
    }
    result = response.page as ContinuablePage<TElement, TPage>;
    result.continuationToken = response.nextPageLink;
    yield result;
  }
}

/**
 * Gets for the value of nextLink in the body
 */
function getNextLink(body: unknown, nextLinkName?: string): string | undefined {
  if (!nextLinkName) {
    return undefined;
  }

  const nextLink = (body as Record<string, unknown>)[nextLinkName];

  if (typeof nextLink !== "string" && typeof nextLink !== "undefined" && nextLink !== null) {
    throw new RestError(
      `Body Property ${nextLinkName} should be a string or undefined or null but got ${typeof nextLink}`,
    );
  }

  if (nextLink === null) {
    return undefined;
  }

  return nextLink;
}

/**
 * Gets the elements of the current request in the body.
 */
function getElements<T = unknown>(body: unknown, itemName: string): T[] {
  const value = (body as Record<string, unknown>)[itemName] as T[];
  if (!Array.isArray(value)) {
    throw new RestError(
      `Couldn't paginate response\n Body doesn't contain an array property with name: ${itemName}`,
    );
  }

  return value ?? [];
}

/**
 * Checks if a request failed
 */
function checkPagingRequest(response: PathUncheckedResponse, expectedStatuses: string[]): void {
  if (!expectedStatuses.includes(response.status)) {
    throw createRestError(
      `Pagination failed with unexpected statusCode ${response.status}`,
      response,
    );
  }
}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/static-helpers/pollingHelpers.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import {
  PollerLike,
  OperationState,
  ResourceLocationConfig,
  RunningOperation,
  createHttpPoller,
  OperationResponse,
} from "@azure/core-lro";

import { Client, PathUncheckedResponse, createRestError } from "@azure-rest/core-client";
import { AbortSignalLike } from "@azure/abort-controller";

export interface GetLongRunningPollerOptions<TResponse> {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /**
   * The signal which can be used to abort requests.
   */
  abortSignal?: AbortSignalLike;
  /**
   * The potential location of the result of the LRO if specified by the LRO extension in the swagger.
   */
  resourceLocationConfig?: ResourceLocationConfig;
  /**
   * The original url of the LRO
   * Should not be null when restoreFrom is set
   */
  initialRequestUrl?: string;
  /**
   * A serialized poller which can be used to resume an existing paused Long-Running-Operation.
   */
  restoreFrom?: string;
  /**
   * The function to get the initial response
   */
  getInitialResponse?: () => PromiseLike<TResponse>;
}
export function getLongRunningPoller<TResponse extends PathUncheckedResponse, TResult = void>(
  client: Client,
  processResponseBody: (result: TResponse) => Promise<TResult>,
  expectedStatuses: string[],
  options: GetLongRunningPollerOptions<TResponse>,
): PollerLike<OperationState<TResult>, TResult> {
  const { restoreFrom, getInitialResponse } = options;
  if (!restoreFrom && !getInitialResponse) {
    throw new Error("Either restoreFrom or getInitialResponse must be specified");
  }
  let initialResponse: TResponse | undefined = undefined;
  const pollAbortController = new AbortController();
  const poller: RunningOperation<TResponse> = {
    sendInitialRequest: async () => {
      if (!getInitialResponse) {
        throw new Error("getInitialResponse is required when initializing a new poller");
      }
      initialResponse = await getInitialResponse();
      return getLroResponse(initialResponse, expectedStatuses);
    },
    sendPollRequest: async (
      path: string,
      pollOptions?: {
        abortSignal?: AbortSignalLike;
      },
    ) => {
      // The poll request would both listen to the user provided abort signal and the poller's own abort signal
      function abortListener(): void {
        pollAbortController.abort();
      }
      const abortSignal = pollAbortController.signal;
      if (options.abortSignal?.aborted) {
        pollAbortController.abort();
      } else if (pollOptions?.abortSignal?.aborted) {
        pollAbortController.abort();
      } else if (!abortSignal.aborted) {
        options.abortSignal?.addEventListener("abort", abortListener, {
          once: true,
        });
        pollOptions?.abortSignal?.addEventListener("abort", abortListener, {
          once: true,
        });
      }
      let response;
      try {
        response = await client.pathUnchecked(path).get({ abortSignal });
      } finally {
        options.abortSignal?.removeEventListener("abort", abortListener);
        pollOptions?.abortSignal?.removeEventListener("abort", abortListener);
      }

      return getLroResponse(response as TResponse, expectedStatuses);
    },
  };
  return createHttpPoller(poller, {
    intervalInMs: options?.updateIntervalInMs,
    resourceLocationConfig: options?.resourceLocationConfig,
    restoreFrom: options?.restoreFrom,
    processResult: (result: unknown) => {
      return processResponseBody(result as TResponse);
    },
  });
}
/**
 * Converts a Rest Client response to a response that the LRO implementation understands
 * @param response - a rest client http response
 * @param deserializeFn - deserialize function to convert Rest response to modular output
 * @returns - An LRO response that the LRO implementation understands
 */
function getLroResponse<TResponse extends PathUncheckedResponse>(
  response: TResponse,
  expectedStatuses: string[],
): OperationResponse<TResponse> {
  if (!expectedStatuses.includes(response.status)) {
    throw createRestError(response);
  }

  return {
    flatResponse: response,
    rawResponse: {
      ...response,
      statusCode: Number.parseInt(response.status),
      body: response.body,
    },
  };
}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/src/static-helpers/urlTemplate.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

//---------------------
// interfaces
//---------------------
interface ValueOptions {
  isFirst: boolean; // is first value in the expression
  op?: string; // operator
  varValue?: any; // variable value
  varName?: string; // variable name
  modifier?: string; // modifier e.g *
  reserved?: boolean; // if true we'll keep reserved words with not encoding
}

export interface UrlTemplateOptions {
  // if set to true, reserved characters will not be encoded
  allowReserved?: boolean;
}

// ---------------------
// helpers
// ---------------------
function encodeComponent(val: string, reserved?: boolean, op?: string) {
  return (reserved ?? op === "+") || op === "#"
    ? encodeReservedComponent(val)
    : encodeRFC3986URIComponent(val);
}

function encodeReservedComponent(str: string) {
  return str
    .split(/(%[0-9A-Fa-f]{2})/g)
    .map((part) => (!/%[0-9A-Fa-f]/.test(part) ? encodeURI(part) : part))
    .join("");
}

function encodeRFC3986URIComponent(str: string) {
  return encodeURIComponent(str).replace(
    /[!'()*]/g,
    (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`,
  );
}

function isDefined(val: any) {
  return val !== undefined && val !== null;
}

function getNamedAndIfEmpty(op?: string): [boolean, string] {
  return [!!op && [";", "?", "&"].includes(op), !!op && ["?", "&"].includes(op) ? "=" : ""];
}

function getFirstOrSep(op?: string, isFirst = false) {
  if (isFirst) {
    return !op || op === "+" ? "" : op;
  } else if (!op || op === "+" || op === "#") {
    return ",";
  } else if (op === "?") {
    return "&";
  } else {
    return op;
  }
}

function getExpandedValue(option: ValueOptions) {
  let isFirst = option.isFirst;
  const { op, varName, varValue: value, reserved } = option;
  const vals: string[] = [];
  const [named, ifEmpty] = getNamedAndIfEmpty(op);

  if (Array.isArray(value)) {
    for (const val of value.filter(isDefined)) {
      // prepare the following parts: separator, varName, value
      vals.push(`${getFirstOrSep(op, isFirst)}`);
      if (named && varName) {
        vals.push(`${encodeURIComponent(varName)}`);
        val === "" ? vals.push(ifEmpty) : vals.push("=");
      }
      vals.push(encodeComponent(val, reserved, op));
      isFirst = false;
    }
  } else if (typeof value === "object") {
    for (const key of Object.keys(value)) {
      const val = value[key];
      if (!isDefined(val)) {
        continue;
      }
      // prepare the following parts: separator, key, value
      vals.push(`${getFirstOrSep(op, isFirst)}`);
      if (key) {
        vals.push(`${encodeURIComponent(key)}`);
        named && val === "" ? vals.push(ifEmpty) : vals.push("=");
      }
      vals.push(encodeComponent(val, reserved, op));
      isFirst = false;
    }
  }
  return vals.join("");
}

function getNonExpandedValue(option: ValueOptions) {
  const { op, varName, varValue: value, isFirst, reserved } = option;
  const vals: string[] = [];
  const first = getFirstOrSep(op, isFirst);
  const [named, ifEmpty] = getNamedAndIfEmpty(op);
  if (named && varName) {
    vals.push(encodeComponent(varName, reserved, op));
    if (value === "") {
      if (!ifEmpty) {
        vals.push(ifEmpty);
      }
      return !vals.join("") ? undefined : `${first}${vals.join("")}`;
    }
    vals.push("=");
  }

  const items = [];
  if (Array.isArray(value)) {
    for (const val of value.filter(isDefined)) {
      items.push(encodeComponent(val, reserved, op));
    }
  } else if (typeof value === "object") {
    for (const key of Object.keys(value)) {
      if (!isDefined(value[key])) {
        continue;
      }
      items.push(encodeRFC3986URIComponent(key));
      items.push(encodeComponent(value[key], reserved, op));
    }
  }
  vals.push(items.join(","));
  return !vals.join(",") ? undefined : `${first}${vals.join("")}`;
}

function getVarValue(option: ValueOptions): string | undefined {
  const { op, varName, modifier, isFirst, reserved, varValue: value } = option;

  if (!isDefined(value)) {
    return undefined;
  } else if (["string", "number", "boolean"].includes(typeof value)) {
    let val = value.toString();
    const [named, ifEmpty] = getNamedAndIfEmpty(op);
    const vals: string[] = [getFirstOrSep(op, isFirst)];
    if (named && varName) {
      // No need to encode varName considering it is already encoded
      vals.push(varName);
      val === "" ? vals.push(ifEmpty) : vals.push("=");
    }
    if (modifier && modifier !== "*") {
      val = val.substring(0, parseInt(modifier, 10));
    }
    vals.push(encodeComponent(val, reserved, op));
    return vals.join("");
  } else if (modifier === "*") {
    return getExpandedValue(option);
  } else {
    return getNonExpandedValue(option);
  }
}

// ---------------------------------------------------------------------------------------------------
// This is an implementation of RFC 6570 URI Template: https://datatracker.ietf.org/doc/html/rfc6570.
// ---------------------------------------------------------------------------------------------------
export function expandUrlTemplate(
  template: string,
  context: Record<string, any>,
  option?: UrlTemplateOptions,
): string {
  return template.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g, (_, expr, text) => {
    if (!expr) {
      return encodeReservedComponent(text);
    }
    let op;
    if (["+", "#", ".", "/", ";", "?", "&"].includes(expr[0])) {
      op = expr[0];
      expr = expr.slice(1);
    }
    const varList = expr.split(/,/g);
    const result = [];
    for (const varSpec of varList) {
      const varMatch = /([^:\*]*)(?::(\d+)|(\*))?/.exec(varSpec);
      if (!varMatch || !varMatch[1]) {
        continue;
      }
      const varValue = getVarValue({
        isFirst: result.length === 0,
        op,
        varValue: context[varMatch[1]],
        varName: varMatch[1],
        modifier: varMatch[2] || varMatch[3],
        reserved: option?.allowReserved,
      });
      if (varValue) {
        result.push(varValue);
      }
    }
    return result.join("");
  });
}



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/test/snippets.spec.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { WorkloadOrchestrationManagementClient } from "../src/index.js";
import { DefaultAzureCredential, InteractiveBrowserCredential } from "@azure/identity";
import { setLogLevel } from "@azure/logger";
import { describe, it } from "vitest";

describe("snippets", () => {
  it("ReadmeSampleCreateClient_Node", async () => {
    const subscriptionId = "00000000-0000-0000-0000-000000000000";
    const client = new WorkloadOrchestrationManagementClient(
      new DefaultAzureCredential(),
      subscriptionId,
    );
  });

  it("ReadmeSampleCreateClient_Browser", async () => {
    const credential = new InteractiveBrowserCredential({
      tenantId: "<YOUR_TENANT_ID>",
      clientId: "<YOUR_CLIENT_ID>",
    });
    const subscriptionId = "00000000-0000-0000-0000-000000000000";
    const client = new WorkloadOrchestrationManagementClient(credential, subscriptionId);
  });

  it("SetLogLevel", async () => {
    setLogLevel("info");
  });
});



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/test/public/WorkloadOrchestration.spec.ts
================================================
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { env, Recorder, isPlaybackMode } from "@azure-tools/test-recorder";

import { createTestCredential } from "@azure-tools/test-credential";
import { assert, beforeEach, afterEach, it, describe } from "vitest";
import { createRecorder } from "./utils/recordedClient.js";
import { WorkloadOrchestrationManagementClient } from "../../src/workloadOrchestrationManagementClient.js";

export const testPollingOptions = {
  updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};

describe("WorkloadOrchestration test", () => {
  let recorder: Recorder;
  let subscriptionId: string;
  let client: WorkloadOrchestrationManagementClient;

  beforeEach(async (context) => {
    process.env.SystemRoot = process.env.SystemRoot || "C:\\Windows";
    recorder = await createRecorder(context);
    subscriptionId = env.SUBSCRIPTION_ID || "";
    // This is an example of how the environment variables are used
    const credential = createTestCredential();
    client = new WorkloadOrchestrationManagementClient(
      credential,
      subscriptionId,
      recorder.configureClientOptions({}),
    );
  });

  afterEach(async function () {
    await recorder.stop();
  });

  it("configTemplates list test", async function () {
    const resArray = new Array();
    for await (let item of client.configTemplates.listBySubscription()) {
      resArray.push(item);
    }
    assert.ok(resArray);
  });
});



================================================
FILE: sdk/workloadorchestration/arm-workloadorchestration/test/public/utils/recordedClient.ts
================================================
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { Recorder, RecorderStartOptions, VitestTestContext } from "@azure-tools/test-recorder";

const replaceableVariables: Record<string, string> = {
  SUBSCRIPTION_ID: "azure_subscription_id",
};

const recorderEnvSetup: RecorderStartOptions = {
  envSetupForPlayback: replaceableVariables,
};

/**
 * creates the recorder and reads the environment variables from the `.env` file.
 * Should be called first in the test suite to make sure environment variables are
 * read before they are being used.
 */
export async function createRecorder(context: VitestTestContext): Promise<Recorder> {
  const recorder = new Recorder(context);
  await recorder.start(recorderEnvSetup);
  return recorder;
}


