Directory structure:
└── workloadorchestration/
    ├── ci.mgmt.yml
    └── Azure.ResourceManager.WorkloadOrchestration/
        ├── README.md
        ├── assets.json
        ├── Azure.ResourceManager.WorkloadOrchestration.sln
        ├── CHANGELOG.md
        ├── Directory.Build.props
        ├── tsp-location.yaml
        ├── src/
        │   ├── Azure.ResourceManager.WorkloadOrchestration.csproj
        │   ├── Custom/
        │   │   └── Models/
        │   │       ├── EdgeContextPatchProperties.cs
        │   │       ├── EdgeSolutionTemplatePatchProperties.cs
        │   │       └── EdgeTargetPatchProperties.cs
        │   ├── Generated/
        │   │   ├── EdgeConfigTemplateCollection.cs
        │   │   ├── EdgeConfigTemplateData.cs
        │   │   ├── EdgeConfigTemplateData.Serialization.cs
        │   │   ├── EdgeConfigTemplateResource.cs
        │   │   ├── EdgeConfigTemplateResource.Serialization.cs
        │   │   ├── EdgeConfigTemplateVersionCollection.cs
        │   │   ├── EdgeConfigTemplateVersionData.cs
        │   │   ├── EdgeConfigTemplateVersionData.Serialization.cs
        │   │   ├── EdgeConfigTemplateVersionResource.cs
        │   │   ├── EdgeConfigTemplateVersionResource.Serialization.cs
        │   │   ├── EdgeContextCollection.cs
        │   │   ├── EdgeContextData.cs
        │   │   ├── EdgeContextData.Serialization.cs
        │   │   ├── EdgeContextResource.cs
        │   │   ├── EdgeContextResource.Serialization.cs
        │   │   ├── EdgeDeploymentInstanceCollection.cs
        │   │   ├── EdgeDeploymentInstanceData.cs
        │   │   ├── EdgeDeploymentInstanceData.Serialization.cs
        │   │   ├── EdgeDeploymentInstanceHistoryCollection.cs
        │   │   ├── EdgeDeploymentInstanceHistoryData.cs
        │   │   ├── EdgeDeploymentInstanceHistoryData.Serialization.cs
        │   │   ├── EdgeDeploymentInstanceHistoryResource.cs
        │   │   ├── EdgeDeploymentInstanceHistoryResource.Serialization.cs
        │   │   ├── EdgeDeploymentInstanceResource.cs
        │   │   ├── EdgeDeploymentInstanceResource.Serialization.cs
        │   │   ├── EdgeDiagnosticCollection.cs
        │   │   ├── EdgeDiagnosticData.cs
        │   │   ├── EdgeDiagnosticData.Serialization.cs
        │   │   ├── EdgeDiagnosticResource.cs
        │   │   ├── EdgeDiagnosticResource.Serialization.cs
        │   │   ├── EdgeDynamicSchemaCollection.cs
        │   │   ├── EdgeDynamicSchemaData.cs
        │   │   ├── EdgeDynamicSchemaData.Serialization.cs
        │   │   ├── EdgeDynamicSchemaResource.cs
        │   │   ├── EdgeDynamicSchemaResource.Serialization.cs
        │   │   ├── EdgeDynamicSchemaVersionCollection.cs
        │   │   ├── EdgeDynamicSchemaVersionData.cs
        │   │   ├── EdgeDynamicSchemaVersionData.Serialization.cs
        │   │   ├── EdgeDynamicSchemaVersionResource.cs
        │   │   ├── EdgeDynamicSchemaVersionResource.Serialization.cs
        │   │   ├── EdgeExecutionCollection.cs
        │   │   ├── EdgeExecutionData.cs
        │   │   ├── EdgeExecutionData.Serialization.cs
        │   │   ├── EdgeExecutionResource.cs
        │   │   ├── EdgeExecutionResource.Serialization.cs
        │   │   ├── EdgeJobCollection.cs
        │   │   ├── EdgeJobData.cs
        │   │   ├── EdgeJobData.Serialization.cs
        │   │   ├── EdgeJobResource.cs
        │   │   ├── EdgeJobResource.Serialization.cs
        │   │   ├── EdgeSchemaCollection.cs
        │   │   ├── EdgeSchemaData.cs
        │   │   ├── EdgeSchemaData.Serialization.cs
        │   │   ├── EdgeSchemaReferenceCollection.cs
        │   │   ├── EdgeSchemaReferenceData.cs
        │   │   ├── EdgeSchemaReferenceData.Serialization.cs
        │   │   ├── EdgeSchemaReferenceResource.cs
        │   │   ├── EdgeSchemaReferenceResource.Serialization.cs
        │   │   ├── EdgeSchemaResource.cs
        │   │   ├── EdgeSchemaResource.Serialization.cs
        │   │   ├── EdgeSchemaVersionCollection.cs
        │   │   ├── EdgeSchemaVersionData.cs
        │   │   ├── EdgeSchemaVersionData.Serialization.cs
        │   │   ├── EdgeSchemaVersionResource.cs
        │   │   ├── EdgeSchemaVersionResource.Serialization.cs
        │   │   ├── EdgeSiteReferenceCollection.cs
        │   │   ├── EdgeSiteReferenceData.cs
        │   │   ├── EdgeSiteReferenceData.Serialization.cs
        │   │   ├── EdgeSiteReferenceResource.cs
        │   │   ├── EdgeSiteReferenceResource.Serialization.cs
        │   │   ├── EdgeSolutionCollection.cs
        │   │   ├── EdgeSolutionData.cs
        │   │   ├── EdgeSolutionData.Serialization.cs
        │   │   ├── EdgeSolutionResource.cs
        │   │   ├── EdgeSolutionResource.Serialization.cs
        │   │   ├── EdgeSolutionTemplateCollection.cs
        │   │   ├── EdgeSolutionTemplateData.cs
        │   │   ├── EdgeSolutionTemplateData.Serialization.cs
        │   │   ├── EdgeSolutionTemplateResource.cs
        │   │   ├── EdgeSolutionTemplateResource.Serialization.cs
        │   │   ├── EdgeSolutionTemplateVersionCollection.cs
        │   │   ├── EdgeSolutionTemplateVersionData.cs
        │   │   ├── EdgeSolutionTemplateVersionData.Serialization.cs
        │   │   ├── EdgeSolutionTemplateVersionResource.cs
        │   │   ├── EdgeSolutionTemplateVersionResource.Serialization.cs
        │   │   ├── EdgeSolutionVersionCollection.cs
        │   │   ├── EdgeSolutionVersionData.cs
        │   │   ├── EdgeSolutionVersionData.Serialization.cs
        │   │   ├── EdgeSolutionVersionResource.cs
        │   │   ├── EdgeSolutionVersionResource.Serialization.cs
        │   │   ├── EdgeTargetCollection.cs
        │   │   ├── EdgeTargetData.cs
        │   │   ├── EdgeTargetData.Serialization.cs
        │   │   ├── EdgeTargetResource.Serialization.cs
        │   │   ├── EdgeWorkflowCollection.cs
        │   │   ├── EdgeWorkflowData.cs
        │   │   ├── EdgeWorkflowData.Serialization.cs
        │   │   ├── EdgeWorkflowResource.cs
        │   │   ├── EdgeWorkflowResource.Serialization.cs
        │   │   ├── EdgeWorkflowVersionCollection.cs
        │   │   ├── EdgeWorkflowVersionData.cs
        │   │   ├── EdgeWorkflowVersionData.Serialization.cs
        │   │   ├── EdgeWorkflowVersionResource.cs
        │   │   ├── EdgeWorkflowVersionResource.Serialization.cs
        │   │   ├── ProviderConstants.cs
        │   │   ├── Extensions/
        │   │   │   ├── MockableWorkloadOrchestrationArmClient.cs
        │   │   │   ├── MockableWorkloadOrchestrationResourceGroupResource.cs
        │   │   │   └── MockableWorkloadOrchestrationSubscriptionResource.cs
        │   │   ├── Internal/
        │   │   │   ├── Argument.cs
        │   │   │   ├── ChangeTrackingDictionary.cs
        │   │   │   ├── ChangeTrackingList.cs
        │   │   │   ├── ModelSerializationExtensions.cs
        │   │   │   ├── Optional.cs
        │   │   │   └── Utf8JsonRequestContent.cs
        │   │   ├── LongRunningOperation/
        │   │   │   ├── EdgeConfigTemplateOperationSource.cs
        │   │   │   ├── EdgeConfigTemplateVersionOperationSource.cs
        │   │   │   ├── EdgeContextOperationSource.cs
        │   │   │   ├── EdgeDeploymentInstanceOperationSource.cs
        │   │   │   ├── EdgeDiagnosticOperationSource.cs
        │   │   │   ├── EdgeDynamicSchemaOperationSource.cs
        │   │   │   ├── EdgeDynamicSchemaVersionOperationSource.cs
        │   │   │   ├── EdgeExecutionOperationSource.cs
        │   │   │   ├── EdgeSchemaOperationSource.cs
        │   │   │   ├── EdgeSchemaVersionOperationSource.cs
        │   │   │   ├── EdgeSiteReferenceOperationSource.cs
        │   │   │   ├── EdgeSolutionOperationSource.cs
        │   │   │   ├── EdgeSolutionTemplateOperationSource.cs
        │   │   │   ├── EdgeSolutionTemplateVersionOperationSource.cs
        │   │   │   ├── EdgeSolutionVersionOperationSource.cs
        │   │   │   ├── EdgeTargetOperationSource.cs
        │   │   │   ├── EdgeWorkflowOperationSource.cs
        │   │   │   ├── EdgeWorkflowVersionOperationSource.cs
        │   │   │   ├── ResolvedConfigurationOperationSource.cs
        │   │   │   ├── WorkloadOrchestrationArmOperation.cs
        │   │   │   └── WorkloadOrchestrationArmOperationOfT.cs
        │   │   ├── Models/
        │   │   │   ├── AvailableSolutionTemplateVersion.cs
        │   │   │   ├── AvailableSolutionTemplateVersion.Serialization.cs
        │   │   │   ├── AzureResourceManagerWorkloadOrchestrationContext.cs
        │   │   │   ├── BulkDeploySolutionContent.cs
        │   │   │   ├── BulkDeploySolutionContent.Serialization.cs
        │   │   │   ├── BulkDeployTargetDetails.cs
        │   │   │   ├── BulkDeployTargetDetails.Serialization.cs
        │   │   │   ├── BulkPublishSolutionContent.cs
        │   │   │   ├── BulkPublishSolutionContent.Serialization.cs
        │   │   │   ├── BulkPublishTargetDetails.cs
        │   │   │   ├── BulkPublishTargetDetails.Serialization.cs
        │   │   │   ├── ConfigTemplateListResult.cs
        │   │   │   ├── ConfigTemplateListResult.Serialization.cs
        │   │   │   ├── ConfigTemplateUpdateProperties.cs
        │   │   │   ├── ConfigTemplateUpdateProperties.Serialization.cs
        │   │   │   ├── ConfigTemplateVersionListResult.cs
        │   │   │   ├── ConfigTemplateVersionListResult.Serialization.cs
        │   │   │   ├── ConfigTemplateVersionWithUpdateType.cs
        │   │   │   ├── ConfigTemplateVersionWithUpdateType.Serialization.cs
        │   │   │   ├── ContextCapability.cs
        │   │   │   ├── ContextCapability.Serialization.cs
        │   │   │   ├── ContextHierarchy.cs
        │   │   │   ├── ContextHierarchy.Serialization.cs
        │   │   │   ├── ContextListResult.cs
        │   │   │   ├── ContextListResult.Serialization.cs
        │   │   │   ├── DeployJobContent.cs
        │   │   │   ├── DeployJobContent.Serialization.cs
        │   │   │   ├── DeployJobStepStatistics.cs
        │   │   │   ├── DeployJobStepStatistics.Serialization.cs
        │   │   │   ├── DiagnosticListResult.cs
        │   │   │   ├── DiagnosticListResult.Serialization.cs
        │   │   │   ├── DynamicSchemaListResult.cs
        │   │   │   ├── DynamicSchemaListResult.Serialization.cs
        │   │   │   ├── DynamicSchemaVersionListResult.cs
        │   │   │   ├── DynamicSchemaVersionListResult.Serialization.cs
        │   │   │   ├── EdgeConfigTemplatePatch.cs
        │   │   │   ├── EdgeConfigTemplatePatch.Serialization.cs
        │   │   │   ├── EdgeConfigTemplateProperties.cs
        │   │   │   ├── EdgeConfigTemplateProperties.Serialization.cs
        │   │   │   ├── EdgeConfigTemplateVersionProperties.cs
        │   │   │   ├── EdgeConfigTemplateVersionProperties.Serialization.cs
        │   │   │   ├── EdgeContextPatch.cs
        │   │   │   ├── EdgeContextPatch.Serialization.cs
        │   │   │   ├── EdgeContextPatchProperties.cs
        │   │   │   ├── EdgeContextPatchProperties.Serialization.cs
        │   │   │   ├── EdgeContextProperties.cs
        │   │   │   ├── EdgeContextProperties.Serialization.cs
        │   │   │   ├── EdgeDeploymentInstanceHistoryProperties.cs
        │   │   │   ├── EdgeDeploymentInstanceHistoryProperties.Serialization.cs
        │   │   │   ├── EdgeDeploymentInstanceProperties.cs
        │   │   │   ├── EdgeDeploymentInstanceProperties.Serialization.cs
        │   │   │   ├── EdgeDeploymentStatus.cs
        │   │   │   ├── EdgeDeploymentStatus.Serialization.cs
        │   │   │   ├── EdgeDiagnosticPatch.cs
        │   │   │   ├── EdgeDiagnosticPatch.Serialization.cs
        │   │   │   ├── EdgeDiagnosticPatchProperties.cs
        │   │   │   ├── EdgeDiagnosticPatchProperties.Serialization.cs
        │   │   │   ├── EdgeDiagnosticProperties.cs
        │   │   │   ├── EdgeDiagnosticProperties.Serialization.cs
        │   │   │   ├── EdgeDynamicSchemaProperties.cs
        │   │   │   ├── EdgeDynamicSchemaProperties.Serialization.cs
        │   │   │   ├── EdgeExecutionProperties.cs
        │   │   │   ├── EdgeExecutionProperties.Serialization.cs
        │   │   │   ├── EdgeExecutionStageStatus.cs
        │   │   │   ├── EdgeExecutionStageStatus.Serialization.cs
        │   │   │   ├── EdgeExecutionStatus.cs
        │   │   │   ├── EdgeExecutionStatus.Serialization.cs
        │   │   │   ├── EdgeJobContent.cs
        │   │   │   ├── EdgeJobContent.Serialization.cs
        │   │   │   ├── EdgeJobProperties.cs
        │   │   │   ├── EdgeJobProperties.Serialization.cs
        │   │   │   ├── EdgeJobStatus.cs
        │   │   │   ├── EdgeJobStep.cs
        │   │   │   ├── EdgeJobStep.Serialization.cs
        │   │   │   ├── EdgeJobStepStatistics.cs
        │   │   │   ├── EdgeJobStepStatistics.Serialization.cs
        │   │   │   ├── EdgeJobType.cs
        │   │   │   ├── EdgeResourceState.cs
        │   │   │   ├── EdgeSchemaConfigurationModelType.cs
        │   │   │   ├── EdgeSchemaConfigurationType.cs
        │   │   │   ├── EdgeSchemaPatch.cs
        │   │   │   ├── EdgeSchemaPatch.Serialization.cs
        │   │   │   ├── EdgeSchemaPatchProperties.cs
        │   │   │   ├── EdgeSchemaPatchProperties.Serialization.cs
        │   │   │   ├── EdgeSchemaProperties.cs
        │   │   │   ├── EdgeSchemaProperties.Serialization.cs
        │   │   │   ├── EdgeSchemaReferenceProperties.cs
        │   │   │   ├── EdgeSchemaReferenceProperties.Serialization.cs
        │   │   │   ├── EdgeSchemaVersionProperties.cs
        │   │   │   ├── EdgeSchemaVersionProperties.Serialization.cs
        │   │   │   ├── EdgeSchemaVersionWithUpdateType.cs
        │   │   │   ├── EdgeSchemaVersionWithUpdateType.Serialization.cs
        │   │   │   ├── EdgeSiteReferenceProperties.cs
        │   │   │   ├── EdgeSiteReferenceProperties.Serialization.cs
        │   │   │   ├── EdgeSolutionDependency.cs
        │   │   │   ├── EdgeSolutionDependency.Serialization.cs
        │   │   │   ├── EdgeSolutionDependencyContent.cs
        │   │   │   ├── EdgeSolutionDependencyContent.Serialization.cs
        │   │   │   ├── EdgeSolutionPatch.cs
        │   │   │   ├── EdgeSolutionPatch.Serialization.cs
        │   │   │   ├── EdgeSolutionPatchProperties.cs
        │   │   │   ├── EdgeSolutionPatchProperties.Serialization.cs
        │   │   │   ├── EdgeSolutionProperties.cs
        │   │   │   ├── EdgeSolutionProperties.Serialization.cs
        │   │   │   ├── EdgeSolutionTemplateContent.cs
        │   │   │   ├── EdgeSolutionTemplateContent.Serialization.cs
        │   │   │   ├── EdgeSolutionTemplatePatch.cs
        │   │   │   ├── EdgeSolutionTemplatePatch.Serialization.cs
        │   │   │   ├── EdgeSolutionTemplatePatchProperties.cs
        │   │   │   ├── EdgeSolutionTemplatePatchProperties.Serialization.cs
        │   │   │   ├── EdgeSolutionTemplateProperties.cs
        │   │   │   ├── EdgeSolutionTemplateProperties.Serialization.cs
        │   │   │   ├── EdgeSolutionTemplateVersionProperties.cs
        │   │   │   ├── EdgeSolutionTemplateVersionProperties.Serialization.cs
        │   │   │   ├── EdgeSolutionTemplateVersionWithUpdateType.cs
        │   │   │   ├── EdgeSolutionTemplateVersionWithUpdateType.Serialization.cs
        │   │   │   ├── EdgeSolutionVersionContent.cs
        │   │   │   ├── EdgeSolutionVersionContent.Serialization.cs
        │   │   │   ├── EdgeSolutionVersionProperties.cs
        │   │   │   ├── EdgeSolutionVersionProperties.Serialization.cs
        │   │   │   ├── EdgeTargetPatch.cs
        │   │   │   ├── EdgeTargetPatch.Serialization.cs
        │   │   │   ├── EdgeTargetPatchProperties.cs
        │   │   │   ├── EdgeTargetPatchProperties.Serialization.cs
        │   │   │   ├── EdgeTargetProperties.cs
        │   │   │   ├── EdgeTargetProperties.Serialization.cs
        │   │   │   ├── EdgeTargetSnapshot.cs
        │   │   │   ├── EdgeTargetSnapshot.Serialization.cs
        │   │   │   ├── EdgeTargetStatus.cs
        │   │   │   ├── EdgeTargetStatus.Serialization.cs
        │   │   │   ├── EdgeUpdateType.cs
        │   │   │   ├── EdgeVersionContent.cs
        │   │   │   ├── EdgeVersionContent.Serialization.cs
        │   │   │   ├── EdgeWorkflowProperties.cs
        │   │   │   ├── EdgeWorkflowProperties.Serialization.cs
        │   │   │   ├── EdgeWorkflowStageSpec.cs
        │   │   │   ├── EdgeWorkflowStageSpec.Serialization.cs
        │   │   │   ├── EdgeWorkflowTaskConfig.cs
        │   │   │   ├── EdgeWorkflowTaskConfig.Serialization.cs
        │   │   │   ├── EdgeWorkflowTaskSpec.cs
        │   │   │   ├── EdgeWorkflowTaskSpec.Serialization.cs
        │   │   │   ├── EdgeWorkflowVersionProperties.cs
        │   │   │   ├── EdgeWorkflowVersionProperties.Serialization.cs
        │   │   │   ├── ExecutionListResult.cs
        │   │   │   ├── ExecutionListResult.Serialization.cs
        │   │   │   ├── InstallSolutionContent.cs
        │   │   │   ├── InstallSolutionContent.Serialization.cs
        │   │   │   ├── InstanceActiveState.cs
        │   │   │   ├── InstanceHistoryListResult.cs
        │   │   │   ├── InstanceHistoryListResult.Serialization.cs
        │   │   │   ├── InstanceListResult.cs
        │   │   │   ├── InstanceListResult.Serialization.cs
        │   │   │   ├── InstanceReconciliationPolicy.cs
        │   │   │   ├── InstanceReconciliationPolicy.Serialization.cs
        │   │   │   ├── InstanceReconciliationState.cs
        │   │   │   ├── JobListResult.cs
        │   │   │   ├── JobListResult.Serialization.cs
        │   │   │   ├── RemoveRevisionContent.cs
        │   │   │   ├── RemoveRevisionContent.Serialization.cs
        │   │   │   ├── RemoveVersionResult.cs
        │   │   │   ├── RemoveVersionResult.Serialization.cs
        │   │   │   ├── ResolvedConfiguration.cs
        │   │   │   ├── ResolvedConfiguration.Serialization.cs
        │   │   │   ├── SchemaListResult.cs
        │   │   │   ├── SchemaListResult.Serialization.cs
        │   │   │   ├── SchemaReferenceListResult.cs
        │   │   │   ├── SchemaReferenceListResult.Serialization.cs
        │   │   │   ├── SchemaVersionListResult.cs
        │   │   │   ├── SchemaVersionListResult.Serialization.cs
        │   │   │   ├── SiteReferenceListResult.cs
        │   │   │   ├── SiteReferenceListResult.Serialization.cs
        │   │   │   ├── SolutionInstanceState.cs
        │   │   │   ├── SolutionInstanceValidationStatus.cs
        │   │   │   ├── SolutionListResult.cs
        │   │   │   ├── SolutionListResult.Serialization.cs
        │   │   │   ├── SolutionTemplateListResult.cs
        │   │   │   ├── SolutionTemplateListResult.Serialization.cs
        │   │   │   ├── SolutionTemplateVersionListResult.cs
        │   │   │   ├── SolutionTemplateVersionListResult.Serialization.cs
        │   │   │   ├── SolutionVersionListResult.cs
        │   │   │   ├── SolutionVersionListResult.Serialization.cs
        │   │   │   ├── SolutionVersionOrchestratorType.cs
        │   │   │   ├── SolutionVersionSnapshot.cs
        │   │   │   ├── SolutionVersionSnapshot.Serialization.cs
        │   │   │   ├── TargetComponentStatus.cs
        │   │   │   ├── TargetComponentStatus.Serialization.cs
        │   │   │   ├── TargetListResult.cs
        │   │   │   ├── TargetListResult.Serialization.cs
        │   │   │   ├── TaskErrorAction.cs
        │   │   │   ├── TaskErrorAction.Serialization.cs
        │   │   │   ├── TaskErrorActionModeType.cs
        │   │   │   ├── UninstallSolutionContent.cs
        │   │   │   ├── UninstallSolutionContent.Serialization.cs
        │   │   │   ├── UnknownEdgeJobContent.cs
        │   │   │   ├── UnknownEdgeJobContent.Serialization.cs
        │   │   │   ├── UnknownEdgeJobStepStatistics.cs
        │   │   │   ├── UnknownEdgeJobStepStatistics.Serialization.cs
        │   │   │   ├── UpdateExternalValidationStatusContent.cs
        │   │   │   ├── UpdateExternalValidationStatusContent.Serialization.cs
        │   │   │   ├── WorkflowListResult.cs
        │   │   │   ├── WorkflowListResult.Serialization.cs
        │   │   │   ├── WorkflowVersionListResult.cs
        │   │   │   ├── WorkflowVersionListResult.Serialization.cs
        │   │   │   └── WorkloadOrchestrationProvisioningState.cs
        │   │   └── RestOperations/
        │   │       ├── ConfigTemplateVersionsRestOperations.cs
        │   │       ├── ContextsRestOperations.cs
        │   │       ├── DiagnosticsRestOperations.cs
        │   │       ├── DynamicSchemasRestOperations.cs
        │   │       ├── DynamicSchemaVersionsRestOperations.cs
        │   │       ├── ExecutionsRestOperations.cs
        │   │       ├── InstanceHistoriesRestOperations.cs
        │   │       ├── InstancesRestOperations.cs
        │   │       ├── JobsRestOperations.cs
        │   │       ├── SchemaReferencesRestOperations.cs
        │   │       ├── SchemaVersionsRestOperations.cs
        │   │       ├── SiteReferencesRestOperations.cs
        │   │       ├── SolutionsRestOperations.cs
        │   │       ├── SolutionTemplateVersionsRestOperations.cs
        │   │       ├── SolutionVersionsRestOperations.cs
        │   │       ├── WorkflowsRestOperations.cs
        │   │       └── WorkflowVersionsRestOperations.cs
        │   └── Properties/
        │       └── AssemblyInfo.cs
        └── tests/
            ├── Azure.ResourceManager.WorkloadOrchestration.Tests.csproj
            ├── InformaticaDataManagementManagementTestBase.cs
            ├── InformaticaDataManagementManagementTestEnvironment.cs
            ├── WorkloadOrchestrationTestBase.cs
            ├── WorkloadOrchestrationTestEnvironment.cs
            ├── Generated/
            │   └── Samples/
            │       ├── Sample_EdgeConfigTemplateCollection.cs
            │       ├── Sample_EdgeConfigTemplateResource.cs
            │       ├── Sample_EdgeConfigTemplateVersionCollection.cs
            │       ├── Sample_EdgeConfigTemplateVersionResource.cs
            │       ├── Sample_EdgeContextCollection.cs
            │       ├── Sample_EdgeContextResource.cs
            │       ├── Sample_EdgeDeploymentInstanceCollection.cs
            │       ├── Sample_EdgeDeploymentInstanceHistoryCollection.cs
            │       ├── Sample_EdgeDeploymentInstanceHistoryResource.cs
            │       ├── Sample_EdgeDeploymentInstanceResource.cs
            │       ├── Sample_EdgeDiagnosticCollection.cs
            │       ├── Sample_EdgeDiagnosticResource.cs
            │       ├── Sample_EdgeDynamicSchemaCollection.cs
            │       ├── Sample_EdgeDynamicSchemaResource.cs
            │       ├── Sample_EdgeDynamicSchemaVersionCollection.cs
            │       ├── Sample_EdgeDynamicSchemaVersionResource.cs
            │       ├── Sample_EdgeExecutionCollection.cs
            │       ├── Sample_EdgeExecutionResource.cs
            │       ├── Sample_EdgeJobCollection.cs
            │       ├── Sample_EdgeJobResource.cs
            │       ├── Sample_EdgeSchemaCollection.cs
            │       ├── Sample_EdgeSchemaReferenceCollection.cs
            │       ├── Sample_EdgeSchemaReferenceResource.cs
            │       ├── Sample_EdgeSchemaResource.cs
            │       ├── Sample_EdgeSchemaVersionCollection.cs
            │       ├── Sample_EdgeSchemaVersionResource.cs
            │       ├── Sample_EdgeSiteReferenceCollection.cs
            │       ├── Sample_EdgeSiteReferenceResource.cs
            │       ├── Sample_EdgeSolutionCollection.cs
            │       ├── Sample_EdgeSolutionResource.cs
            │       ├── Sample_EdgeSolutionTemplateCollection.cs
            │       ├── Sample_EdgeSolutionTemplateResource.cs
            │       ├── Sample_EdgeSolutionTemplateVersionCollection.cs
            │       ├── Sample_EdgeSolutionTemplateVersionResource.cs
            │       ├── Sample_EdgeSolutionVersionCollection.cs
            │       ├── Sample_EdgeSolutionVersionResource.cs
            │       ├── Sample_EdgeTargetCollection.cs
            │       ├── Sample_EdgeTargetResource.cs
            │       ├── Sample_EdgeWorkflowCollection.cs
            │       ├── Sample_EdgeWorkflowResource.cs
            │       ├── Sample_EdgeWorkflowVersionCollection.cs
            │       ├── Sample_EdgeWorkflowVersionResource.cs
            │       └── Sample_SubscriptionResourceExtensions.cs
            └── Scenario/
                └── WorkloadOrchestrationScenarioTests.cs

================================================
FILE: sdk/workloadorchestration/ci.mgmt.yml
================================================
# NOTE: Please refer to https://aka.ms/azsdk/engsys/ci-yaml before editing this file.

trigger: none

pr:
  branches:
    include:
    - main
    - feature/*
    - hotfix/*
    - release/*
  paths:
    include:
    - sdk/workloadorchestration/ci.mgmt.yml
    - sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/

extends:
  template: /eng/pipelines/templates/stages/archetype-sdk-client.yml
  parameters:
    ServiceDirectory: workloadorchestration
    LimitForPullRequest: true
    Artifacts:
    - name: Azure.ResourceManager.WorkloadOrchestration
      safeName: AzureResourceManagerWorkloadOrchestration



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/README.md
================================================
# Microsoft Azure Workload Orchestration management client library for .NET

Workload orchestration for Azure Arc is a comprehensive, cloud-native, cross-platform orchestrator that simplifies the configuration management, deployment, and update of Kubernetes application lifecycle management across edge environments.

This library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:

    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.
    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.
    - HTTP pipeline with custom policies.
    - Better error-handling.
    - Support uniform telemetry across all languages.

## Getting started 

### Install the package

Install the Microsoft Azure InformaticaDataManagement management library for .NET with [NuGet](https://www.nuget.org/):

```dotnetcli
dotnet add package Azure.ResourceManager.WorkloadOrchestration
```

### Prerequisites

* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).

### Authenticate the Client

To create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).

## Key concepts

Key concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html)

## Documentation

Documentation is available to help you learn how to use this package:

- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).
- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).
- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).

## Examples

Code samples for using the management library for .NET can be found in the following locations
- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)

## Troubleshooting

-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).
-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.

## Next steps

For more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).

## Contributing

For details on contributing to this repository, see the [contributing
guide][cg].

This project welcomes contributions and suggestions. Most contributions
require you to agree to a Contributor License Agreement (CLA) declaring
that you have the right to, and actually do, grant us the rights to use
your contribution. For details, visit <https://cla.microsoft.com>.

When you submit a pull request, a CLA-bot will automatically determine
whether you need to provide a CLA and decorate the PR appropriately
(for example, label, comment). Follow the instructions provided by the
bot. You'll only need to do this action once across all repositories
using our CLA.

This project has adopted the [Microsoft Open Source Code of Conduct][coc]. For
more information, see the [Code of Conduct FAQ][coc_faq] or contact
<opencode@microsoft.com> with any other questions or comments.

<!-- LINKS -->
[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md
[coc]: https://opensource.microsoft.com/codeofconduct/
[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/


================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/assets.json
================================================
{
  "AssetsRepo": "Azure/azure-sdk-assets",
  "AssetsRepoPrefixPath": "net",
  "TagPrefix": "net/storageactions/Azure.ResourceManager.WorkloadOrchestration",
  "Tag": "net/storageactions/Azure.ResourceManager.WorkloadOrchestration_4597f97952"
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/Azure.ResourceManager.WorkloadOrchestration.sln
================================================
﻿
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 16
VisualStudioVersion = 16.0.30309.148
MinimumVisualStudioVersion = 10.0.40219.1
Project("{37EC73CA-DB1F-4107-9A04-A1FF61478D2F}") = "Azure.ResourceManager.WorkloadOrchestration", "src\Azure.ResourceManager.WorkloadOrchestration.csproj", "{35561B55-93A7-4814-A477-A9C391B20EA8}"
EndProject
Project("{37EC73CA-DB1F-4107-9A04-A1FF61478D2F}") = "Azure.ResourceManager.WorkloadOrchestration.Tests", "tests\Azure.ResourceManager.WorkloadOrchestration.Tests.csproj", "{11A3487A-228C-4C10-8942-4E70684B9775}"
EndProject
Global
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {AB9D1C44-A5AD-4444-8A2C-41B42A0515CB}
	EndGlobalSection
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Debug|x64 = Debug|x64
		Debug|x86 = Debug|x86
		Release|Any CPU = Release|Any CPU
		Release|x64 = Release|x64
		Release|x86 = Release|x86
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{35561B55-93A7-4814-A477-A9C391B20EA8}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{35561B55-93A7-4814-A477-A9C391B20EA8}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{35561B55-93A7-4814-A477-A9C391B20EA8}.Debug|x64.ActiveCfg = Debug|Any CPU
		{35561B55-93A7-4814-A477-A9C391B20EA8}.Debug|x64.Build.0 = Debug|Any CPU
		{35561B55-93A7-4814-A477-A9C391B20EA8}.Debug|x86.ActiveCfg = Debug|Any CPU
		{35561B55-93A7-4814-A477-A9C391B20EA8}.Debug|x86.Build.0 = Debug|Any CPU
		{35561B55-93A7-4814-A477-A9C391B20EA8}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{35561B55-93A7-4814-A477-A9C391B20EA8}.Release|Any CPU.Build.0 = Release|Any CPU
		{35561B55-93A7-4814-A477-A9C391B20EA8}.Release|x64.ActiveCfg = Release|Any CPU
		{35561B55-93A7-4814-A477-A9C391B20EA8}.Release|x64.Build.0 = Release|Any CPU
		{35561B55-93A7-4814-A477-A9C391B20EA8}.Release|x86.ActiveCfg = Release|Any CPU
		{35561B55-93A7-4814-A477-A9C391B20EA8}.Release|x86.Build.0 = Release|Any CPU
		{11A3487A-228C-4C10-8942-4E70684B9775}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{11A3487A-228C-4C10-8942-4E70684B9775}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{11A3487A-228C-4C10-8942-4E70684B9775}.Debug|x64.ActiveCfg = Debug|Any CPU
		{11A3487A-228C-4C10-8942-4E70684B9775}.Debug|x64.Build.0 = Debug|Any CPU
		{11A3487A-228C-4C10-8942-4E70684B9775}.Debug|x86.ActiveCfg = Debug|Any CPU
		{11A3487A-228C-4C10-8942-4E70684B9775}.Debug|x86.Build.0 = Debug|Any CPU
		{11A3487A-228C-4C10-8942-4E70684B9775}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{11A3487A-228C-4C10-8942-4E70684B9775}.Release|Any CPU.Build.0 = Release|Any CPU
		{11A3487A-228C-4C10-8942-4E70684B9775}.Release|x64.ActiveCfg = Release|Any CPU
		{11A3487A-228C-4C10-8942-4E70684B9775}.Release|x64.Build.0 = Release|Any CPU
		{11A3487A-228C-4C10-8942-4E70684B9775}.Release|x86.ActiveCfg = Release|Any CPU
		{11A3487A-228C-4C10-8942-4E70684B9775}.Release|x86.Build.0 = Release|Any CPU
		{B9FE62D3-7CB9-4FA9-BF23-E45BC4B6A711}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{B9FE62D3-7CB9-4FA9-BF23-E45BC4B6A711}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{B9FE62D3-7CB9-4FA9-BF23-E45BC4B6A711}.Debug|x64.ActiveCfg = Debug|Any CPU
		{B9FE62D3-7CB9-4FA9-BF23-E45BC4B6A711}.Debug|x64.Build.0 = Debug|Any CPU
		{B9FE62D3-7CB9-4FA9-BF23-E45BC4B6A711}.Debug|x86.ActiveCfg = Debug|Any CPU
		{B9FE62D3-7CB9-4FA9-BF23-E45BC4B6A711}.Debug|x86.Build.0 = Debug|Any CPU
		{B9FE62D3-7CB9-4FA9-BF23-E45BC4B6A711}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{B9FE62D3-7CB9-4FA9-BF23-E45BC4B6A711}.Release|Any CPU.Build.0 = Release|Any CPU
		{B9FE62D3-7CB9-4FA9-BF23-E45BC4B6A711}.Release|x64.ActiveCfg = Release|Any CPU
		{B9FE62D3-7CB9-4FA9-BF23-E45BC4B6A711}.Release|x64.Build.0 = Release|Any CPU
		{B9FE62D3-7CB9-4FA9-BF23-E45BC4B6A711}.Release|x86.ActiveCfg = Release|Any CPU
		{B9FE62D3-7CB9-4FA9-BF23-E45BC4B6A711}.Release|x86.Build.0 = Release|Any CPU
	EndGlobalSection
EndGlobal



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/CHANGELOG.md
================================================
# Release History

## 1.1.0-beta.1 (Unreleased)

### Features Added

### Breaking Changes

### Bugs Fixed

### Other Changes

## 1.0.0 (2025-09-01)



### Features Added

This package follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:

    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.
    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.
    - HTTP pipeline with custom policies.
    - Better error-handling.
    - Support uniform telemetry across all languages.


> NOTE: For more information about unified authentication, please refer to [Microsoft Azure Identity documentation for .NET](https://docs.microsoft.com//dotnet/api/overview/azure/identity-readme?view=azure-dotnet).



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/Directory.Build.props
================================================
﻿<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!--
    Add any shared properties you want for the projects under this package directory that need to be set before the auto imported Directory.Build.props
  -->
  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory).., Directory.Build.props))\Directory.Build.props" />
</Project>



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/tsp-location.yaml
================================================
directory: specification/edge/Microsoft.Edge.ConfigurationManager.Management
commit: 229dfd2b11c491c4c48a738d8f16a2629957225a
repo: Azure/azure-rest-api-specs


================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Azure.ResourceManager.WorkloadOrchestration.csproj
================================================
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <Version>1.1.0-beta.1</Version>
    <!--The ApiCompatVersion is managed automatically and should not generally be modified manually.-->
    <ApiCompatVersion>1.0.0</ApiCompatVersion>
    <PackageId>Azure.ResourceManager.WorkloadOrchestration</PackageId>
    <Description>Azure Resource Manager client SDK for Azure resource provider InformaticaDataManagement.</Description>
    <PackageTags>azure;management;arm;resource manager;informaticadatamanagement</PackageTags>
  </PropertyGroup>
</Project>



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Custom/Models/EdgeContextPatchProperties.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

#nullable disable

using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> The updatable properties of the Context. </summary>
    [CodeGenModel("ContextUpdateProperties")]
    public partial class EdgeContextPatchProperties
    {
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Custom/Models/EdgeSolutionTemplatePatchProperties.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

#nullable disable

using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> The updatable properties of the SolutionTemplate. </summary>
    [CodeGenModel("SolutionTemplateUpdateProperties")]
    public partial class EdgeSolutionTemplatePatchProperties
    {
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Custom/Models/EdgeTargetPatchProperties.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

#nullable disable

using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> The updatable properties of the Target. </summary>
    [CodeGenModel("TargetUpdateProperties")]
    public partial class EdgeTargetPatchProperties
    {
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeConfigTemplateCollection.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A class representing a collection of <see cref="EdgeConfigTemplateResource"/> and their operations.
    /// Each <see cref="EdgeConfigTemplateResource"/> in the collection will belong to the same instance of <see cref="ResourceGroupResource"/>.
    /// To get an <see cref="EdgeConfigTemplateCollection"/> instance call the GetEdgeConfigTemplates method from an instance of <see cref="ResourceGroupResource"/>.
    /// </summary>
    public partial class EdgeConfigTemplateCollection : ArmCollection, IEnumerable<EdgeConfigTemplateResource>, IAsyncEnumerable<EdgeConfigTemplateResource>
    {
        private readonly ClientDiagnostics _edgeConfigTemplateConfigTemplatesClientDiagnostics;
        private readonly ConfigTemplatesRestOperations _edgeConfigTemplateConfigTemplatesRestClient;

        /// <summary> Initializes a new instance of the <see cref="EdgeConfigTemplateCollection"/> class for mocking. </summary>
        protected EdgeConfigTemplateCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="EdgeConfigTemplateCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal EdgeConfigTemplateCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _edgeConfigTemplateConfigTemplatesClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.WorkloadOrchestration", EdgeConfigTemplateResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(EdgeConfigTemplateResource.ResourceType, out string edgeConfigTemplateConfigTemplatesApiVersion);
            _edgeConfigTemplateConfigTemplatesRestClient = new ConfigTemplatesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, edgeConfigTemplateConfigTemplatesApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceGroupResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceGroupResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Create or update a Config Template Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConfigTemplate_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeConfigTemplateResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="configTemplateName"> The name of the ConfigTemplate. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="configTemplateName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="configTemplateName"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<EdgeConfigTemplateResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string configTemplateName, EdgeConfigTemplateData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(configTemplateName, nameof(configTemplateName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _edgeConfigTemplateConfigTemplatesClientDiagnostics.CreateScope("EdgeConfigTemplateCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _edgeConfigTemplateConfigTemplatesRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, configTemplateName, data, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadOrchestrationArmOperation<EdgeConfigTemplateResource>(new EdgeConfigTemplateOperationSource(Client), _edgeConfigTemplateConfigTemplatesClientDiagnostics, Pipeline, _edgeConfigTemplateConfigTemplatesRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, configTemplateName, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create or update a Config Template Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConfigTemplate_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeConfigTemplateResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="configTemplateName"> The name of the ConfigTemplate. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="configTemplateName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="configTemplateName"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<EdgeConfigTemplateResource> CreateOrUpdate(WaitUntil waitUntil, string configTemplateName, EdgeConfigTemplateData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(configTemplateName, nameof(configTemplateName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _edgeConfigTemplateConfigTemplatesClientDiagnostics.CreateScope("EdgeConfigTemplateCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _edgeConfigTemplateConfigTemplatesRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, configTemplateName, data, cancellationToken);
                var operation = new WorkloadOrchestrationArmOperation<EdgeConfigTemplateResource>(new EdgeConfigTemplateOperationSource(Client), _edgeConfigTemplateConfigTemplatesClientDiagnostics, Pipeline, _edgeConfigTemplateConfigTemplatesRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, configTemplateName, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a Config Template Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConfigTemplate_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeConfigTemplateResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="configTemplateName"> The name of the ConfigTemplate. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="configTemplateName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="configTemplateName"/> is null. </exception>
        public virtual async Task<Response<EdgeConfigTemplateResource>> GetAsync(string configTemplateName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(configTemplateName, nameof(configTemplateName));

            using var scope = _edgeConfigTemplateConfigTemplatesClientDiagnostics.CreateScope("EdgeConfigTemplateCollection.Get");
            scope.Start();
            try
            {
                var response = await _edgeConfigTemplateConfigTemplatesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, configTemplateName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeConfigTemplateResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a Config Template Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConfigTemplate_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeConfigTemplateResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="configTemplateName"> The name of the ConfigTemplate. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="configTemplateName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="configTemplateName"/> is null. </exception>
        public virtual Response<EdgeConfigTemplateResource> Get(string configTemplateName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(configTemplateName, nameof(configTemplateName));

            using var scope = _edgeConfigTemplateConfigTemplatesClientDiagnostics.CreateScope("EdgeConfigTemplateCollection.Get");
            scope.Start();
            try
            {
                var response = _edgeConfigTemplateConfigTemplatesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, configTemplateName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeConfigTemplateResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List by specified resource group
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConfigTemplate_ListByResourceGroup</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeConfigTemplateResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="EdgeConfigTemplateResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<EdgeConfigTemplateResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _edgeConfigTemplateConfigTemplatesRestClient.CreateListByResourceGroupRequest(Id.SubscriptionId, Id.ResourceGroupName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _edgeConfigTemplateConfigTemplatesRestClient.CreateListByResourceGroupNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new EdgeConfigTemplateResource(Client, EdgeConfigTemplateData.DeserializeEdgeConfigTemplateData(e)), _edgeConfigTemplateConfigTemplatesClientDiagnostics, Pipeline, "EdgeConfigTemplateCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List by specified resource group
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConfigTemplate_ListByResourceGroup</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeConfigTemplateResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="EdgeConfigTemplateResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<EdgeConfigTemplateResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _edgeConfigTemplateConfigTemplatesRestClient.CreateListByResourceGroupRequest(Id.SubscriptionId, Id.ResourceGroupName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _edgeConfigTemplateConfigTemplatesRestClient.CreateListByResourceGroupNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new EdgeConfigTemplateResource(Client, EdgeConfigTemplateData.DeserializeEdgeConfigTemplateData(e)), _edgeConfigTemplateConfigTemplatesClientDiagnostics, Pipeline, "EdgeConfigTemplateCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConfigTemplate_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeConfigTemplateResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="configTemplateName"> The name of the ConfigTemplate. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="configTemplateName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="configTemplateName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string configTemplateName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(configTemplateName, nameof(configTemplateName));

            using var scope = _edgeConfigTemplateConfigTemplatesClientDiagnostics.CreateScope("EdgeConfigTemplateCollection.Exists");
            scope.Start();
            try
            {
                var response = await _edgeConfigTemplateConfigTemplatesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, configTemplateName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConfigTemplate_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeConfigTemplateResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="configTemplateName"> The name of the ConfigTemplate. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="configTemplateName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="configTemplateName"/> is null. </exception>
        public virtual Response<bool> Exists(string configTemplateName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(configTemplateName, nameof(configTemplateName));

            using var scope = _edgeConfigTemplateConfigTemplatesClientDiagnostics.CreateScope("EdgeConfigTemplateCollection.Exists");
            scope.Start();
            try
            {
                var response = _edgeConfigTemplateConfigTemplatesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, configTemplateName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConfigTemplate_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeConfigTemplateResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="configTemplateName"> The name of the ConfigTemplate. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="configTemplateName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="configTemplateName"/> is null. </exception>
        public virtual async Task<NullableResponse<EdgeConfigTemplateResource>> GetIfExistsAsync(string configTemplateName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(configTemplateName, nameof(configTemplateName));

            using var scope = _edgeConfigTemplateConfigTemplatesClientDiagnostics.CreateScope("EdgeConfigTemplateCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _edgeConfigTemplateConfigTemplatesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, configTemplateName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<EdgeConfigTemplateResource>(response.GetRawResponse());
                return Response.FromValue(new EdgeConfigTemplateResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConfigTemplate_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeConfigTemplateResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="configTemplateName"> The name of the ConfigTemplate. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="configTemplateName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="configTemplateName"/> is null. </exception>
        public virtual NullableResponse<EdgeConfigTemplateResource> GetIfExists(string configTemplateName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(configTemplateName, nameof(configTemplateName));

            using var scope = _edgeConfigTemplateConfigTemplatesClientDiagnostics.CreateScope("EdgeConfigTemplateCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _edgeConfigTemplateConfigTemplatesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, configTemplateName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<EdgeConfigTemplateResource>(response.GetRawResponse());
                return Response.FromValue(new EdgeConfigTemplateResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<EdgeConfigTemplateResource> IEnumerable<EdgeConfigTemplateResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<EdgeConfigTemplateResource> IAsyncEnumerable<EdgeConfigTemplateResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeConfigTemplateData.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A class representing the EdgeConfigTemplate data model.
    /// Config Template Resource. Contains configuration expressions using the predefined expression language.
    /// </summary>
    public partial class EdgeConfigTemplateData : TrackedResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeConfigTemplateData"/>. </summary>
        /// <param name="location"> The location. </param>
        public EdgeConfigTemplateData(AzureLocation location) : base(location)
        {
        }

        /// <summary> Initializes a new instance of <see cref="EdgeConfigTemplateData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="etag"> If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeConfigTemplateData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, IDictionary<string, string> tags, AzureLocation location, EdgeConfigTemplateProperties properties, ETag? etag, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData, tags, location)
        {
            Properties = properties;
            ETag = etag;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="EdgeConfigTemplateData"/> for deserialization. </summary>
        internal EdgeConfigTemplateData()
        {
        }

        /// <summary> The resource-specific properties for this resource. </summary>
        public EdgeConfigTemplateProperties Properties { get; set; }
        /// <summary> If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. </summary>
        public ETag? ETag { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeConfigTemplateData.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    public partial class EdgeConfigTemplateData : IUtf8JsonSerializable, IJsonModel<EdgeConfigTemplateData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeConfigTemplateData>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeConfigTemplateData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeConfigTemplateData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeConfigTemplateData)} does not support writing '{format}' format.");
            }

            base.JsonModelWriteCore(writer, options);
            if (Optional.IsDefined(Properties))
            {
                writer.WritePropertyName("properties"u8);
                writer.WriteObjectValue(Properties, options);
            }
            if (options.Format != "W" && Optional.IsDefined(ETag))
            {
                writer.WritePropertyName("eTag"u8);
                writer.WriteStringValue(ETag.Value.ToString());
            }
        }

        EdgeConfigTemplateData IJsonModel<EdgeConfigTemplateData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeConfigTemplateData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeConfigTemplateData)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeConfigTemplateData(document.RootElement, options);
        }

        internal static EdgeConfigTemplateData DeserializeEdgeConfigTemplateData(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            EdgeConfigTemplateProperties properties = default;
            ETag? etag = default;
            IDictionary<string, string> tags = default;
            AzureLocation location = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            SystemData systemData = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    properties = EdgeConfigTemplateProperties.DeserializeEdgeConfigTemplateProperties(property.Value, options);
                    continue;
                }
                if (property.NameEquals("eTag"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    etag = new ETag(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("tags"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("location"u8))
                {
                    location = new AzureLocation(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = ModelReaderWriter.Read<SystemData>(new BinaryData(Encoding.UTF8.GetBytes(property.Value.GetRawText())), ModelSerializationExtensions.WireOptions, AzureResourceManagerWorkloadOrchestrationContext.Default);
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeConfigTemplateData(
                id,
                name,
                type,
                systemData,
                tags ?? new ChangeTrackingDictionary<string, string>(),
                location,
                properties,
                etag,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeConfigTemplateData>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeConfigTemplateData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeConfigTemplateData)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeConfigTemplateData IPersistableModel<EdgeConfigTemplateData>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeConfigTemplateData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeConfigTemplateData(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeConfigTemplateData)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeConfigTemplateData>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeConfigTemplateResource.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A Class representing an EdgeConfigTemplate along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier"/> you can construct an <see cref="EdgeConfigTemplateResource"/>
    /// from an instance of <see cref="ArmClient"/> using the GetEdgeConfigTemplateResource method.
    /// Otherwise you can get one from its parent resource <see cref="ResourceGroupResource"/> using the GetEdgeConfigTemplate method.
    /// </summary>
    public partial class EdgeConfigTemplateResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="EdgeConfigTemplateResource"/> instance. </summary>
        /// <param name="subscriptionId"> The subscriptionId. </param>
        /// <param name="resourceGroupName"> The resourceGroupName. </param>
        /// <param name="configTemplateName"> The configTemplateName. </param>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string configTemplateName)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _edgeConfigTemplateConfigTemplatesClientDiagnostics;
        private readonly ConfigTemplatesRestOperations _edgeConfigTemplateConfigTemplatesRestClient;
        private readonly EdgeConfigTemplateData _data;

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.Edge/configTemplates";

        /// <summary> Initializes a new instance of the <see cref="EdgeConfigTemplateResource"/> class for mocking. </summary>
        protected EdgeConfigTemplateResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="EdgeConfigTemplateResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal EdgeConfigTemplateResource(ArmClient client, EdgeConfigTemplateData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="EdgeConfigTemplateResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal EdgeConfigTemplateResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _edgeConfigTemplateConfigTemplatesClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.WorkloadOrchestration", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string edgeConfigTemplateConfigTemplatesApiVersion);
            _edgeConfigTemplateConfigTemplatesRestClient = new ConfigTemplatesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, edgeConfigTemplateConfigTemplatesApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual EdgeConfigTemplateData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary> Gets a collection of EdgeConfigTemplateVersionResources in the EdgeConfigTemplate. </summary>
        /// <returns> An object representing collection of EdgeConfigTemplateVersionResources and their operations over a EdgeConfigTemplateVersionResource. </returns>
        public virtual EdgeConfigTemplateVersionCollection GetEdgeConfigTemplateVersions()
        {
            return GetCachedClient(client => new EdgeConfigTemplateVersionCollection(client, Id));
        }

        /// <summary>
        /// Get a Config Template Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}/versions/{configTemplateVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConfigTemplateVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeConfigTemplateVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="configTemplateVersionName"> The name of the ConfigTemplateVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="configTemplateVersionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="configTemplateVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<EdgeConfigTemplateVersionResource>> GetEdgeConfigTemplateVersionAsync(string configTemplateVersionName, CancellationToken cancellationToken = default)
        {
            return await GetEdgeConfigTemplateVersions().GetAsync(configTemplateVersionName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a Config Template Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}/versions/{configTemplateVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConfigTemplateVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeConfigTemplateVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="configTemplateVersionName"> The name of the ConfigTemplateVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="configTemplateVersionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="configTemplateVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<EdgeConfigTemplateVersionResource> GetEdgeConfigTemplateVersion(string configTemplateVersionName, CancellationToken cancellationToken = default)
        {
            return GetEdgeConfigTemplateVersions().Get(configTemplateVersionName, cancellationToken);
        }

        /// <summary>
        /// Get a Config Template Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConfigTemplate_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeConfigTemplateResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<EdgeConfigTemplateResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _edgeConfigTemplateConfigTemplatesClientDiagnostics.CreateScope("EdgeConfigTemplateResource.Get");
            scope.Start();
            try
            {
                var response = await _edgeConfigTemplateConfigTemplatesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeConfigTemplateResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a Config Template Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConfigTemplate_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeConfigTemplateResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<EdgeConfigTemplateResource> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _edgeConfigTemplateConfigTemplatesClientDiagnostics.CreateScope("EdgeConfigTemplateResource.Get");
            scope.Start();
            try
            {
                var response = _edgeConfigTemplateConfigTemplatesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeConfigTemplateResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete a Config Template Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConfigTemplate_Delete</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeConfigTemplateResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> DeleteAsync(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _edgeConfigTemplateConfigTemplatesClientDiagnostics.CreateScope("EdgeConfigTemplateResource.Delete");
            scope.Start();
            try
            {
                var response = await _edgeConfigTemplateConfigTemplatesRestClient.DeleteAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadOrchestrationArmOperation(_edgeConfigTemplateConfigTemplatesClientDiagnostics, Pipeline, _edgeConfigTemplateConfigTemplatesRestClient.CreateDeleteRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete a Config Template Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConfigTemplate_Delete</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeConfigTemplateResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation Delete(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _edgeConfigTemplateConfigTemplatesClientDiagnostics.CreateScope("EdgeConfigTemplateResource.Delete");
            scope.Start();
            try
            {
                var response = _edgeConfigTemplateConfigTemplatesRestClient.Delete(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                var operation = new WorkloadOrchestrationArmOperation(_edgeConfigTemplateConfigTemplatesClientDiagnostics, Pipeline, _edgeConfigTemplateConfigTemplatesRestClient.CreateDeleteRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// update a Config Template Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConfigTemplate_Update</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeConfigTemplateResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="patch"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="patch"/> is null. </exception>
        public virtual async Task<Response<EdgeConfigTemplateResource>> UpdateAsync(EdgeConfigTemplatePatch patch, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(patch, nameof(patch));

            using var scope = _edgeConfigTemplateConfigTemplatesClientDiagnostics.CreateScope("EdgeConfigTemplateResource.Update");
            scope.Start();
            try
            {
                var response = await _edgeConfigTemplateConfigTemplatesRestClient.UpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, patch, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new EdgeConfigTemplateResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// update a Config Template Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConfigTemplate_Update</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeConfigTemplateResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="patch"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="patch"/> is null. </exception>
        public virtual Response<EdgeConfigTemplateResource> Update(EdgeConfigTemplatePatch patch, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(patch, nameof(patch));

            using var scope = _edgeConfigTemplateConfigTemplatesClientDiagnostics.CreateScope("EdgeConfigTemplateResource.Update");
            scope.Start();
            try
            {
                var response = _edgeConfigTemplateConfigTemplatesRestClient.Update(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, patch, cancellationToken);
                return Response.FromValue(new EdgeConfigTemplateResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create or update a Config Template Version Resource with the specified UpdateType
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}/createVersion</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConfigTemplates_CreateVersion</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeConfigTemplateResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="body"> The content of the action request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public virtual async Task<ArmOperation<EdgeConfigTemplateVersionResource>> CreateVersionAsync(WaitUntil waitUntil, ConfigTemplateVersionWithUpdateType body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(body, nameof(body));

            using var scope = _edgeConfigTemplateConfigTemplatesClientDiagnostics.CreateScope("EdgeConfigTemplateResource.CreateVersion");
            scope.Start();
            try
            {
                var response = await _edgeConfigTemplateConfigTemplatesRestClient.CreateVersionAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, body, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadOrchestrationArmOperation<EdgeConfigTemplateVersionResource>(new EdgeConfigTemplateVersionOperationSource(Client), _edgeConfigTemplateConfigTemplatesClientDiagnostics, Pipeline, _edgeConfigTemplateConfigTemplatesRestClient.CreateCreateVersionRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, body).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create or update a Config Template Version Resource with the specified UpdateType
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}/createVersion</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConfigTemplates_CreateVersion</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeConfigTemplateResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="body"> The content of the action request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public virtual ArmOperation<EdgeConfigTemplateVersionResource> CreateVersion(WaitUntil waitUntil, ConfigTemplateVersionWithUpdateType body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(body, nameof(body));

            using var scope = _edgeConfigTemplateConfigTemplatesClientDiagnostics.CreateScope("EdgeConfigTemplateResource.CreateVersion");
            scope.Start();
            try
            {
                var response = _edgeConfigTemplateConfigTemplatesRestClient.CreateVersion(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, body, cancellationToken);
                var operation = new WorkloadOrchestrationArmOperation<EdgeConfigTemplateVersionResource>(new EdgeConfigTemplateVersionOperationSource(Client), _edgeConfigTemplateConfigTemplatesClientDiagnostics, Pipeline, _edgeConfigTemplateConfigTemplatesRestClient.CreateCreateVersionRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, body).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Remove Config Template Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}/removeVersion</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConfigTemplates_RemoveVersion</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeConfigTemplateResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content of the action request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        public virtual async Task<Response<RemoveVersionResult>> RemoveVersionAsync(EdgeVersionContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = _edgeConfigTemplateConfigTemplatesClientDiagnostics.CreateScope("EdgeConfigTemplateResource.RemoveVersion");
            scope.Start();
            try
            {
                var response = await _edgeConfigTemplateConfigTemplatesRestClient.RemoveVersionAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, content, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Remove Config Template Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}/removeVersion</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConfigTemplates_RemoveVersion</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeConfigTemplateResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content of the action request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        public virtual Response<RemoveVersionResult> RemoveVersion(EdgeVersionContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = _edgeConfigTemplateConfigTemplatesClientDiagnostics.CreateScope("EdgeConfigTemplateResource.RemoveVersion");
            scope.Start();
            try
            {
                var response = _edgeConfigTemplateConfigTemplatesRestClient.RemoveVersion(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, content, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Add a tag to the current resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConfigTemplate_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeConfigTemplateResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="value"> The value for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> or <paramref name="value"/> is null. </exception>
        public virtual async Task<Response<EdgeConfigTemplateResource>> AddTagAsync(string key, string value, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(key, nameof(key));
            Argument.AssertNotNull(value, nameof(value));

            using var scope = _edgeConfigTemplateConfigTemplatesClientDiagnostics.CreateScope("EdgeConfigTemplateResource.AddTag");
            scope.Start();
            try
            {
                if (await CanUseTagResourceAsync(cancellationToken: cancellationToken).ConfigureAwait(false))
                {
                    var originalTags = await GetTagResource().GetAsync(cancellationToken).ConfigureAwait(false);
                    originalTags.Value.Data.TagValues[key] = value;
                    await GetTagResource().CreateOrUpdateAsync(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken).ConfigureAwait(false);
                    var originalResponse = await _edgeConfigTemplateConfigTemplatesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                    return Response.FromValue(new EdgeConfigTemplateResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
                }
                else
                {
                    var current = (await GetAsync(cancellationToken: cancellationToken).ConfigureAwait(false)).Value.Data;
                    var patch = new EdgeConfigTemplatePatch();
                    foreach (var tag in current.Tags)
                    {
                        patch.Tags.Add(tag);
                    }
                    patch.Tags[key] = value;
                    var result = await UpdateAsync(patch, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return result;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Add a tag to the current resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConfigTemplate_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeConfigTemplateResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="value"> The value for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> or <paramref name="value"/> is null. </exception>
        public virtual Response<EdgeConfigTemplateResource> AddTag(string key, string value, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(key, nameof(key));
            Argument.AssertNotNull(value, nameof(value));

            using var scope = _edgeConfigTemplateConfigTemplatesClientDiagnostics.CreateScope("EdgeConfigTemplateResource.AddTag");
            scope.Start();
            try
            {
                if (CanUseTagResource(cancellationToken: cancellationToken))
                {
                    var originalTags = GetTagResource().Get(cancellationToken);
                    originalTags.Value.Data.TagValues[key] = value;
                    GetTagResource().CreateOrUpdate(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken);
                    var originalResponse = _edgeConfigTemplateConfigTemplatesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                    return Response.FromValue(new EdgeConfigTemplateResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
                }
                else
                {
                    var current = Get(cancellationToken: cancellationToken).Value.Data;
                    var patch = new EdgeConfigTemplatePatch();
                    foreach (var tag in current.Tags)
                    {
                        patch.Tags.Add(tag);
                    }
                    patch.Tags[key] = value;
                    var result = Update(patch, cancellationToken: cancellationToken);
                    return result;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Replace the tags on the resource with the given set.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConfigTemplate_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeConfigTemplateResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="tags"> The set of tags to use as replacement. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tags"/> is null. </exception>
        public virtual async Task<Response<EdgeConfigTemplateResource>> SetTagsAsync(IDictionary<string, string> tags, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(tags, nameof(tags));

            using var scope = _edgeConfigTemplateConfigTemplatesClientDiagnostics.CreateScope("EdgeConfigTemplateResource.SetTags");
            scope.Start();
            try
            {
                if (await CanUseTagResourceAsync(cancellationToken: cancellationToken).ConfigureAwait(false))
                {
                    await GetTagResource().DeleteAsync(WaitUntil.Completed, cancellationToken: cancellationToken).ConfigureAwait(false);
                    var originalTags = await GetTagResource().GetAsync(cancellationToken).ConfigureAwait(false);
                    originalTags.Value.Data.TagValues.ReplaceWith(tags);
                    await GetTagResource().CreateOrUpdateAsync(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken).ConfigureAwait(false);
                    var originalResponse = await _edgeConfigTemplateConfigTemplatesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                    return Response.FromValue(new EdgeConfigTemplateResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
                }
                else
                {
                    var current = (await GetAsync(cancellationToken: cancellationToken).ConfigureAwait(false)).Value.Data;
                    var patch = new EdgeConfigTemplatePatch();
                    patch.Tags.ReplaceWith(tags);
                    var result = await UpdateAsync(patch, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return result;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Replace the tags on the resource with the given set.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConfigTemplate_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeConfigTemplateResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="tags"> The set of tags to use as replacement. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tags"/> is null. </exception>
        public virtual Response<EdgeConfigTemplateResource> SetTags(IDictionary<string, string> tags, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(tags, nameof(tags));

            using var scope = _edgeConfigTemplateConfigTemplatesClientDiagnostics.CreateScope("EdgeConfigTemplateResource.SetTags");
            scope.Start();
            try
            {
                if (CanUseTagResource(cancellationToken: cancellationToken))
                {
                    GetTagResource().Delete(WaitUntil.Completed, cancellationToken: cancellationToken);
                    var originalTags = GetTagResource().Get(cancellationToken);
                    originalTags.Value.Data.TagValues.ReplaceWith(tags);
                    GetTagResource().CreateOrUpdate(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken);
                    var originalResponse = _edgeConfigTemplateConfigTemplatesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                    return Response.FromValue(new EdgeConfigTemplateResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
                }
                else
                {
                    var current = Get(cancellationToken: cancellationToken).Value.Data;
                    var patch = new EdgeConfigTemplatePatch();
                    patch.Tags.ReplaceWith(tags);
                    var result = Update(patch, cancellationToken: cancellationToken);
                    return result;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Removes a tag by key from the resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConfigTemplate_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeConfigTemplateResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> is null. </exception>
        public virtual async Task<Response<EdgeConfigTemplateResource>> RemoveTagAsync(string key, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(key, nameof(key));

            using var scope = _edgeConfigTemplateConfigTemplatesClientDiagnostics.CreateScope("EdgeConfigTemplateResource.RemoveTag");
            scope.Start();
            try
            {
                if (await CanUseTagResourceAsync(cancellationToken: cancellationToken).ConfigureAwait(false))
                {
                    var originalTags = await GetTagResource().GetAsync(cancellationToken).ConfigureAwait(false);
                    originalTags.Value.Data.TagValues.Remove(key);
                    await GetTagResource().CreateOrUpdateAsync(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken).ConfigureAwait(false);
                    var originalResponse = await _edgeConfigTemplateConfigTemplatesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                    return Response.FromValue(new EdgeConfigTemplateResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
                }
                else
                {
                    var current = (await GetAsync(cancellationToken: cancellationToken).ConfigureAwait(false)).Value.Data;
                    var patch = new EdgeConfigTemplatePatch();
                    foreach (var tag in current.Tags)
                    {
                        patch.Tags.Add(tag);
                    }
                    patch.Tags.Remove(key);
                    var result = await UpdateAsync(patch, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return result;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Removes a tag by key from the resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConfigTemplate_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeConfigTemplateResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> is null. </exception>
        public virtual Response<EdgeConfigTemplateResource> RemoveTag(string key, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(key, nameof(key));

            using var scope = _edgeConfigTemplateConfigTemplatesClientDiagnostics.CreateScope("EdgeConfigTemplateResource.RemoveTag");
            scope.Start();
            try
            {
                if (CanUseTagResource(cancellationToken: cancellationToken))
                {
                    var originalTags = GetTagResource().Get(cancellationToken);
                    originalTags.Value.Data.TagValues.Remove(key);
                    GetTagResource().CreateOrUpdate(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken);
                    var originalResponse = _edgeConfigTemplateConfigTemplatesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                    return Response.FromValue(new EdgeConfigTemplateResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
                }
                else
                {
                    var current = Get(cancellationToken: cancellationToken).Value.Data;
                    var patch = new EdgeConfigTemplatePatch();
                    foreach (var tag in current.Tags)
                    {
                        patch.Tags.Add(tag);
                    }
                    patch.Tags.Remove(key);
                    var result = Update(patch, cancellationToken: cancellationToken);
                    return result;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeConfigTemplateResource.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Text.Json;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    public partial class EdgeConfigTemplateResource : IJsonModel<EdgeConfigTemplateData>
    {
        private static EdgeConfigTemplateData s_dataDeserializationInstance;
        private static EdgeConfigTemplateData DataDeserializationInstance => s_dataDeserializationInstance ??= new();

        void IJsonModel<EdgeConfigTemplateData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options) => ((IJsonModel<EdgeConfigTemplateData>)Data).Write(writer, options);

        EdgeConfigTemplateData IJsonModel<EdgeConfigTemplateData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => ((IJsonModel<EdgeConfigTemplateData>)DataDeserializationInstance).Create(ref reader, options);

        BinaryData IPersistableModel<EdgeConfigTemplateData>.Write(ModelReaderWriterOptions options) => ModelReaderWriter.Write<EdgeConfigTemplateData>(Data, options, AzureResourceManagerWorkloadOrchestrationContext.Default);

        EdgeConfigTemplateData IPersistableModel<EdgeConfigTemplateData>.Create(BinaryData data, ModelReaderWriterOptions options) => ModelReaderWriter.Read<EdgeConfigTemplateData>(data, options, AzureResourceManagerWorkloadOrchestrationContext.Default);

        string IPersistableModel<EdgeConfigTemplateData>.GetFormatFromOptions(ModelReaderWriterOptions options) => ((IPersistableModel<EdgeConfigTemplateData>)DataDeserializationInstance).GetFormatFromOptions(options);
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeConfigTemplateVersionCollection.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A class representing a collection of <see cref="EdgeConfigTemplateVersionResource"/> and their operations.
    /// Each <see cref="EdgeConfigTemplateVersionResource"/> in the collection will belong to the same instance of <see cref="EdgeConfigTemplateResource"/>.
    /// To get an <see cref="EdgeConfigTemplateVersionCollection"/> instance call the GetEdgeConfigTemplateVersions method from an instance of <see cref="EdgeConfigTemplateResource"/>.
    /// </summary>
    public partial class EdgeConfigTemplateVersionCollection : ArmCollection, IEnumerable<EdgeConfigTemplateVersionResource>, IAsyncEnumerable<EdgeConfigTemplateVersionResource>
    {
        private readonly ClientDiagnostics _edgeConfigTemplateVersionConfigTemplateVersionsClientDiagnostics;
        private readonly ConfigTemplateVersionsRestOperations _edgeConfigTemplateVersionConfigTemplateVersionsRestClient;

        /// <summary> Initializes a new instance of the <see cref="EdgeConfigTemplateVersionCollection"/> class for mocking. </summary>
        protected EdgeConfigTemplateVersionCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="EdgeConfigTemplateVersionCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal EdgeConfigTemplateVersionCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _edgeConfigTemplateVersionConfigTemplateVersionsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.WorkloadOrchestration", EdgeConfigTemplateVersionResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(EdgeConfigTemplateVersionResource.ResourceType, out string edgeConfigTemplateVersionConfigTemplateVersionsApiVersion);
            _edgeConfigTemplateVersionConfigTemplateVersionsRestClient = new ConfigTemplateVersionsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, edgeConfigTemplateVersionConfigTemplateVersionsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != EdgeConfigTemplateResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, EdgeConfigTemplateResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Get a Config Template Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}/versions/{configTemplateVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConfigTemplateVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeConfigTemplateVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="configTemplateVersionName"> The name of the ConfigTemplateVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="configTemplateVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="configTemplateVersionName"/> is null. </exception>
        public virtual async Task<Response<EdgeConfigTemplateVersionResource>> GetAsync(string configTemplateVersionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(configTemplateVersionName, nameof(configTemplateVersionName));

            using var scope = _edgeConfigTemplateVersionConfigTemplateVersionsClientDiagnostics.CreateScope("EdgeConfigTemplateVersionCollection.Get");
            scope.Start();
            try
            {
                var response = await _edgeConfigTemplateVersionConfigTemplateVersionsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, configTemplateVersionName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeConfigTemplateVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a Config Template Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}/versions/{configTemplateVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConfigTemplateVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeConfigTemplateVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="configTemplateVersionName"> The name of the ConfigTemplateVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="configTemplateVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="configTemplateVersionName"/> is null. </exception>
        public virtual Response<EdgeConfigTemplateVersionResource> Get(string configTemplateVersionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(configTemplateVersionName, nameof(configTemplateVersionName));

            using var scope = _edgeConfigTemplateVersionConfigTemplateVersionsClientDiagnostics.CreateScope("EdgeConfigTemplateVersionCollection.Get");
            scope.Start();
            try
            {
                var response = _edgeConfigTemplateVersionConfigTemplateVersionsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, configTemplateVersionName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeConfigTemplateVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List Config Template Version Resources
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}/versions</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConfigTemplateVersion_ListByConfigTemplate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeConfigTemplateVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="EdgeConfigTemplateVersionResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<EdgeConfigTemplateVersionResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _edgeConfigTemplateVersionConfigTemplateVersionsRestClient.CreateListByConfigTemplateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _edgeConfigTemplateVersionConfigTemplateVersionsRestClient.CreateListByConfigTemplateNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new EdgeConfigTemplateVersionResource(Client, EdgeConfigTemplateVersionData.DeserializeEdgeConfigTemplateVersionData(e)), _edgeConfigTemplateVersionConfigTemplateVersionsClientDiagnostics, Pipeline, "EdgeConfigTemplateVersionCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List Config Template Version Resources
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}/versions</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConfigTemplateVersion_ListByConfigTemplate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeConfigTemplateVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="EdgeConfigTemplateVersionResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<EdgeConfigTemplateVersionResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _edgeConfigTemplateVersionConfigTemplateVersionsRestClient.CreateListByConfigTemplateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _edgeConfigTemplateVersionConfigTemplateVersionsRestClient.CreateListByConfigTemplateNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new EdgeConfigTemplateVersionResource(Client, EdgeConfigTemplateVersionData.DeserializeEdgeConfigTemplateVersionData(e)), _edgeConfigTemplateVersionConfigTemplateVersionsClientDiagnostics, Pipeline, "EdgeConfigTemplateVersionCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}/versions/{configTemplateVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConfigTemplateVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeConfigTemplateVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="configTemplateVersionName"> The name of the ConfigTemplateVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="configTemplateVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="configTemplateVersionName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string configTemplateVersionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(configTemplateVersionName, nameof(configTemplateVersionName));

            using var scope = _edgeConfigTemplateVersionConfigTemplateVersionsClientDiagnostics.CreateScope("EdgeConfigTemplateVersionCollection.Exists");
            scope.Start();
            try
            {
                var response = await _edgeConfigTemplateVersionConfigTemplateVersionsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, configTemplateVersionName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}/versions/{configTemplateVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConfigTemplateVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeConfigTemplateVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="configTemplateVersionName"> The name of the ConfigTemplateVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="configTemplateVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="configTemplateVersionName"/> is null. </exception>
        public virtual Response<bool> Exists(string configTemplateVersionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(configTemplateVersionName, nameof(configTemplateVersionName));

            using var scope = _edgeConfigTemplateVersionConfigTemplateVersionsClientDiagnostics.CreateScope("EdgeConfigTemplateVersionCollection.Exists");
            scope.Start();
            try
            {
                var response = _edgeConfigTemplateVersionConfigTemplateVersionsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, configTemplateVersionName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}/versions/{configTemplateVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConfigTemplateVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeConfigTemplateVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="configTemplateVersionName"> The name of the ConfigTemplateVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="configTemplateVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="configTemplateVersionName"/> is null. </exception>
        public virtual async Task<NullableResponse<EdgeConfigTemplateVersionResource>> GetIfExistsAsync(string configTemplateVersionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(configTemplateVersionName, nameof(configTemplateVersionName));

            using var scope = _edgeConfigTemplateVersionConfigTemplateVersionsClientDiagnostics.CreateScope("EdgeConfigTemplateVersionCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _edgeConfigTemplateVersionConfigTemplateVersionsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, configTemplateVersionName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<EdgeConfigTemplateVersionResource>(response.GetRawResponse());
                return Response.FromValue(new EdgeConfigTemplateVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}/versions/{configTemplateVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConfigTemplateVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeConfigTemplateVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="configTemplateVersionName"> The name of the ConfigTemplateVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="configTemplateVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="configTemplateVersionName"/> is null. </exception>
        public virtual NullableResponse<EdgeConfigTemplateVersionResource> GetIfExists(string configTemplateVersionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(configTemplateVersionName, nameof(configTemplateVersionName));

            using var scope = _edgeConfigTemplateVersionConfigTemplateVersionsClientDiagnostics.CreateScope("EdgeConfigTemplateVersionCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _edgeConfigTemplateVersionConfigTemplateVersionsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, configTemplateVersionName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<EdgeConfigTemplateVersionResource>(response.GetRawResponse());
                return Response.FromValue(new EdgeConfigTemplateVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<EdgeConfigTemplateVersionResource> IEnumerable<EdgeConfigTemplateVersionResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<EdgeConfigTemplateVersionResource> IAsyncEnumerable<EdgeConfigTemplateVersionResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeConfigTemplateVersionData.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A class representing the EdgeConfigTemplateVersion data model.
    /// Config Template Version Resource
    /// </summary>
    public partial class EdgeConfigTemplateVersionData : ResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeConfigTemplateVersionData"/>. </summary>
        public EdgeConfigTemplateVersionData()
        {
        }

        /// <summary> Initializes a new instance of <see cref="EdgeConfigTemplateVersionData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="etag"> If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeConfigTemplateVersionData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, EdgeConfigTemplateVersionProperties properties, ETag? etag, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData)
        {
            Properties = properties;
            ETag = etag;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The resource-specific properties for this resource. </summary>
        public EdgeConfigTemplateVersionProperties Properties { get; set; }
        /// <summary> If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. </summary>
        public ETag? ETag { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeConfigTemplateVersionData.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    public partial class EdgeConfigTemplateVersionData : IUtf8JsonSerializable, IJsonModel<EdgeConfigTemplateVersionData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeConfigTemplateVersionData>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeConfigTemplateVersionData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeConfigTemplateVersionData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeConfigTemplateVersionData)} does not support writing '{format}' format.");
            }

            base.JsonModelWriteCore(writer, options);
            if (Optional.IsDefined(Properties))
            {
                writer.WritePropertyName("properties"u8);
                writer.WriteObjectValue(Properties, options);
            }
            if (options.Format != "W" && Optional.IsDefined(ETag))
            {
                writer.WritePropertyName("eTag"u8);
                writer.WriteStringValue(ETag.Value.ToString());
            }
        }

        EdgeConfigTemplateVersionData IJsonModel<EdgeConfigTemplateVersionData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeConfigTemplateVersionData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeConfigTemplateVersionData)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeConfigTemplateVersionData(document.RootElement, options);
        }

        internal static EdgeConfigTemplateVersionData DeserializeEdgeConfigTemplateVersionData(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            EdgeConfigTemplateVersionProperties properties = default;
            ETag? etag = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            SystemData systemData = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    properties = EdgeConfigTemplateVersionProperties.DeserializeEdgeConfigTemplateVersionProperties(property.Value, options);
                    continue;
                }
                if (property.NameEquals("eTag"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    etag = new ETag(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = ModelReaderWriter.Read<SystemData>(new BinaryData(Encoding.UTF8.GetBytes(property.Value.GetRawText())), ModelSerializationExtensions.WireOptions, AzureResourceManagerWorkloadOrchestrationContext.Default);
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeConfigTemplateVersionData(
                id,
                name,
                type,
                systemData,
                properties,
                etag,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeConfigTemplateVersionData>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeConfigTemplateVersionData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeConfigTemplateVersionData)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeConfigTemplateVersionData IPersistableModel<EdgeConfigTemplateVersionData>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeConfigTemplateVersionData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeConfigTemplateVersionData(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeConfigTemplateVersionData)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeConfigTemplateVersionData>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeConfigTemplateVersionResource.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A Class representing an EdgeConfigTemplateVersion along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier"/> you can construct an <see cref="EdgeConfigTemplateVersionResource"/>
    /// from an instance of <see cref="ArmClient"/> using the GetEdgeConfigTemplateVersionResource method.
    /// Otherwise you can get one from its parent resource <see cref="EdgeConfigTemplateResource"/> using the GetEdgeConfigTemplateVersion method.
    /// </summary>
    public partial class EdgeConfigTemplateVersionResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="EdgeConfigTemplateVersionResource"/> instance. </summary>
        /// <param name="subscriptionId"> The subscriptionId. </param>
        /// <param name="resourceGroupName"> The resourceGroupName. </param>
        /// <param name="configTemplateName"> The configTemplateName. </param>
        /// <param name="configTemplateVersionName"> The configTemplateVersionName. </param>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string configTemplateName, string configTemplateVersionName)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}/versions/{configTemplateVersionName}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _edgeConfigTemplateVersionConfigTemplateVersionsClientDiagnostics;
        private readonly ConfigTemplateVersionsRestOperations _edgeConfigTemplateVersionConfigTemplateVersionsRestClient;
        private readonly EdgeConfigTemplateVersionData _data;

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.Edge/configTemplates/versions";

        /// <summary> Initializes a new instance of the <see cref="EdgeConfigTemplateVersionResource"/> class for mocking. </summary>
        protected EdgeConfigTemplateVersionResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="EdgeConfigTemplateVersionResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal EdgeConfigTemplateVersionResource(ArmClient client, EdgeConfigTemplateVersionData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="EdgeConfigTemplateVersionResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal EdgeConfigTemplateVersionResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _edgeConfigTemplateVersionConfigTemplateVersionsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.WorkloadOrchestration", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string edgeConfigTemplateVersionConfigTemplateVersionsApiVersion);
            _edgeConfigTemplateVersionConfigTemplateVersionsRestClient = new ConfigTemplateVersionsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, edgeConfigTemplateVersionConfigTemplateVersionsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual EdgeConfigTemplateVersionData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary>
        /// Get a Config Template Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}/versions/{configTemplateVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConfigTemplateVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeConfigTemplateVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<EdgeConfigTemplateVersionResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _edgeConfigTemplateVersionConfigTemplateVersionsClientDiagnostics.CreateScope("EdgeConfigTemplateVersionResource.Get");
            scope.Start();
            try
            {
                var response = await _edgeConfigTemplateVersionConfigTemplateVersionsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeConfigTemplateVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a Config Template Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}/versions/{configTemplateVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConfigTemplateVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeConfigTemplateVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<EdgeConfigTemplateVersionResource> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _edgeConfigTemplateVersionConfigTemplateVersionsClientDiagnostics.CreateScope("EdgeConfigTemplateVersionResource.Get");
            scope.Start();
            try
            {
                var response = _edgeConfigTemplateVersionConfigTemplateVersionsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeConfigTemplateVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeConfigTemplateVersionResource.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Text.Json;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    public partial class EdgeConfigTemplateVersionResource : IJsonModel<EdgeConfigTemplateVersionData>
    {
        private static EdgeConfigTemplateVersionData s_dataDeserializationInstance;
        private static EdgeConfigTemplateVersionData DataDeserializationInstance => s_dataDeserializationInstance ??= new();

        void IJsonModel<EdgeConfigTemplateVersionData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options) => ((IJsonModel<EdgeConfigTemplateVersionData>)Data).Write(writer, options);

        EdgeConfigTemplateVersionData IJsonModel<EdgeConfigTemplateVersionData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => ((IJsonModel<EdgeConfigTemplateVersionData>)DataDeserializationInstance).Create(ref reader, options);

        BinaryData IPersistableModel<EdgeConfigTemplateVersionData>.Write(ModelReaderWriterOptions options) => ModelReaderWriter.Write<EdgeConfigTemplateVersionData>(Data, options, AzureResourceManagerWorkloadOrchestrationContext.Default);

        EdgeConfigTemplateVersionData IPersistableModel<EdgeConfigTemplateVersionData>.Create(BinaryData data, ModelReaderWriterOptions options) => ModelReaderWriter.Read<EdgeConfigTemplateVersionData>(data, options, AzureResourceManagerWorkloadOrchestrationContext.Default);

        string IPersistableModel<EdgeConfigTemplateVersionData>.GetFormatFromOptions(ModelReaderWriterOptions options) => ((IPersistableModel<EdgeConfigTemplateVersionData>)DataDeserializationInstance).GetFormatFromOptions(options);
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeContextCollection.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A class representing a collection of <see cref="EdgeContextResource"/> and their operations.
    /// Each <see cref="EdgeContextResource"/> in the collection will belong to the same instance of <see cref="ResourceGroupResource"/>.
    /// To get an <see cref="EdgeContextCollection"/> instance call the GetEdgeContexts method from an instance of <see cref="ResourceGroupResource"/>.
    /// </summary>
    public partial class EdgeContextCollection : ArmCollection, IEnumerable<EdgeContextResource>, IAsyncEnumerable<EdgeContextResource>
    {
        private readonly ClientDiagnostics _edgeContextContextsClientDiagnostics;
        private readonly ContextsRestOperations _edgeContextContextsRestClient;

        /// <summary> Initializes a new instance of the <see cref="EdgeContextCollection"/> class for mocking. </summary>
        protected EdgeContextCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="EdgeContextCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal EdgeContextCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _edgeContextContextsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.WorkloadOrchestration", EdgeContextResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(EdgeContextResource.ResourceType, out string edgeContextContextsApiVersion);
            _edgeContextContextsRestClient = new ContextsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, edgeContextContextsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceGroupResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceGroupResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Create or update Context Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Context_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeContextResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="contextName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="contextName"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<EdgeContextResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string contextName, EdgeContextData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _edgeContextContextsClientDiagnostics.CreateScope("EdgeContextCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _edgeContextContextsRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, contextName, data, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadOrchestrationArmOperation<EdgeContextResource>(new EdgeContextOperationSource(Client), _edgeContextContextsClientDiagnostics, Pipeline, _edgeContextContextsRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, contextName, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create or update Context Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Context_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeContextResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="contextName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="contextName"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<EdgeContextResource> CreateOrUpdate(WaitUntil waitUntil, string contextName, EdgeContextData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _edgeContextContextsClientDiagnostics.CreateScope("EdgeContextCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _edgeContextContextsRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, contextName, data, cancellationToken);
                var operation = new WorkloadOrchestrationArmOperation<EdgeContextResource>(new EdgeContextOperationSource(Client), _edgeContextContextsClientDiagnostics, Pipeline, _edgeContextContextsRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, contextName, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get Context Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Context_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeContextResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="contextName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="contextName"/> is null. </exception>
        public virtual async Task<Response<EdgeContextResource>> GetAsync(string contextName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));

            using var scope = _edgeContextContextsClientDiagnostics.CreateScope("EdgeContextCollection.Get");
            scope.Start();
            try
            {
                var response = await _edgeContextContextsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, contextName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeContextResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get Context Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Context_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeContextResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="contextName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="contextName"/> is null. </exception>
        public virtual Response<EdgeContextResource> Get(string contextName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));

            using var scope = _edgeContextContextsClientDiagnostics.CreateScope("EdgeContextCollection.Get");
            scope.Start();
            try
            {
                var response = _edgeContextContextsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, contextName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeContextResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List by specified resource group
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Context_ListByResourceGroup</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeContextResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="EdgeContextResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<EdgeContextResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _edgeContextContextsRestClient.CreateListByResourceGroupRequest(Id.SubscriptionId, Id.ResourceGroupName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _edgeContextContextsRestClient.CreateListByResourceGroupNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new EdgeContextResource(Client, EdgeContextData.DeserializeEdgeContextData(e)), _edgeContextContextsClientDiagnostics, Pipeline, "EdgeContextCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List by specified resource group
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Context_ListByResourceGroup</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeContextResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="EdgeContextResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<EdgeContextResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _edgeContextContextsRestClient.CreateListByResourceGroupRequest(Id.SubscriptionId, Id.ResourceGroupName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _edgeContextContextsRestClient.CreateListByResourceGroupNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new EdgeContextResource(Client, EdgeContextData.DeserializeEdgeContextData(e)), _edgeContextContextsClientDiagnostics, Pipeline, "EdgeContextCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Context_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeContextResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="contextName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="contextName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string contextName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));

            using var scope = _edgeContextContextsClientDiagnostics.CreateScope("EdgeContextCollection.Exists");
            scope.Start();
            try
            {
                var response = await _edgeContextContextsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, contextName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Context_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeContextResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="contextName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="contextName"/> is null. </exception>
        public virtual Response<bool> Exists(string contextName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));

            using var scope = _edgeContextContextsClientDiagnostics.CreateScope("EdgeContextCollection.Exists");
            scope.Start();
            try
            {
                var response = _edgeContextContextsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, contextName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Context_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeContextResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="contextName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="contextName"/> is null. </exception>
        public virtual async Task<NullableResponse<EdgeContextResource>> GetIfExistsAsync(string contextName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));

            using var scope = _edgeContextContextsClientDiagnostics.CreateScope("EdgeContextCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _edgeContextContextsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, contextName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<EdgeContextResource>(response.GetRawResponse());
                return Response.FromValue(new EdgeContextResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Context_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeContextResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="contextName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="contextName"/> is null. </exception>
        public virtual NullableResponse<EdgeContextResource> GetIfExists(string contextName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));

            using var scope = _edgeContextContextsClientDiagnostics.CreateScope("EdgeContextCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _edgeContextContextsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, contextName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<EdgeContextResource>(response.GetRawResponse());
                return Response.FromValue(new EdgeContextResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<EdgeContextResource> IEnumerable<EdgeContextResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<EdgeContextResource> IAsyncEnumerable<EdgeContextResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeContextData.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A class representing the EdgeContext data model.
    /// Context Resource
    /// </summary>
    public partial class EdgeContextData : TrackedResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeContextData"/>. </summary>
        /// <param name="location"> The location. </param>
        public EdgeContextData(AzureLocation location) : base(location)
        {
        }

        /// <summary> Initializes a new instance of <see cref="EdgeContextData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeContextData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, IDictionary<string, string> tags, AzureLocation location, EdgeContextProperties properties, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData, tags, location)
        {
            Properties = properties;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="EdgeContextData"/> for deserialization. </summary>
        internal EdgeContextData()
        {
        }

        /// <summary> The resource-specific properties for this resource. </summary>
        public EdgeContextProperties Properties { get; set; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeContextData.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    public partial class EdgeContextData : IUtf8JsonSerializable, IJsonModel<EdgeContextData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeContextData>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeContextData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeContextData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeContextData)} does not support writing '{format}' format.");
            }

            base.JsonModelWriteCore(writer, options);
            if (Optional.IsDefined(Properties))
            {
                writer.WritePropertyName("properties"u8);
                writer.WriteObjectValue(Properties, options);
            }
        }

        EdgeContextData IJsonModel<EdgeContextData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeContextData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeContextData)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeContextData(document.RootElement, options);
        }

        internal static EdgeContextData DeserializeEdgeContextData(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            EdgeContextProperties properties = default;
            IDictionary<string, string> tags = default;
            AzureLocation location = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            SystemData systemData = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    properties = EdgeContextProperties.DeserializeEdgeContextProperties(property.Value, options);
                    continue;
                }
                if (property.NameEquals("tags"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("location"u8))
                {
                    location = new AzureLocation(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = ModelReaderWriter.Read<SystemData>(new BinaryData(Encoding.UTF8.GetBytes(property.Value.GetRawText())), ModelSerializationExtensions.WireOptions, AzureResourceManagerWorkloadOrchestrationContext.Default);
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeContextData(
                id,
                name,
                type,
                systemData,
                tags ?? new ChangeTrackingDictionary<string, string>(),
                location,
                properties,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeContextData>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeContextData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeContextData)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeContextData IPersistableModel<EdgeContextData>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeContextData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeContextData(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeContextData)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeContextData>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeContextResource.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A Class representing an EdgeContext along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier"/> you can construct an <see cref="EdgeContextResource"/>
    /// from an instance of <see cref="ArmClient"/> using the GetEdgeContextResource method.
    /// Otherwise you can get one from its parent resource <see cref="ResourceGroupResource"/> using the GetEdgeContext method.
    /// </summary>
    public partial class EdgeContextResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="EdgeContextResource"/> instance. </summary>
        /// <param name="subscriptionId"> The subscriptionId. </param>
        /// <param name="resourceGroupName"> The resourceGroupName. </param>
        /// <param name="contextName"> The contextName. </param>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string contextName)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _edgeContextContextsClientDiagnostics;
        private readonly ContextsRestOperations _edgeContextContextsRestClient;
        private readonly EdgeContextData _data;

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.Edge/contexts";

        /// <summary> Initializes a new instance of the <see cref="EdgeContextResource"/> class for mocking. </summary>
        protected EdgeContextResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="EdgeContextResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal EdgeContextResource(ArmClient client, EdgeContextData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="EdgeContextResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal EdgeContextResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _edgeContextContextsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.WorkloadOrchestration", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string edgeContextContextsApiVersion);
            _edgeContextContextsRestClient = new ContextsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, edgeContextContextsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual EdgeContextData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary> Gets a collection of EdgeWorkflowResources in the EdgeContext. </summary>
        /// <returns> An object representing collection of EdgeWorkflowResources and their operations over a EdgeWorkflowResource. </returns>
        public virtual EdgeWorkflowCollection GetEdgeWorkflows()
        {
            return GetCachedClient(client => new EdgeWorkflowCollection(client, Id));
        }

        /// <summary>
        /// Get a Workflow resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Workflow_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeWorkflowResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="workflowName"> Name of the workflow. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workflowName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="workflowName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<EdgeWorkflowResource>> GetEdgeWorkflowAsync(string workflowName, CancellationToken cancellationToken = default)
        {
            return await GetEdgeWorkflows().GetAsync(workflowName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a Workflow resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Workflow_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeWorkflowResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="workflowName"> Name of the workflow. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workflowName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="workflowName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<EdgeWorkflowResource> GetEdgeWorkflow(string workflowName, CancellationToken cancellationToken = default)
        {
            return GetEdgeWorkflows().Get(workflowName, cancellationToken);
        }

        /// <summary> Gets a collection of EdgeSiteReferenceResources in the EdgeContext. </summary>
        /// <returns> An object representing collection of EdgeSiteReferenceResources and their operations over a EdgeSiteReferenceResource. </returns>
        public virtual EdgeSiteReferenceCollection GetEdgeSiteReferences()
        {
            return GetCachedClient(client => new EdgeSiteReferenceCollection(client, Id));
        }

        /// <summary>
        /// Get Site Reference Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/siteReferences/{siteReferenceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SiteReference_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSiteReferenceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="siteReferenceName"> The name of the SiteReference. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="siteReferenceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="siteReferenceName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<EdgeSiteReferenceResource>> GetEdgeSiteReferenceAsync(string siteReferenceName, CancellationToken cancellationToken = default)
        {
            return await GetEdgeSiteReferences().GetAsync(siteReferenceName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get Site Reference Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/siteReferences/{siteReferenceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SiteReference_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSiteReferenceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="siteReferenceName"> The name of the SiteReference. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="siteReferenceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="siteReferenceName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<EdgeSiteReferenceResource> GetEdgeSiteReference(string siteReferenceName, CancellationToken cancellationToken = default)
        {
            return GetEdgeSiteReferences().Get(siteReferenceName, cancellationToken);
        }

        /// <summary>
        /// Get Context Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Context_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeContextResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<EdgeContextResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _edgeContextContextsClientDiagnostics.CreateScope("EdgeContextResource.Get");
            scope.Start();
            try
            {
                var response = await _edgeContextContextsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeContextResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get Context Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Context_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeContextResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<EdgeContextResource> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _edgeContextContextsClientDiagnostics.CreateScope("EdgeContextResource.Get");
            scope.Start();
            try
            {
                var response = _edgeContextContextsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeContextResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete Context Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Context_Delete</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeContextResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> DeleteAsync(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _edgeContextContextsClientDiagnostics.CreateScope("EdgeContextResource.Delete");
            scope.Start();
            try
            {
                var response = await _edgeContextContextsRestClient.DeleteAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadOrchestrationArmOperation(_edgeContextContextsClientDiagnostics, Pipeline, _edgeContextContextsRestClient.CreateDeleteRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete Context Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Context_Delete</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeContextResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation Delete(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _edgeContextContextsClientDiagnostics.CreateScope("EdgeContextResource.Delete");
            scope.Start();
            try
            {
                var response = _edgeContextContextsRestClient.Delete(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                var operation = new WorkloadOrchestrationArmOperation(_edgeContextContextsClientDiagnostics, Pipeline, _edgeContextContextsRestClient.CreateDeleteRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// update an Context Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Context_Update</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeContextResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="patch"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="patch"/> is null. </exception>
        public virtual async Task<ArmOperation<EdgeContextResource>> UpdateAsync(WaitUntil waitUntil, EdgeContextPatch patch, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(patch, nameof(patch));

            using var scope = _edgeContextContextsClientDiagnostics.CreateScope("EdgeContextResource.Update");
            scope.Start();
            try
            {
                var response = await _edgeContextContextsRestClient.UpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, patch, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadOrchestrationArmOperation<EdgeContextResource>(new EdgeContextOperationSource(Client), _edgeContextContextsClientDiagnostics, Pipeline, _edgeContextContextsRestClient.CreateUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, patch).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// update an Context Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Context_Update</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeContextResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="patch"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="patch"/> is null. </exception>
        public virtual ArmOperation<EdgeContextResource> Update(WaitUntil waitUntil, EdgeContextPatch patch, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(patch, nameof(patch));

            using var scope = _edgeContextContextsClientDiagnostics.CreateScope("EdgeContextResource.Update");
            scope.Start();
            try
            {
                var response = _edgeContextContextsRestClient.Update(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, patch, cancellationToken);
                var operation = new WorkloadOrchestrationArmOperation<EdgeContextResource>(new EdgeContextOperationSource(Client), _edgeContextContextsClientDiagnostics, Pipeline, _edgeContextContextsRestClient.CreateUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, patch).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Add a tag to the current resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Context_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeContextResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="value"> The value for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> or <paramref name="value"/> is null. </exception>
        public virtual async Task<Response<EdgeContextResource>> AddTagAsync(string key, string value, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(key, nameof(key));
            Argument.AssertNotNull(value, nameof(value));

            using var scope = _edgeContextContextsClientDiagnostics.CreateScope("EdgeContextResource.AddTag");
            scope.Start();
            try
            {
                if (await CanUseTagResourceAsync(cancellationToken: cancellationToken).ConfigureAwait(false))
                {
                    var originalTags = await GetTagResource().GetAsync(cancellationToken).ConfigureAwait(false);
                    originalTags.Value.Data.TagValues[key] = value;
                    await GetTagResource().CreateOrUpdateAsync(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken).ConfigureAwait(false);
                    var originalResponse = await _edgeContextContextsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                    return Response.FromValue(new EdgeContextResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
                }
                else
                {
                    var current = (await GetAsync(cancellationToken: cancellationToken).ConfigureAwait(false)).Value.Data;
                    var patch = new EdgeContextPatch();
                    foreach (var tag in current.Tags)
                    {
                        patch.Tags.Add(tag);
                    }
                    patch.Tags[key] = value;
                    var result = await UpdateAsync(WaitUntil.Completed, patch, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Response.FromValue(result.Value, result.GetRawResponse());
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Add a tag to the current resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Context_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeContextResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="value"> The value for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> or <paramref name="value"/> is null. </exception>
        public virtual Response<EdgeContextResource> AddTag(string key, string value, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(key, nameof(key));
            Argument.AssertNotNull(value, nameof(value));

            using var scope = _edgeContextContextsClientDiagnostics.CreateScope("EdgeContextResource.AddTag");
            scope.Start();
            try
            {
                if (CanUseTagResource(cancellationToken: cancellationToken))
                {
                    var originalTags = GetTagResource().Get(cancellationToken);
                    originalTags.Value.Data.TagValues[key] = value;
                    GetTagResource().CreateOrUpdate(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken);
                    var originalResponse = _edgeContextContextsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                    return Response.FromValue(new EdgeContextResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
                }
                else
                {
                    var current = Get(cancellationToken: cancellationToken).Value.Data;
                    var patch = new EdgeContextPatch();
                    foreach (var tag in current.Tags)
                    {
                        patch.Tags.Add(tag);
                    }
                    patch.Tags[key] = value;
                    var result = Update(WaitUntil.Completed, patch, cancellationToken: cancellationToken);
                    return Response.FromValue(result.Value, result.GetRawResponse());
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Replace the tags on the resource with the given set.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Context_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeContextResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="tags"> The set of tags to use as replacement. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tags"/> is null. </exception>
        public virtual async Task<Response<EdgeContextResource>> SetTagsAsync(IDictionary<string, string> tags, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(tags, nameof(tags));

            using var scope = _edgeContextContextsClientDiagnostics.CreateScope("EdgeContextResource.SetTags");
            scope.Start();
            try
            {
                if (await CanUseTagResourceAsync(cancellationToken: cancellationToken).ConfigureAwait(false))
                {
                    await GetTagResource().DeleteAsync(WaitUntil.Completed, cancellationToken: cancellationToken).ConfigureAwait(false);
                    var originalTags = await GetTagResource().GetAsync(cancellationToken).ConfigureAwait(false);
                    originalTags.Value.Data.TagValues.ReplaceWith(tags);
                    await GetTagResource().CreateOrUpdateAsync(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken).ConfigureAwait(false);
                    var originalResponse = await _edgeContextContextsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                    return Response.FromValue(new EdgeContextResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
                }
                else
                {
                    var current = (await GetAsync(cancellationToken: cancellationToken).ConfigureAwait(false)).Value.Data;
                    var patch = new EdgeContextPatch();
                    patch.Tags.ReplaceWith(tags);
                    var result = await UpdateAsync(WaitUntil.Completed, patch, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Response.FromValue(result.Value, result.GetRawResponse());
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Replace the tags on the resource with the given set.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Context_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeContextResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="tags"> The set of tags to use as replacement. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tags"/> is null. </exception>
        public virtual Response<EdgeContextResource> SetTags(IDictionary<string, string> tags, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(tags, nameof(tags));

            using var scope = _edgeContextContextsClientDiagnostics.CreateScope("EdgeContextResource.SetTags");
            scope.Start();
            try
            {
                if (CanUseTagResource(cancellationToken: cancellationToken))
                {
                    GetTagResource().Delete(WaitUntil.Completed, cancellationToken: cancellationToken);
                    var originalTags = GetTagResource().Get(cancellationToken);
                    originalTags.Value.Data.TagValues.ReplaceWith(tags);
                    GetTagResource().CreateOrUpdate(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken);
                    var originalResponse = _edgeContextContextsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                    return Response.FromValue(new EdgeContextResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
                }
                else
                {
                    var current = Get(cancellationToken: cancellationToken).Value.Data;
                    var patch = new EdgeContextPatch();
                    patch.Tags.ReplaceWith(tags);
                    var result = Update(WaitUntil.Completed, patch, cancellationToken: cancellationToken);
                    return Response.FromValue(result.Value, result.GetRawResponse());
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Removes a tag by key from the resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Context_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeContextResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> is null. </exception>
        public virtual async Task<Response<EdgeContextResource>> RemoveTagAsync(string key, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(key, nameof(key));

            using var scope = _edgeContextContextsClientDiagnostics.CreateScope("EdgeContextResource.RemoveTag");
            scope.Start();
            try
            {
                if (await CanUseTagResourceAsync(cancellationToken: cancellationToken).ConfigureAwait(false))
                {
                    var originalTags = await GetTagResource().GetAsync(cancellationToken).ConfigureAwait(false);
                    originalTags.Value.Data.TagValues.Remove(key);
                    await GetTagResource().CreateOrUpdateAsync(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken).ConfigureAwait(false);
                    var originalResponse = await _edgeContextContextsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                    return Response.FromValue(new EdgeContextResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
                }
                else
                {
                    var current = (await GetAsync(cancellationToken: cancellationToken).ConfigureAwait(false)).Value.Data;
                    var patch = new EdgeContextPatch();
                    foreach (var tag in current.Tags)
                    {
                        patch.Tags.Add(tag);
                    }
                    patch.Tags.Remove(key);
                    var result = await UpdateAsync(WaitUntil.Completed, patch, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Response.FromValue(result.Value, result.GetRawResponse());
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Removes a tag by key from the resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Context_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeContextResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> is null. </exception>
        public virtual Response<EdgeContextResource> RemoveTag(string key, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(key, nameof(key));

            using var scope = _edgeContextContextsClientDiagnostics.CreateScope("EdgeContextResource.RemoveTag");
            scope.Start();
            try
            {
                if (CanUseTagResource(cancellationToken: cancellationToken))
                {
                    var originalTags = GetTagResource().Get(cancellationToken);
                    originalTags.Value.Data.TagValues.Remove(key);
                    GetTagResource().CreateOrUpdate(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken);
                    var originalResponse = _edgeContextContextsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                    return Response.FromValue(new EdgeContextResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
                }
                else
                {
                    var current = Get(cancellationToken: cancellationToken).Value.Data;
                    var patch = new EdgeContextPatch();
                    foreach (var tag in current.Tags)
                    {
                        patch.Tags.Add(tag);
                    }
                    patch.Tags.Remove(key);
                    var result = Update(WaitUntil.Completed, patch, cancellationToken: cancellationToken);
                    return Response.FromValue(result.Value, result.GetRawResponse());
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeContextResource.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Text.Json;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    public partial class EdgeContextResource : IJsonModel<EdgeContextData>
    {
        private static EdgeContextData s_dataDeserializationInstance;
        private static EdgeContextData DataDeserializationInstance => s_dataDeserializationInstance ??= new();

        void IJsonModel<EdgeContextData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options) => ((IJsonModel<EdgeContextData>)Data).Write(writer, options);

        EdgeContextData IJsonModel<EdgeContextData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => ((IJsonModel<EdgeContextData>)DataDeserializationInstance).Create(ref reader, options);

        BinaryData IPersistableModel<EdgeContextData>.Write(ModelReaderWriterOptions options) => ModelReaderWriter.Write<EdgeContextData>(Data, options, AzureResourceManagerWorkloadOrchestrationContext.Default);

        EdgeContextData IPersistableModel<EdgeContextData>.Create(BinaryData data, ModelReaderWriterOptions options) => ModelReaderWriter.Read<EdgeContextData>(data, options, AzureResourceManagerWorkloadOrchestrationContext.Default);

        string IPersistableModel<EdgeContextData>.GetFormatFromOptions(ModelReaderWriterOptions options) => ((IPersistableModel<EdgeContextData>)DataDeserializationInstance).GetFormatFromOptions(options);
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeDeploymentInstanceCollection.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A class representing a collection of <see cref="EdgeDeploymentInstanceResource"/> and their operations.
    /// Each <see cref="EdgeDeploymentInstanceResource"/> in the collection will belong to the same instance of <see cref="EdgeSolutionResource"/>.
    /// To get an <see cref="EdgeDeploymentInstanceCollection"/> instance call the GetEdgeDeploymentInstances method from an instance of <see cref="EdgeSolutionResource"/>.
    /// </summary>
    public partial class EdgeDeploymentInstanceCollection : ArmCollection, IEnumerable<EdgeDeploymentInstanceResource>, IAsyncEnumerable<EdgeDeploymentInstanceResource>
    {
        private readonly ClientDiagnostics _edgeDeploymentInstanceInstancesClientDiagnostics;
        private readonly InstancesRestOperations _edgeDeploymentInstanceInstancesRestClient;

        /// <summary> Initializes a new instance of the <see cref="EdgeDeploymentInstanceCollection"/> class for mocking. </summary>
        protected EdgeDeploymentInstanceCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="EdgeDeploymentInstanceCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal EdgeDeploymentInstanceCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _edgeDeploymentInstanceInstancesClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.WorkloadOrchestration", EdgeDeploymentInstanceResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(EdgeDeploymentInstanceResource.ResourceType, out string edgeDeploymentInstanceInstancesApiVersion);
            _edgeDeploymentInstanceInstancesRestClient = new InstancesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, edgeDeploymentInstanceInstancesApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != EdgeSolutionResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, EdgeSolutionResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Create or update Instance Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances/{instanceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Instance_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDeploymentInstanceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="instanceName"> Name of the instance. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="instanceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="instanceName"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<EdgeDeploymentInstanceResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string instanceName, EdgeDeploymentInstanceData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(instanceName, nameof(instanceName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _edgeDeploymentInstanceInstancesClientDiagnostics.CreateScope("EdgeDeploymentInstanceCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _edgeDeploymentInstanceInstancesRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, instanceName, data, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadOrchestrationArmOperation<EdgeDeploymentInstanceResource>(new EdgeDeploymentInstanceOperationSource(Client), _edgeDeploymentInstanceInstancesClientDiagnostics, Pipeline, _edgeDeploymentInstanceInstancesRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, instanceName, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create or update Instance Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances/{instanceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Instance_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDeploymentInstanceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="instanceName"> Name of the instance. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="instanceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="instanceName"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<EdgeDeploymentInstanceResource> CreateOrUpdate(WaitUntil waitUntil, string instanceName, EdgeDeploymentInstanceData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(instanceName, nameof(instanceName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _edgeDeploymentInstanceInstancesClientDiagnostics.CreateScope("EdgeDeploymentInstanceCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _edgeDeploymentInstanceInstancesRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, instanceName, data, cancellationToken);
                var operation = new WorkloadOrchestrationArmOperation<EdgeDeploymentInstanceResource>(new EdgeDeploymentInstanceOperationSource(Client), _edgeDeploymentInstanceInstancesClientDiagnostics, Pipeline, _edgeDeploymentInstanceInstancesRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, instanceName, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get Instance Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances/{instanceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Instance_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDeploymentInstanceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="instanceName"> Name of the instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="instanceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="instanceName"/> is null. </exception>
        public virtual async Task<Response<EdgeDeploymentInstanceResource>> GetAsync(string instanceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(instanceName, nameof(instanceName));

            using var scope = _edgeDeploymentInstanceInstancesClientDiagnostics.CreateScope("EdgeDeploymentInstanceCollection.Get");
            scope.Start();
            try
            {
                var response = await _edgeDeploymentInstanceInstancesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, instanceName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeDeploymentInstanceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get Instance Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances/{instanceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Instance_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDeploymentInstanceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="instanceName"> Name of the instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="instanceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="instanceName"/> is null. </exception>
        public virtual Response<EdgeDeploymentInstanceResource> Get(string instanceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(instanceName, nameof(instanceName));

            using var scope = _edgeDeploymentInstanceInstancesClientDiagnostics.CreateScope("EdgeDeploymentInstanceCollection.Get");
            scope.Start();
            try
            {
                var response = _edgeDeploymentInstanceInstancesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, instanceName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeDeploymentInstanceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List Instance Resources
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Instance_ListBySolution</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDeploymentInstanceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="EdgeDeploymentInstanceResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<EdgeDeploymentInstanceResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _edgeDeploymentInstanceInstancesRestClient.CreateListBySolutionRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _edgeDeploymentInstanceInstancesRestClient.CreateListBySolutionNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new EdgeDeploymentInstanceResource(Client, EdgeDeploymentInstanceData.DeserializeEdgeDeploymentInstanceData(e)), _edgeDeploymentInstanceInstancesClientDiagnostics, Pipeline, "EdgeDeploymentInstanceCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List Instance Resources
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Instance_ListBySolution</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDeploymentInstanceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="EdgeDeploymentInstanceResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<EdgeDeploymentInstanceResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _edgeDeploymentInstanceInstancesRestClient.CreateListBySolutionRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _edgeDeploymentInstanceInstancesRestClient.CreateListBySolutionNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new EdgeDeploymentInstanceResource(Client, EdgeDeploymentInstanceData.DeserializeEdgeDeploymentInstanceData(e)), _edgeDeploymentInstanceInstancesClientDiagnostics, Pipeline, "EdgeDeploymentInstanceCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances/{instanceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Instance_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDeploymentInstanceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="instanceName"> Name of the instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="instanceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="instanceName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string instanceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(instanceName, nameof(instanceName));

            using var scope = _edgeDeploymentInstanceInstancesClientDiagnostics.CreateScope("EdgeDeploymentInstanceCollection.Exists");
            scope.Start();
            try
            {
                var response = await _edgeDeploymentInstanceInstancesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, instanceName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances/{instanceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Instance_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDeploymentInstanceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="instanceName"> Name of the instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="instanceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="instanceName"/> is null. </exception>
        public virtual Response<bool> Exists(string instanceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(instanceName, nameof(instanceName));

            using var scope = _edgeDeploymentInstanceInstancesClientDiagnostics.CreateScope("EdgeDeploymentInstanceCollection.Exists");
            scope.Start();
            try
            {
                var response = _edgeDeploymentInstanceInstancesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, instanceName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances/{instanceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Instance_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDeploymentInstanceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="instanceName"> Name of the instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="instanceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="instanceName"/> is null. </exception>
        public virtual async Task<NullableResponse<EdgeDeploymentInstanceResource>> GetIfExistsAsync(string instanceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(instanceName, nameof(instanceName));

            using var scope = _edgeDeploymentInstanceInstancesClientDiagnostics.CreateScope("EdgeDeploymentInstanceCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _edgeDeploymentInstanceInstancesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, instanceName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<EdgeDeploymentInstanceResource>(response.GetRawResponse());
                return Response.FromValue(new EdgeDeploymentInstanceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances/{instanceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Instance_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDeploymentInstanceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="instanceName"> Name of the instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="instanceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="instanceName"/> is null. </exception>
        public virtual NullableResponse<EdgeDeploymentInstanceResource> GetIfExists(string instanceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(instanceName, nameof(instanceName));

            using var scope = _edgeDeploymentInstanceInstancesClientDiagnostics.CreateScope("EdgeDeploymentInstanceCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _edgeDeploymentInstanceInstancesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, instanceName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<EdgeDeploymentInstanceResource>(response.GetRawResponse());
                return Response.FromValue(new EdgeDeploymentInstanceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<EdgeDeploymentInstanceResource> IEnumerable<EdgeDeploymentInstanceResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<EdgeDeploymentInstanceResource> IAsyncEnumerable<EdgeDeploymentInstanceResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeDeploymentInstanceData.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A class representing the EdgeDeploymentInstance data model.
    /// Instance Resource. Represents a deployment object.
    /// </summary>
    public partial class EdgeDeploymentInstanceData : ResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeDeploymentInstanceData"/>. </summary>
        public EdgeDeploymentInstanceData()
        {
        }

        /// <summary> Initializes a new instance of <see cref="EdgeDeploymentInstanceData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="extendedLocation"></param>
        /// <param name="etag"> If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeDeploymentInstanceData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, EdgeDeploymentInstanceProperties properties, ExtendedLocation extendedLocation, ETag? etag, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData)
        {
            Properties = properties;
            ExtendedLocation = extendedLocation;
            ETag = etag;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The resource-specific properties for this resource. </summary>
        public EdgeDeploymentInstanceProperties Properties { get; set; }
        /// <summary> Gets or sets the extended location. </summary>
        public ExtendedLocation ExtendedLocation { get; set; }
        /// <summary> If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. </summary>
        public ETag? ETag { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeDeploymentInstanceData.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    public partial class EdgeDeploymentInstanceData : IUtf8JsonSerializable, IJsonModel<EdgeDeploymentInstanceData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeDeploymentInstanceData>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeDeploymentInstanceData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeDeploymentInstanceData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeDeploymentInstanceData)} does not support writing '{format}' format.");
            }

            base.JsonModelWriteCore(writer, options);
            if (Optional.IsDefined(Properties))
            {
                writer.WritePropertyName("properties"u8);
                writer.WriteObjectValue(Properties, options);
            }
            if (Optional.IsDefined(ExtendedLocation))
            {
                writer.WritePropertyName("extendedLocation"u8);
                ((IJsonModel<ExtendedLocation>)ExtendedLocation).Write(writer, options);
            }
            if (options.Format != "W" && Optional.IsDefined(ETag))
            {
                writer.WritePropertyName("eTag"u8);
                writer.WriteStringValue(ETag.Value.ToString());
            }
        }

        EdgeDeploymentInstanceData IJsonModel<EdgeDeploymentInstanceData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeDeploymentInstanceData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeDeploymentInstanceData)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeDeploymentInstanceData(document.RootElement, options);
        }

        internal static EdgeDeploymentInstanceData DeserializeEdgeDeploymentInstanceData(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            EdgeDeploymentInstanceProperties properties = default;
            ExtendedLocation extendedLocation = default;
            ETag? etag = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            SystemData systemData = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    properties = EdgeDeploymentInstanceProperties.DeserializeEdgeDeploymentInstanceProperties(property.Value, options);
                    continue;
                }
                if (property.NameEquals("extendedLocation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    extendedLocation = ModelReaderWriter.Read<ExtendedLocation>(new BinaryData(Encoding.UTF8.GetBytes(property.Value.GetRawText())), options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                    continue;
                }
                if (property.NameEquals("eTag"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    etag = new ETag(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = ModelReaderWriter.Read<SystemData>(new BinaryData(Encoding.UTF8.GetBytes(property.Value.GetRawText())), ModelSerializationExtensions.WireOptions, AzureResourceManagerWorkloadOrchestrationContext.Default);
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeDeploymentInstanceData(
                id,
                name,
                type,
                systemData,
                properties,
                extendedLocation,
                etag,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeDeploymentInstanceData>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeDeploymentInstanceData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeDeploymentInstanceData)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeDeploymentInstanceData IPersistableModel<EdgeDeploymentInstanceData>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeDeploymentInstanceData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeDeploymentInstanceData(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeDeploymentInstanceData)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeDeploymentInstanceData>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeDeploymentInstanceHistoryCollection.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A class representing a collection of <see cref="EdgeDeploymentInstanceHistoryResource"/> and their operations.
    /// Each <see cref="EdgeDeploymentInstanceHistoryResource"/> in the collection will belong to the same instance of <see cref="EdgeDeploymentInstanceResource"/>.
    /// To get an <see cref="EdgeDeploymentInstanceHistoryCollection"/> instance call the GetEdgeDeploymentInstanceHistories method from an instance of <see cref="EdgeDeploymentInstanceResource"/>.
    /// </summary>
    public partial class EdgeDeploymentInstanceHistoryCollection : ArmCollection, IEnumerable<EdgeDeploymentInstanceHistoryResource>, IAsyncEnumerable<EdgeDeploymentInstanceHistoryResource>
    {
        private readonly ClientDiagnostics _edgeDeploymentInstanceHistoryInstanceHistoriesClientDiagnostics;
        private readonly InstanceHistoriesRestOperations _edgeDeploymentInstanceHistoryInstanceHistoriesRestClient;

        /// <summary> Initializes a new instance of the <see cref="EdgeDeploymentInstanceHistoryCollection"/> class for mocking. </summary>
        protected EdgeDeploymentInstanceHistoryCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="EdgeDeploymentInstanceHistoryCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal EdgeDeploymentInstanceHistoryCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _edgeDeploymentInstanceHistoryInstanceHistoriesClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.WorkloadOrchestration", EdgeDeploymentInstanceHistoryResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(EdgeDeploymentInstanceHistoryResource.ResourceType, out string edgeDeploymentInstanceHistoryInstanceHistoriesApiVersion);
            _edgeDeploymentInstanceHistoryInstanceHistoriesRestClient = new InstanceHistoriesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, edgeDeploymentInstanceHistoryInstanceHistoriesApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != EdgeDeploymentInstanceResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, EdgeDeploymentInstanceResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Get InstanceHistory Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances/{instanceName}/histories/{instanceHistoryName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>InstanceHistory_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDeploymentInstanceHistoryResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="instanceHistoryName"> Name of the instance history. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="instanceHistoryName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="instanceHistoryName"/> is null. </exception>
        public virtual async Task<Response<EdgeDeploymentInstanceHistoryResource>> GetAsync(string instanceHistoryName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(instanceHistoryName, nameof(instanceHistoryName));

            using var scope = _edgeDeploymentInstanceHistoryInstanceHistoriesClientDiagnostics.CreateScope("EdgeDeploymentInstanceHistoryCollection.Get");
            scope.Start();
            try
            {
                var response = await _edgeDeploymentInstanceHistoryInstanceHistoriesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, instanceHistoryName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeDeploymentInstanceHistoryResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get InstanceHistory Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances/{instanceName}/histories/{instanceHistoryName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>InstanceHistory_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDeploymentInstanceHistoryResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="instanceHistoryName"> Name of the instance history. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="instanceHistoryName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="instanceHistoryName"/> is null. </exception>
        public virtual Response<EdgeDeploymentInstanceHistoryResource> Get(string instanceHistoryName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(instanceHistoryName, nameof(instanceHistoryName));

            using var scope = _edgeDeploymentInstanceHistoryInstanceHistoriesClientDiagnostics.CreateScope("EdgeDeploymentInstanceHistoryCollection.Get");
            scope.Start();
            try
            {
                var response = _edgeDeploymentInstanceHistoryInstanceHistoriesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, instanceHistoryName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeDeploymentInstanceHistoryResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List InstanceHistory Resources
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances/{instanceName}/histories</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>InstanceHistory_ListByInstance</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDeploymentInstanceHistoryResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="EdgeDeploymentInstanceHistoryResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<EdgeDeploymentInstanceHistoryResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _edgeDeploymentInstanceHistoryInstanceHistoriesRestClient.CreateListByInstanceRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _edgeDeploymentInstanceHistoryInstanceHistoriesRestClient.CreateListByInstanceNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new EdgeDeploymentInstanceHistoryResource(Client, EdgeDeploymentInstanceHistoryData.DeserializeEdgeDeploymentInstanceHistoryData(e)), _edgeDeploymentInstanceHistoryInstanceHistoriesClientDiagnostics, Pipeline, "EdgeDeploymentInstanceHistoryCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List InstanceHistory Resources
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances/{instanceName}/histories</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>InstanceHistory_ListByInstance</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDeploymentInstanceHistoryResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="EdgeDeploymentInstanceHistoryResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<EdgeDeploymentInstanceHistoryResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _edgeDeploymentInstanceHistoryInstanceHistoriesRestClient.CreateListByInstanceRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _edgeDeploymentInstanceHistoryInstanceHistoriesRestClient.CreateListByInstanceNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new EdgeDeploymentInstanceHistoryResource(Client, EdgeDeploymentInstanceHistoryData.DeserializeEdgeDeploymentInstanceHistoryData(e)), _edgeDeploymentInstanceHistoryInstanceHistoriesClientDiagnostics, Pipeline, "EdgeDeploymentInstanceHistoryCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances/{instanceName}/histories/{instanceHistoryName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>InstanceHistory_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDeploymentInstanceHistoryResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="instanceHistoryName"> Name of the instance history. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="instanceHistoryName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="instanceHistoryName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string instanceHistoryName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(instanceHistoryName, nameof(instanceHistoryName));

            using var scope = _edgeDeploymentInstanceHistoryInstanceHistoriesClientDiagnostics.CreateScope("EdgeDeploymentInstanceHistoryCollection.Exists");
            scope.Start();
            try
            {
                var response = await _edgeDeploymentInstanceHistoryInstanceHistoriesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, instanceHistoryName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances/{instanceName}/histories/{instanceHistoryName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>InstanceHistory_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDeploymentInstanceHistoryResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="instanceHistoryName"> Name of the instance history. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="instanceHistoryName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="instanceHistoryName"/> is null. </exception>
        public virtual Response<bool> Exists(string instanceHistoryName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(instanceHistoryName, nameof(instanceHistoryName));

            using var scope = _edgeDeploymentInstanceHistoryInstanceHistoriesClientDiagnostics.CreateScope("EdgeDeploymentInstanceHistoryCollection.Exists");
            scope.Start();
            try
            {
                var response = _edgeDeploymentInstanceHistoryInstanceHistoriesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, instanceHistoryName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances/{instanceName}/histories/{instanceHistoryName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>InstanceHistory_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDeploymentInstanceHistoryResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="instanceHistoryName"> Name of the instance history. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="instanceHistoryName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="instanceHistoryName"/> is null. </exception>
        public virtual async Task<NullableResponse<EdgeDeploymentInstanceHistoryResource>> GetIfExistsAsync(string instanceHistoryName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(instanceHistoryName, nameof(instanceHistoryName));

            using var scope = _edgeDeploymentInstanceHistoryInstanceHistoriesClientDiagnostics.CreateScope("EdgeDeploymentInstanceHistoryCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _edgeDeploymentInstanceHistoryInstanceHistoriesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, instanceHistoryName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<EdgeDeploymentInstanceHistoryResource>(response.GetRawResponse());
                return Response.FromValue(new EdgeDeploymentInstanceHistoryResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances/{instanceName}/histories/{instanceHistoryName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>InstanceHistory_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDeploymentInstanceHistoryResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="instanceHistoryName"> Name of the instance history. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="instanceHistoryName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="instanceHistoryName"/> is null. </exception>
        public virtual NullableResponse<EdgeDeploymentInstanceHistoryResource> GetIfExists(string instanceHistoryName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(instanceHistoryName, nameof(instanceHistoryName));

            using var scope = _edgeDeploymentInstanceHistoryInstanceHistoriesClientDiagnostics.CreateScope("EdgeDeploymentInstanceHistoryCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _edgeDeploymentInstanceHistoryInstanceHistoriesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, instanceHistoryName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<EdgeDeploymentInstanceHistoryResource>(response.GetRawResponse());
                return Response.FromValue(new EdgeDeploymentInstanceHistoryResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<EdgeDeploymentInstanceHistoryResource> IEnumerable<EdgeDeploymentInstanceHistoryResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<EdgeDeploymentInstanceHistoryResource> IAsyncEnumerable<EdgeDeploymentInstanceHistoryResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeDeploymentInstanceHistoryData.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A class representing the EdgeDeploymentInstanceHistory data model.
    /// InstanceHistory Resource
    /// </summary>
    public partial class EdgeDeploymentInstanceHistoryData : ResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeDeploymentInstanceHistoryData"/>. </summary>
        internal EdgeDeploymentInstanceHistoryData()
        {
        }

        /// <summary> Initializes a new instance of <see cref="EdgeDeploymentInstanceHistoryData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="extendedLocation"></param>
        /// <param name="etag"> If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeDeploymentInstanceHistoryData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, EdgeDeploymentInstanceHistoryProperties properties, ExtendedLocation extendedLocation, ETag? etag, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData)
        {
            Properties = properties;
            ExtendedLocation = extendedLocation;
            ETag = etag;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The resource-specific properties for this resource. </summary>
        public EdgeDeploymentInstanceHistoryProperties Properties { get; }
        /// <summary> Gets the extended location. </summary>
        public ExtendedLocation ExtendedLocation { get; }
        /// <summary> If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. </summary>
        public ETag? ETag { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeDeploymentInstanceHistoryData.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    public partial class EdgeDeploymentInstanceHistoryData : IUtf8JsonSerializable, IJsonModel<EdgeDeploymentInstanceHistoryData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeDeploymentInstanceHistoryData>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeDeploymentInstanceHistoryData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeDeploymentInstanceHistoryData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeDeploymentInstanceHistoryData)} does not support writing '{format}' format.");
            }

            base.JsonModelWriteCore(writer, options);
            if (Optional.IsDefined(Properties))
            {
                writer.WritePropertyName("properties"u8);
                writer.WriteObjectValue(Properties, options);
            }
            if (Optional.IsDefined(ExtendedLocation))
            {
                writer.WritePropertyName("extendedLocation"u8);
                ((IJsonModel<ExtendedLocation>)ExtendedLocation).Write(writer, options);
            }
            if (options.Format != "W" && Optional.IsDefined(ETag))
            {
                writer.WritePropertyName("eTag"u8);
                writer.WriteStringValue(ETag.Value.ToString());
            }
        }

        EdgeDeploymentInstanceHistoryData IJsonModel<EdgeDeploymentInstanceHistoryData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeDeploymentInstanceHistoryData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeDeploymentInstanceHistoryData)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeDeploymentInstanceHistoryData(document.RootElement, options);
        }

        internal static EdgeDeploymentInstanceHistoryData DeserializeEdgeDeploymentInstanceHistoryData(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            EdgeDeploymentInstanceHistoryProperties properties = default;
            ExtendedLocation extendedLocation = default;
            ETag? etag = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            SystemData systemData = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    properties = EdgeDeploymentInstanceHistoryProperties.DeserializeEdgeDeploymentInstanceHistoryProperties(property.Value, options);
                    continue;
                }
                if (property.NameEquals("extendedLocation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    extendedLocation = ModelReaderWriter.Read<ExtendedLocation>(new BinaryData(Encoding.UTF8.GetBytes(property.Value.GetRawText())), options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                    continue;
                }
                if (property.NameEquals("eTag"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    etag = new ETag(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = ModelReaderWriter.Read<SystemData>(new BinaryData(Encoding.UTF8.GetBytes(property.Value.GetRawText())), ModelSerializationExtensions.WireOptions, AzureResourceManagerWorkloadOrchestrationContext.Default);
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeDeploymentInstanceHistoryData(
                id,
                name,
                type,
                systemData,
                properties,
                extendedLocation,
                etag,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeDeploymentInstanceHistoryData>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeDeploymentInstanceHistoryData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeDeploymentInstanceHistoryData)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeDeploymentInstanceHistoryData IPersistableModel<EdgeDeploymentInstanceHistoryData>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeDeploymentInstanceHistoryData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeDeploymentInstanceHistoryData(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeDeploymentInstanceHistoryData)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeDeploymentInstanceHistoryData>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeDeploymentInstanceHistoryResource.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A Class representing an EdgeDeploymentInstanceHistory along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier"/> you can construct an <see cref="EdgeDeploymentInstanceHistoryResource"/>
    /// from an instance of <see cref="ArmClient"/> using the GetEdgeDeploymentInstanceHistoryResource method.
    /// Otherwise you can get one from its parent resource <see cref="EdgeDeploymentInstanceResource"/> using the GetEdgeDeploymentInstanceHistory method.
    /// </summary>
    public partial class EdgeDeploymentInstanceHistoryResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="EdgeDeploymentInstanceHistoryResource"/> instance. </summary>
        /// <param name="subscriptionId"> The subscriptionId. </param>
        /// <param name="resourceGroupName"> The resourceGroupName. </param>
        /// <param name="targetName"> The targetName. </param>
        /// <param name="solutionName"> The solutionName. </param>
        /// <param name="instanceName"> The instanceName. </param>
        /// <param name="instanceHistoryName"> The instanceHistoryName. </param>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string targetName, string solutionName, string instanceName, string instanceHistoryName)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances/{instanceName}/histories/{instanceHistoryName}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _edgeDeploymentInstanceHistoryInstanceHistoriesClientDiagnostics;
        private readonly InstanceHistoriesRestOperations _edgeDeploymentInstanceHistoryInstanceHistoriesRestClient;
        private readonly EdgeDeploymentInstanceHistoryData _data;

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.Edge/targets/solutions/instances/histories";

        /// <summary> Initializes a new instance of the <see cref="EdgeDeploymentInstanceHistoryResource"/> class for mocking. </summary>
        protected EdgeDeploymentInstanceHistoryResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="EdgeDeploymentInstanceHistoryResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal EdgeDeploymentInstanceHistoryResource(ArmClient client, EdgeDeploymentInstanceHistoryData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="EdgeDeploymentInstanceHistoryResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal EdgeDeploymentInstanceHistoryResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _edgeDeploymentInstanceHistoryInstanceHistoriesClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.WorkloadOrchestration", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string edgeDeploymentInstanceHistoryInstanceHistoriesApiVersion);
            _edgeDeploymentInstanceHistoryInstanceHistoriesRestClient = new InstanceHistoriesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, edgeDeploymentInstanceHistoryInstanceHistoriesApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual EdgeDeploymentInstanceHistoryData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary>
        /// Get InstanceHistory Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances/{instanceName}/histories/{instanceHistoryName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>InstanceHistory_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDeploymentInstanceHistoryResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<EdgeDeploymentInstanceHistoryResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _edgeDeploymentInstanceHistoryInstanceHistoriesClientDiagnostics.CreateScope("EdgeDeploymentInstanceHistoryResource.Get");
            scope.Start();
            try
            {
                var response = await _edgeDeploymentInstanceHistoryInstanceHistoriesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Parent.Name, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeDeploymentInstanceHistoryResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get InstanceHistory Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances/{instanceName}/histories/{instanceHistoryName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>InstanceHistory_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDeploymentInstanceHistoryResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<EdgeDeploymentInstanceHistoryResource> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _edgeDeploymentInstanceHistoryInstanceHistoriesClientDiagnostics.CreateScope("EdgeDeploymentInstanceHistoryResource.Get");
            scope.Start();
            try
            {
                var response = _edgeDeploymentInstanceHistoryInstanceHistoriesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Parent.Name, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeDeploymentInstanceHistoryResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeDeploymentInstanceHistoryResource.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Text.Json;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    public partial class EdgeDeploymentInstanceHistoryResource : IJsonModel<EdgeDeploymentInstanceHistoryData>
    {
        private static EdgeDeploymentInstanceHistoryData s_dataDeserializationInstance;
        private static EdgeDeploymentInstanceHistoryData DataDeserializationInstance => s_dataDeserializationInstance ??= new();

        void IJsonModel<EdgeDeploymentInstanceHistoryData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options) => ((IJsonModel<EdgeDeploymentInstanceHistoryData>)Data).Write(writer, options);

        EdgeDeploymentInstanceHistoryData IJsonModel<EdgeDeploymentInstanceHistoryData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => ((IJsonModel<EdgeDeploymentInstanceHistoryData>)DataDeserializationInstance).Create(ref reader, options);

        BinaryData IPersistableModel<EdgeDeploymentInstanceHistoryData>.Write(ModelReaderWriterOptions options) => ModelReaderWriter.Write<EdgeDeploymentInstanceHistoryData>(Data, options, AzureResourceManagerWorkloadOrchestrationContext.Default);

        EdgeDeploymentInstanceHistoryData IPersistableModel<EdgeDeploymentInstanceHistoryData>.Create(BinaryData data, ModelReaderWriterOptions options) => ModelReaderWriter.Read<EdgeDeploymentInstanceHistoryData>(data, options, AzureResourceManagerWorkloadOrchestrationContext.Default);

        string IPersistableModel<EdgeDeploymentInstanceHistoryData>.GetFormatFromOptions(ModelReaderWriterOptions options) => ((IPersistableModel<EdgeDeploymentInstanceHistoryData>)DataDeserializationInstance).GetFormatFromOptions(options);
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeDeploymentInstanceResource.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A Class representing an EdgeDeploymentInstance along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier"/> you can construct an <see cref="EdgeDeploymentInstanceResource"/>
    /// from an instance of <see cref="ArmClient"/> using the GetEdgeDeploymentInstanceResource method.
    /// Otherwise you can get one from its parent resource <see cref="EdgeSolutionResource"/> using the GetEdgeDeploymentInstance method.
    /// </summary>
    public partial class EdgeDeploymentInstanceResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="EdgeDeploymentInstanceResource"/> instance. </summary>
        /// <param name="subscriptionId"> The subscriptionId. </param>
        /// <param name="resourceGroupName"> The resourceGroupName. </param>
        /// <param name="targetName"> The targetName. </param>
        /// <param name="solutionName"> The solutionName. </param>
        /// <param name="instanceName"> The instanceName. </param>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string targetName, string solutionName, string instanceName)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances/{instanceName}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _edgeDeploymentInstanceInstancesClientDiagnostics;
        private readonly InstancesRestOperations _edgeDeploymentInstanceInstancesRestClient;
        private readonly EdgeDeploymentInstanceData _data;

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.Edge/targets/solutions/instances";

        /// <summary> Initializes a new instance of the <see cref="EdgeDeploymentInstanceResource"/> class for mocking. </summary>
        protected EdgeDeploymentInstanceResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="EdgeDeploymentInstanceResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal EdgeDeploymentInstanceResource(ArmClient client, EdgeDeploymentInstanceData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="EdgeDeploymentInstanceResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal EdgeDeploymentInstanceResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _edgeDeploymentInstanceInstancesClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.WorkloadOrchestration", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string edgeDeploymentInstanceInstancesApiVersion);
            _edgeDeploymentInstanceInstancesRestClient = new InstancesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, edgeDeploymentInstanceInstancesApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual EdgeDeploymentInstanceData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary> Gets a collection of EdgeDeploymentInstanceHistoryResources in the EdgeDeploymentInstance. </summary>
        /// <returns> An object representing collection of EdgeDeploymentInstanceHistoryResources and their operations over a EdgeDeploymentInstanceHistoryResource. </returns>
        public virtual EdgeDeploymentInstanceHistoryCollection GetEdgeDeploymentInstanceHistories()
        {
            return GetCachedClient(client => new EdgeDeploymentInstanceHistoryCollection(client, Id));
        }

        /// <summary>
        /// Get InstanceHistory Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances/{instanceName}/histories/{instanceHistoryName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>InstanceHistory_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDeploymentInstanceHistoryResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="instanceHistoryName"> Name of the instance history. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="instanceHistoryName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="instanceHistoryName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<EdgeDeploymentInstanceHistoryResource>> GetEdgeDeploymentInstanceHistoryAsync(string instanceHistoryName, CancellationToken cancellationToken = default)
        {
            return await GetEdgeDeploymentInstanceHistories().GetAsync(instanceHistoryName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get InstanceHistory Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances/{instanceName}/histories/{instanceHistoryName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>InstanceHistory_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDeploymentInstanceHistoryResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="instanceHistoryName"> Name of the instance history. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="instanceHistoryName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="instanceHistoryName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<EdgeDeploymentInstanceHistoryResource> GetEdgeDeploymentInstanceHistory(string instanceHistoryName, CancellationToken cancellationToken = default)
        {
            return GetEdgeDeploymentInstanceHistories().Get(instanceHistoryName, cancellationToken);
        }

        /// <summary>
        /// Get Instance Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances/{instanceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Instance_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDeploymentInstanceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<EdgeDeploymentInstanceResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _edgeDeploymentInstanceInstancesClientDiagnostics.CreateScope("EdgeDeploymentInstanceResource.Get");
            scope.Start();
            try
            {
                var response = await _edgeDeploymentInstanceInstancesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeDeploymentInstanceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get Instance Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances/{instanceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Instance_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDeploymentInstanceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<EdgeDeploymentInstanceResource> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _edgeDeploymentInstanceInstancesClientDiagnostics.CreateScope("EdgeDeploymentInstanceResource.Get");
            scope.Start();
            try
            {
                var response = _edgeDeploymentInstanceInstancesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeDeploymentInstanceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete Instance Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances/{instanceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Instance_Delete</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDeploymentInstanceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> DeleteAsync(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _edgeDeploymentInstanceInstancesClientDiagnostics.CreateScope("EdgeDeploymentInstanceResource.Delete");
            scope.Start();
            try
            {
                var response = await _edgeDeploymentInstanceInstancesRestClient.DeleteAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadOrchestrationArmOperation(_edgeDeploymentInstanceInstancesClientDiagnostics, Pipeline, _edgeDeploymentInstanceInstancesRestClient.CreateDeleteRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete Instance Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances/{instanceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Instance_Delete</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDeploymentInstanceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation Delete(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _edgeDeploymentInstanceInstancesClientDiagnostics.CreateScope("EdgeDeploymentInstanceResource.Delete");
            scope.Start();
            try
            {
                var response = _edgeDeploymentInstanceInstancesRestClient.Delete(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken);
                var operation = new WorkloadOrchestrationArmOperation(_edgeDeploymentInstanceInstancesClientDiagnostics, Pipeline, _edgeDeploymentInstanceInstancesRestClient.CreateDeleteRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Update an Instance Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances/{instanceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Instance_Update</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDeploymentInstanceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="data"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<EdgeDeploymentInstanceResource>> UpdateAsync(WaitUntil waitUntil, EdgeDeploymentInstanceData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _edgeDeploymentInstanceInstancesClientDiagnostics.CreateScope("EdgeDeploymentInstanceResource.Update");
            scope.Start();
            try
            {
                var response = await _edgeDeploymentInstanceInstancesRestClient.UpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, data, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadOrchestrationArmOperation<EdgeDeploymentInstanceResource>(new EdgeDeploymentInstanceOperationSource(Client), _edgeDeploymentInstanceInstancesClientDiagnostics, Pipeline, _edgeDeploymentInstanceInstancesRestClient.CreateUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, data).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Update an Instance Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances/{instanceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Instance_Update</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDeploymentInstanceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="data"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<EdgeDeploymentInstanceResource> Update(WaitUntil waitUntil, EdgeDeploymentInstanceData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _edgeDeploymentInstanceInstancesClientDiagnostics.CreateScope("EdgeDeploymentInstanceResource.Update");
            scope.Start();
            try
            {
                var response = _edgeDeploymentInstanceInstancesRestClient.Update(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, data, cancellationToken);
                var operation = new WorkloadOrchestrationArmOperation<EdgeDeploymentInstanceResource>(new EdgeDeploymentInstanceOperationSource(Client), _edgeDeploymentInstanceInstancesClientDiagnostics, Pipeline, _edgeDeploymentInstanceInstancesRestClient.CreateUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, data).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeDeploymentInstanceResource.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Text.Json;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    public partial class EdgeDeploymentInstanceResource : IJsonModel<EdgeDeploymentInstanceData>
    {
        private static EdgeDeploymentInstanceData s_dataDeserializationInstance;
        private static EdgeDeploymentInstanceData DataDeserializationInstance => s_dataDeserializationInstance ??= new();

        void IJsonModel<EdgeDeploymentInstanceData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options) => ((IJsonModel<EdgeDeploymentInstanceData>)Data).Write(writer, options);

        EdgeDeploymentInstanceData IJsonModel<EdgeDeploymentInstanceData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => ((IJsonModel<EdgeDeploymentInstanceData>)DataDeserializationInstance).Create(ref reader, options);

        BinaryData IPersistableModel<EdgeDeploymentInstanceData>.Write(ModelReaderWriterOptions options) => ModelReaderWriter.Write<EdgeDeploymentInstanceData>(Data, options, AzureResourceManagerWorkloadOrchestrationContext.Default);

        EdgeDeploymentInstanceData IPersistableModel<EdgeDeploymentInstanceData>.Create(BinaryData data, ModelReaderWriterOptions options) => ModelReaderWriter.Read<EdgeDeploymentInstanceData>(data, options, AzureResourceManagerWorkloadOrchestrationContext.Default);

        string IPersistableModel<EdgeDeploymentInstanceData>.GetFormatFromOptions(ModelReaderWriterOptions options) => ((IPersistableModel<EdgeDeploymentInstanceData>)DataDeserializationInstance).GetFormatFromOptions(options);
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeDiagnosticCollection.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A class representing a collection of <see cref="EdgeDiagnosticResource"/> and their operations.
    /// Each <see cref="EdgeDiagnosticResource"/> in the collection will belong to the same instance of <see cref="ResourceGroupResource"/>.
    /// To get an <see cref="EdgeDiagnosticCollection"/> instance call the GetEdgeDiagnostics method from an instance of <see cref="ResourceGroupResource"/>.
    /// </summary>
    public partial class EdgeDiagnosticCollection : ArmCollection, IEnumerable<EdgeDiagnosticResource>, IAsyncEnumerable<EdgeDiagnosticResource>
    {
        private readonly ClientDiagnostics _edgeDiagnosticDiagnosticsClientDiagnostics;
        private readonly DiagnosticsRestOperations _edgeDiagnosticDiagnosticsRestClient;

        /// <summary> Initializes a new instance of the <see cref="EdgeDiagnosticCollection"/> class for mocking. </summary>
        protected EdgeDiagnosticCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="EdgeDiagnosticCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal EdgeDiagnosticCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _edgeDiagnosticDiagnosticsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.WorkloadOrchestration", EdgeDiagnosticResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(EdgeDiagnosticResource.ResourceType, out string edgeDiagnosticDiagnosticsApiVersion);
            _edgeDiagnosticDiagnosticsRestClient = new DiagnosticsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, edgeDiagnosticDiagnosticsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceGroupResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceGroupResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Creates new or updates existing Diagnostic resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/diagnostics/{diagnosticName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Diagnostic_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDiagnosticResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="diagnosticName"> Name of Diagnostic. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="diagnosticName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="diagnosticName"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<EdgeDiagnosticResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string diagnosticName, EdgeDiagnosticData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(diagnosticName, nameof(diagnosticName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _edgeDiagnosticDiagnosticsClientDiagnostics.CreateScope("EdgeDiagnosticCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _edgeDiagnosticDiagnosticsRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, diagnosticName, data, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadOrchestrationArmOperation<EdgeDiagnosticResource>(new EdgeDiagnosticOperationSource(Client), _edgeDiagnosticDiagnosticsClientDiagnostics, Pipeline, _edgeDiagnosticDiagnosticsRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, diagnosticName, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates new or updates existing Diagnostic resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/diagnostics/{diagnosticName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Diagnostic_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDiagnosticResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="diagnosticName"> Name of Diagnostic. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="diagnosticName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="diagnosticName"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<EdgeDiagnosticResource> CreateOrUpdate(WaitUntil waitUntil, string diagnosticName, EdgeDiagnosticData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(diagnosticName, nameof(diagnosticName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _edgeDiagnosticDiagnosticsClientDiagnostics.CreateScope("EdgeDiagnosticCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _edgeDiagnosticDiagnosticsRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, diagnosticName, data, cancellationToken);
                var operation = new WorkloadOrchestrationArmOperation<EdgeDiagnosticResource>(new EdgeDiagnosticOperationSource(Client), _edgeDiagnosticDiagnosticsClientDiagnostics, Pipeline, _edgeDiagnosticDiagnosticsRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, diagnosticName, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Returns details of specified Diagnostic resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/diagnostics/{diagnosticName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Diagnostic_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDiagnosticResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="diagnosticName"> Name of Diagnostic. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="diagnosticName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="diagnosticName"/> is null. </exception>
        public virtual async Task<Response<EdgeDiagnosticResource>> GetAsync(string diagnosticName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(diagnosticName, nameof(diagnosticName));

            using var scope = _edgeDiagnosticDiagnosticsClientDiagnostics.CreateScope("EdgeDiagnosticCollection.Get");
            scope.Start();
            try
            {
                var response = await _edgeDiagnosticDiagnosticsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, diagnosticName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeDiagnosticResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Returns details of specified Diagnostic resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/diagnostics/{diagnosticName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Diagnostic_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDiagnosticResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="diagnosticName"> Name of Diagnostic. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="diagnosticName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="diagnosticName"/> is null. </exception>
        public virtual Response<EdgeDiagnosticResource> Get(string diagnosticName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(diagnosticName, nameof(diagnosticName));

            using var scope = _edgeDiagnosticDiagnosticsClientDiagnostics.CreateScope("EdgeDiagnosticCollection.Get");
            scope.Start();
            try
            {
                var response = _edgeDiagnosticDiagnosticsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, diagnosticName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeDiagnosticResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Returns a collection of Diagnostic resources within the resource group.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/diagnostics</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Diagnostic_ListByResourceGroup</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDiagnosticResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="EdgeDiagnosticResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<EdgeDiagnosticResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _edgeDiagnosticDiagnosticsRestClient.CreateListByResourceGroupRequest(Id.SubscriptionId, Id.ResourceGroupName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _edgeDiagnosticDiagnosticsRestClient.CreateListByResourceGroupNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new EdgeDiagnosticResource(Client, EdgeDiagnosticData.DeserializeEdgeDiagnosticData(e)), _edgeDiagnosticDiagnosticsClientDiagnostics, Pipeline, "EdgeDiagnosticCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Returns a collection of Diagnostic resources within the resource group.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/diagnostics</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Diagnostic_ListByResourceGroup</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDiagnosticResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="EdgeDiagnosticResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<EdgeDiagnosticResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _edgeDiagnosticDiagnosticsRestClient.CreateListByResourceGroupRequest(Id.SubscriptionId, Id.ResourceGroupName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _edgeDiagnosticDiagnosticsRestClient.CreateListByResourceGroupNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new EdgeDiagnosticResource(Client, EdgeDiagnosticData.DeserializeEdgeDiagnosticData(e)), _edgeDiagnosticDiagnosticsClientDiagnostics, Pipeline, "EdgeDiagnosticCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/diagnostics/{diagnosticName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Diagnostic_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDiagnosticResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="diagnosticName"> Name of Diagnostic. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="diagnosticName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="diagnosticName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string diagnosticName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(diagnosticName, nameof(diagnosticName));

            using var scope = _edgeDiagnosticDiagnosticsClientDiagnostics.CreateScope("EdgeDiagnosticCollection.Exists");
            scope.Start();
            try
            {
                var response = await _edgeDiagnosticDiagnosticsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, diagnosticName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/diagnostics/{diagnosticName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Diagnostic_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDiagnosticResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="diagnosticName"> Name of Diagnostic. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="diagnosticName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="diagnosticName"/> is null. </exception>
        public virtual Response<bool> Exists(string diagnosticName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(diagnosticName, nameof(diagnosticName));

            using var scope = _edgeDiagnosticDiagnosticsClientDiagnostics.CreateScope("EdgeDiagnosticCollection.Exists");
            scope.Start();
            try
            {
                var response = _edgeDiagnosticDiagnosticsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, diagnosticName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/diagnostics/{diagnosticName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Diagnostic_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDiagnosticResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="diagnosticName"> Name of Diagnostic. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="diagnosticName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="diagnosticName"/> is null. </exception>
        public virtual async Task<NullableResponse<EdgeDiagnosticResource>> GetIfExistsAsync(string diagnosticName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(diagnosticName, nameof(diagnosticName));

            using var scope = _edgeDiagnosticDiagnosticsClientDiagnostics.CreateScope("EdgeDiagnosticCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _edgeDiagnosticDiagnosticsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, diagnosticName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<EdgeDiagnosticResource>(response.GetRawResponse());
                return Response.FromValue(new EdgeDiagnosticResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/diagnostics/{diagnosticName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Diagnostic_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDiagnosticResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="diagnosticName"> Name of Diagnostic. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="diagnosticName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="diagnosticName"/> is null. </exception>
        public virtual NullableResponse<EdgeDiagnosticResource> GetIfExists(string diagnosticName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(diagnosticName, nameof(diagnosticName));

            using var scope = _edgeDiagnosticDiagnosticsClientDiagnostics.CreateScope("EdgeDiagnosticCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _edgeDiagnosticDiagnosticsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, diagnosticName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<EdgeDiagnosticResource>(response.GetRawResponse());
                return Response.FromValue(new EdgeDiagnosticResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<EdgeDiagnosticResource> IEnumerable<EdgeDiagnosticResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<EdgeDiagnosticResource> IAsyncEnumerable<EdgeDiagnosticResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeDiagnosticData.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A class representing the EdgeDiagnostic data model.
    /// A Diagnostic resource.
    /// </summary>
    public partial class EdgeDiagnosticData : TrackedResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeDiagnosticData"/>. </summary>
        /// <param name="location"> The location. </param>
        public EdgeDiagnosticData(AzureLocation location) : base(location)
        {
        }

        /// <summary> Initializes a new instance of <see cref="EdgeDiagnosticData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="extendedLocation"></param>
        /// <param name="etag"> If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeDiagnosticData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, IDictionary<string, string> tags, AzureLocation location, EdgeDiagnosticProperties properties, ExtendedLocation extendedLocation, ETag? etag, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData, tags, location)
        {
            Properties = properties;
            ExtendedLocation = extendedLocation;
            ETag = etag;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="EdgeDiagnosticData"/> for deserialization. </summary>
        internal EdgeDiagnosticData()
        {
        }

        /// <summary> The resource-specific properties for this resource. </summary>
        internal EdgeDiagnosticProperties Properties { get; set; }
        /// <summary> The status of the last operation. </summary>
        public WorkloadOrchestrationProvisioningState? EdgeDiagnosticProvisioningState
        {
            get => Properties is null ? default : Properties.ProvisioningState;
        }

        /// <summary> Gets or sets the extended location. </summary>
        public ExtendedLocation ExtendedLocation { get; set; }
        /// <summary> If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. </summary>
        public ETag? ETag { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeDiagnosticData.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    public partial class EdgeDiagnosticData : IUtf8JsonSerializable, IJsonModel<EdgeDiagnosticData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeDiagnosticData>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeDiagnosticData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeDiagnosticData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeDiagnosticData)} does not support writing '{format}' format.");
            }

            base.JsonModelWriteCore(writer, options);
            if (Optional.IsDefined(Properties))
            {
                writer.WritePropertyName("properties"u8);
                writer.WriteObjectValue(Properties, options);
            }
            if (Optional.IsDefined(ExtendedLocation))
            {
                writer.WritePropertyName("extendedLocation"u8);
                ((IJsonModel<ExtendedLocation>)ExtendedLocation).Write(writer, options);
            }
            if (options.Format != "W" && Optional.IsDefined(ETag))
            {
                writer.WritePropertyName("eTag"u8);
                writer.WriteStringValue(ETag.Value.ToString());
            }
        }

        EdgeDiagnosticData IJsonModel<EdgeDiagnosticData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeDiagnosticData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeDiagnosticData)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeDiagnosticData(document.RootElement, options);
        }

        internal static EdgeDiagnosticData DeserializeEdgeDiagnosticData(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            EdgeDiagnosticProperties properties = default;
            ExtendedLocation extendedLocation = default;
            ETag? etag = default;
            IDictionary<string, string> tags = default;
            AzureLocation location = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            SystemData systemData = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    properties = EdgeDiagnosticProperties.DeserializeEdgeDiagnosticProperties(property.Value, options);
                    continue;
                }
                if (property.NameEquals("extendedLocation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    extendedLocation = ModelReaderWriter.Read<ExtendedLocation>(new BinaryData(Encoding.UTF8.GetBytes(property.Value.GetRawText())), options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                    continue;
                }
                if (property.NameEquals("eTag"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    etag = new ETag(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("tags"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("location"u8))
                {
                    location = new AzureLocation(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = ModelReaderWriter.Read<SystemData>(new BinaryData(Encoding.UTF8.GetBytes(property.Value.GetRawText())), ModelSerializationExtensions.WireOptions, AzureResourceManagerWorkloadOrchestrationContext.Default);
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeDiagnosticData(
                id,
                name,
                type,
                systemData,
                tags ?? new ChangeTrackingDictionary<string, string>(),
                location,
                properties,
                extendedLocation,
                etag,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeDiagnosticData>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeDiagnosticData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeDiagnosticData)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeDiagnosticData IPersistableModel<EdgeDiagnosticData>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeDiagnosticData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeDiagnosticData(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeDiagnosticData)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeDiagnosticData>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeDiagnosticResource.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A Class representing an EdgeDiagnostic along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier"/> you can construct an <see cref="EdgeDiagnosticResource"/>
    /// from an instance of <see cref="ArmClient"/> using the GetEdgeDiagnosticResource method.
    /// Otherwise you can get one from its parent resource <see cref="ResourceGroupResource"/> using the GetEdgeDiagnostic method.
    /// </summary>
    public partial class EdgeDiagnosticResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="EdgeDiagnosticResource"/> instance. </summary>
        /// <param name="subscriptionId"> The subscriptionId. </param>
        /// <param name="resourceGroupName"> The resourceGroupName. </param>
        /// <param name="diagnosticName"> The diagnosticName. </param>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string diagnosticName)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/diagnostics/{diagnosticName}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _edgeDiagnosticDiagnosticsClientDiagnostics;
        private readonly DiagnosticsRestOperations _edgeDiagnosticDiagnosticsRestClient;
        private readonly EdgeDiagnosticData _data;

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.Edge/diagnostics";

        /// <summary> Initializes a new instance of the <see cref="EdgeDiagnosticResource"/> class for mocking. </summary>
        protected EdgeDiagnosticResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="EdgeDiagnosticResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal EdgeDiagnosticResource(ArmClient client, EdgeDiagnosticData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="EdgeDiagnosticResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal EdgeDiagnosticResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _edgeDiagnosticDiagnosticsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.WorkloadOrchestration", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string edgeDiagnosticDiagnosticsApiVersion);
            _edgeDiagnosticDiagnosticsRestClient = new DiagnosticsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, edgeDiagnosticDiagnosticsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual EdgeDiagnosticData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary>
        /// Returns details of specified Diagnostic resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/diagnostics/{diagnosticName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Diagnostic_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDiagnosticResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<EdgeDiagnosticResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _edgeDiagnosticDiagnosticsClientDiagnostics.CreateScope("EdgeDiagnosticResource.Get");
            scope.Start();
            try
            {
                var response = await _edgeDiagnosticDiagnosticsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeDiagnosticResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Returns details of specified Diagnostic resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/diagnostics/{diagnosticName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Diagnostic_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDiagnosticResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<EdgeDiagnosticResource> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _edgeDiagnosticDiagnosticsClientDiagnostics.CreateScope("EdgeDiagnosticResource.Get");
            scope.Start();
            try
            {
                var response = _edgeDiagnosticDiagnosticsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeDiagnosticResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Deletes specified Diagnostic resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/diagnostics/{diagnosticName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Diagnostic_Delete</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDiagnosticResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> DeleteAsync(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _edgeDiagnosticDiagnosticsClientDiagnostics.CreateScope("EdgeDiagnosticResource.Delete");
            scope.Start();
            try
            {
                var response = await _edgeDiagnosticDiagnosticsRestClient.DeleteAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadOrchestrationArmOperation(_edgeDiagnosticDiagnosticsClientDiagnostics, Pipeline, _edgeDiagnosticDiagnosticsRestClient.CreateDeleteRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Deletes specified Diagnostic resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/diagnostics/{diagnosticName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Diagnostic_Delete</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDiagnosticResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation Delete(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _edgeDiagnosticDiagnosticsClientDiagnostics.CreateScope("EdgeDiagnosticResource.Delete");
            scope.Start();
            try
            {
                var response = _edgeDiagnosticDiagnosticsRestClient.Delete(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                var operation = new WorkloadOrchestrationArmOperation(_edgeDiagnosticDiagnosticsClientDiagnostics, Pipeline, _edgeDiagnosticDiagnosticsRestClient.CreateDeleteRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Updates existing Diagnostic resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/diagnostics/{diagnosticName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Diagnostic_Update</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDiagnosticResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="patch"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="patch"/> is null. </exception>
        public virtual async Task<ArmOperation<EdgeDiagnosticResource>> UpdateAsync(WaitUntil waitUntil, EdgeDiagnosticPatch patch, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(patch, nameof(patch));

            using var scope = _edgeDiagnosticDiagnosticsClientDiagnostics.CreateScope("EdgeDiagnosticResource.Update");
            scope.Start();
            try
            {
                var response = await _edgeDiagnosticDiagnosticsRestClient.UpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, patch, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadOrchestrationArmOperation<EdgeDiagnosticResource>(new EdgeDiagnosticOperationSource(Client), _edgeDiagnosticDiagnosticsClientDiagnostics, Pipeline, _edgeDiagnosticDiagnosticsRestClient.CreateUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, patch).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Updates existing Diagnostic resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/diagnostics/{diagnosticName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Diagnostic_Update</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDiagnosticResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="patch"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="patch"/> is null. </exception>
        public virtual ArmOperation<EdgeDiagnosticResource> Update(WaitUntil waitUntil, EdgeDiagnosticPatch patch, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(patch, nameof(patch));

            using var scope = _edgeDiagnosticDiagnosticsClientDiagnostics.CreateScope("EdgeDiagnosticResource.Update");
            scope.Start();
            try
            {
                var response = _edgeDiagnosticDiagnosticsRestClient.Update(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, patch, cancellationToken);
                var operation = new WorkloadOrchestrationArmOperation<EdgeDiagnosticResource>(new EdgeDiagnosticOperationSource(Client), _edgeDiagnosticDiagnosticsClientDiagnostics, Pipeline, _edgeDiagnosticDiagnosticsRestClient.CreateUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, patch).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Add a tag to the current resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/diagnostics/{diagnosticName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Diagnostic_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDiagnosticResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="value"> The value for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> or <paramref name="value"/> is null. </exception>
        public virtual async Task<Response<EdgeDiagnosticResource>> AddTagAsync(string key, string value, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(key, nameof(key));
            Argument.AssertNotNull(value, nameof(value));

            using var scope = _edgeDiagnosticDiagnosticsClientDiagnostics.CreateScope("EdgeDiagnosticResource.AddTag");
            scope.Start();
            try
            {
                if (await CanUseTagResourceAsync(cancellationToken: cancellationToken).ConfigureAwait(false))
                {
                    var originalTags = await GetTagResource().GetAsync(cancellationToken).ConfigureAwait(false);
                    originalTags.Value.Data.TagValues[key] = value;
                    await GetTagResource().CreateOrUpdateAsync(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken).ConfigureAwait(false);
                    var originalResponse = await _edgeDiagnosticDiagnosticsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                    return Response.FromValue(new EdgeDiagnosticResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
                }
                else
                {
                    var current = (await GetAsync(cancellationToken: cancellationToken).ConfigureAwait(false)).Value.Data;
                    var patch = new EdgeDiagnosticPatch();
                    foreach (var tag in current.Tags)
                    {
                        patch.Tags.Add(tag);
                    }
                    patch.Tags[key] = value;
                    var result = await UpdateAsync(WaitUntil.Completed, patch, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Response.FromValue(result.Value, result.GetRawResponse());
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Add a tag to the current resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/diagnostics/{diagnosticName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Diagnostic_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDiagnosticResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="value"> The value for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> or <paramref name="value"/> is null. </exception>
        public virtual Response<EdgeDiagnosticResource> AddTag(string key, string value, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(key, nameof(key));
            Argument.AssertNotNull(value, nameof(value));

            using var scope = _edgeDiagnosticDiagnosticsClientDiagnostics.CreateScope("EdgeDiagnosticResource.AddTag");
            scope.Start();
            try
            {
                if (CanUseTagResource(cancellationToken: cancellationToken))
                {
                    var originalTags = GetTagResource().Get(cancellationToken);
                    originalTags.Value.Data.TagValues[key] = value;
                    GetTagResource().CreateOrUpdate(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken);
                    var originalResponse = _edgeDiagnosticDiagnosticsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                    return Response.FromValue(new EdgeDiagnosticResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
                }
                else
                {
                    var current = Get(cancellationToken: cancellationToken).Value.Data;
                    var patch = new EdgeDiagnosticPatch();
                    foreach (var tag in current.Tags)
                    {
                        patch.Tags.Add(tag);
                    }
                    patch.Tags[key] = value;
                    var result = Update(WaitUntil.Completed, patch, cancellationToken: cancellationToken);
                    return Response.FromValue(result.Value, result.GetRawResponse());
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Replace the tags on the resource with the given set.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/diagnostics/{diagnosticName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Diagnostic_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDiagnosticResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="tags"> The set of tags to use as replacement. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tags"/> is null. </exception>
        public virtual async Task<Response<EdgeDiagnosticResource>> SetTagsAsync(IDictionary<string, string> tags, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(tags, nameof(tags));

            using var scope = _edgeDiagnosticDiagnosticsClientDiagnostics.CreateScope("EdgeDiagnosticResource.SetTags");
            scope.Start();
            try
            {
                if (await CanUseTagResourceAsync(cancellationToken: cancellationToken).ConfigureAwait(false))
                {
                    await GetTagResource().DeleteAsync(WaitUntil.Completed, cancellationToken: cancellationToken).ConfigureAwait(false);
                    var originalTags = await GetTagResource().GetAsync(cancellationToken).ConfigureAwait(false);
                    originalTags.Value.Data.TagValues.ReplaceWith(tags);
                    await GetTagResource().CreateOrUpdateAsync(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken).ConfigureAwait(false);
                    var originalResponse = await _edgeDiagnosticDiagnosticsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                    return Response.FromValue(new EdgeDiagnosticResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
                }
                else
                {
                    var current = (await GetAsync(cancellationToken: cancellationToken).ConfigureAwait(false)).Value.Data;
                    var patch = new EdgeDiagnosticPatch();
                    patch.Tags.ReplaceWith(tags);
                    var result = await UpdateAsync(WaitUntil.Completed, patch, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Response.FromValue(result.Value, result.GetRawResponse());
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Replace the tags on the resource with the given set.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/diagnostics/{diagnosticName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Diagnostic_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDiagnosticResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="tags"> The set of tags to use as replacement. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tags"/> is null. </exception>
        public virtual Response<EdgeDiagnosticResource> SetTags(IDictionary<string, string> tags, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(tags, nameof(tags));

            using var scope = _edgeDiagnosticDiagnosticsClientDiagnostics.CreateScope("EdgeDiagnosticResource.SetTags");
            scope.Start();
            try
            {
                if (CanUseTagResource(cancellationToken: cancellationToken))
                {
                    GetTagResource().Delete(WaitUntil.Completed, cancellationToken: cancellationToken);
                    var originalTags = GetTagResource().Get(cancellationToken);
                    originalTags.Value.Data.TagValues.ReplaceWith(tags);
                    GetTagResource().CreateOrUpdate(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken);
                    var originalResponse = _edgeDiagnosticDiagnosticsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                    return Response.FromValue(new EdgeDiagnosticResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
                }
                else
                {
                    var current = Get(cancellationToken: cancellationToken).Value.Data;
                    var patch = new EdgeDiagnosticPatch();
                    patch.Tags.ReplaceWith(tags);
                    var result = Update(WaitUntil.Completed, patch, cancellationToken: cancellationToken);
                    return Response.FromValue(result.Value, result.GetRawResponse());
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Removes a tag by key from the resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/diagnostics/{diagnosticName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Diagnostic_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDiagnosticResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> is null. </exception>
        public virtual async Task<Response<EdgeDiagnosticResource>> RemoveTagAsync(string key, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(key, nameof(key));

            using var scope = _edgeDiagnosticDiagnosticsClientDiagnostics.CreateScope("EdgeDiagnosticResource.RemoveTag");
            scope.Start();
            try
            {
                if (await CanUseTagResourceAsync(cancellationToken: cancellationToken).ConfigureAwait(false))
                {
                    var originalTags = await GetTagResource().GetAsync(cancellationToken).ConfigureAwait(false);
                    originalTags.Value.Data.TagValues.Remove(key);
                    await GetTagResource().CreateOrUpdateAsync(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken).ConfigureAwait(false);
                    var originalResponse = await _edgeDiagnosticDiagnosticsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                    return Response.FromValue(new EdgeDiagnosticResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
                }
                else
                {
                    var current = (await GetAsync(cancellationToken: cancellationToken).ConfigureAwait(false)).Value.Data;
                    var patch = new EdgeDiagnosticPatch();
                    foreach (var tag in current.Tags)
                    {
                        patch.Tags.Add(tag);
                    }
                    patch.Tags.Remove(key);
                    var result = await UpdateAsync(WaitUntil.Completed, patch, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Response.FromValue(result.Value, result.GetRawResponse());
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Removes a tag by key from the resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/diagnostics/{diagnosticName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Diagnostic_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDiagnosticResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> is null. </exception>
        public virtual Response<EdgeDiagnosticResource> RemoveTag(string key, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(key, nameof(key));

            using var scope = _edgeDiagnosticDiagnosticsClientDiagnostics.CreateScope("EdgeDiagnosticResource.RemoveTag");
            scope.Start();
            try
            {
                if (CanUseTagResource(cancellationToken: cancellationToken))
                {
                    var originalTags = GetTagResource().Get(cancellationToken);
                    originalTags.Value.Data.TagValues.Remove(key);
                    GetTagResource().CreateOrUpdate(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken);
                    var originalResponse = _edgeDiagnosticDiagnosticsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                    return Response.FromValue(new EdgeDiagnosticResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
                }
                else
                {
                    var current = Get(cancellationToken: cancellationToken).Value.Data;
                    var patch = new EdgeDiagnosticPatch();
                    foreach (var tag in current.Tags)
                    {
                        patch.Tags.Add(tag);
                    }
                    patch.Tags.Remove(key);
                    var result = Update(WaitUntil.Completed, patch, cancellationToken: cancellationToken);
                    return Response.FromValue(result.Value, result.GetRawResponse());
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeDiagnosticResource.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Text.Json;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    public partial class EdgeDiagnosticResource : IJsonModel<EdgeDiagnosticData>
    {
        private static EdgeDiagnosticData s_dataDeserializationInstance;
        private static EdgeDiagnosticData DataDeserializationInstance => s_dataDeserializationInstance ??= new();

        void IJsonModel<EdgeDiagnosticData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options) => ((IJsonModel<EdgeDiagnosticData>)Data).Write(writer, options);

        EdgeDiagnosticData IJsonModel<EdgeDiagnosticData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => ((IJsonModel<EdgeDiagnosticData>)DataDeserializationInstance).Create(ref reader, options);

        BinaryData IPersistableModel<EdgeDiagnosticData>.Write(ModelReaderWriterOptions options) => ModelReaderWriter.Write<EdgeDiagnosticData>(Data, options, AzureResourceManagerWorkloadOrchestrationContext.Default);

        EdgeDiagnosticData IPersistableModel<EdgeDiagnosticData>.Create(BinaryData data, ModelReaderWriterOptions options) => ModelReaderWriter.Read<EdgeDiagnosticData>(data, options, AzureResourceManagerWorkloadOrchestrationContext.Default);

        string IPersistableModel<EdgeDiagnosticData>.GetFormatFromOptions(ModelReaderWriterOptions options) => ((IPersistableModel<EdgeDiagnosticData>)DataDeserializationInstance).GetFormatFromOptions(options);
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeDynamicSchemaCollection.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A class representing a collection of <see cref="EdgeDynamicSchemaResource"/> and their operations.
    /// Each <see cref="EdgeDynamicSchemaResource"/> in the collection will belong to the same instance of <see cref="EdgeSchemaResource"/>.
    /// To get an <see cref="EdgeDynamicSchemaCollection"/> instance call the GetEdgeDynamicSchemas method from an instance of <see cref="EdgeSchemaResource"/>.
    /// </summary>
    public partial class EdgeDynamicSchemaCollection : ArmCollection, IEnumerable<EdgeDynamicSchemaResource>, IAsyncEnumerable<EdgeDynamicSchemaResource>
    {
        private readonly ClientDiagnostics _edgeDynamicSchemaDynamicSchemasClientDiagnostics;
        private readonly DynamicSchemasRestOperations _edgeDynamicSchemaDynamicSchemasRestClient;

        /// <summary> Initializes a new instance of the <see cref="EdgeDynamicSchemaCollection"/> class for mocking. </summary>
        protected EdgeDynamicSchemaCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="EdgeDynamicSchemaCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal EdgeDynamicSchemaCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _edgeDynamicSchemaDynamicSchemasClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.WorkloadOrchestration", EdgeDynamicSchemaResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(EdgeDynamicSchemaResource.ResourceType, out string edgeDynamicSchemaDynamicSchemasApiVersion);
            _edgeDynamicSchemaDynamicSchemasRestClient = new DynamicSchemasRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, edgeDynamicSchemaDynamicSchemasApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != EdgeSchemaResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, EdgeSchemaResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Create or update a DynamicSchema Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas/{dynamicSchemaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DynamicSchema_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDynamicSchemaResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="dynamicSchemaName"> The name of the DynamicSchema. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dynamicSchemaName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dynamicSchemaName"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<EdgeDynamicSchemaResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string dynamicSchemaName, EdgeDynamicSchemaData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dynamicSchemaName, nameof(dynamicSchemaName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _edgeDynamicSchemaDynamicSchemasClientDiagnostics.CreateScope("EdgeDynamicSchemaCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _edgeDynamicSchemaDynamicSchemasRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, dynamicSchemaName, data, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadOrchestrationArmOperation<EdgeDynamicSchemaResource>(new EdgeDynamicSchemaOperationSource(Client), _edgeDynamicSchemaDynamicSchemasClientDiagnostics, Pipeline, _edgeDynamicSchemaDynamicSchemasRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, dynamicSchemaName, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create or update a DynamicSchema Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas/{dynamicSchemaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DynamicSchema_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDynamicSchemaResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="dynamicSchemaName"> The name of the DynamicSchema. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dynamicSchemaName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dynamicSchemaName"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<EdgeDynamicSchemaResource> CreateOrUpdate(WaitUntil waitUntil, string dynamicSchemaName, EdgeDynamicSchemaData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dynamicSchemaName, nameof(dynamicSchemaName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _edgeDynamicSchemaDynamicSchemasClientDiagnostics.CreateScope("EdgeDynamicSchemaCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _edgeDynamicSchemaDynamicSchemasRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, dynamicSchemaName, data, cancellationToken);
                var operation = new WorkloadOrchestrationArmOperation<EdgeDynamicSchemaResource>(new EdgeDynamicSchemaOperationSource(Client), _edgeDynamicSchemaDynamicSchemasClientDiagnostics, Pipeline, _edgeDynamicSchemaDynamicSchemasRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, dynamicSchemaName, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a DynamicSchema Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas/{dynamicSchemaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DynamicSchema_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDynamicSchemaResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="dynamicSchemaName"> The name of the DynamicSchema. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dynamicSchemaName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dynamicSchemaName"/> is null. </exception>
        public virtual async Task<Response<EdgeDynamicSchemaResource>> GetAsync(string dynamicSchemaName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dynamicSchemaName, nameof(dynamicSchemaName));

            using var scope = _edgeDynamicSchemaDynamicSchemasClientDiagnostics.CreateScope("EdgeDynamicSchemaCollection.Get");
            scope.Start();
            try
            {
                var response = await _edgeDynamicSchemaDynamicSchemasRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, dynamicSchemaName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeDynamicSchemaResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a DynamicSchema Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas/{dynamicSchemaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DynamicSchema_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDynamicSchemaResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="dynamicSchemaName"> The name of the DynamicSchema. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dynamicSchemaName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dynamicSchemaName"/> is null. </exception>
        public virtual Response<EdgeDynamicSchemaResource> Get(string dynamicSchemaName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dynamicSchemaName, nameof(dynamicSchemaName));

            using var scope = _edgeDynamicSchemaDynamicSchemasClientDiagnostics.CreateScope("EdgeDynamicSchemaCollection.Get");
            scope.Start();
            try
            {
                var response = _edgeDynamicSchemaDynamicSchemasRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, dynamicSchemaName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeDynamicSchemaResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List by Schema
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DynamicSchema_ListBySchema</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDynamicSchemaResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="EdgeDynamicSchemaResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<EdgeDynamicSchemaResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _edgeDynamicSchemaDynamicSchemasRestClient.CreateListBySchemaRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _edgeDynamicSchemaDynamicSchemasRestClient.CreateListBySchemaNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new EdgeDynamicSchemaResource(Client, EdgeDynamicSchemaData.DeserializeEdgeDynamicSchemaData(e)), _edgeDynamicSchemaDynamicSchemasClientDiagnostics, Pipeline, "EdgeDynamicSchemaCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List by Schema
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DynamicSchema_ListBySchema</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDynamicSchemaResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="EdgeDynamicSchemaResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<EdgeDynamicSchemaResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _edgeDynamicSchemaDynamicSchemasRestClient.CreateListBySchemaRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _edgeDynamicSchemaDynamicSchemasRestClient.CreateListBySchemaNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new EdgeDynamicSchemaResource(Client, EdgeDynamicSchemaData.DeserializeEdgeDynamicSchemaData(e)), _edgeDynamicSchemaDynamicSchemasClientDiagnostics, Pipeline, "EdgeDynamicSchemaCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas/{dynamicSchemaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DynamicSchema_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDynamicSchemaResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="dynamicSchemaName"> The name of the DynamicSchema. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dynamicSchemaName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dynamicSchemaName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string dynamicSchemaName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dynamicSchemaName, nameof(dynamicSchemaName));

            using var scope = _edgeDynamicSchemaDynamicSchemasClientDiagnostics.CreateScope("EdgeDynamicSchemaCollection.Exists");
            scope.Start();
            try
            {
                var response = await _edgeDynamicSchemaDynamicSchemasRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, dynamicSchemaName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas/{dynamicSchemaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DynamicSchema_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDynamicSchemaResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="dynamicSchemaName"> The name of the DynamicSchema. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dynamicSchemaName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dynamicSchemaName"/> is null. </exception>
        public virtual Response<bool> Exists(string dynamicSchemaName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dynamicSchemaName, nameof(dynamicSchemaName));

            using var scope = _edgeDynamicSchemaDynamicSchemasClientDiagnostics.CreateScope("EdgeDynamicSchemaCollection.Exists");
            scope.Start();
            try
            {
                var response = _edgeDynamicSchemaDynamicSchemasRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, dynamicSchemaName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas/{dynamicSchemaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DynamicSchema_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDynamicSchemaResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="dynamicSchemaName"> The name of the DynamicSchema. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dynamicSchemaName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dynamicSchemaName"/> is null. </exception>
        public virtual async Task<NullableResponse<EdgeDynamicSchemaResource>> GetIfExistsAsync(string dynamicSchemaName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dynamicSchemaName, nameof(dynamicSchemaName));

            using var scope = _edgeDynamicSchemaDynamicSchemasClientDiagnostics.CreateScope("EdgeDynamicSchemaCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _edgeDynamicSchemaDynamicSchemasRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, dynamicSchemaName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<EdgeDynamicSchemaResource>(response.GetRawResponse());
                return Response.FromValue(new EdgeDynamicSchemaResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas/{dynamicSchemaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DynamicSchema_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDynamicSchemaResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="dynamicSchemaName"> The name of the DynamicSchema. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dynamicSchemaName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dynamicSchemaName"/> is null. </exception>
        public virtual NullableResponse<EdgeDynamicSchemaResource> GetIfExists(string dynamicSchemaName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dynamicSchemaName, nameof(dynamicSchemaName));

            using var scope = _edgeDynamicSchemaDynamicSchemasClientDiagnostics.CreateScope("EdgeDynamicSchemaCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _edgeDynamicSchemaDynamicSchemasRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, dynamicSchemaName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<EdgeDynamicSchemaResource>(response.GetRawResponse());
                return Response.FromValue(new EdgeDynamicSchemaResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<EdgeDynamicSchemaResource> IEnumerable<EdgeDynamicSchemaResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<EdgeDynamicSchemaResource> IAsyncEnumerable<EdgeDynamicSchemaResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeDynamicSchemaData.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A class representing the EdgeDynamicSchema data model.
    /// DynamicSchema Resource
    /// </summary>
    public partial class EdgeDynamicSchemaData : ResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeDynamicSchemaData"/>. </summary>
        public EdgeDynamicSchemaData()
        {
        }

        /// <summary> Initializes a new instance of <see cref="EdgeDynamicSchemaData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="etag"> If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeDynamicSchemaData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, EdgeDynamicSchemaProperties properties, ETag? etag, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData)
        {
            Properties = properties;
            ETag = etag;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The resource-specific properties for this resource. </summary>
        public EdgeDynamicSchemaProperties Properties { get; set; }
        /// <summary> If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. </summary>
        public ETag? ETag { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeDynamicSchemaData.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    public partial class EdgeDynamicSchemaData : IUtf8JsonSerializable, IJsonModel<EdgeDynamicSchemaData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeDynamicSchemaData>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeDynamicSchemaData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeDynamicSchemaData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeDynamicSchemaData)} does not support writing '{format}' format.");
            }

            base.JsonModelWriteCore(writer, options);
            if (Optional.IsDefined(Properties))
            {
                writer.WritePropertyName("properties"u8);
                writer.WriteObjectValue(Properties, options);
            }
            if (options.Format != "W" && Optional.IsDefined(ETag))
            {
                writer.WritePropertyName("eTag"u8);
                writer.WriteStringValue(ETag.Value.ToString());
            }
        }

        EdgeDynamicSchemaData IJsonModel<EdgeDynamicSchemaData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeDynamicSchemaData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeDynamicSchemaData)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeDynamicSchemaData(document.RootElement, options);
        }

        internal static EdgeDynamicSchemaData DeserializeEdgeDynamicSchemaData(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            EdgeDynamicSchemaProperties properties = default;
            ETag? etag = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            SystemData systemData = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    properties = EdgeDynamicSchemaProperties.DeserializeEdgeDynamicSchemaProperties(property.Value, options);
                    continue;
                }
                if (property.NameEquals("eTag"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    etag = new ETag(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = ModelReaderWriter.Read<SystemData>(new BinaryData(Encoding.UTF8.GetBytes(property.Value.GetRawText())), ModelSerializationExtensions.WireOptions, AzureResourceManagerWorkloadOrchestrationContext.Default);
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeDynamicSchemaData(
                id,
                name,
                type,
                systemData,
                properties,
                etag,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeDynamicSchemaData>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeDynamicSchemaData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeDynamicSchemaData)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeDynamicSchemaData IPersistableModel<EdgeDynamicSchemaData>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeDynamicSchemaData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeDynamicSchemaData(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeDynamicSchemaData)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeDynamicSchemaData>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeDynamicSchemaResource.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A Class representing an EdgeDynamicSchema along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier"/> you can construct an <see cref="EdgeDynamicSchemaResource"/>
    /// from an instance of <see cref="ArmClient"/> using the GetEdgeDynamicSchemaResource method.
    /// Otherwise you can get one from its parent resource <see cref="EdgeSchemaResource"/> using the GetEdgeDynamicSchema method.
    /// </summary>
    public partial class EdgeDynamicSchemaResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="EdgeDynamicSchemaResource"/> instance. </summary>
        /// <param name="subscriptionId"> The subscriptionId. </param>
        /// <param name="resourceGroupName"> The resourceGroupName. </param>
        /// <param name="schemaName"> The schemaName. </param>
        /// <param name="dynamicSchemaName"> The dynamicSchemaName. </param>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string schemaName, string dynamicSchemaName)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas/{dynamicSchemaName}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _edgeDynamicSchemaDynamicSchemasClientDiagnostics;
        private readonly DynamicSchemasRestOperations _edgeDynamicSchemaDynamicSchemasRestClient;
        private readonly EdgeDynamicSchemaData _data;

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.Edge/schemas/dynamicSchemas";

        /// <summary> Initializes a new instance of the <see cref="EdgeDynamicSchemaResource"/> class for mocking. </summary>
        protected EdgeDynamicSchemaResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="EdgeDynamicSchemaResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal EdgeDynamicSchemaResource(ArmClient client, EdgeDynamicSchemaData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="EdgeDynamicSchemaResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal EdgeDynamicSchemaResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _edgeDynamicSchemaDynamicSchemasClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.WorkloadOrchestration", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string edgeDynamicSchemaDynamicSchemasApiVersion);
            _edgeDynamicSchemaDynamicSchemasRestClient = new DynamicSchemasRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, edgeDynamicSchemaDynamicSchemasApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual EdgeDynamicSchemaData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary> Gets a collection of EdgeDynamicSchemaVersionResources in the EdgeDynamicSchema. </summary>
        /// <returns> An object representing collection of EdgeDynamicSchemaVersionResources and their operations over a EdgeDynamicSchemaVersionResource. </returns>
        public virtual EdgeDynamicSchemaVersionCollection GetEdgeDynamicSchemaVersions()
        {
            return GetCachedClient(client => new EdgeDynamicSchemaVersionCollection(client, Id));
        }

        /// <summary>
        /// Get a Dynamic Schema Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas/{dynamicSchemaName}/versions/{dynamicSchemaVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DynamicSchemaVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDynamicSchemaVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="dynamicSchemaVersionName"> The name of the DynamicSchemaVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dynamicSchemaVersionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="dynamicSchemaVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<EdgeDynamicSchemaVersionResource>> GetEdgeDynamicSchemaVersionAsync(string dynamicSchemaVersionName, CancellationToken cancellationToken = default)
        {
            return await GetEdgeDynamicSchemaVersions().GetAsync(dynamicSchemaVersionName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a Dynamic Schema Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas/{dynamicSchemaName}/versions/{dynamicSchemaVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DynamicSchemaVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDynamicSchemaVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="dynamicSchemaVersionName"> The name of the DynamicSchemaVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dynamicSchemaVersionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="dynamicSchemaVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<EdgeDynamicSchemaVersionResource> GetEdgeDynamicSchemaVersion(string dynamicSchemaVersionName, CancellationToken cancellationToken = default)
        {
            return GetEdgeDynamicSchemaVersions().Get(dynamicSchemaVersionName, cancellationToken);
        }

        /// <summary>
        /// Get a DynamicSchema Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas/{dynamicSchemaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DynamicSchema_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDynamicSchemaResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<EdgeDynamicSchemaResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _edgeDynamicSchemaDynamicSchemasClientDiagnostics.CreateScope("EdgeDynamicSchemaResource.Get");
            scope.Start();
            try
            {
                var response = await _edgeDynamicSchemaDynamicSchemasRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeDynamicSchemaResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a DynamicSchema Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas/{dynamicSchemaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DynamicSchema_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDynamicSchemaResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<EdgeDynamicSchemaResource> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _edgeDynamicSchemaDynamicSchemasClientDiagnostics.CreateScope("EdgeDynamicSchemaResource.Get");
            scope.Start();
            try
            {
                var response = _edgeDynamicSchemaDynamicSchemasRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeDynamicSchemaResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete a DynamicSchema Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas/{dynamicSchemaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DynamicSchema_Delete</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDynamicSchemaResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> DeleteAsync(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _edgeDynamicSchemaDynamicSchemasClientDiagnostics.CreateScope("EdgeDynamicSchemaResource.Delete");
            scope.Start();
            try
            {
                var response = await _edgeDynamicSchemaDynamicSchemasRestClient.DeleteAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadOrchestrationArmOperation(_edgeDynamicSchemaDynamicSchemasClientDiagnostics, Pipeline, _edgeDynamicSchemaDynamicSchemasRestClient.CreateDeleteRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete a DynamicSchema Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas/{dynamicSchemaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DynamicSchema_Delete</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDynamicSchemaResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation Delete(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _edgeDynamicSchemaDynamicSchemasClientDiagnostics.CreateScope("EdgeDynamicSchemaResource.Delete");
            scope.Start();
            try
            {
                var response = _edgeDynamicSchemaDynamicSchemasRestClient.Delete(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                var operation = new WorkloadOrchestrationArmOperation(_edgeDynamicSchemaDynamicSchemasClientDiagnostics, Pipeline, _edgeDynamicSchemaDynamicSchemasRestClient.CreateDeleteRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// update a DynamicSchema Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas/{dynamicSchemaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DynamicSchema_Update</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDynamicSchemaResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="data"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        public virtual async Task<Response<EdgeDynamicSchemaResource>> UpdateAsync(EdgeDynamicSchemaData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _edgeDynamicSchemaDynamicSchemasClientDiagnostics.CreateScope("EdgeDynamicSchemaResource.Update");
            scope.Start();
            try
            {
                var response = await _edgeDynamicSchemaDynamicSchemasRestClient.UpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, data, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new EdgeDynamicSchemaResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// update a DynamicSchema Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas/{dynamicSchemaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DynamicSchema_Update</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDynamicSchemaResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="data"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        public virtual Response<EdgeDynamicSchemaResource> Update(EdgeDynamicSchemaData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _edgeDynamicSchemaDynamicSchemasClientDiagnostics.CreateScope("EdgeDynamicSchemaResource.Update");
            scope.Start();
            try
            {
                var response = _edgeDynamicSchemaDynamicSchemasRestClient.Update(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, data, cancellationToken);
                return Response.FromValue(new EdgeDynamicSchemaResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeDynamicSchemaResource.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Text.Json;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    public partial class EdgeDynamicSchemaResource : IJsonModel<EdgeDynamicSchemaData>
    {
        private static EdgeDynamicSchemaData s_dataDeserializationInstance;
        private static EdgeDynamicSchemaData DataDeserializationInstance => s_dataDeserializationInstance ??= new();

        void IJsonModel<EdgeDynamicSchemaData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options) => ((IJsonModel<EdgeDynamicSchemaData>)Data).Write(writer, options);

        EdgeDynamicSchemaData IJsonModel<EdgeDynamicSchemaData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => ((IJsonModel<EdgeDynamicSchemaData>)DataDeserializationInstance).Create(ref reader, options);

        BinaryData IPersistableModel<EdgeDynamicSchemaData>.Write(ModelReaderWriterOptions options) => ModelReaderWriter.Write<EdgeDynamicSchemaData>(Data, options, AzureResourceManagerWorkloadOrchestrationContext.Default);

        EdgeDynamicSchemaData IPersistableModel<EdgeDynamicSchemaData>.Create(BinaryData data, ModelReaderWriterOptions options) => ModelReaderWriter.Read<EdgeDynamicSchemaData>(data, options, AzureResourceManagerWorkloadOrchestrationContext.Default);

        string IPersistableModel<EdgeDynamicSchemaData>.GetFormatFromOptions(ModelReaderWriterOptions options) => ((IPersistableModel<EdgeDynamicSchemaData>)DataDeserializationInstance).GetFormatFromOptions(options);
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeDynamicSchemaVersionCollection.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A class representing a collection of <see cref="EdgeDynamicSchemaVersionResource"/> and their operations.
    /// Each <see cref="EdgeDynamicSchemaVersionResource"/> in the collection will belong to the same instance of <see cref="EdgeDynamicSchemaResource"/>.
    /// To get an <see cref="EdgeDynamicSchemaVersionCollection"/> instance call the GetEdgeDynamicSchemaVersions method from an instance of <see cref="EdgeDynamicSchemaResource"/>.
    /// </summary>
    public partial class EdgeDynamicSchemaVersionCollection : ArmCollection, IEnumerable<EdgeDynamicSchemaVersionResource>, IAsyncEnumerable<EdgeDynamicSchemaVersionResource>
    {
        private readonly ClientDiagnostics _edgeDynamicSchemaVersionDynamicSchemaVersionsClientDiagnostics;
        private readonly DynamicSchemaVersionsRestOperations _edgeDynamicSchemaVersionDynamicSchemaVersionsRestClient;

        /// <summary> Initializes a new instance of the <see cref="EdgeDynamicSchemaVersionCollection"/> class for mocking. </summary>
        protected EdgeDynamicSchemaVersionCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="EdgeDynamicSchemaVersionCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal EdgeDynamicSchemaVersionCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _edgeDynamicSchemaVersionDynamicSchemaVersionsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.WorkloadOrchestration", EdgeDynamicSchemaVersionResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(EdgeDynamicSchemaVersionResource.ResourceType, out string edgeDynamicSchemaVersionDynamicSchemaVersionsApiVersion);
            _edgeDynamicSchemaVersionDynamicSchemaVersionsRestClient = new DynamicSchemaVersionsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, edgeDynamicSchemaVersionDynamicSchemaVersionsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != EdgeDynamicSchemaResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, EdgeDynamicSchemaResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Create or update a Dynamic Schema Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas/{dynamicSchemaName}/versions/{dynamicSchemaVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DynamicSchemaVersion_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDynamicSchemaVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="dynamicSchemaVersionName"> The name of the DynamicSchemaVersion. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dynamicSchemaVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dynamicSchemaVersionName"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<EdgeDynamicSchemaVersionResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string dynamicSchemaVersionName, EdgeDynamicSchemaVersionData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dynamicSchemaVersionName, nameof(dynamicSchemaVersionName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _edgeDynamicSchemaVersionDynamicSchemaVersionsClientDiagnostics.CreateScope("EdgeDynamicSchemaVersionCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _edgeDynamicSchemaVersionDynamicSchemaVersionsRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, dynamicSchemaVersionName, data, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadOrchestrationArmOperation<EdgeDynamicSchemaVersionResource>(new EdgeDynamicSchemaVersionOperationSource(Client), _edgeDynamicSchemaVersionDynamicSchemaVersionsClientDiagnostics, Pipeline, _edgeDynamicSchemaVersionDynamicSchemaVersionsRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, dynamicSchemaVersionName, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create or update a Dynamic Schema Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas/{dynamicSchemaName}/versions/{dynamicSchemaVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DynamicSchemaVersion_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDynamicSchemaVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="dynamicSchemaVersionName"> The name of the DynamicSchemaVersion. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dynamicSchemaVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dynamicSchemaVersionName"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<EdgeDynamicSchemaVersionResource> CreateOrUpdate(WaitUntil waitUntil, string dynamicSchemaVersionName, EdgeDynamicSchemaVersionData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dynamicSchemaVersionName, nameof(dynamicSchemaVersionName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _edgeDynamicSchemaVersionDynamicSchemaVersionsClientDiagnostics.CreateScope("EdgeDynamicSchemaVersionCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _edgeDynamicSchemaVersionDynamicSchemaVersionsRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, dynamicSchemaVersionName, data, cancellationToken);
                var operation = new WorkloadOrchestrationArmOperation<EdgeDynamicSchemaVersionResource>(new EdgeDynamicSchemaVersionOperationSource(Client), _edgeDynamicSchemaVersionDynamicSchemaVersionsClientDiagnostics, Pipeline, _edgeDynamicSchemaVersionDynamicSchemaVersionsRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, dynamicSchemaVersionName, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a Dynamic Schema Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas/{dynamicSchemaName}/versions/{dynamicSchemaVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DynamicSchemaVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDynamicSchemaVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="dynamicSchemaVersionName"> The name of the DynamicSchemaVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dynamicSchemaVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dynamicSchemaVersionName"/> is null. </exception>
        public virtual async Task<Response<EdgeDynamicSchemaVersionResource>> GetAsync(string dynamicSchemaVersionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dynamicSchemaVersionName, nameof(dynamicSchemaVersionName));

            using var scope = _edgeDynamicSchemaVersionDynamicSchemaVersionsClientDiagnostics.CreateScope("EdgeDynamicSchemaVersionCollection.Get");
            scope.Start();
            try
            {
                var response = await _edgeDynamicSchemaVersionDynamicSchemaVersionsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, dynamicSchemaVersionName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeDynamicSchemaVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a Dynamic Schema Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas/{dynamicSchemaName}/versions/{dynamicSchemaVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DynamicSchemaVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDynamicSchemaVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="dynamicSchemaVersionName"> The name of the DynamicSchemaVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dynamicSchemaVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dynamicSchemaVersionName"/> is null. </exception>
        public virtual Response<EdgeDynamicSchemaVersionResource> Get(string dynamicSchemaVersionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dynamicSchemaVersionName, nameof(dynamicSchemaVersionName));

            using var scope = _edgeDynamicSchemaVersionDynamicSchemaVersionsClientDiagnostics.CreateScope("EdgeDynamicSchemaVersionCollection.Get");
            scope.Start();
            try
            {
                var response = _edgeDynamicSchemaVersionDynamicSchemaVersionsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, dynamicSchemaVersionName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeDynamicSchemaVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List by Dynamic Schema
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas/{dynamicSchemaName}/versions</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DynamicSchemaVersion_ListByDynamicSchema</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDynamicSchemaVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="EdgeDynamicSchemaVersionResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<EdgeDynamicSchemaVersionResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _edgeDynamicSchemaVersionDynamicSchemaVersionsRestClient.CreateListByDynamicSchemaRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _edgeDynamicSchemaVersionDynamicSchemaVersionsRestClient.CreateListByDynamicSchemaNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new EdgeDynamicSchemaVersionResource(Client, EdgeDynamicSchemaVersionData.DeserializeEdgeDynamicSchemaVersionData(e)), _edgeDynamicSchemaVersionDynamicSchemaVersionsClientDiagnostics, Pipeline, "EdgeDynamicSchemaVersionCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List by Dynamic Schema
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas/{dynamicSchemaName}/versions</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DynamicSchemaVersion_ListByDynamicSchema</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDynamicSchemaVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="EdgeDynamicSchemaVersionResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<EdgeDynamicSchemaVersionResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _edgeDynamicSchemaVersionDynamicSchemaVersionsRestClient.CreateListByDynamicSchemaRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _edgeDynamicSchemaVersionDynamicSchemaVersionsRestClient.CreateListByDynamicSchemaNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new EdgeDynamicSchemaVersionResource(Client, EdgeDynamicSchemaVersionData.DeserializeEdgeDynamicSchemaVersionData(e)), _edgeDynamicSchemaVersionDynamicSchemaVersionsClientDiagnostics, Pipeline, "EdgeDynamicSchemaVersionCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas/{dynamicSchemaName}/versions/{dynamicSchemaVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DynamicSchemaVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDynamicSchemaVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="dynamicSchemaVersionName"> The name of the DynamicSchemaVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dynamicSchemaVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dynamicSchemaVersionName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string dynamicSchemaVersionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dynamicSchemaVersionName, nameof(dynamicSchemaVersionName));

            using var scope = _edgeDynamicSchemaVersionDynamicSchemaVersionsClientDiagnostics.CreateScope("EdgeDynamicSchemaVersionCollection.Exists");
            scope.Start();
            try
            {
                var response = await _edgeDynamicSchemaVersionDynamicSchemaVersionsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, dynamicSchemaVersionName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas/{dynamicSchemaName}/versions/{dynamicSchemaVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DynamicSchemaVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDynamicSchemaVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="dynamicSchemaVersionName"> The name of the DynamicSchemaVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dynamicSchemaVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dynamicSchemaVersionName"/> is null. </exception>
        public virtual Response<bool> Exists(string dynamicSchemaVersionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dynamicSchemaVersionName, nameof(dynamicSchemaVersionName));

            using var scope = _edgeDynamicSchemaVersionDynamicSchemaVersionsClientDiagnostics.CreateScope("EdgeDynamicSchemaVersionCollection.Exists");
            scope.Start();
            try
            {
                var response = _edgeDynamicSchemaVersionDynamicSchemaVersionsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, dynamicSchemaVersionName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas/{dynamicSchemaName}/versions/{dynamicSchemaVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DynamicSchemaVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDynamicSchemaVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="dynamicSchemaVersionName"> The name of the DynamicSchemaVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dynamicSchemaVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dynamicSchemaVersionName"/> is null. </exception>
        public virtual async Task<NullableResponse<EdgeDynamicSchemaVersionResource>> GetIfExistsAsync(string dynamicSchemaVersionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dynamicSchemaVersionName, nameof(dynamicSchemaVersionName));

            using var scope = _edgeDynamicSchemaVersionDynamicSchemaVersionsClientDiagnostics.CreateScope("EdgeDynamicSchemaVersionCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _edgeDynamicSchemaVersionDynamicSchemaVersionsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, dynamicSchemaVersionName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<EdgeDynamicSchemaVersionResource>(response.GetRawResponse());
                return Response.FromValue(new EdgeDynamicSchemaVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas/{dynamicSchemaName}/versions/{dynamicSchemaVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DynamicSchemaVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDynamicSchemaVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="dynamicSchemaVersionName"> The name of the DynamicSchemaVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dynamicSchemaVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dynamicSchemaVersionName"/> is null. </exception>
        public virtual NullableResponse<EdgeDynamicSchemaVersionResource> GetIfExists(string dynamicSchemaVersionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dynamicSchemaVersionName, nameof(dynamicSchemaVersionName));

            using var scope = _edgeDynamicSchemaVersionDynamicSchemaVersionsClientDiagnostics.CreateScope("EdgeDynamicSchemaVersionCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _edgeDynamicSchemaVersionDynamicSchemaVersionsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, dynamicSchemaVersionName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<EdgeDynamicSchemaVersionResource>(response.GetRawResponse());
                return Response.FromValue(new EdgeDynamicSchemaVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<EdgeDynamicSchemaVersionResource> IEnumerable<EdgeDynamicSchemaVersionResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<EdgeDynamicSchemaVersionResource> IAsyncEnumerable<EdgeDynamicSchemaVersionResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeDynamicSchemaVersionData.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A class representing the EdgeDynamicSchemaVersion data model.
    /// Dynamic Schema Version Resource
    /// </summary>
    public partial class EdgeDynamicSchemaVersionData : ResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeDynamicSchemaVersionData"/>. </summary>
        public EdgeDynamicSchemaVersionData()
        {
        }

        /// <summary> Initializes a new instance of <see cref="EdgeDynamicSchemaVersionData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="etag"> If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeDynamicSchemaVersionData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, EdgeSchemaVersionProperties properties, ETag? etag, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData)
        {
            Properties = properties;
            ETag = etag;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The resource-specific properties for this resource. </summary>
        public EdgeSchemaVersionProperties Properties { get; set; }
        /// <summary> If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. </summary>
        public ETag? ETag { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeDynamicSchemaVersionData.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    public partial class EdgeDynamicSchemaVersionData : IUtf8JsonSerializable, IJsonModel<EdgeDynamicSchemaVersionData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeDynamicSchemaVersionData>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeDynamicSchemaVersionData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeDynamicSchemaVersionData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeDynamicSchemaVersionData)} does not support writing '{format}' format.");
            }

            base.JsonModelWriteCore(writer, options);
            if (Optional.IsDefined(Properties))
            {
                writer.WritePropertyName("properties"u8);
                writer.WriteObjectValue(Properties, options);
            }
            if (options.Format != "W" && Optional.IsDefined(ETag))
            {
                writer.WritePropertyName("eTag"u8);
                writer.WriteStringValue(ETag.Value.ToString());
            }
        }

        EdgeDynamicSchemaVersionData IJsonModel<EdgeDynamicSchemaVersionData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeDynamicSchemaVersionData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeDynamicSchemaVersionData)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeDynamicSchemaVersionData(document.RootElement, options);
        }

        internal static EdgeDynamicSchemaVersionData DeserializeEdgeDynamicSchemaVersionData(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            EdgeSchemaVersionProperties properties = default;
            ETag? etag = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            SystemData systemData = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    properties = EdgeSchemaVersionProperties.DeserializeEdgeSchemaVersionProperties(property.Value, options);
                    continue;
                }
                if (property.NameEquals("eTag"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    etag = new ETag(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = ModelReaderWriter.Read<SystemData>(new BinaryData(Encoding.UTF8.GetBytes(property.Value.GetRawText())), ModelSerializationExtensions.WireOptions, AzureResourceManagerWorkloadOrchestrationContext.Default);
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeDynamicSchemaVersionData(
                id,
                name,
                type,
                systemData,
                properties,
                etag,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeDynamicSchemaVersionData>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeDynamicSchemaVersionData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeDynamicSchemaVersionData)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeDynamicSchemaVersionData IPersistableModel<EdgeDynamicSchemaVersionData>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeDynamicSchemaVersionData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeDynamicSchemaVersionData(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeDynamicSchemaVersionData)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeDynamicSchemaVersionData>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeDynamicSchemaVersionResource.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A Class representing an EdgeDynamicSchemaVersion along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier"/> you can construct an <see cref="EdgeDynamicSchemaVersionResource"/>
    /// from an instance of <see cref="ArmClient"/> using the GetEdgeDynamicSchemaVersionResource method.
    /// Otherwise you can get one from its parent resource <see cref="EdgeDynamicSchemaResource"/> using the GetEdgeDynamicSchemaVersion method.
    /// </summary>
    public partial class EdgeDynamicSchemaVersionResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="EdgeDynamicSchemaVersionResource"/> instance. </summary>
        /// <param name="subscriptionId"> The subscriptionId. </param>
        /// <param name="resourceGroupName"> The resourceGroupName. </param>
        /// <param name="schemaName"> The schemaName. </param>
        /// <param name="dynamicSchemaName"> The dynamicSchemaName. </param>
        /// <param name="dynamicSchemaVersionName"> The dynamicSchemaVersionName. </param>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string schemaName, string dynamicSchemaName, string dynamicSchemaVersionName)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas/{dynamicSchemaName}/versions/{dynamicSchemaVersionName}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _edgeDynamicSchemaVersionDynamicSchemaVersionsClientDiagnostics;
        private readonly DynamicSchemaVersionsRestOperations _edgeDynamicSchemaVersionDynamicSchemaVersionsRestClient;
        private readonly EdgeDynamicSchemaVersionData _data;

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.Edge/schemas/dynamicSchemas/versions";

        /// <summary> Initializes a new instance of the <see cref="EdgeDynamicSchemaVersionResource"/> class for mocking. </summary>
        protected EdgeDynamicSchemaVersionResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="EdgeDynamicSchemaVersionResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal EdgeDynamicSchemaVersionResource(ArmClient client, EdgeDynamicSchemaVersionData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="EdgeDynamicSchemaVersionResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal EdgeDynamicSchemaVersionResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _edgeDynamicSchemaVersionDynamicSchemaVersionsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.WorkloadOrchestration", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string edgeDynamicSchemaVersionDynamicSchemaVersionsApiVersion);
            _edgeDynamicSchemaVersionDynamicSchemaVersionsRestClient = new DynamicSchemaVersionsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, edgeDynamicSchemaVersionDynamicSchemaVersionsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual EdgeDynamicSchemaVersionData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary>
        /// Get a Dynamic Schema Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas/{dynamicSchemaName}/versions/{dynamicSchemaVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DynamicSchemaVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDynamicSchemaVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<EdgeDynamicSchemaVersionResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _edgeDynamicSchemaVersionDynamicSchemaVersionsClientDiagnostics.CreateScope("EdgeDynamicSchemaVersionResource.Get");
            scope.Start();
            try
            {
                var response = await _edgeDynamicSchemaVersionDynamicSchemaVersionsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeDynamicSchemaVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a Dynamic Schema Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas/{dynamicSchemaName}/versions/{dynamicSchemaVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DynamicSchemaVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDynamicSchemaVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<EdgeDynamicSchemaVersionResource> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _edgeDynamicSchemaVersionDynamicSchemaVersionsClientDiagnostics.CreateScope("EdgeDynamicSchemaVersionResource.Get");
            scope.Start();
            try
            {
                var response = _edgeDynamicSchemaVersionDynamicSchemaVersionsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeDynamicSchemaVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete a Dynamic Schema Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas/{dynamicSchemaName}/versions/{dynamicSchemaVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DynamicSchemaVersion_Delete</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDynamicSchemaVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> DeleteAsync(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _edgeDynamicSchemaVersionDynamicSchemaVersionsClientDiagnostics.CreateScope("EdgeDynamicSchemaVersionResource.Delete");
            scope.Start();
            try
            {
                var response = await _edgeDynamicSchemaVersionDynamicSchemaVersionsRestClient.DeleteAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadOrchestrationArmOperation(_edgeDynamicSchemaVersionDynamicSchemaVersionsClientDiagnostics, Pipeline, _edgeDynamicSchemaVersionDynamicSchemaVersionsRestClient.CreateDeleteRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete a Dynamic Schema Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas/{dynamicSchemaName}/versions/{dynamicSchemaVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DynamicSchemaVersion_Delete</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDynamicSchemaVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation Delete(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _edgeDynamicSchemaVersionDynamicSchemaVersionsClientDiagnostics.CreateScope("EdgeDynamicSchemaVersionResource.Delete");
            scope.Start();
            try
            {
                var response = _edgeDynamicSchemaVersionDynamicSchemaVersionsRestClient.Delete(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken);
                var operation = new WorkloadOrchestrationArmOperation(_edgeDynamicSchemaVersionDynamicSchemaVersionsClientDiagnostics, Pipeline, _edgeDynamicSchemaVersionDynamicSchemaVersionsRestClient.CreateDeleteRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// update a Dynamic Schema Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas/{dynamicSchemaName}/versions/{dynamicSchemaVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DynamicSchemaVersion_Update</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDynamicSchemaVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="data"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        public virtual async Task<Response<EdgeDynamicSchemaVersionResource>> UpdateAsync(EdgeDynamicSchemaVersionData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _edgeDynamicSchemaVersionDynamicSchemaVersionsClientDiagnostics.CreateScope("EdgeDynamicSchemaVersionResource.Update");
            scope.Start();
            try
            {
                var response = await _edgeDynamicSchemaVersionDynamicSchemaVersionsRestClient.UpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, data, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new EdgeDynamicSchemaVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// update a Dynamic Schema Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas/{dynamicSchemaName}/versions/{dynamicSchemaVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DynamicSchemaVersion_Update</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDynamicSchemaVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="data"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        public virtual Response<EdgeDynamicSchemaVersionResource> Update(EdgeDynamicSchemaVersionData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _edgeDynamicSchemaVersionDynamicSchemaVersionsClientDiagnostics.CreateScope("EdgeDynamicSchemaVersionResource.Update");
            scope.Start();
            try
            {
                var response = _edgeDynamicSchemaVersionDynamicSchemaVersionsRestClient.Update(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, data, cancellationToken);
                return Response.FromValue(new EdgeDynamicSchemaVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeDynamicSchemaVersionResource.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Text.Json;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    public partial class EdgeDynamicSchemaVersionResource : IJsonModel<EdgeDynamicSchemaVersionData>
    {
        private static EdgeDynamicSchemaVersionData s_dataDeserializationInstance;
        private static EdgeDynamicSchemaVersionData DataDeserializationInstance => s_dataDeserializationInstance ??= new();

        void IJsonModel<EdgeDynamicSchemaVersionData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options) => ((IJsonModel<EdgeDynamicSchemaVersionData>)Data).Write(writer, options);

        EdgeDynamicSchemaVersionData IJsonModel<EdgeDynamicSchemaVersionData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => ((IJsonModel<EdgeDynamicSchemaVersionData>)DataDeserializationInstance).Create(ref reader, options);

        BinaryData IPersistableModel<EdgeDynamicSchemaVersionData>.Write(ModelReaderWriterOptions options) => ModelReaderWriter.Write<EdgeDynamicSchemaVersionData>(Data, options, AzureResourceManagerWorkloadOrchestrationContext.Default);

        EdgeDynamicSchemaVersionData IPersistableModel<EdgeDynamicSchemaVersionData>.Create(BinaryData data, ModelReaderWriterOptions options) => ModelReaderWriter.Read<EdgeDynamicSchemaVersionData>(data, options, AzureResourceManagerWorkloadOrchestrationContext.Default);

        string IPersistableModel<EdgeDynamicSchemaVersionData>.GetFormatFromOptions(ModelReaderWriterOptions options) => ((IPersistableModel<EdgeDynamicSchemaVersionData>)DataDeserializationInstance).GetFormatFromOptions(options);
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeExecutionCollection.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A class representing a collection of <see cref="EdgeExecutionResource"/> and their operations.
    /// Each <see cref="EdgeExecutionResource"/> in the collection will belong to the same instance of <see cref="EdgeWorkflowVersionResource"/>.
    /// To get an <see cref="EdgeExecutionCollection"/> instance call the GetEdgeExecutions method from an instance of <see cref="EdgeWorkflowVersionResource"/>.
    /// </summary>
    public partial class EdgeExecutionCollection : ArmCollection, IEnumerable<EdgeExecutionResource>, IAsyncEnumerable<EdgeExecutionResource>
    {
        private readonly ClientDiagnostics _edgeExecutionExecutionsClientDiagnostics;
        private readonly ExecutionsRestOperations _edgeExecutionExecutionsRestClient;

        /// <summary> Initializes a new instance of the <see cref="EdgeExecutionCollection"/> class for mocking. </summary>
        protected EdgeExecutionCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="EdgeExecutionCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal EdgeExecutionCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _edgeExecutionExecutionsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.WorkloadOrchestration", EdgeExecutionResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(EdgeExecutionResource.ResourceType, out string edgeExecutionExecutionsApiVersion);
            _edgeExecutionExecutionsRestClient = new ExecutionsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, edgeExecutionExecutionsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != EdgeWorkflowVersionResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, EdgeWorkflowVersionResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Create or update Execution Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions/{versionName}/executions/{executionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Execution_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeExecutionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="executionName"> The name of the Execution. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="executionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="executionName"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<EdgeExecutionResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string executionName, EdgeExecutionData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(executionName, nameof(executionName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _edgeExecutionExecutionsClientDiagnostics.CreateScope("EdgeExecutionCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _edgeExecutionExecutionsRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, executionName, data, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadOrchestrationArmOperation<EdgeExecutionResource>(new EdgeExecutionOperationSource(Client), _edgeExecutionExecutionsClientDiagnostics, Pipeline, _edgeExecutionExecutionsRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, executionName, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create or update Execution Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions/{versionName}/executions/{executionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Execution_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeExecutionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="executionName"> The name of the Execution. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="executionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="executionName"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<EdgeExecutionResource> CreateOrUpdate(WaitUntil waitUntil, string executionName, EdgeExecutionData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(executionName, nameof(executionName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _edgeExecutionExecutionsClientDiagnostics.CreateScope("EdgeExecutionCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _edgeExecutionExecutionsRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, executionName, data, cancellationToken);
                var operation = new WorkloadOrchestrationArmOperation<EdgeExecutionResource>(new EdgeExecutionOperationSource(Client), _edgeExecutionExecutionsClientDiagnostics, Pipeline, _edgeExecutionExecutionsRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, executionName, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get Execution Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions/{versionName}/executions/{executionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Execution_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeExecutionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="executionName"> The name of the Execution. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="executionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="executionName"/> is null. </exception>
        public virtual async Task<Response<EdgeExecutionResource>> GetAsync(string executionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(executionName, nameof(executionName));

            using var scope = _edgeExecutionExecutionsClientDiagnostics.CreateScope("EdgeExecutionCollection.Get");
            scope.Start();
            try
            {
                var response = await _edgeExecutionExecutionsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, executionName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeExecutionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get Execution Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions/{versionName}/executions/{executionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Execution_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeExecutionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="executionName"> The name of the Execution. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="executionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="executionName"/> is null. </exception>
        public virtual Response<EdgeExecutionResource> Get(string executionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(executionName, nameof(executionName));

            using var scope = _edgeExecutionExecutionsClientDiagnostics.CreateScope("EdgeExecutionCollection.Get");
            scope.Start();
            try
            {
                var response = _edgeExecutionExecutionsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, executionName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeExecutionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List Execution Resources
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions/{versionName}/executions</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Execution_ListByWorkflowVersion</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeExecutionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="EdgeExecutionResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<EdgeExecutionResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _edgeExecutionExecutionsRestClient.CreateListByWorkflowVersionRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _edgeExecutionExecutionsRestClient.CreateListByWorkflowVersionNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new EdgeExecutionResource(Client, EdgeExecutionData.DeserializeEdgeExecutionData(e)), _edgeExecutionExecutionsClientDiagnostics, Pipeline, "EdgeExecutionCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List Execution Resources
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions/{versionName}/executions</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Execution_ListByWorkflowVersion</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeExecutionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="EdgeExecutionResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<EdgeExecutionResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _edgeExecutionExecutionsRestClient.CreateListByWorkflowVersionRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _edgeExecutionExecutionsRestClient.CreateListByWorkflowVersionNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new EdgeExecutionResource(Client, EdgeExecutionData.DeserializeEdgeExecutionData(e)), _edgeExecutionExecutionsClientDiagnostics, Pipeline, "EdgeExecutionCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions/{versionName}/executions/{executionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Execution_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeExecutionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="executionName"> The name of the Execution. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="executionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="executionName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string executionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(executionName, nameof(executionName));

            using var scope = _edgeExecutionExecutionsClientDiagnostics.CreateScope("EdgeExecutionCollection.Exists");
            scope.Start();
            try
            {
                var response = await _edgeExecutionExecutionsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, executionName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions/{versionName}/executions/{executionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Execution_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeExecutionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="executionName"> The name of the Execution. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="executionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="executionName"/> is null. </exception>
        public virtual Response<bool> Exists(string executionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(executionName, nameof(executionName));

            using var scope = _edgeExecutionExecutionsClientDiagnostics.CreateScope("EdgeExecutionCollection.Exists");
            scope.Start();
            try
            {
                var response = _edgeExecutionExecutionsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, executionName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions/{versionName}/executions/{executionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Execution_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeExecutionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="executionName"> The name of the Execution. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="executionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="executionName"/> is null. </exception>
        public virtual async Task<NullableResponse<EdgeExecutionResource>> GetIfExistsAsync(string executionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(executionName, nameof(executionName));

            using var scope = _edgeExecutionExecutionsClientDiagnostics.CreateScope("EdgeExecutionCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _edgeExecutionExecutionsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, executionName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<EdgeExecutionResource>(response.GetRawResponse());
                return Response.FromValue(new EdgeExecutionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions/{versionName}/executions/{executionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Execution_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeExecutionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="executionName"> The name of the Execution. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="executionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="executionName"/> is null. </exception>
        public virtual NullableResponse<EdgeExecutionResource> GetIfExists(string executionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(executionName, nameof(executionName));

            using var scope = _edgeExecutionExecutionsClientDiagnostics.CreateScope("EdgeExecutionCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _edgeExecutionExecutionsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, executionName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<EdgeExecutionResource>(response.GetRawResponse());
                return Response.FromValue(new EdgeExecutionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<EdgeExecutionResource> IEnumerable<EdgeExecutionResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<EdgeExecutionResource> IAsyncEnumerable<EdgeExecutionResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeExecutionData.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A class representing the EdgeExecution data model.
    /// Execution Resource
    /// </summary>
    public partial class EdgeExecutionData : ResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeExecutionData"/>. </summary>
        public EdgeExecutionData()
        {
        }

        /// <summary> Initializes a new instance of <see cref="EdgeExecutionData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="extendedLocation"></param>
        /// <param name="etag"> If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeExecutionData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, EdgeExecutionProperties properties, ExtendedLocation extendedLocation, ETag? etag, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData)
        {
            Properties = properties;
            ExtendedLocation = extendedLocation;
            ETag = etag;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The resource-specific properties for this resource. </summary>
        public EdgeExecutionProperties Properties { get; set; }
        /// <summary> Gets or sets the extended location. </summary>
        public ExtendedLocation ExtendedLocation { get; set; }
        /// <summary> If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. </summary>
        public ETag? ETag { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeExecutionData.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    public partial class EdgeExecutionData : IUtf8JsonSerializable, IJsonModel<EdgeExecutionData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeExecutionData>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeExecutionData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeExecutionData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeExecutionData)} does not support writing '{format}' format.");
            }

            base.JsonModelWriteCore(writer, options);
            if (Optional.IsDefined(Properties))
            {
                writer.WritePropertyName("properties"u8);
                writer.WriteObjectValue(Properties, options);
            }
            if (Optional.IsDefined(ExtendedLocation))
            {
                writer.WritePropertyName("extendedLocation"u8);
                ((IJsonModel<ExtendedLocation>)ExtendedLocation).Write(writer, options);
            }
            if (options.Format != "W" && Optional.IsDefined(ETag))
            {
                writer.WritePropertyName("eTag"u8);
                writer.WriteStringValue(ETag.Value.ToString());
            }
        }

        EdgeExecutionData IJsonModel<EdgeExecutionData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeExecutionData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeExecutionData)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeExecutionData(document.RootElement, options);
        }

        internal static EdgeExecutionData DeserializeEdgeExecutionData(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            EdgeExecutionProperties properties = default;
            ExtendedLocation extendedLocation = default;
            ETag? etag = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            SystemData systemData = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    properties = EdgeExecutionProperties.DeserializeEdgeExecutionProperties(property.Value, options);
                    continue;
                }
                if (property.NameEquals("extendedLocation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    extendedLocation = ModelReaderWriter.Read<ExtendedLocation>(new BinaryData(Encoding.UTF8.GetBytes(property.Value.GetRawText())), options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                    continue;
                }
                if (property.NameEquals("eTag"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    etag = new ETag(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = ModelReaderWriter.Read<SystemData>(new BinaryData(Encoding.UTF8.GetBytes(property.Value.GetRawText())), ModelSerializationExtensions.WireOptions, AzureResourceManagerWorkloadOrchestrationContext.Default);
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeExecutionData(
                id,
                name,
                type,
                systemData,
                properties,
                extendedLocation,
                etag,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeExecutionData>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeExecutionData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeExecutionData)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeExecutionData IPersistableModel<EdgeExecutionData>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeExecutionData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeExecutionData(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeExecutionData)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeExecutionData>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeExecutionResource.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A Class representing an EdgeExecution along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier"/> you can construct an <see cref="EdgeExecutionResource"/>
    /// from an instance of <see cref="ArmClient"/> using the GetEdgeExecutionResource method.
    /// Otherwise you can get one from its parent resource <see cref="EdgeWorkflowVersionResource"/> using the GetEdgeExecution method.
    /// </summary>
    public partial class EdgeExecutionResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="EdgeExecutionResource"/> instance. </summary>
        /// <param name="subscriptionId"> The subscriptionId. </param>
        /// <param name="resourceGroupName"> The resourceGroupName. </param>
        /// <param name="contextName"> The contextName. </param>
        /// <param name="workflowName"> The workflowName. </param>
        /// <param name="versionName"> The versionName. </param>
        /// <param name="executionName"> The executionName. </param>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string contextName, string workflowName, string versionName, string executionName)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions/{versionName}/executions/{executionName}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _edgeExecutionExecutionsClientDiagnostics;
        private readonly ExecutionsRestOperations _edgeExecutionExecutionsRestClient;
        private readonly EdgeExecutionData _data;

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.Edge/contexts/workflows/versions/executions";

        /// <summary> Initializes a new instance of the <see cref="EdgeExecutionResource"/> class for mocking. </summary>
        protected EdgeExecutionResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="EdgeExecutionResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal EdgeExecutionResource(ArmClient client, EdgeExecutionData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="EdgeExecutionResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal EdgeExecutionResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _edgeExecutionExecutionsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.WorkloadOrchestration", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string edgeExecutionExecutionsApiVersion);
            _edgeExecutionExecutionsRestClient = new ExecutionsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, edgeExecutionExecutionsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual EdgeExecutionData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary>
        /// Get Execution Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions/{versionName}/executions/{executionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Execution_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeExecutionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<EdgeExecutionResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _edgeExecutionExecutionsClientDiagnostics.CreateScope("EdgeExecutionResource.Get");
            scope.Start();
            try
            {
                var response = await _edgeExecutionExecutionsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Parent.Name, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeExecutionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get Execution Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions/{versionName}/executions/{executionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Execution_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeExecutionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<EdgeExecutionResource> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _edgeExecutionExecutionsClientDiagnostics.CreateScope("EdgeExecutionResource.Get");
            scope.Start();
            try
            {
                var response = _edgeExecutionExecutionsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Parent.Name, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeExecutionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete Execution Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions/{versionName}/executions/{executionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Execution_Delete</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeExecutionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> DeleteAsync(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _edgeExecutionExecutionsClientDiagnostics.CreateScope("EdgeExecutionResource.Delete");
            scope.Start();
            try
            {
                var response = await _edgeExecutionExecutionsRestClient.DeleteAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Parent.Name, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadOrchestrationArmOperation(_edgeExecutionExecutionsClientDiagnostics, Pipeline, _edgeExecutionExecutionsRestClient.CreateDeleteRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Parent.Name, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete Execution Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions/{versionName}/executions/{executionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Execution_Delete</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeExecutionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation Delete(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _edgeExecutionExecutionsClientDiagnostics.CreateScope("EdgeExecutionResource.Delete");
            scope.Start();
            try
            {
                var response = _edgeExecutionExecutionsRestClient.Delete(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Parent.Name, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken);
                var operation = new WorkloadOrchestrationArmOperation(_edgeExecutionExecutionsClientDiagnostics, Pipeline, _edgeExecutionExecutionsRestClient.CreateDeleteRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Parent.Name, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// update an Execution Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions/{versionName}/executions/{executionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Execution_Update</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeExecutionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="data"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<EdgeExecutionResource>> UpdateAsync(WaitUntil waitUntil, EdgeExecutionData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _edgeExecutionExecutionsClientDiagnostics.CreateScope("EdgeExecutionResource.Update");
            scope.Start();
            try
            {
                var response = await _edgeExecutionExecutionsRestClient.UpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Parent.Name, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, data, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadOrchestrationArmOperation<EdgeExecutionResource>(new EdgeExecutionOperationSource(Client), _edgeExecutionExecutionsClientDiagnostics, Pipeline, _edgeExecutionExecutionsRestClient.CreateUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Parent.Name, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, data).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// update an Execution Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions/{versionName}/executions/{executionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Execution_Update</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeExecutionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="data"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<EdgeExecutionResource> Update(WaitUntil waitUntil, EdgeExecutionData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _edgeExecutionExecutionsClientDiagnostics.CreateScope("EdgeExecutionResource.Update");
            scope.Start();
            try
            {
                var response = _edgeExecutionExecutionsRestClient.Update(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Parent.Name, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, data, cancellationToken);
                var operation = new WorkloadOrchestrationArmOperation<EdgeExecutionResource>(new EdgeExecutionOperationSource(Client), _edgeExecutionExecutionsClientDiagnostics, Pipeline, _edgeExecutionExecutionsRestClient.CreateUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Parent.Name, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, data).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeExecutionResource.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Text.Json;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    public partial class EdgeExecutionResource : IJsonModel<EdgeExecutionData>
    {
        private static EdgeExecutionData s_dataDeserializationInstance;
        private static EdgeExecutionData DataDeserializationInstance => s_dataDeserializationInstance ??= new();

        void IJsonModel<EdgeExecutionData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options) => ((IJsonModel<EdgeExecutionData>)Data).Write(writer, options);

        EdgeExecutionData IJsonModel<EdgeExecutionData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => ((IJsonModel<EdgeExecutionData>)DataDeserializationInstance).Create(ref reader, options);

        BinaryData IPersistableModel<EdgeExecutionData>.Write(ModelReaderWriterOptions options) => ModelReaderWriter.Write<EdgeExecutionData>(Data, options, AzureResourceManagerWorkloadOrchestrationContext.Default);

        EdgeExecutionData IPersistableModel<EdgeExecutionData>.Create(BinaryData data, ModelReaderWriterOptions options) => ModelReaderWriter.Read<EdgeExecutionData>(data, options, AzureResourceManagerWorkloadOrchestrationContext.Default);

        string IPersistableModel<EdgeExecutionData>.GetFormatFromOptions(ModelReaderWriterOptions options) => ((IPersistableModel<EdgeExecutionData>)DataDeserializationInstance).GetFormatFromOptions(options);
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeJobCollection.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A class representing a collection of <see cref="EdgeJobResource"/> and their operations.
    /// Each <see cref="EdgeJobResource"/> in the collection will belong to the same instance of <see cref="ArmResource"/>.
    /// To get an <see cref="EdgeJobCollection"/> instance call the GetEdgeJobs method from an instance of <see cref="ArmResource"/>.
    /// </summary>
    public partial class EdgeJobCollection : ArmCollection, IEnumerable<EdgeJobResource>, IAsyncEnumerable<EdgeJobResource>
    {
        private readonly ClientDiagnostics _edgeJobJobsClientDiagnostics;
        private readonly JobsRestOperations _edgeJobJobsRestClient;

        /// <summary> Initializes a new instance of the <see cref="EdgeJobCollection"/> class for mocking. </summary>
        protected EdgeJobCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="EdgeJobCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal EdgeJobCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _edgeJobJobsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.WorkloadOrchestration", EdgeJobResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(EdgeJobResource.ResourceType, out string edgeJobJobsApiVersion);
            _edgeJobJobsRestClient = new JobsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, edgeJobJobsApiVersion);
        }

        /// <summary>
        /// Get a Job resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/jobs/{jobName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Job_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeJobResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobName"> The name of the Job. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="jobName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="jobName"/> is null. </exception>
        public virtual async Task<Response<EdgeJobResource>> GetAsync(string jobName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobName, nameof(jobName));

            using var scope = _edgeJobJobsClientDiagnostics.CreateScope("EdgeJobCollection.Get");
            scope.Start();
            try
            {
                var response = await _edgeJobJobsRestClient.GetAsync(Id, jobName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeJobResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a Job resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/jobs/{jobName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Job_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeJobResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobName"> The name of the Job. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="jobName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="jobName"/> is null. </exception>
        public virtual Response<EdgeJobResource> Get(string jobName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobName, nameof(jobName));

            using var scope = _edgeJobJobsClientDiagnostics.CreateScope("EdgeJobCollection.Get");
            scope.Start();
            try
            {
                var response = _edgeJobJobsRestClient.Get(Id, jobName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeJobResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List Jobs by parent resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/jobs</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Job_ListByTarget</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeJobResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="EdgeJobResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<EdgeJobResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _edgeJobJobsRestClient.CreateListByTargetRequest(Id);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _edgeJobJobsRestClient.CreateListByTargetNextPageRequest(nextLink, Id);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new EdgeJobResource(Client, EdgeJobData.DeserializeEdgeJobData(e)), _edgeJobJobsClientDiagnostics, Pipeline, "EdgeJobCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List Jobs by parent resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/jobs</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Job_ListByTarget</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeJobResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="EdgeJobResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<EdgeJobResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _edgeJobJobsRestClient.CreateListByTargetRequest(Id);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _edgeJobJobsRestClient.CreateListByTargetNextPageRequest(nextLink, Id);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new EdgeJobResource(Client, EdgeJobData.DeserializeEdgeJobData(e)), _edgeJobJobsClientDiagnostics, Pipeline, "EdgeJobCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/jobs/{jobName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Job_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeJobResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobName"> The name of the Job. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="jobName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="jobName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string jobName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobName, nameof(jobName));

            using var scope = _edgeJobJobsClientDiagnostics.CreateScope("EdgeJobCollection.Exists");
            scope.Start();
            try
            {
                var response = await _edgeJobJobsRestClient.GetAsync(Id, jobName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/jobs/{jobName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Job_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeJobResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobName"> The name of the Job. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="jobName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="jobName"/> is null. </exception>
        public virtual Response<bool> Exists(string jobName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobName, nameof(jobName));

            using var scope = _edgeJobJobsClientDiagnostics.CreateScope("EdgeJobCollection.Exists");
            scope.Start();
            try
            {
                var response = _edgeJobJobsRestClient.Get(Id, jobName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/jobs/{jobName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Job_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeJobResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobName"> The name of the Job. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="jobName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="jobName"/> is null. </exception>
        public virtual async Task<NullableResponse<EdgeJobResource>> GetIfExistsAsync(string jobName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobName, nameof(jobName));

            using var scope = _edgeJobJobsClientDiagnostics.CreateScope("EdgeJobCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _edgeJobJobsRestClient.GetAsync(Id, jobName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<EdgeJobResource>(response.GetRawResponse());
                return Response.FromValue(new EdgeJobResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/jobs/{jobName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Job_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeJobResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobName"> The name of the Job. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="jobName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="jobName"/> is null. </exception>
        public virtual NullableResponse<EdgeJobResource> GetIfExists(string jobName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobName, nameof(jobName));

            using var scope = _edgeJobJobsClientDiagnostics.CreateScope("EdgeJobCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _edgeJobJobsRestClient.Get(Id, jobName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<EdgeJobResource>(response.GetRawResponse());
                return Response.FromValue(new EdgeJobResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<EdgeJobResource> IEnumerable<EdgeJobResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<EdgeJobResource> IAsyncEnumerable<EdgeJobResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeJobData.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A class representing the EdgeJob data model.
    /// Job extension resource for tracking job execution and substatuses.
    /// </summary>
    public partial class EdgeJobData : ResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeJobData"/>. </summary>
        internal EdgeJobData()
        {
        }

        /// <summary> Initializes a new instance of <see cref="EdgeJobData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="etag"> If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeJobData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, EdgeJobProperties properties, ETag? etag, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData)
        {
            Properties = properties;
            ETag = etag;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The resource-specific properties for this resource. </summary>
        public EdgeJobProperties Properties { get; }
        /// <summary> If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. </summary>
        public ETag? ETag { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeJobData.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    public partial class EdgeJobData : IUtf8JsonSerializable, IJsonModel<EdgeJobData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeJobData>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeJobData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeJobData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeJobData)} does not support writing '{format}' format.");
            }

            base.JsonModelWriteCore(writer, options);
            if (Optional.IsDefined(Properties))
            {
                writer.WritePropertyName("properties"u8);
                writer.WriteObjectValue(Properties, options);
            }
            if (options.Format != "W" && Optional.IsDefined(ETag))
            {
                writer.WritePropertyName("eTag"u8);
                writer.WriteStringValue(ETag.Value.ToString());
            }
        }

        EdgeJobData IJsonModel<EdgeJobData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeJobData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeJobData)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeJobData(document.RootElement, options);
        }

        internal static EdgeJobData DeserializeEdgeJobData(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            EdgeJobProperties properties = default;
            ETag? etag = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            SystemData systemData = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    properties = EdgeJobProperties.DeserializeEdgeJobProperties(property.Value, options);
                    continue;
                }
                if (property.NameEquals("eTag"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    etag = new ETag(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = ModelReaderWriter.Read<SystemData>(new BinaryData(Encoding.UTF8.GetBytes(property.Value.GetRawText())), ModelSerializationExtensions.WireOptions, AzureResourceManagerWorkloadOrchestrationContext.Default);
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeJobData(
                id,
                name,
                type,
                systemData,
                properties,
                etag,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeJobData>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeJobData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeJobData)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeJobData IPersistableModel<EdgeJobData>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeJobData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeJobData(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeJobData)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeJobData>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeJobResource.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A Class representing an EdgeJob along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier"/> you can construct an <see cref="EdgeJobResource"/>
    /// from an instance of <see cref="ArmClient"/> using the GetEdgeJobResource method.
    /// Otherwise you can get one from its parent resource <see cref="ArmResource"/> using the GetEdgeJob method.
    /// </summary>
    public partial class EdgeJobResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="EdgeJobResource"/> instance. </summary>
        /// <param name="resourceUri"> The resourceUri. </param>
        /// <param name="jobName"> The jobName. </param>
        public static ResourceIdentifier CreateResourceIdentifier(string resourceUri, string jobName)
        {
            var resourceId = $"{resourceUri}/providers/Microsoft.Edge/jobs/{jobName}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _edgeJobJobsClientDiagnostics;
        private readonly JobsRestOperations _edgeJobJobsRestClient;
        private readonly EdgeJobData _data;

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.Edge/jobs";

        /// <summary> Initializes a new instance of the <see cref="EdgeJobResource"/> class for mocking. </summary>
        protected EdgeJobResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="EdgeJobResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal EdgeJobResource(ArmClient client, EdgeJobData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="EdgeJobResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal EdgeJobResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _edgeJobJobsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.WorkloadOrchestration", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string edgeJobJobsApiVersion);
            _edgeJobJobsRestClient = new JobsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, edgeJobJobsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual EdgeJobData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary>
        /// Get a Job resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/jobs/{jobName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Job_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeJobResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<EdgeJobResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _edgeJobJobsClientDiagnostics.CreateScope("EdgeJobResource.Get");
            scope.Start();
            try
            {
                var response = await _edgeJobJobsRestClient.GetAsync(Id.Parent, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeJobResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a Job resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/jobs/{jobName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Job_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeJobResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<EdgeJobResource> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _edgeJobJobsClientDiagnostics.CreateScope("EdgeJobResource.Get");
            scope.Start();
            try
            {
                var response = _edgeJobJobsRestClient.Get(Id.Parent, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeJobResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeJobResource.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Text.Json;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    public partial class EdgeJobResource : IJsonModel<EdgeJobData>
    {
        private static EdgeJobData s_dataDeserializationInstance;
        private static EdgeJobData DataDeserializationInstance => s_dataDeserializationInstance ??= new();

        void IJsonModel<EdgeJobData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options) => ((IJsonModel<EdgeJobData>)Data).Write(writer, options);

        EdgeJobData IJsonModel<EdgeJobData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => ((IJsonModel<EdgeJobData>)DataDeserializationInstance).Create(ref reader, options);

        BinaryData IPersistableModel<EdgeJobData>.Write(ModelReaderWriterOptions options) => ModelReaderWriter.Write<EdgeJobData>(Data, options, AzureResourceManagerWorkloadOrchestrationContext.Default);

        EdgeJobData IPersistableModel<EdgeJobData>.Create(BinaryData data, ModelReaderWriterOptions options) => ModelReaderWriter.Read<EdgeJobData>(data, options, AzureResourceManagerWorkloadOrchestrationContext.Default);

        string IPersistableModel<EdgeJobData>.GetFormatFromOptions(ModelReaderWriterOptions options) => ((IPersistableModel<EdgeJobData>)DataDeserializationInstance).GetFormatFromOptions(options);
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeSchemaCollection.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A class representing a collection of <see cref="EdgeSchemaResource"/> and their operations.
    /// Each <see cref="EdgeSchemaResource"/> in the collection will belong to the same instance of <see cref="ResourceGroupResource"/>.
    /// To get an <see cref="EdgeSchemaCollection"/> instance call the GetEdgeSchemas method from an instance of <see cref="ResourceGroupResource"/>.
    /// </summary>
    public partial class EdgeSchemaCollection : ArmCollection, IEnumerable<EdgeSchemaResource>, IAsyncEnumerable<EdgeSchemaResource>
    {
        private readonly ClientDiagnostics _edgeSchemaSchemasClientDiagnostics;
        private readonly SchemasRestOperations _edgeSchemaSchemasRestClient;

        /// <summary> Initializes a new instance of the <see cref="EdgeSchemaCollection"/> class for mocking. </summary>
        protected EdgeSchemaCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="EdgeSchemaCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal EdgeSchemaCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _edgeSchemaSchemasClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.WorkloadOrchestration", EdgeSchemaResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(EdgeSchemaResource.ResourceType, out string edgeSchemaSchemasApiVersion);
            _edgeSchemaSchemasRestClient = new SchemasRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, edgeSchemaSchemasApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceGroupResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceGroupResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Create or update a Schema Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Schema_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="schemaName"> The name of the Schema. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="schemaName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="schemaName"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<EdgeSchemaResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string schemaName, EdgeSchemaData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(schemaName, nameof(schemaName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _edgeSchemaSchemasClientDiagnostics.CreateScope("EdgeSchemaCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _edgeSchemaSchemasRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, schemaName, data, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadOrchestrationArmOperation<EdgeSchemaResource>(new EdgeSchemaOperationSource(Client), _edgeSchemaSchemasClientDiagnostics, Pipeline, _edgeSchemaSchemasRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, schemaName, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create or update a Schema Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Schema_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="schemaName"> The name of the Schema. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="schemaName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="schemaName"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<EdgeSchemaResource> CreateOrUpdate(WaitUntil waitUntil, string schemaName, EdgeSchemaData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(schemaName, nameof(schemaName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _edgeSchemaSchemasClientDiagnostics.CreateScope("EdgeSchemaCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _edgeSchemaSchemasRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, schemaName, data, cancellationToken);
                var operation = new WorkloadOrchestrationArmOperation<EdgeSchemaResource>(new EdgeSchemaOperationSource(Client), _edgeSchemaSchemasClientDiagnostics, Pipeline, _edgeSchemaSchemasRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, schemaName, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a Schema Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Schema_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="schemaName"> The name of the Schema. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="schemaName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="schemaName"/> is null. </exception>
        public virtual async Task<Response<EdgeSchemaResource>> GetAsync(string schemaName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(schemaName, nameof(schemaName));

            using var scope = _edgeSchemaSchemasClientDiagnostics.CreateScope("EdgeSchemaCollection.Get");
            scope.Start();
            try
            {
                var response = await _edgeSchemaSchemasRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, schemaName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeSchemaResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a Schema Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Schema_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="schemaName"> The name of the Schema. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="schemaName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="schemaName"/> is null. </exception>
        public virtual Response<EdgeSchemaResource> Get(string schemaName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(schemaName, nameof(schemaName));

            using var scope = _edgeSchemaSchemasClientDiagnostics.CreateScope("EdgeSchemaCollection.Get");
            scope.Start();
            try
            {
                var response = _edgeSchemaSchemasRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, schemaName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeSchemaResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List by specified resource group
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Schema_ListByResourceGroup</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="EdgeSchemaResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<EdgeSchemaResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _edgeSchemaSchemasRestClient.CreateListByResourceGroupRequest(Id.SubscriptionId, Id.ResourceGroupName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _edgeSchemaSchemasRestClient.CreateListByResourceGroupNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new EdgeSchemaResource(Client, EdgeSchemaData.DeserializeEdgeSchemaData(e)), _edgeSchemaSchemasClientDiagnostics, Pipeline, "EdgeSchemaCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List by specified resource group
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Schema_ListByResourceGroup</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="EdgeSchemaResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<EdgeSchemaResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _edgeSchemaSchemasRestClient.CreateListByResourceGroupRequest(Id.SubscriptionId, Id.ResourceGroupName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _edgeSchemaSchemasRestClient.CreateListByResourceGroupNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new EdgeSchemaResource(Client, EdgeSchemaData.DeserializeEdgeSchemaData(e)), _edgeSchemaSchemasClientDiagnostics, Pipeline, "EdgeSchemaCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Schema_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="schemaName"> The name of the Schema. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="schemaName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="schemaName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string schemaName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(schemaName, nameof(schemaName));

            using var scope = _edgeSchemaSchemasClientDiagnostics.CreateScope("EdgeSchemaCollection.Exists");
            scope.Start();
            try
            {
                var response = await _edgeSchemaSchemasRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, schemaName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Schema_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="schemaName"> The name of the Schema. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="schemaName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="schemaName"/> is null. </exception>
        public virtual Response<bool> Exists(string schemaName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(schemaName, nameof(schemaName));

            using var scope = _edgeSchemaSchemasClientDiagnostics.CreateScope("EdgeSchemaCollection.Exists");
            scope.Start();
            try
            {
                var response = _edgeSchemaSchemasRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, schemaName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Schema_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="schemaName"> The name of the Schema. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="schemaName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="schemaName"/> is null. </exception>
        public virtual async Task<NullableResponse<EdgeSchemaResource>> GetIfExistsAsync(string schemaName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(schemaName, nameof(schemaName));

            using var scope = _edgeSchemaSchemasClientDiagnostics.CreateScope("EdgeSchemaCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _edgeSchemaSchemasRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, schemaName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<EdgeSchemaResource>(response.GetRawResponse());
                return Response.FromValue(new EdgeSchemaResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Schema_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="schemaName"> The name of the Schema. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="schemaName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="schemaName"/> is null. </exception>
        public virtual NullableResponse<EdgeSchemaResource> GetIfExists(string schemaName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(schemaName, nameof(schemaName));

            using var scope = _edgeSchemaSchemasClientDiagnostics.CreateScope("EdgeSchemaCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _edgeSchemaSchemasRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, schemaName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<EdgeSchemaResource>(response.GetRawResponse());
                return Response.FromValue(new EdgeSchemaResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<EdgeSchemaResource> IEnumerable<EdgeSchemaResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<EdgeSchemaResource> IAsyncEnumerable<EdgeSchemaResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeSchemaData.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A class representing the EdgeSchema data model.
    /// Schema Resource
    /// </summary>
    public partial class EdgeSchemaData : TrackedResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeSchemaData"/>. </summary>
        /// <param name="location"> The location. </param>
        public EdgeSchemaData(AzureLocation location) : base(location)
        {
        }

        /// <summary> Initializes a new instance of <see cref="EdgeSchemaData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="etag"> If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeSchemaData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, IDictionary<string, string> tags, AzureLocation location, EdgeSchemaProperties properties, ETag? etag, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData, tags, location)
        {
            Properties = properties;
            ETag = etag;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="EdgeSchemaData"/> for deserialization. </summary>
        internal EdgeSchemaData()
        {
        }

        /// <summary> The resource-specific properties for this resource. </summary>
        public EdgeSchemaProperties Properties { get; set; }
        /// <summary> If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. </summary>
        public ETag? ETag { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeSchemaData.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    public partial class EdgeSchemaData : IUtf8JsonSerializable, IJsonModel<EdgeSchemaData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeSchemaData>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeSchemaData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSchemaData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeSchemaData)} does not support writing '{format}' format.");
            }

            base.JsonModelWriteCore(writer, options);
            if (Optional.IsDefined(Properties))
            {
                writer.WritePropertyName("properties"u8);
                writer.WriteObjectValue(Properties, options);
            }
            if (options.Format != "W" && Optional.IsDefined(ETag))
            {
                writer.WritePropertyName("eTag"u8);
                writer.WriteStringValue(ETag.Value.ToString());
            }
        }

        EdgeSchemaData IJsonModel<EdgeSchemaData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSchemaData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeSchemaData)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeSchemaData(document.RootElement, options);
        }

        internal static EdgeSchemaData DeserializeEdgeSchemaData(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            EdgeSchemaProperties properties = default;
            ETag? etag = default;
            IDictionary<string, string> tags = default;
            AzureLocation location = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            SystemData systemData = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    properties = EdgeSchemaProperties.DeserializeEdgeSchemaProperties(property.Value, options);
                    continue;
                }
                if (property.NameEquals("eTag"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    etag = new ETag(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("tags"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("location"u8))
                {
                    location = new AzureLocation(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = ModelReaderWriter.Read<SystemData>(new BinaryData(Encoding.UTF8.GetBytes(property.Value.GetRawText())), ModelSerializationExtensions.WireOptions, AzureResourceManagerWorkloadOrchestrationContext.Default);
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeSchemaData(
                id,
                name,
                type,
                systemData,
                tags ?? new ChangeTrackingDictionary<string, string>(),
                location,
                properties,
                etag,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeSchemaData>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSchemaData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeSchemaData)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeSchemaData IPersistableModel<EdgeSchemaData>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSchemaData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeSchemaData(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeSchemaData)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeSchemaData>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeSchemaReferenceCollection.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A class representing a collection of <see cref="EdgeSchemaReferenceResource"/> and their operations.
    /// Each <see cref="EdgeSchemaReferenceResource"/> in the collection will belong to the same instance of <see cref="ArmResource"/>.
    /// To get an <see cref="EdgeSchemaReferenceCollection"/> instance call the GetEdgeSchemaReferences method from an instance of <see cref="ArmResource"/>.
    /// </summary>
    public partial class EdgeSchemaReferenceCollection : ArmCollection, IEnumerable<EdgeSchemaReferenceResource>, IAsyncEnumerable<EdgeSchemaReferenceResource>
    {
        private readonly ClientDiagnostics _edgeSchemaReferenceSchemaReferencesClientDiagnostics;
        private readonly SchemaReferencesRestOperations _edgeSchemaReferenceSchemaReferencesRestClient;

        /// <summary> Initializes a new instance of the <see cref="EdgeSchemaReferenceCollection"/> class for mocking. </summary>
        protected EdgeSchemaReferenceCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="EdgeSchemaReferenceCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal EdgeSchemaReferenceCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _edgeSchemaReferenceSchemaReferencesClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.WorkloadOrchestration", EdgeSchemaReferenceResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(EdgeSchemaReferenceResource.ResourceType, out string edgeSchemaReferenceSchemaReferencesApiVersion);
            _edgeSchemaReferenceSchemaReferencesRestClient = new SchemaReferencesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, edgeSchemaReferenceSchemaReferencesApiVersion);
        }

        /// <summary>
        /// Get a Schema Reference Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/schemaReferences/{schemaReferenceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SchemaReference_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaReferenceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="schemaReferenceName"> The name of the SchemaReference. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="schemaReferenceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="schemaReferenceName"/> is null. </exception>
        public virtual async Task<Response<EdgeSchemaReferenceResource>> GetAsync(string schemaReferenceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(schemaReferenceName, nameof(schemaReferenceName));

            using var scope = _edgeSchemaReferenceSchemaReferencesClientDiagnostics.CreateScope("EdgeSchemaReferenceCollection.Get");
            scope.Start();
            try
            {
                var response = await _edgeSchemaReferenceSchemaReferencesRestClient.GetAsync(Id, schemaReferenceName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeSchemaReferenceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a Schema Reference Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/schemaReferences/{schemaReferenceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SchemaReference_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaReferenceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="schemaReferenceName"> The name of the SchemaReference. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="schemaReferenceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="schemaReferenceName"/> is null. </exception>
        public virtual Response<EdgeSchemaReferenceResource> Get(string schemaReferenceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(schemaReferenceName, nameof(schemaReferenceName));

            using var scope = _edgeSchemaReferenceSchemaReferencesClientDiagnostics.CreateScope("EdgeSchemaReferenceCollection.Get");
            scope.Start();
            try
            {
                var response = _edgeSchemaReferenceSchemaReferencesRestClient.Get(Id, schemaReferenceName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeSchemaReferenceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List by specified resource group
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/schemaReferences</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SchemaReference_ListByResourceGroup</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaReferenceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="EdgeSchemaReferenceResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<EdgeSchemaReferenceResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _edgeSchemaReferenceSchemaReferencesRestClient.CreateListByResourceGroupRequest(Id);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _edgeSchemaReferenceSchemaReferencesRestClient.CreateListByResourceGroupNextPageRequest(nextLink, Id);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new EdgeSchemaReferenceResource(Client, EdgeSchemaReferenceData.DeserializeEdgeSchemaReferenceData(e)), _edgeSchemaReferenceSchemaReferencesClientDiagnostics, Pipeline, "EdgeSchemaReferenceCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List by specified resource group
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/schemaReferences</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SchemaReference_ListByResourceGroup</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaReferenceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="EdgeSchemaReferenceResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<EdgeSchemaReferenceResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _edgeSchemaReferenceSchemaReferencesRestClient.CreateListByResourceGroupRequest(Id);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _edgeSchemaReferenceSchemaReferencesRestClient.CreateListByResourceGroupNextPageRequest(nextLink, Id);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new EdgeSchemaReferenceResource(Client, EdgeSchemaReferenceData.DeserializeEdgeSchemaReferenceData(e)), _edgeSchemaReferenceSchemaReferencesClientDiagnostics, Pipeline, "EdgeSchemaReferenceCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/schemaReferences/{schemaReferenceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SchemaReference_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaReferenceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="schemaReferenceName"> The name of the SchemaReference. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="schemaReferenceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="schemaReferenceName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string schemaReferenceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(schemaReferenceName, nameof(schemaReferenceName));

            using var scope = _edgeSchemaReferenceSchemaReferencesClientDiagnostics.CreateScope("EdgeSchemaReferenceCollection.Exists");
            scope.Start();
            try
            {
                var response = await _edgeSchemaReferenceSchemaReferencesRestClient.GetAsync(Id, schemaReferenceName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/schemaReferences/{schemaReferenceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SchemaReference_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaReferenceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="schemaReferenceName"> The name of the SchemaReference. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="schemaReferenceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="schemaReferenceName"/> is null. </exception>
        public virtual Response<bool> Exists(string schemaReferenceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(schemaReferenceName, nameof(schemaReferenceName));

            using var scope = _edgeSchemaReferenceSchemaReferencesClientDiagnostics.CreateScope("EdgeSchemaReferenceCollection.Exists");
            scope.Start();
            try
            {
                var response = _edgeSchemaReferenceSchemaReferencesRestClient.Get(Id, schemaReferenceName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/schemaReferences/{schemaReferenceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SchemaReference_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaReferenceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="schemaReferenceName"> The name of the SchemaReference. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="schemaReferenceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="schemaReferenceName"/> is null. </exception>
        public virtual async Task<NullableResponse<EdgeSchemaReferenceResource>> GetIfExistsAsync(string schemaReferenceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(schemaReferenceName, nameof(schemaReferenceName));

            using var scope = _edgeSchemaReferenceSchemaReferencesClientDiagnostics.CreateScope("EdgeSchemaReferenceCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _edgeSchemaReferenceSchemaReferencesRestClient.GetAsync(Id, schemaReferenceName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<EdgeSchemaReferenceResource>(response.GetRawResponse());
                return Response.FromValue(new EdgeSchemaReferenceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/schemaReferences/{schemaReferenceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SchemaReference_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaReferenceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="schemaReferenceName"> The name of the SchemaReference. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="schemaReferenceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="schemaReferenceName"/> is null. </exception>
        public virtual NullableResponse<EdgeSchemaReferenceResource> GetIfExists(string schemaReferenceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(schemaReferenceName, nameof(schemaReferenceName));

            using var scope = _edgeSchemaReferenceSchemaReferencesClientDiagnostics.CreateScope("EdgeSchemaReferenceCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _edgeSchemaReferenceSchemaReferencesRestClient.Get(Id, schemaReferenceName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<EdgeSchemaReferenceResource>(response.GetRawResponse());
                return Response.FromValue(new EdgeSchemaReferenceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<EdgeSchemaReferenceResource> IEnumerable<EdgeSchemaReferenceResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<EdgeSchemaReferenceResource> IAsyncEnumerable<EdgeSchemaReferenceResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeSchemaReferenceData.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A class representing the EdgeSchemaReference data model.
    /// Schema Reference Resource
    /// </summary>
    public partial class EdgeSchemaReferenceData : ResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeSchemaReferenceData"/>. </summary>
        internal EdgeSchemaReferenceData()
        {
        }

        /// <summary> Initializes a new instance of <see cref="EdgeSchemaReferenceData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="etag"> If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeSchemaReferenceData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, EdgeSchemaReferenceProperties properties, ETag? etag, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData)
        {
            Properties = properties;
            ETag = etag;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The resource-specific properties for this resource. </summary>
        public EdgeSchemaReferenceProperties Properties { get; }
        /// <summary> If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. </summary>
        public ETag? ETag { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeSchemaReferenceData.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    public partial class EdgeSchemaReferenceData : IUtf8JsonSerializable, IJsonModel<EdgeSchemaReferenceData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeSchemaReferenceData>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeSchemaReferenceData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSchemaReferenceData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeSchemaReferenceData)} does not support writing '{format}' format.");
            }

            base.JsonModelWriteCore(writer, options);
            if (Optional.IsDefined(Properties))
            {
                writer.WritePropertyName("properties"u8);
                writer.WriteObjectValue(Properties, options);
            }
            if (options.Format != "W" && Optional.IsDefined(ETag))
            {
                writer.WritePropertyName("eTag"u8);
                writer.WriteStringValue(ETag.Value.ToString());
            }
        }

        EdgeSchemaReferenceData IJsonModel<EdgeSchemaReferenceData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSchemaReferenceData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeSchemaReferenceData)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeSchemaReferenceData(document.RootElement, options);
        }

        internal static EdgeSchemaReferenceData DeserializeEdgeSchemaReferenceData(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            EdgeSchemaReferenceProperties properties = default;
            ETag? etag = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            SystemData systemData = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    properties = EdgeSchemaReferenceProperties.DeserializeEdgeSchemaReferenceProperties(property.Value, options);
                    continue;
                }
                if (property.NameEquals("eTag"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    etag = new ETag(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = ModelReaderWriter.Read<SystemData>(new BinaryData(Encoding.UTF8.GetBytes(property.Value.GetRawText())), ModelSerializationExtensions.WireOptions, AzureResourceManagerWorkloadOrchestrationContext.Default);
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeSchemaReferenceData(
                id,
                name,
                type,
                systemData,
                properties,
                etag,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeSchemaReferenceData>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSchemaReferenceData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeSchemaReferenceData)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeSchemaReferenceData IPersistableModel<EdgeSchemaReferenceData>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSchemaReferenceData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeSchemaReferenceData(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeSchemaReferenceData)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeSchemaReferenceData>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeSchemaReferenceResource.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A Class representing an EdgeSchemaReference along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier"/> you can construct an <see cref="EdgeSchemaReferenceResource"/>
    /// from an instance of <see cref="ArmClient"/> using the GetEdgeSchemaReferenceResource method.
    /// Otherwise you can get one from its parent resource <see cref="ArmResource"/> using the GetEdgeSchemaReference method.
    /// </summary>
    public partial class EdgeSchemaReferenceResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="EdgeSchemaReferenceResource"/> instance. </summary>
        /// <param name="resourceUri"> The resourceUri. </param>
        /// <param name="schemaReferenceName"> The schemaReferenceName. </param>
        public static ResourceIdentifier CreateResourceIdentifier(string resourceUri, string schemaReferenceName)
        {
            var resourceId = $"{resourceUri}/providers/Microsoft.Edge/schemaReferences/{schemaReferenceName}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _edgeSchemaReferenceSchemaReferencesClientDiagnostics;
        private readonly SchemaReferencesRestOperations _edgeSchemaReferenceSchemaReferencesRestClient;
        private readonly EdgeSchemaReferenceData _data;

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.Edge/schemaReferences";

        /// <summary> Initializes a new instance of the <see cref="EdgeSchemaReferenceResource"/> class for mocking. </summary>
        protected EdgeSchemaReferenceResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="EdgeSchemaReferenceResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal EdgeSchemaReferenceResource(ArmClient client, EdgeSchemaReferenceData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="EdgeSchemaReferenceResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal EdgeSchemaReferenceResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _edgeSchemaReferenceSchemaReferencesClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.WorkloadOrchestration", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string edgeSchemaReferenceSchemaReferencesApiVersion);
            _edgeSchemaReferenceSchemaReferencesRestClient = new SchemaReferencesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, edgeSchemaReferenceSchemaReferencesApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual EdgeSchemaReferenceData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary>
        /// Get a Schema Reference Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/schemaReferences/{schemaReferenceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SchemaReference_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaReferenceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<EdgeSchemaReferenceResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _edgeSchemaReferenceSchemaReferencesClientDiagnostics.CreateScope("EdgeSchemaReferenceResource.Get");
            scope.Start();
            try
            {
                var response = await _edgeSchemaReferenceSchemaReferencesRestClient.GetAsync(Id.Parent, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeSchemaReferenceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a Schema Reference Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/schemaReferences/{schemaReferenceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SchemaReference_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaReferenceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<EdgeSchemaReferenceResource> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _edgeSchemaReferenceSchemaReferencesClientDiagnostics.CreateScope("EdgeSchemaReferenceResource.Get");
            scope.Start();
            try
            {
                var response = _edgeSchemaReferenceSchemaReferencesRestClient.Get(Id.Parent, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeSchemaReferenceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeSchemaReferenceResource.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Text.Json;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    public partial class EdgeSchemaReferenceResource : IJsonModel<EdgeSchemaReferenceData>
    {
        private static EdgeSchemaReferenceData s_dataDeserializationInstance;
        private static EdgeSchemaReferenceData DataDeserializationInstance => s_dataDeserializationInstance ??= new();

        void IJsonModel<EdgeSchemaReferenceData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options) => ((IJsonModel<EdgeSchemaReferenceData>)Data).Write(writer, options);

        EdgeSchemaReferenceData IJsonModel<EdgeSchemaReferenceData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => ((IJsonModel<EdgeSchemaReferenceData>)DataDeserializationInstance).Create(ref reader, options);

        BinaryData IPersistableModel<EdgeSchemaReferenceData>.Write(ModelReaderWriterOptions options) => ModelReaderWriter.Write<EdgeSchemaReferenceData>(Data, options, AzureResourceManagerWorkloadOrchestrationContext.Default);

        EdgeSchemaReferenceData IPersistableModel<EdgeSchemaReferenceData>.Create(BinaryData data, ModelReaderWriterOptions options) => ModelReaderWriter.Read<EdgeSchemaReferenceData>(data, options, AzureResourceManagerWorkloadOrchestrationContext.Default);

        string IPersistableModel<EdgeSchemaReferenceData>.GetFormatFromOptions(ModelReaderWriterOptions options) => ((IPersistableModel<EdgeSchemaReferenceData>)DataDeserializationInstance).GetFormatFromOptions(options);
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeSchemaResource.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A Class representing an EdgeSchema along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier"/> you can construct an <see cref="EdgeSchemaResource"/>
    /// from an instance of <see cref="ArmClient"/> using the GetEdgeSchemaResource method.
    /// Otherwise you can get one from its parent resource <see cref="ResourceGroupResource"/> using the GetEdgeSchema method.
    /// </summary>
    public partial class EdgeSchemaResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="EdgeSchemaResource"/> instance. </summary>
        /// <param name="subscriptionId"> The subscriptionId. </param>
        /// <param name="resourceGroupName"> The resourceGroupName. </param>
        /// <param name="schemaName"> The schemaName. </param>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string schemaName)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _edgeSchemaSchemasClientDiagnostics;
        private readonly SchemasRestOperations _edgeSchemaSchemasRestClient;
        private readonly EdgeSchemaData _data;

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.Edge/schemas";

        /// <summary> Initializes a new instance of the <see cref="EdgeSchemaResource"/> class for mocking. </summary>
        protected EdgeSchemaResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="EdgeSchemaResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal EdgeSchemaResource(ArmClient client, EdgeSchemaData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="EdgeSchemaResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal EdgeSchemaResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _edgeSchemaSchemasClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.WorkloadOrchestration", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string edgeSchemaSchemasApiVersion);
            _edgeSchemaSchemasRestClient = new SchemasRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, edgeSchemaSchemasApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual EdgeSchemaData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary> Gets a collection of EdgeDynamicSchemaResources in the EdgeSchema. </summary>
        /// <returns> An object representing collection of EdgeDynamicSchemaResources and their operations over a EdgeDynamicSchemaResource. </returns>
        public virtual EdgeDynamicSchemaCollection GetEdgeDynamicSchemas()
        {
            return GetCachedClient(client => new EdgeDynamicSchemaCollection(client, Id));
        }

        /// <summary>
        /// Get a DynamicSchema Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas/{dynamicSchemaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DynamicSchema_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDynamicSchemaResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="dynamicSchemaName"> The name of the DynamicSchema. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dynamicSchemaName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="dynamicSchemaName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<EdgeDynamicSchemaResource>> GetEdgeDynamicSchemaAsync(string dynamicSchemaName, CancellationToken cancellationToken = default)
        {
            return await GetEdgeDynamicSchemas().GetAsync(dynamicSchemaName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a DynamicSchema Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/dynamicSchemas/{dynamicSchemaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DynamicSchema_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDynamicSchemaResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="dynamicSchemaName"> The name of the DynamicSchema. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dynamicSchemaName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="dynamicSchemaName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<EdgeDynamicSchemaResource> GetEdgeDynamicSchema(string dynamicSchemaName, CancellationToken cancellationToken = default)
        {
            return GetEdgeDynamicSchemas().Get(dynamicSchemaName, cancellationToken);
        }

        /// <summary> Gets a collection of EdgeSchemaVersionResources in the EdgeSchema. </summary>
        /// <returns> An object representing collection of EdgeSchemaVersionResources and their operations over a EdgeSchemaVersionResource. </returns>
        public virtual EdgeSchemaVersionCollection GetEdgeSchemaVersions()
        {
            return GetCachedClient(client => new EdgeSchemaVersionCollection(client, Id));
        }

        /// <summary>
        /// Get a Schema Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/versions/{schemaVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SchemaVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="schemaVersionName"> The name of the SchemaVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="schemaVersionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="schemaVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<EdgeSchemaVersionResource>> GetEdgeSchemaVersionAsync(string schemaVersionName, CancellationToken cancellationToken = default)
        {
            return await GetEdgeSchemaVersions().GetAsync(schemaVersionName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a Schema Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/versions/{schemaVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SchemaVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="schemaVersionName"> The name of the SchemaVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="schemaVersionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="schemaVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<EdgeSchemaVersionResource> GetEdgeSchemaVersion(string schemaVersionName, CancellationToken cancellationToken = default)
        {
            return GetEdgeSchemaVersions().Get(schemaVersionName, cancellationToken);
        }

        /// <summary>
        /// Get a Schema Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Schema_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<EdgeSchemaResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _edgeSchemaSchemasClientDiagnostics.CreateScope("EdgeSchemaResource.Get");
            scope.Start();
            try
            {
                var response = await _edgeSchemaSchemasRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeSchemaResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a Schema Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Schema_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<EdgeSchemaResource> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _edgeSchemaSchemasClientDiagnostics.CreateScope("EdgeSchemaResource.Get");
            scope.Start();
            try
            {
                var response = _edgeSchemaSchemasRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeSchemaResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete a Schema Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Schema_Delete</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> DeleteAsync(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _edgeSchemaSchemasClientDiagnostics.CreateScope("EdgeSchemaResource.Delete");
            scope.Start();
            try
            {
                var response = await _edgeSchemaSchemasRestClient.DeleteAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadOrchestrationArmOperation(_edgeSchemaSchemasClientDiagnostics, Pipeline, _edgeSchemaSchemasRestClient.CreateDeleteRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete a Schema Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Schema_Delete</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation Delete(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _edgeSchemaSchemasClientDiagnostics.CreateScope("EdgeSchemaResource.Delete");
            scope.Start();
            try
            {
                var response = _edgeSchemaSchemasRestClient.Delete(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                var operation = new WorkloadOrchestrationArmOperation(_edgeSchemaSchemasClientDiagnostics, Pipeline, _edgeSchemaSchemasRestClient.CreateDeleteRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// update a Schema Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Schema_Update</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="patch"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="patch"/> is null. </exception>
        public virtual async Task<Response<EdgeSchemaResource>> UpdateAsync(EdgeSchemaPatch patch, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(patch, nameof(patch));

            using var scope = _edgeSchemaSchemasClientDiagnostics.CreateScope("EdgeSchemaResource.Update");
            scope.Start();
            try
            {
                var response = await _edgeSchemaSchemasRestClient.UpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, patch, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new EdgeSchemaResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// update a Schema Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Schema_Update</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="patch"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="patch"/> is null. </exception>
        public virtual Response<EdgeSchemaResource> Update(EdgeSchemaPatch patch, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(patch, nameof(patch));

            using var scope = _edgeSchemaSchemasClientDiagnostics.CreateScope("EdgeSchemaResource.Update");
            scope.Start();
            try
            {
                var response = _edgeSchemaSchemasRestClient.Update(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, patch, cancellationToken);
                return Response.FromValue(new EdgeSchemaResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create a Schema Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/createVersion</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Schemas_CreateVersion</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="body"> The content of the action request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public virtual async Task<ArmOperation<EdgeSchemaVersionResource>> CreateVersionAsync(WaitUntil waitUntil, EdgeSchemaVersionWithUpdateType body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(body, nameof(body));

            using var scope = _edgeSchemaSchemasClientDiagnostics.CreateScope("EdgeSchemaResource.CreateVersion");
            scope.Start();
            try
            {
                var response = await _edgeSchemaSchemasRestClient.CreateVersionAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, body, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadOrchestrationArmOperation<EdgeSchemaVersionResource>(new EdgeSchemaVersionOperationSource(Client), _edgeSchemaSchemasClientDiagnostics, Pipeline, _edgeSchemaSchemasRestClient.CreateCreateVersionRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, body).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create a Schema Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/createVersion</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Schemas_CreateVersion</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="body"> The content of the action request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public virtual ArmOperation<EdgeSchemaVersionResource> CreateVersion(WaitUntil waitUntil, EdgeSchemaVersionWithUpdateType body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(body, nameof(body));

            using var scope = _edgeSchemaSchemasClientDiagnostics.CreateScope("EdgeSchemaResource.CreateVersion");
            scope.Start();
            try
            {
                var response = _edgeSchemaSchemasRestClient.CreateVersion(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, body, cancellationToken);
                var operation = new WorkloadOrchestrationArmOperation<EdgeSchemaVersionResource>(new EdgeSchemaVersionOperationSource(Client), _edgeSchemaSchemasClientDiagnostics, Pipeline, _edgeSchemaSchemasRestClient.CreateCreateVersionRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, body).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Remove Schema Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/removeVersion</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Schemas_RemoveVersion</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content of the action request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        public virtual async Task<Response<RemoveVersionResult>> RemoveVersionAsync(EdgeVersionContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = _edgeSchemaSchemasClientDiagnostics.CreateScope("EdgeSchemaResource.RemoveVersion");
            scope.Start();
            try
            {
                var response = await _edgeSchemaSchemasRestClient.RemoveVersionAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, content, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Remove Schema Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/removeVersion</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Schemas_RemoveVersion</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content of the action request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        public virtual Response<RemoveVersionResult> RemoveVersion(EdgeVersionContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = _edgeSchemaSchemasClientDiagnostics.CreateScope("EdgeSchemaResource.RemoveVersion");
            scope.Start();
            try
            {
                var response = _edgeSchemaSchemasRestClient.RemoveVersion(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, content, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Add a tag to the current resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Schema_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="value"> The value for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> or <paramref name="value"/> is null. </exception>
        public virtual async Task<Response<EdgeSchemaResource>> AddTagAsync(string key, string value, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(key, nameof(key));
            Argument.AssertNotNull(value, nameof(value));

            using var scope = _edgeSchemaSchemasClientDiagnostics.CreateScope("EdgeSchemaResource.AddTag");
            scope.Start();
            try
            {
                if (await CanUseTagResourceAsync(cancellationToken: cancellationToken).ConfigureAwait(false))
                {
                    var originalTags = await GetTagResource().GetAsync(cancellationToken).ConfigureAwait(false);
                    originalTags.Value.Data.TagValues[key] = value;
                    await GetTagResource().CreateOrUpdateAsync(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken).ConfigureAwait(false);
                    var originalResponse = await _edgeSchemaSchemasRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                    return Response.FromValue(new EdgeSchemaResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
                }
                else
                {
                    var current = (await GetAsync(cancellationToken: cancellationToken).ConfigureAwait(false)).Value.Data;
                    var patch = new EdgeSchemaPatch();
                    foreach (var tag in current.Tags)
                    {
                        patch.Tags.Add(tag);
                    }
                    patch.Tags[key] = value;
                    var result = await UpdateAsync(patch, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return result;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Add a tag to the current resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Schema_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="value"> The value for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> or <paramref name="value"/> is null. </exception>
        public virtual Response<EdgeSchemaResource> AddTag(string key, string value, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(key, nameof(key));
            Argument.AssertNotNull(value, nameof(value));

            using var scope = _edgeSchemaSchemasClientDiagnostics.CreateScope("EdgeSchemaResource.AddTag");
            scope.Start();
            try
            {
                if (CanUseTagResource(cancellationToken: cancellationToken))
                {
                    var originalTags = GetTagResource().Get(cancellationToken);
                    originalTags.Value.Data.TagValues[key] = value;
                    GetTagResource().CreateOrUpdate(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken);
                    var originalResponse = _edgeSchemaSchemasRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                    return Response.FromValue(new EdgeSchemaResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
                }
                else
                {
                    var current = Get(cancellationToken: cancellationToken).Value.Data;
                    var patch = new EdgeSchemaPatch();
                    foreach (var tag in current.Tags)
                    {
                        patch.Tags.Add(tag);
                    }
                    patch.Tags[key] = value;
                    var result = Update(patch, cancellationToken: cancellationToken);
                    return result;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Replace the tags on the resource with the given set.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Schema_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="tags"> The set of tags to use as replacement. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tags"/> is null. </exception>
        public virtual async Task<Response<EdgeSchemaResource>> SetTagsAsync(IDictionary<string, string> tags, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(tags, nameof(tags));

            using var scope = _edgeSchemaSchemasClientDiagnostics.CreateScope("EdgeSchemaResource.SetTags");
            scope.Start();
            try
            {
                if (await CanUseTagResourceAsync(cancellationToken: cancellationToken).ConfigureAwait(false))
                {
                    await GetTagResource().DeleteAsync(WaitUntil.Completed, cancellationToken: cancellationToken).ConfigureAwait(false);
                    var originalTags = await GetTagResource().GetAsync(cancellationToken).ConfigureAwait(false);
                    originalTags.Value.Data.TagValues.ReplaceWith(tags);
                    await GetTagResource().CreateOrUpdateAsync(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken).ConfigureAwait(false);
                    var originalResponse = await _edgeSchemaSchemasRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                    return Response.FromValue(new EdgeSchemaResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
                }
                else
                {
                    var current = (await GetAsync(cancellationToken: cancellationToken).ConfigureAwait(false)).Value.Data;
                    var patch = new EdgeSchemaPatch();
                    patch.Tags.ReplaceWith(tags);
                    var result = await UpdateAsync(patch, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return result;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Replace the tags on the resource with the given set.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Schema_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="tags"> The set of tags to use as replacement. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tags"/> is null. </exception>
        public virtual Response<EdgeSchemaResource> SetTags(IDictionary<string, string> tags, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(tags, nameof(tags));

            using var scope = _edgeSchemaSchemasClientDiagnostics.CreateScope("EdgeSchemaResource.SetTags");
            scope.Start();
            try
            {
                if (CanUseTagResource(cancellationToken: cancellationToken))
                {
                    GetTagResource().Delete(WaitUntil.Completed, cancellationToken: cancellationToken);
                    var originalTags = GetTagResource().Get(cancellationToken);
                    originalTags.Value.Data.TagValues.ReplaceWith(tags);
                    GetTagResource().CreateOrUpdate(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken);
                    var originalResponse = _edgeSchemaSchemasRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                    return Response.FromValue(new EdgeSchemaResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
                }
                else
                {
                    var current = Get(cancellationToken: cancellationToken).Value.Data;
                    var patch = new EdgeSchemaPatch();
                    patch.Tags.ReplaceWith(tags);
                    var result = Update(patch, cancellationToken: cancellationToken);
                    return result;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Removes a tag by key from the resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Schema_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> is null. </exception>
        public virtual async Task<Response<EdgeSchemaResource>> RemoveTagAsync(string key, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(key, nameof(key));

            using var scope = _edgeSchemaSchemasClientDiagnostics.CreateScope("EdgeSchemaResource.RemoveTag");
            scope.Start();
            try
            {
                if (await CanUseTagResourceAsync(cancellationToken: cancellationToken).ConfigureAwait(false))
                {
                    var originalTags = await GetTagResource().GetAsync(cancellationToken).ConfigureAwait(false);
                    originalTags.Value.Data.TagValues.Remove(key);
                    await GetTagResource().CreateOrUpdateAsync(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken).ConfigureAwait(false);
                    var originalResponse = await _edgeSchemaSchemasRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                    return Response.FromValue(new EdgeSchemaResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
                }
                else
                {
                    var current = (await GetAsync(cancellationToken: cancellationToken).ConfigureAwait(false)).Value.Data;
                    var patch = new EdgeSchemaPatch();
                    foreach (var tag in current.Tags)
                    {
                        patch.Tags.Add(tag);
                    }
                    patch.Tags.Remove(key);
                    var result = await UpdateAsync(patch, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return result;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Removes a tag by key from the resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Schema_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> is null. </exception>
        public virtual Response<EdgeSchemaResource> RemoveTag(string key, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(key, nameof(key));

            using var scope = _edgeSchemaSchemasClientDiagnostics.CreateScope("EdgeSchemaResource.RemoveTag");
            scope.Start();
            try
            {
                if (CanUseTagResource(cancellationToken: cancellationToken))
                {
                    var originalTags = GetTagResource().Get(cancellationToken);
                    originalTags.Value.Data.TagValues.Remove(key);
                    GetTagResource().CreateOrUpdate(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken);
                    var originalResponse = _edgeSchemaSchemasRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                    return Response.FromValue(new EdgeSchemaResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
                }
                else
                {
                    var current = Get(cancellationToken: cancellationToken).Value.Data;
                    var patch = new EdgeSchemaPatch();
                    foreach (var tag in current.Tags)
                    {
                        patch.Tags.Add(tag);
                    }
                    patch.Tags.Remove(key);
                    var result = Update(patch, cancellationToken: cancellationToken);
                    return result;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeSchemaResource.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Text.Json;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    public partial class EdgeSchemaResource : IJsonModel<EdgeSchemaData>
    {
        private static EdgeSchemaData s_dataDeserializationInstance;
        private static EdgeSchemaData DataDeserializationInstance => s_dataDeserializationInstance ??= new();

        void IJsonModel<EdgeSchemaData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options) => ((IJsonModel<EdgeSchemaData>)Data).Write(writer, options);

        EdgeSchemaData IJsonModel<EdgeSchemaData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => ((IJsonModel<EdgeSchemaData>)DataDeserializationInstance).Create(ref reader, options);

        BinaryData IPersistableModel<EdgeSchemaData>.Write(ModelReaderWriterOptions options) => ModelReaderWriter.Write<EdgeSchemaData>(Data, options, AzureResourceManagerWorkloadOrchestrationContext.Default);

        EdgeSchemaData IPersistableModel<EdgeSchemaData>.Create(BinaryData data, ModelReaderWriterOptions options) => ModelReaderWriter.Read<EdgeSchemaData>(data, options, AzureResourceManagerWorkloadOrchestrationContext.Default);

        string IPersistableModel<EdgeSchemaData>.GetFormatFromOptions(ModelReaderWriterOptions options) => ((IPersistableModel<EdgeSchemaData>)DataDeserializationInstance).GetFormatFromOptions(options);
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeSchemaVersionCollection.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A class representing a collection of <see cref="EdgeSchemaVersionResource"/> and their operations.
    /// Each <see cref="EdgeSchemaVersionResource"/> in the collection will belong to the same instance of <see cref="EdgeSchemaResource"/>.
    /// To get an <see cref="EdgeSchemaVersionCollection"/> instance call the GetEdgeSchemaVersions method from an instance of <see cref="EdgeSchemaResource"/>.
    /// </summary>
    public partial class EdgeSchemaVersionCollection : ArmCollection, IEnumerable<EdgeSchemaVersionResource>, IAsyncEnumerable<EdgeSchemaVersionResource>
    {
        private readonly ClientDiagnostics _edgeSchemaVersionSchemaVersionsClientDiagnostics;
        private readonly SchemaVersionsRestOperations _edgeSchemaVersionSchemaVersionsRestClient;

        /// <summary> Initializes a new instance of the <see cref="EdgeSchemaVersionCollection"/> class for mocking. </summary>
        protected EdgeSchemaVersionCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="EdgeSchemaVersionCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal EdgeSchemaVersionCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _edgeSchemaVersionSchemaVersionsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.WorkloadOrchestration", EdgeSchemaVersionResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(EdgeSchemaVersionResource.ResourceType, out string edgeSchemaVersionSchemaVersionsApiVersion);
            _edgeSchemaVersionSchemaVersionsRestClient = new SchemaVersionsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, edgeSchemaVersionSchemaVersionsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != EdgeSchemaResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, EdgeSchemaResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Create or update a Schema Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/versions/{schemaVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SchemaVersion_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="schemaVersionName"> The name of the SchemaVersion. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="schemaVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="schemaVersionName"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<EdgeSchemaVersionResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string schemaVersionName, EdgeSchemaVersionData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(schemaVersionName, nameof(schemaVersionName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _edgeSchemaVersionSchemaVersionsClientDiagnostics.CreateScope("EdgeSchemaVersionCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _edgeSchemaVersionSchemaVersionsRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, schemaVersionName, data, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadOrchestrationArmOperation<EdgeSchemaVersionResource>(new EdgeSchemaVersionOperationSource(Client), _edgeSchemaVersionSchemaVersionsClientDiagnostics, Pipeline, _edgeSchemaVersionSchemaVersionsRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, schemaVersionName, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create or update a Schema Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/versions/{schemaVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SchemaVersion_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="schemaVersionName"> The name of the SchemaVersion. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="schemaVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="schemaVersionName"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<EdgeSchemaVersionResource> CreateOrUpdate(WaitUntil waitUntil, string schemaVersionName, EdgeSchemaVersionData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(schemaVersionName, nameof(schemaVersionName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _edgeSchemaVersionSchemaVersionsClientDiagnostics.CreateScope("EdgeSchemaVersionCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _edgeSchemaVersionSchemaVersionsRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, schemaVersionName, data, cancellationToken);
                var operation = new WorkloadOrchestrationArmOperation<EdgeSchemaVersionResource>(new EdgeSchemaVersionOperationSource(Client), _edgeSchemaVersionSchemaVersionsClientDiagnostics, Pipeline, _edgeSchemaVersionSchemaVersionsRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, schemaVersionName, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a Schema Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/versions/{schemaVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SchemaVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="schemaVersionName"> The name of the SchemaVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="schemaVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="schemaVersionName"/> is null. </exception>
        public virtual async Task<Response<EdgeSchemaVersionResource>> GetAsync(string schemaVersionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(schemaVersionName, nameof(schemaVersionName));

            using var scope = _edgeSchemaVersionSchemaVersionsClientDiagnostics.CreateScope("EdgeSchemaVersionCollection.Get");
            scope.Start();
            try
            {
                var response = await _edgeSchemaVersionSchemaVersionsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, schemaVersionName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeSchemaVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a Schema Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/versions/{schemaVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SchemaVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="schemaVersionName"> The name of the SchemaVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="schemaVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="schemaVersionName"/> is null. </exception>
        public virtual Response<EdgeSchemaVersionResource> Get(string schemaVersionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(schemaVersionName, nameof(schemaVersionName));

            using var scope = _edgeSchemaVersionSchemaVersionsClientDiagnostics.CreateScope("EdgeSchemaVersionCollection.Get");
            scope.Start();
            try
            {
                var response = _edgeSchemaVersionSchemaVersionsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, schemaVersionName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeSchemaVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List by specified resource group
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/versions</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SchemaVersion_ListBySchema</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="EdgeSchemaVersionResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<EdgeSchemaVersionResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _edgeSchemaVersionSchemaVersionsRestClient.CreateListBySchemaRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _edgeSchemaVersionSchemaVersionsRestClient.CreateListBySchemaNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new EdgeSchemaVersionResource(Client, EdgeSchemaVersionData.DeserializeEdgeSchemaVersionData(e)), _edgeSchemaVersionSchemaVersionsClientDiagnostics, Pipeline, "EdgeSchemaVersionCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List by specified resource group
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/versions</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SchemaVersion_ListBySchema</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="EdgeSchemaVersionResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<EdgeSchemaVersionResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _edgeSchemaVersionSchemaVersionsRestClient.CreateListBySchemaRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _edgeSchemaVersionSchemaVersionsRestClient.CreateListBySchemaNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new EdgeSchemaVersionResource(Client, EdgeSchemaVersionData.DeserializeEdgeSchemaVersionData(e)), _edgeSchemaVersionSchemaVersionsClientDiagnostics, Pipeline, "EdgeSchemaVersionCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/versions/{schemaVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SchemaVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="schemaVersionName"> The name of the SchemaVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="schemaVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="schemaVersionName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string schemaVersionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(schemaVersionName, nameof(schemaVersionName));

            using var scope = _edgeSchemaVersionSchemaVersionsClientDiagnostics.CreateScope("EdgeSchemaVersionCollection.Exists");
            scope.Start();
            try
            {
                var response = await _edgeSchemaVersionSchemaVersionsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, schemaVersionName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/versions/{schemaVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SchemaVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="schemaVersionName"> The name of the SchemaVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="schemaVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="schemaVersionName"/> is null. </exception>
        public virtual Response<bool> Exists(string schemaVersionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(schemaVersionName, nameof(schemaVersionName));

            using var scope = _edgeSchemaVersionSchemaVersionsClientDiagnostics.CreateScope("EdgeSchemaVersionCollection.Exists");
            scope.Start();
            try
            {
                var response = _edgeSchemaVersionSchemaVersionsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, schemaVersionName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/versions/{schemaVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SchemaVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="schemaVersionName"> The name of the SchemaVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="schemaVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="schemaVersionName"/> is null. </exception>
        public virtual async Task<NullableResponse<EdgeSchemaVersionResource>> GetIfExistsAsync(string schemaVersionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(schemaVersionName, nameof(schemaVersionName));

            using var scope = _edgeSchemaVersionSchemaVersionsClientDiagnostics.CreateScope("EdgeSchemaVersionCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _edgeSchemaVersionSchemaVersionsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, schemaVersionName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<EdgeSchemaVersionResource>(response.GetRawResponse());
                return Response.FromValue(new EdgeSchemaVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/versions/{schemaVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SchemaVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="schemaVersionName"> The name of the SchemaVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="schemaVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="schemaVersionName"/> is null. </exception>
        public virtual NullableResponse<EdgeSchemaVersionResource> GetIfExists(string schemaVersionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(schemaVersionName, nameof(schemaVersionName));

            using var scope = _edgeSchemaVersionSchemaVersionsClientDiagnostics.CreateScope("EdgeSchemaVersionCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _edgeSchemaVersionSchemaVersionsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, schemaVersionName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<EdgeSchemaVersionResource>(response.GetRawResponse());
                return Response.FromValue(new EdgeSchemaVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<EdgeSchemaVersionResource> IEnumerable<EdgeSchemaVersionResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<EdgeSchemaVersionResource> IAsyncEnumerable<EdgeSchemaVersionResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeSchemaVersionData.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A class representing the EdgeSchemaVersion data model.
    /// Schema Version Resource
    /// </summary>
    public partial class EdgeSchemaVersionData : ResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeSchemaVersionData"/>. </summary>
        public EdgeSchemaVersionData()
        {
        }

        /// <summary> Initializes a new instance of <see cref="EdgeSchemaVersionData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="etag"> If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeSchemaVersionData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, EdgeSchemaVersionProperties properties, ETag? etag, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData)
        {
            Properties = properties;
            ETag = etag;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The resource-specific properties for this resource. </summary>
        public EdgeSchemaVersionProperties Properties { get; set; }
        /// <summary> If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. </summary>
        public ETag? ETag { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeSchemaVersionData.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    public partial class EdgeSchemaVersionData : IUtf8JsonSerializable, IJsonModel<EdgeSchemaVersionData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeSchemaVersionData>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeSchemaVersionData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSchemaVersionData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeSchemaVersionData)} does not support writing '{format}' format.");
            }

            base.JsonModelWriteCore(writer, options);
            if (Optional.IsDefined(Properties))
            {
                writer.WritePropertyName("properties"u8);
                writer.WriteObjectValue(Properties, options);
            }
            if (options.Format != "W" && Optional.IsDefined(ETag))
            {
                writer.WritePropertyName("eTag"u8);
                writer.WriteStringValue(ETag.Value.ToString());
            }
        }

        EdgeSchemaVersionData IJsonModel<EdgeSchemaVersionData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSchemaVersionData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeSchemaVersionData)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeSchemaVersionData(document.RootElement, options);
        }

        internal static EdgeSchemaVersionData DeserializeEdgeSchemaVersionData(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            EdgeSchemaVersionProperties properties = default;
            ETag? etag = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            SystemData systemData = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    properties = EdgeSchemaVersionProperties.DeserializeEdgeSchemaVersionProperties(property.Value, options);
                    continue;
                }
                if (property.NameEquals("eTag"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    etag = new ETag(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = ModelReaderWriter.Read<SystemData>(new BinaryData(Encoding.UTF8.GetBytes(property.Value.GetRawText())), ModelSerializationExtensions.WireOptions, AzureResourceManagerWorkloadOrchestrationContext.Default);
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeSchemaVersionData(
                id,
                name,
                type,
                systemData,
                properties,
                etag,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeSchemaVersionData>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSchemaVersionData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeSchemaVersionData)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeSchemaVersionData IPersistableModel<EdgeSchemaVersionData>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSchemaVersionData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeSchemaVersionData(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeSchemaVersionData)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeSchemaVersionData>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeSchemaVersionResource.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A Class representing an EdgeSchemaVersion along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier"/> you can construct an <see cref="EdgeSchemaVersionResource"/>
    /// from an instance of <see cref="ArmClient"/> using the GetEdgeSchemaVersionResource method.
    /// Otherwise you can get one from its parent resource <see cref="EdgeSchemaResource"/> using the GetEdgeSchemaVersion method.
    /// </summary>
    public partial class EdgeSchemaVersionResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="EdgeSchemaVersionResource"/> instance. </summary>
        /// <param name="subscriptionId"> The subscriptionId. </param>
        /// <param name="resourceGroupName"> The resourceGroupName. </param>
        /// <param name="schemaName"> The schemaName. </param>
        /// <param name="schemaVersionName"> The schemaVersionName. </param>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string schemaName, string schemaVersionName)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/versions/{schemaVersionName}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _edgeSchemaVersionSchemaVersionsClientDiagnostics;
        private readonly SchemaVersionsRestOperations _edgeSchemaVersionSchemaVersionsRestClient;
        private readonly EdgeSchemaVersionData _data;

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.Edge/schemas/versions";

        /// <summary> Initializes a new instance of the <see cref="EdgeSchemaVersionResource"/> class for mocking. </summary>
        protected EdgeSchemaVersionResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="EdgeSchemaVersionResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal EdgeSchemaVersionResource(ArmClient client, EdgeSchemaVersionData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="EdgeSchemaVersionResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal EdgeSchemaVersionResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _edgeSchemaVersionSchemaVersionsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.WorkloadOrchestration", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string edgeSchemaVersionSchemaVersionsApiVersion);
            _edgeSchemaVersionSchemaVersionsRestClient = new SchemaVersionsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, edgeSchemaVersionSchemaVersionsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual EdgeSchemaVersionData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary>
        /// Get a Schema Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/versions/{schemaVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SchemaVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<EdgeSchemaVersionResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _edgeSchemaVersionSchemaVersionsClientDiagnostics.CreateScope("EdgeSchemaVersionResource.Get");
            scope.Start();
            try
            {
                var response = await _edgeSchemaVersionSchemaVersionsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeSchemaVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a Schema Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/versions/{schemaVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SchemaVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<EdgeSchemaVersionResource> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _edgeSchemaVersionSchemaVersionsClientDiagnostics.CreateScope("EdgeSchemaVersionResource.Get");
            scope.Start();
            try
            {
                var response = _edgeSchemaVersionSchemaVersionsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeSchemaVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete a Schema Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/versions/{schemaVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SchemaVersion_Delete</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> DeleteAsync(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _edgeSchemaVersionSchemaVersionsClientDiagnostics.CreateScope("EdgeSchemaVersionResource.Delete");
            scope.Start();
            try
            {
                var response = await _edgeSchemaVersionSchemaVersionsRestClient.DeleteAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadOrchestrationArmOperation(_edgeSchemaVersionSchemaVersionsClientDiagnostics, Pipeline, _edgeSchemaVersionSchemaVersionsRestClient.CreateDeleteRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete a Schema Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/versions/{schemaVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SchemaVersion_Delete</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation Delete(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _edgeSchemaVersionSchemaVersionsClientDiagnostics.CreateScope("EdgeSchemaVersionResource.Delete");
            scope.Start();
            try
            {
                var response = _edgeSchemaVersionSchemaVersionsRestClient.Delete(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                var operation = new WorkloadOrchestrationArmOperation(_edgeSchemaVersionSchemaVersionsClientDiagnostics, Pipeline, _edgeSchemaVersionSchemaVersionsRestClient.CreateDeleteRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// update a Schema Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/versions/{schemaVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SchemaVersion_Update</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="data"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        public virtual async Task<Response<EdgeSchemaVersionResource>> UpdateAsync(EdgeSchemaVersionData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _edgeSchemaVersionSchemaVersionsClientDiagnostics.CreateScope("EdgeSchemaVersionResource.Update");
            scope.Start();
            try
            {
                var response = await _edgeSchemaVersionSchemaVersionsRestClient.UpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, data, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new EdgeSchemaVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// update a Schema Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}/versions/{schemaVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SchemaVersion_Update</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="data"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        public virtual Response<EdgeSchemaVersionResource> Update(EdgeSchemaVersionData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _edgeSchemaVersionSchemaVersionsClientDiagnostics.CreateScope("EdgeSchemaVersionResource.Update");
            scope.Start();
            try
            {
                var response = _edgeSchemaVersionSchemaVersionsRestClient.Update(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, data, cancellationToken);
                return Response.FromValue(new EdgeSchemaVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeSchemaVersionResource.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Text.Json;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    public partial class EdgeSchemaVersionResource : IJsonModel<EdgeSchemaVersionData>
    {
        private static EdgeSchemaVersionData s_dataDeserializationInstance;
        private static EdgeSchemaVersionData DataDeserializationInstance => s_dataDeserializationInstance ??= new();

        void IJsonModel<EdgeSchemaVersionData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options) => ((IJsonModel<EdgeSchemaVersionData>)Data).Write(writer, options);

        EdgeSchemaVersionData IJsonModel<EdgeSchemaVersionData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => ((IJsonModel<EdgeSchemaVersionData>)DataDeserializationInstance).Create(ref reader, options);

        BinaryData IPersistableModel<EdgeSchemaVersionData>.Write(ModelReaderWriterOptions options) => ModelReaderWriter.Write<EdgeSchemaVersionData>(Data, options, AzureResourceManagerWorkloadOrchestrationContext.Default);

        EdgeSchemaVersionData IPersistableModel<EdgeSchemaVersionData>.Create(BinaryData data, ModelReaderWriterOptions options) => ModelReaderWriter.Read<EdgeSchemaVersionData>(data, options, AzureResourceManagerWorkloadOrchestrationContext.Default);

        string IPersistableModel<EdgeSchemaVersionData>.GetFormatFromOptions(ModelReaderWriterOptions options) => ((IPersistableModel<EdgeSchemaVersionData>)DataDeserializationInstance).GetFormatFromOptions(options);
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeSiteReferenceCollection.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A class representing a collection of <see cref="EdgeSiteReferenceResource"/> and their operations.
    /// Each <see cref="EdgeSiteReferenceResource"/> in the collection will belong to the same instance of <see cref="EdgeContextResource"/>.
    /// To get an <see cref="EdgeSiteReferenceCollection"/> instance call the GetEdgeSiteReferences method from an instance of <see cref="EdgeContextResource"/>.
    /// </summary>
    public partial class EdgeSiteReferenceCollection : ArmCollection, IEnumerable<EdgeSiteReferenceResource>, IAsyncEnumerable<EdgeSiteReferenceResource>
    {
        private readonly ClientDiagnostics _edgeSiteReferenceSiteReferencesClientDiagnostics;
        private readonly SiteReferencesRestOperations _edgeSiteReferenceSiteReferencesRestClient;

        /// <summary> Initializes a new instance of the <see cref="EdgeSiteReferenceCollection"/> class for mocking. </summary>
        protected EdgeSiteReferenceCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="EdgeSiteReferenceCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal EdgeSiteReferenceCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _edgeSiteReferenceSiteReferencesClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.WorkloadOrchestration", EdgeSiteReferenceResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(EdgeSiteReferenceResource.ResourceType, out string edgeSiteReferenceSiteReferencesApiVersion);
            _edgeSiteReferenceSiteReferencesRestClient = new SiteReferencesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, edgeSiteReferenceSiteReferencesApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != EdgeContextResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, EdgeContextResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Get Site Reference Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/siteReferences/{siteReferenceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SiteReference_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSiteReferenceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="siteReferenceName"> The name of the SiteReference. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="siteReferenceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="siteReferenceName"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<EdgeSiteReferenceResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string siteReferenceName, EdgeSiteReferenceData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(siteReferenceName, nameof(siteReferenceName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _edgeSiteReferenceSiteReferencesClientDiagnostics.CreateScope("EdgeSiteReferenceCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _edgeSiteReferenceSiteReferencesRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, siteReferenceName, data, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadOrchestrationArmOperation<EdgeSiteReferenceResource>(new EdgeSiteReferenceOperationSource(Client), _edgeSiteReferenceSiteReferencesClientDiagnostics, Pipeline, _edgeSiteReferenceSiteReferencesRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, siteReferenceName, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get Site Reference Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/siteReferences/{siteReferenceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SiteReference_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSiteReferenceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="siteReferenceName"> The name of the SiteReference. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="siteReferenceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="siteReferenceName"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<EdgeSiteReferenceResource> CreateOrUpdate(WaitUntil waitUntil, string siteReferenceName, EdgeSiteReferenceData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(siteReferenceName, nameof(siteReferenceName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _edgeSiteReferenceSiteReferencesClientDiagnostics.CreateScope("EdgeSiteReferenceCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _edgeSiteReferenceSiteReferencesRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, siteReferenceName, data, cancellationToken);
                var operation = new WorkloadOrchestrationArmOperation<EdgeSiteReferenceResource>(new EdgeSiteReferenceOperationSource(Client), _edgeSiteReferenceSiteReferencesClientDiagnostics, Pipeline, _edgeSiteReferenceSiteReferencesRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, siteReferenceName, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get Site Reference Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/siteReferences/{siteReferenceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SiteReference_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSiteReferenceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="siteReferenceName"> The name of the SiteReference. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="siteReferenceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="siteReferenceName"/> is null. </exception>
        public virtual async Task<Response<EdgeSiteReferenceResource>> GetAsync(string siteReferenceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(siteReferenceName, nameof(siteReferenceName));

            using var scope = _edgeSiteReferenceSiteReferencesClientDiagnostics.CreateScope("EdgeSiteReferenceCollection.Get");
            scope.Start();
            try
            {
                var response = await _edgeSiteReferenceSiteReferencesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, siteReferenceName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeSiteReferenceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get Site Reference Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/siteReferences/{siteReferenceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SiteReference_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSiteReferenceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="siteReferenceName"> The name of the SiteReference. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="siteReferenceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="siteReferenceName"/> is null. </exception>
        public virtual Response<EdgeSiteReferenceResource> Get(string siteReferenceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(siteReferenceName, nameof(siteReferenceName));

            using var scope = _edgeSiteReferenceSiteReferencesClientDiagnostics.CreateScope("EdgeSiteReferenceCollection.Get");
            scope.Start();
            try
            {
                var response = _edgeSiteReferenceSiteReferencesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, siteReferenceName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeSiteReferenceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List Site Reference Resources
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/siteReferences</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SiteReference_ListByContext</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSiteReferenceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="EdgeSiteReferenceResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<EdgeSiteReferenceResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _edgeSiteReferenceSiteReferencesRestClient.CreateListByContextRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _edgeSiteReferenceSiteReferencesRestClient.CreateListByContextNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new EdgeSiteReferenceResource(Client, EdgeSiteReferenceData.DeserializeEdgeSiteReferenceData(e)), _edgeSiteReferenceSiteReferencesClientDiagnostics, Pipeline, "EdgeSiteReferenceCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List Site Reference Resources
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/siteReferences</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SiteReference_ListByContext</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSiteReferenceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="EdgeSiteReferenceResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<EdgeSiteReferenceResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _edgeSiteReferenceSiteReferencesRestClient.CreateListByContextRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _edgeSiteReferenceSiteReferencesRestClient.CreateListByContextNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new EdgeSiteReferenceResource(Client, EdgeSiteReferenceData.DeserializeEdgeSiteReferenceData(e)), _edgeSiteReferenceSiteReferencesClientDiagnostics, Pipeline, "EdgeSiteReferenceCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/siteReferences/{siteReferenceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SiteReference_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSiteReferenceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="siteReferenceName"> The name of the SiteReference. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="siteReferenceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="siteReferenceName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string siteReferenceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(siteReferenceName, nameof(siteReferenceName));

            using var scope = _edgeSiteReferenceSiteReferencesClientDiagnostics.CreateScope("EdgeSiteReferenceCollection.Exists");
            scope.Start();
            try
            {
                var response = await _edgeSiteReferenceSiteReferencesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, siteReferenceName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/siteReferences/{siteReferenceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SiteReference_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSiteReferenceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="siteReferenceName"> The name of the SiteReference. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="siteReferenceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="siteReferenceName"/> is null. </exception>
        public virtual Response<bool> Exists(string siteReferenceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(siteReferenceName, nameof(siteReferenceName));

            using var scope = _edgeSiteReferenceSiteReferencesClientDiagnostics.CreateScope("EdgeSiteReferenceCollection.Exists");
            scope.Start();
            try
            {
                var response = _edgeSiteReferenceSiteReferencesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, siteReferenceName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/siteReferences/{siteReferenceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SiteReference_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSiteReferenceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="siteReferenceName"> The name of the SiteReference. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="siteReferenceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="siteReferenceName"/> is null. </exception>
        public virtual async Task<NullableResponse<EdgeSiteReferenceResource>> GetIfExistsAsync(string siteReferenceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(siteReferenceName, nameof(siteReferenceName));

            using var scope = _edgeSiteReferenceSiteReferencesClientDiagnostics.CreateScope("EdgeSiteReferenceCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _edgeSiteReferenceSiteReferencesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, siteReferenceName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<EdgeSiteReferenceResource>(response.GetRawResponse());
                return Response.FromValue(new EdgeSiteReferenceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/siteReferences/{siteReferenceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SiteReference_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSiteReferenceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="siteReferenceName"> The name of the SiteReference. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="siteReferenceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="siteReferenceName"/> is null. </exception>
        public virtual NullableResponse<EdgeSiteReferenceResource> GetIfExists(string siteReferenceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(siteReferenceName, nameof(siteReferenceName));

            using var scope = _edgeSiteReferenceSiteReferencesClientDiagnostics.CreateScope("EdgeSiteReferenceCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _edgeSiteReferenceSiteReferencesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, siteReferenceName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<EdgeSiteReferenceResource>(response.GetRawResponse());
                return Response.FromValue(new EdgeSiteReferenceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<EdgeSiteReferenceResource> IEnumerable<EdgeSiteReferenceResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<EdgeSiteReferenceResource> IAsyncEnumerable<EdgeSiteReferenceResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeSiteReferenceData.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A class representing the EdgeSiteReference data model.
    /// Site Reference Resource
    /// </summary>
    public partial class EdgeSiteReferenceData : ResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeSiteReferenceData"/>. </summary>
        public EdgeSiteReferenceData()
        {
        }

        /// <summary> Initializes a new instance of <see cref="EdgeSiteReferenceData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeSiteReferenceData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, EdgeSiteReferenceProperties properties, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData)
        {
            Properties = properties;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The resource-specific properties for this resource. </summary>
        public EdgeSiteReferenceProperties Properties { get; set; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeSiteReferenceData.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    public partial class EdgeSiteReferenceData : IUtf8JsonSerializable, IJsonModel<EdgeSiteReferenceData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeSiteReferenceData>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeSiteReferenceData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSiteReferenceData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeSiteReferenceData)} does not support writing '{format}' format.");
            }

            base.JsonModelWriteCore(writer, options);
            if (Optional.IsDefined(Properties))
            {
                writer.WritePropertyName("properties"u8);
                writer.WriteObjectValue(Properties, options);
            }
        }

        EdgeSiteReferenceData IJsonModel<EdgeSiteReferenceData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSiteReferenceData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeSiteReferenceData)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeSiteReferenceData(document.RootElement, options);
        }

        internal static EdgeSiteReferenceData DeserializeEdgeSiteReferenceData(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            EdgeSiteReferenceProperties properties = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            SystemData systemData = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    properties = EdgeSiteReferenceProperties.DeserializeEdgeSiteReferenceProperties(property.Value, options);
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = ModelReaderWriter.Read<SystemData>(new BinaryData(Encoding.UTF8.GetBytes(property.Value.GetRawText())), ModelSerializationExtensions.WireOptions, AzureResourceManagerWorkloadOrchestrationContext.Default);
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeSiteReferenceData(
                id,
                name,
                type,
                systemData,
                properties,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeSiteReferenceData>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSiteReferenceData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeSiteReferenceData)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeSiteReferenceData IPersistableModel<EdgeSiteReferenceData>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSiteReferenceData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeSiteReferenceData(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeSiteReferenceData)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeSiteReferenceData>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeSiteReferenceResource.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A Class representing an EdgeSiteReference along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier"/> you can construct an <see cref="EdgeSiteReferenceResource"/>
    /// from an instance of <see cref="ArmClient"/> using the GetEdgeSiteReferenceResource method.
    /// Otherwise you can get one from its parent resource <see cref="EdgeContextResource"/> using the GetEdgeSiteReference method.
    /// </summary>
    public partial class EdgeSiteReferenceResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="EdgeSiteReferenceResource"/> instance. </summary>
        /// <param name="subscriptionId"> The subscriptionId. </param>
        /// <param name="resourceGroupName"> The resourceGroupName. </param>
        /// <param name="contextName"> The contextName. </param>
        /// <param name="siteReferenceName"> The siteReferenceName. </param>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string contextName, string siteReferenceName)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/siteReferences/{siteReferenceName}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _edgeSiteReferenceSiteReferencesClientDiagnostics;
        private readonly SiteReferencesRestOperations _edgeSiteReferenceSiteReferencesRestClient;
        private readonly EdgeSiteReferenceData _data;

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.Edge/contexts/siteReferences";

        /// <summary> Initializes a new instance of the <see cref="EdgeSiteReferenceResource"/> class for mocking. </summary>
        protected EdgeSiteReferenceResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="EdgeSiteReferenceResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal EdgeSiteReferenceResource(ArmClient client, EdgeSiteReferenceData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="EdgeSiteReferenceResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal EdgeSiteReferenceResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _edgeSiteReferenceSiteReferencesClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.WorkloadOrchestration", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string edgeSiteReferenceSiteReferencesApiVersion);
            _edgeSiteReferenceSiteReferencesRestClient = new SiteReferencesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, edgeSiteReferenceSiteReferencesApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual EdgeSiteReferenceData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary>
        /// Get Site Reference Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/siteReferences/{siteReferenceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SiteReference_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSiteReferenceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<EdgeSiteReferenceResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _edgeSiteReferenceSiteReferencesClientDiagnostics.CreateScope("EdgeSiteReferenceResource.Get");
            scope.Start();
            try
            {
                var response = await _edgeSiteReferenceSiteReferencesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeSiteReferenceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get Site Reference Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/siteReferences/{siteReferenceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SiteReference_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSiteReferenceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<EdgeSiteReferenceResource> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _edgeSiteReferenceSiteReferencesClientDiagnostics.CreateScope("EdgeSiteReferenceResource.Get");
            scope.Start();
            try
            {
                var response = _edgeSiteReferenceSiteReferencesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeSiteReferenceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get Site Reference Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/siteReferences/{siteReferenceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SiteReference_Delete</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSiteReferenceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> DeleteAsync(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _edgeSiteReferenceSiteReferencesClientDiagnostics.CreateScope("EdgeSiteReferenceResource.Delete");
            scope.Start();
            try
            {
                var response = await _edgeSiteReferenceSiteReferencesRestClient.DeleteAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadOrchestrationArmOperation(_edgeSiteReferenceSiteReferencesClientDiagnostics, Pipeline, _edgeSiteReferenceSiteReferencesRestClient.CreateDeleteRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get Site Reference Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/siteReferences/{siteReferenceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SiteReference_Delete</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSiteReferenceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation Delete(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _edgeSiteReferenceSiteReferencesClientDiagnostics.CreateScope("EdgeSiteReferenceResource.Delete");
            scope.Start();
            try
            {
                var response = _edgeSiteReferenceSiteReferencesRestClient.Delete(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                var operation = new WorkloadOrchestrationArmOperation(_edgeSiteReferenceSiteReferencesClientDiagnostics, Pipeline, _edgeSiteReferenceSiteReferencesRestClient.CreateDeleteRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get Site Reference Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/siteReferences/{siteReferenceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SiteReference_Update</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSiteReferenceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="data"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<EdgeSiteReferenceResource>> UpdateAsync(WaitUntil waitUntil, EdgeSiteReferenceData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _edgeSiteReferenceSiteReferencesClientDiagnostics.CreateScope("EdgeSiteReferenceResource.Update");
            scope.Start();
            try
            {
                var response = await _edgeSiteReferenceSiteReferencesRestClient.UpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, data, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadOrchestrationArmOperation<EdgeSiteReferenceResource>(new EdgeSiteReferenceOperationSource(Client), _edgeSiteReferenceSiteReferencesClientDiagnostics, Pipeline, _edgeSiteReferenceSiteReferencesRestClient.CreateUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, data).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get Site Reference Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/siteReferences/{siteReferenceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SiteReference_Update</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSiteReferenceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="data"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<EdgeSiteReferenceResource> Update(WaitUntil waitUntil, EdgeSiteReferenceData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _edgeSiteReferenceSiteReferencesClientDiagnostics.CreateScope("EdgeSiteReferenceResource.Update");
            scope.Start();
            try
            {
                var response = _edgeSiteReferenceSiteReferencesRestClient.Update(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, data, cancellationToken);
                var operation = new WorkloadOrchestrationArmOperation<EdgeSiteReferenceResource>(new EdgeSiteReferenceOperationSource(Client), _edgeSiteReferenceSiteReferencesClientDiagnostics, Pipeline, _edgeSiteReferenceSiteReferencesRestClient.CreateUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, data).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeSiteReferenceResource.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Text.Json;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    public partial class EdgeSiteReferenceResource : IJsonModel<EdgeSiteReferenceData>
    {
        private static EdgeSiteReferenceData s_dataDeserializationInstance;
        private static EdgeSiteReferenceData DataDeserializationInstance => s_dataDeserializationInstance ??= new();

        void IJsonModel<EdgeSiteReferenceData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options) => ((IJsonModel<EdgeSiteReferenceData>)Data).Write(writer, options);

        EdgeSiteReferenceData IJsonModel<EdgeSiteReferenceData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => ((IJsonModel<EdgeSiteReferenceData>)DataDeserializationInstance).Create(ref reader, options);

        BinaryData IPersistableModel<EdgeSiteReferenceData>.Write(ModelReaderWriterOptions options) => ModelReaderWriter.Write<EdgeSiteReferenceData>(Data, options, AzureResourceManagerWorkloadOrchestrationContext.Default);

        EdgeSiteReferenceData IPersistableModel<EdgeSiteReferenceData>.Create(BinaryData data, ModelReaderWriterOptions options) => ModelReaderWriter.Read<EdgeSiteReferenceData>(data, options, AzureResourceManagerWorkloadOrchestrationContext.Default);

        string IPersistableModel<EdgeSiteReferenceData>.GetFormatFromOptions(ModelReaderWriterOptions options) => ((IPersistableModel<EdgeSiteReferenceData>)DataDeserializationInstance).GetFormatFromOptions(options);
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeSolutionCollection.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A class representing a collection of <see cref="EdgeSolutionResource"/> and their operations.
    /// Each <see cref="EdgeSolutionResource"/> in the collection will belong to the same instance of <see cref="EdgeTargetResource"/>.
    /// To get an <see cref="EdgeSolutionCollection"/> instance call the GetEdgeSolutions method from an instance of <see cref="EdgeTargetResource"/>.
    /// </summary>
    public partial class EdgeSolutionCollection : ArmCollection, IEnumerable<EdgeSolutionResource>, IAsyncEnumerable<EdgeSolutionResource>
    {
        private readonly ClientDiagnostics _edgeSolutionSolutionsClientDiagnostics;
        private readonly SolutionsRestOperations _edgeSolutionSolutionsRestClient;

        /// <summary> Initializes a new instance of the <see cref="EdgeSolutionCollection"/> class for mocking. </summary>
        protected EdgeSolutionCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="EdgeSolutionCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal EdgeSolutionCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _edgeSolutionSolutionsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.WorkloadOrchestration", EdgeSolutionResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(EdgeSolutionResource.ResourceType, out string edgeSolutionSolutionsApiVersion);
            _edgeSolutionSolutionsRestClient = new SolutionsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, edgeSolutionSolutionsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != EdgeTargetResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, EdgeTargetResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Create or update a Solution Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Solution_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="solutionName"> Name of the solution. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="solutionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionName"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<EdgeSolutionResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string solutionName, EdgeSolutionData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(solutionName, nameof(solutionName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _edgeSolutionSolutionsClientDiagnostics.CreateScope("EdgeSolutionCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _edgeSolutionSolutionsRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, solutionName, data, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadOrchestrationArmOperation<EdgeSolutionResource>(new EdgeSolutionOperationSource(Client), _edgeSolutionSolutionsClientDiagnostics, Pipeline, _edgeSolutionSolutionsRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, solutionName, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create or update a Solution Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Solution_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="solutionName"> Name of the solution. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="solutionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionName"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<EdgeSolutionResource> CreateOrUpdate(WaitUntil waitUntil, string solutionName, EdgeSolutionData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(solutionName, nameof(solutionName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _edgeSolutionSolutionsClientDiagnostics.CreateScope("EdgeSolutionCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _edgeSolutionSolutionsRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, solutionName, data, cancellationToken);
                var operation = new WorkloadOrchestrationArmOperation<EdgeSolutionResource>(new EdgeSolutionOperationSource(Client), _edgeSolutionSolutionsClientDiagnostics, Pipeline, _edgeSolutionSolutionsRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, solutionName, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a Solution resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Solution_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="solutionName"> Name of the solution. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="solutionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionName"/> is null. </exception>
        public virtual async Task<Response<EdgeSolutionResource>> GetAsync(string solutionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(solutionName, nameof(solutionName));

            using var scope = _edgeSolutionSolutionsClientDiagnostics.CreateScope("EdgeSolutionCollection.Get");
            scope.Start();
            try
            {
                var response = await _edgeSolutionSolutionsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, solutionName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeSolutionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a Solution resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Solution_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="solutionName"> Name of the solution. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="solutionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionName"/> is null. </exception>
        public virtual Response<EdgeSolutionResource> Get(string solutionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(solutionName, nameof(solutionName));

            using var scope = _edgeSolutionSolutionsClientDiagnostics.CreateScope("EdgeSolutionCollection.Get");
            scope.Start();
            try
            {
                var response = _edgeSolutionSolutionsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, solutionName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeSolutionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List Solution resources
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Solution_ListByTarget</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="EdgeSolutionResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<EdgeSolutionResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _edgeSolutionSolutionsRestClient.CreateListByTargetRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _edgeSolutionSolutionsRestClient.CreateListByTargetNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new EdgeSolutionResource(Client, EdgeSolutionData.DeserializeEdgeSolutionData(e)), _edgeSolutionSolutionsClientDiagnostics, Pipeline, "EdgeSolutionCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List Solution resources
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Solution_ListByTarget</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="EdgeSolutionResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<EdgeSolutionResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _edgeSolutionSolutionsRestClient.CreateListByTargetRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _edgeSolutionSolutionsRestClient.CreateListByTargetNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new EdgeSolutionResource(Client, EdgeSolutionData.DeserializeEdgeSolutionData(e)), _edgeSolutionSolutionsClientDiagnostics, Pipeline, "EdgeSolutionCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Solution_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="solutionName"> Name of the solution. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="solutionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string solutionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(solutionName, nameof(solutionName));

            using var scope = _edgeSolutionSolutionsClientDiagnostics.CreateScope("EdgeSolutionCollection.Exists");
            scope.Start();
            try
            {
                var response = await _edgeSolutionSolutionsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, solutionName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Solution_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="solutionName"> Name of the solution. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="solutionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionName"/> is null. </exception>
        public virtual Response<bool> Exists(string solutionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(solutionName, nameof(solutionName));

            using var scope = _edgeSolutionSolutionsClientDiagnostics.CreateScope("EdgeSolutionCollection.Exists");
            scope.Start();
            try
            {
                var response = _edgeSolutionSolutionsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, solutionName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Solution_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="solutionName"> Name of the solution. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="solutionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionName"/> is null. </exception>
        public virtual async Task<NullableResponse<EdgeSolutionResource>> GetIfExistsAsync(string solutionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(solutionName, nameof(solutionName));

            using var scope = _edgeSolutionSolutionsClientDiagnostics.CreateScope("EdgeSolutionCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _edgeSolutionSolutionsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, solutionName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<EdgeSolutionResource>(response.GetRawResponse());
                return Response.FromValue(new EdgeSolutionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Solution_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="solutionName"> Name of the solution. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="solutionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionName"/> is null. </exception>
        public virtual NullableResponse<EdgeSolutionResource> GetIfExists(string solutionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(solutionName, nameof(solutionName));

            using var scope = _edgeSolutionSolutionsClientDiagnostics.CreateScope("EdgeSolutionCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _edgeSolutionSolutionsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, solutionName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<EdgeSolutionResource>(response.GetRawResponse());
                return Response.FromValue(new EdgeSolutionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<EdgeSolutionResource> IEnumerable<EdgeSolutionResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<EdgeSolutionResource> IAsyncEnumerable<EdgeSolutionResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeSolutionData.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A class representing the EdgeSolution data model.
    /// Solution Resource attached to a Target
    /// </summary>
    public partial class EdgeSolutionData : ResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeSolutionData"/>. </summary>
        public EdgeSolutionData()
        {
        }

        /// <summary> Initializes a new instance of <see cref="EdgeSolutionData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="extendedLocation"></param>
        /// <param name="etag"> If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeSolutionData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, EdgeSolutionProperties properties, ExtendedLocation extendedLocation, ETag? etag, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData)
        {
            Properties = properties;
            ExtendedLocation = extendedLocation;
            ETag = etag;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The resource-specific properties for this resource. </summary>
        public EdgeSolutionProperties Properties { get; set; }
        /// <summary> Gets or sets the extended location. </summary>
        public ExtendedLocation ExtendedLocation { get; set; }
        /// <summary> If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. </summary>
        public ETag? ETag { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeSolutionData.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    public partial class EdgeSolutionData : IUtf8JsonSerializable, IJsonModel<EdgeSolutionData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeSolutionData>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeSolutionData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeSolutionData)} does not support writing '{format}' format.");
            }

            base.JsonModelWriteCore(writer, options);
            if (Optional.IsDefined(Properties))
            {
                writer.WritePropertyName("properties"u8);
                writer.WriteObjectValue(Properties, options);
            }
            if (Optional.IsDefined(ExtendedLocation))
            {
                writer.WritePropertyName("extendedLocation"u8);
                ((IJsonModel<ExtendedLocation>)ExtendedLocation).Write(writer, options);
            }
            if (options.Format != "W" && Optional.IsDefined(ETag))
            {
                writer.WritePropertyName("eTag"u8);
                writer.WriteStringValue(ETag.Value.ToString());
            }
        }

        EdgeSolutionData IJsonModel<EdgeSolutionData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeSolutionData)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeSolutionData(document.RootElement, options);
        }

        internal static EdgeSolutionData DeserializeEdgeSolutionData(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            EdgeSolutionProperties properties = default;
            ExtendedLocation extendedLocation = default;
            ETag? etag = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            SystemData systemData = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    properties = EdgeSolutionProperties.DeserializeEdgeSolutionProperties(property.Value, options);
                    continue;
                }
                if (property.NameEquals("extendedLocation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    extendedLocation = ModelReaderWriter.Read<ExtendedLocation>(new BinaryData(Encoding.UTF8.GetBytes(property.Value.GetRawText())), options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                    continue;
                }
                if (property.NameEquals("eTag"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    etag = new ETag(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = ModelReaderWriter.Read<SystemData>(new BinaryData(Encoding.UTF8.GetBytes(property.Value.GetRawText())), ModelSerializationExtensions.WireOptions, AzureResourceManagerWorkloadOrchestrationContext.Default);
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeSolutionData(
                id,
                name,
                type,
                systemData,
                properties,
                extendedLocation,
                etag,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeSolutionData>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeSolutionData)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeSolutionData IPersistableModel<EdgeSolutionData>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeSolutionData(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeSolutionData)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeSolutionData>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeSolutionResource.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A Class representing an EdgeSolution along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier"/> you can construct an <see cref="EdgeSolutionResource"/>
    /// from an instance of <see cref="ArmClient"/> using the GetEdgeSolutionResource method.
    /// Otherwise you can get one from its parent resource <see cref="EdgeTargetResource"/> using the GetEdgeSolution method.
    /// </summary>
    public partial class EdgeSolutionResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="EdgeSolutionResource"/> instance. </summary>
        /// <param name="subscriptionId"> The subscriptionId. </param>
        /// <param name="resourceGroupName"> The resourceGroupName. </param>
        /// <param name="targetName"> The targetName. </param>
        /// <param name="solutionName"> The solutionName. </param>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string targetName, string solutionName)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _edgeSolutionSolutionsClientDiagnostics;
        private readonly SolutionsRestOperations _edgeSolutionSolutionsRestClient;
        private readonly EdgeSolutionData _data;

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.Edge/targets/solutions";

        /// <summary> Initializes a new instance of the <see cref="EdgeSolutionResource"/> class for mocking. </summary>
        protected EdgeSolutionResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="EdgeSolutionResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal EdgeSolutionResource(ArmClient client, EdgeSolutionData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="EdgeSolutionResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal EdgeSolutionResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _edgeSolutionSolutionsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.WorkloadOrchestration", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string edgeSolutionSolutionsApiVersion);
            _edgeSolutionSolutionsRestClient = new SolutionsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, edgeSolutionSolutionsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual EdgeSolutionData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary> Gets a collection of EdgeSolutionVersionResources in the EdgeSolution. </summary>
        /// <returns> An object representing collection of EdgeSolutionVersionResources and their operations over a EdgeSolutionVersionResource. </returns>
        public virtual EdgeSolutionVersionCollection GetEdgeSolutionVersions()
        {
            return GetCachedClient(client => new EdgeSolutionVersionCollection(client, Id));
        }

        /// <summary>
        /// Get a Solution Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/versions/{solutionVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="solutionVersionName"> Name of the solution version. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionVersionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="solutionVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<EdgeSolutionVersionResource>> GetEdgeSolutionVersionAsync(string solutionVersionName, CancellationToken cancellationToken = default)
        {
            return await GetEdgeSolutionVersions().GetAsync(solutionVersionName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a Solution Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/versions/{solutionVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="solutionVersionName"> Name of the solution version. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionVersionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="solutionVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<EdgeSolutionVersionResource> GetEdgeSolutionVersion(string solutionVersionName, CancellationToken cancellationToken = default)
        {
            return GetEdgeSolutionVersions().Get(solutionVersionName, cancellationToken);
        }

        /// <summary> Gets a collection of EdgeDeploymentInstanceResources in the EdgeSolution. </summary>
        /// <returns> An object representing collection of EdgeDeploymentInstanceResources and their operations over a EdgeDeploymentInstanceResource. </returns>
        public virtual EdgeDeploymentInstanceCollection GetEdgeDeploymentInstances()
        {
            return GetCachedClient(client => new EdgeDeploymentInstanceCollection(client, Id));
        }

        /// <summary>
        /// Get Instance Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances/{instanceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Instance_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDeploymentInstanceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="instanceName"> Name of the instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="instanceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="instanceName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<EdgeDeploymentInstanceResource>> GetEdgeDeploymentInstanceAsync(string instanceName, CancellationToken cancellationToken = default)
        {
            return await GetEdgeDeploymentInstances().GetAsync(instanceName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get Instance Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances/{instanceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Instance_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDeploymentInstanceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="instanceName"> Name of the instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="instanceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="instanceName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<EdgeDeploymentInstanceResource> GetEdgeDeploymentInstance(string instanceName, CancellationToken cancellationToken = default)
        {
            return GetEdgeDeploymentInstances().Get(instanceName, cancellationToken);
        }

        /// <summary>
        /// Get a Solution resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Solution_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<EdgeSolutionResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _edgeSolutionSolutionsClientDiagnostics.CreateScope("EdgeSolutionResource.Get");
            scope.Start();
            try
            {
                var response = await _edgeSolutionSolutionsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeSolutionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a Solution resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Solution_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<EdgeSolutionResource> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _edgeSolutionSolutionsClientDiagnostics.CreateScope("EdgeSolutionResource.Get");
            scope.Start();
            try
            {
                var response = _edgeSolutionSolutionsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeSolutionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete a Solution Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Solution_Delete</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> DeleteAsync(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _edgeSolutionSolutionsClientDiagnostics.CreateScope("EdgeSolutionResource.Delete");
            scope.Start();
            try
            {
                var response = await _edgeSolutionSolutionsRestClient.DeleteAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadOrchestrationArmOperation(_edgeSolutionSolutionsClientDiagnostics, Pipeline, _edgeSolutionSolutionsRestClient.CreateDeleteRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete a Solution Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Solution_Delete</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation Delete(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _edgeSolutionSolutionsClientDiagnostics.CreateScope("EdgeSolutionResource.Delete");
            scope.Start();
            try
            {
                var response = _edgeSolutionSolutionsRestClient.Delete(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                var operation = new WorkloadOrchestrationArmOperation(_edgeSolutionSolutionsClientDiagnostics, Pipeline, _edgeSolutionSolutionsRestClient.CreateDeleteRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Update a Solution Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Solution_Update</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="patch"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="patch"/> is null. </exception>
        public virtual async Task<ArmOperation<EdgeSolutionResource>> UpdateAsync(WaitUntil waitUntil, EdgeSolutionPatch patch, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(patch, nameof(patch));

            using var scope = _edgeSolutionSolutionsClientDiagnostics.CreateScope("EdgeSolutionResource.Update");
            scope.Start();
            try
            {
                var response = await _edgeSolutionSolutionsRestClient.UpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, patch, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadOrchestrationArmOperation<EdgeSolutionResource>(new EdgeSolutionOperationSource(Client), _edgeSolutionSolutionsClientDiagnostics, Pipeline, _edgeSolutionSolutionsRestClient.CreateUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, patch).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Update a Solution Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Solution_Update</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="patch"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="patch"/> is null. </exception>
        public virtual ArmOperation<EdgeSolutionResource> Update(WaitUntil waitUntil, EdgeSolutionPatch patch, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(patch, nameof(patch));

            using var scope = _edgeSolutionSolutionsClientDiagnostics.CreateScope("EdgeSolutionResource.Update");
            scope.Start();
            try
            {
                var response = _edgeSolutionSolutionsRestClient.Update(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, patch, cancellationToken);
                var operation = new WorkloadOrchestrationArmOperation<EdgeSolutionResource>(new EdgeSolutionOperationSource(Client), _edgeSolutionSolutionsClientDiagnostics, Pipeline, _edgeSolutionSolutionsRestClient.CreateUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, patch).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeSolutionResource.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Text.Json;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    public partial class EdgeSolutionResource : IJsonModel<EdgeSolutionData>
    {
        private static EdgeSolutionData s_dataDeserializationInstance;
        private static EdgeSolutionData DataDeserializationInstance => s_dataDeserializationInstance ??= new();

        void IJsonModel<EdgeSolutionData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options) => ((IJsonModel<EdgeSolutionData>)Data).Write(writer, options);

        EdgeSolutionData IJsonModel<EdgeSolutionData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => ((IJsonModel<EdgeSolutionData>)DataDeserializationInstance).Create(ref reader, options);

        BinaryData IPersistableModel<EdgeSolutionData>.Write(ModelReaderWriterOptions options) => ModelReaderWriter.Write<EdgeSolutionData>(Data, options, AzureResourceManagerWorkloadOrchestrationContext.Default);

        EdgeSolutionData IPersistableModel<EdgeSolutionData>.Create(BinaryData data, ModelReaderWriterOptions options) => ModelReaderWriter.Read<EdgeSolutionData>(data, options, AzureResourceManagerWorkloadOrchestrationContext.Default);

        string IPersistableModel<EdgeSolutionData>.GetFormatFromOptions(ModelReaderWriterOptions options) => ((IPersistableModel<EdgeSolutionData>)DataDeserializationInstance).GetFormatFromOptions(options);
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeSolutionTemplateCollection.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A class representing a collection of <see cref="EdgeSolutionTemplateResource"/> and their operations.
    /// Each <see cref="EdgeSolutionTemplateResource"/> in the collection will belong to the same instance of <see cref="ResourceGroupResource"/>.
    /// To get an <see cref="EdgeSolutionTemplateCollection"/> instance call the GetEdgeSolutionTemplates method from an instance of <see cref="ResourceGroupResource"/>.
    /// </summary>
    public partial class EdgeSolutionTemplateCollection : ArmCollection, IEnumerable<EdgeSolutionTemplateResource>, IAsyncEnumerable<EdgeSolutionTemplateResource>
    {
        private readonly ClientDiagnostics _edgeSolutionTemplateSolutionTemplatesClientDiagnostics;
        private readonly SolutionTemplatesRestOperations _edgeSolutionTemplateSolutionTemplatesRestClient;

        /// <summary> Initializes a new instance of the <see cref="EdgeSolutionTemplateCollection"/> class for mocking. </summary>
        protected EdgeSolutionTemplateCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="EdgeSolutionTemplateCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal EdgeSolutionTemplateCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _edgeSolutionTemplateSolutionTemplatesClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.WorkloadOrchestration", EdgeSolutionTemplateResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(EdgeSolutionTemplateResource.ResourceType, out string edgeSolutionTemplateSolutionTemplatesApiVersion);
            _edgeSolutionTemplateSolutionTemplatesRestClient = new SolutionTemplatesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, edgeSolutionTemplateSolutionTemplatesApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceGroupResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceGroupResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Create or update a Solution Template Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionTemplate_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionTemplateResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="solutionTemplateName"> The name of the SolutionTemplate. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="solutionTemplateName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionTemplateName"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<EdgeSolutionTemplateResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string solutionTemplateName, EdgeSolutionTemplateData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(solutionTemplateName, nameof(solutionTemplateName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _edgeSolutionTemplateSolutionTemplatesClientDiagnostics.CreateScope("EdgeSolutionTemplateCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _edgeSolutionTemplateSolutionTemplatesRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, solutionTemplateName, data, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadOrchestrationArmOperation<EdgeSolutionTemplateResource>(new EdgeSolutionTemplateOperationSource(Client), _edgeSolutionTemplateSolutionTemplatesClientDiagnostics, Pipeline, _edgeSolutionTemplateSolutionTemplatesRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, solutionTemplateName, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create or update a Solution Template Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionTemplate_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionTemplateResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="solutionTemplateName"> The name of the SolutionTemplate. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="solutionTemplateName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionTemplateName"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<EdgeSolutionTemplateResource> CreateOrUpdate(WaitUntil waitUntil, string solutionTemplateName, EdgeSolutionTemplateData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(solutionTemplateName, nameof(solutionTemplateName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _edgeSolutionTemplateSolutionTemplatesClientDiagnostics.CreateScope("EdgeSolutionTemplateCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _edgeSolutionTemplateSolutionTemplatesRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, solutionTemplateName, data, cancellationToken);
                var operation = new WorkloadOrchestrationArmOperation<EdgeSolutionTemplateResource>(new EdgeSolutionTemplateOperationSource(Client), _edgeSolutionTemplateSolutionTemplatesClientDiagnostics, Pipeline, _edgeSolutionTemplateSolutionTemplatesRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, solutionTemplateName, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a Solution Template Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionTemplate_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionTemplateResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="solutionTemplateName"> The name of the SolutionTemplate. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="solutionTemplateName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionTemplateName"/> is null. </exception>
        public virtual async Task<Response<EdgeSolutionTemplateResource>> GetAsync(string solutionTemplateName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(solutionTemplateName, nameof(solutionTemplateName));

            using var scope = _edgeSolutionTemplateSolutionTemplatesClientDiagnostics.CreateScope("EdgeSolutionTemplateCollection.Get");
            scope.Start();
            try
            {
                var response = await _edgeSolutionTemplateSolutionTemplatesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, solutionTemplateName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeSolutionTemplateResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a Solution Template Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionTemplate_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionTemplateResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="solutionTemplateName"> The name of the SolutionTemplate. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="solutionTemplateName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionTemplateName"/> is null. </exception>
        public virtual Response<EdgeSolutionTemplateResource> Get(string solutionTemplateName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(solutionTemplateName, nameof(solutionTemplateName));

            using var scope = _edgeSolutionTemplateSolutionTemplatesClientDiagnostics.CreateScope("EdgeSolutionTemplateCollection.Get");
            scope.Start();
            try
            {
                var response = _edgeSolutionTemplateSolutionTemplatesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, solutionTemplateName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeSolutionTemplateResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List by specified resource group
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionTemplate_ListByResourceGroup</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionTemplateResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="EdgeSolutionTemplateResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<EdgeSolutionTemplateResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _edgeSolutionTemplateSolutionTemplatesRestClient.CreateListByResourceGroupRequest(Id.SubscriptionId, Id.ResourceGroupName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _edgeSolutionTemplateSolutionTemplatesRestClient.CreateListByResourceGroupNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new EdgeSolutionTemplateResource(Client, EdgeSolutionTemplateData.DeserializeEdgeSolutionTemplateData(e)), _edgeSolutionTemplateSolutionTemplatesClientDiagnostics, Pipeline, "EdgeSolutionTemplateCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List by specified resource group
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionTemplate_ListByResourceGroup</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionTemplateResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="EdgeSolutionTemplateResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<EdgeSolutionTemplateResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _edgeSolutionTemplateSolutionTemplatesRestClient.CreateListByResourceGroupRequest(Id.SubscriptionId, Id.ResourceGroupName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _edgeSolutionTemplateSolutionTemplatesRestClient.CreateListByResourceGroupNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new EdgeSolutionTemplateResource(Client, EdgeSolutionTemplateData.DeserializeEdgeSolutionTemplateData(e)), _edgeSolutionTemplateSolutionTemplatesClientDiagnostics, Pipeline, "EdgeSolutionTemplateCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionTemplate_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionTemplateResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="solutionTemplateName"> The name of the SolutionTemplate. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="solutionTemplateName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionTemplateName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string solutionTemplateName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(solutionTemplateName, nameof(solutionTemplateName));

            using var scope = _edgeSolutionTemplateSolutionTemplatesClientDiagnostics.CreateScope("EdgeSolutionTemplateCollection.Exists");
            scope.Start();
            try
            {
                var response = await _edgeSolutionTemplateSolutionTemplatesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, solutionTemplateName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionTemplate_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionTemplateResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="solutionTemplateName"> The name of the SolutionTemplate. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="solutionTemplateName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionTemplateName"/> is null. </exception>
        public virtual Response<bool> Exists(string solutionTemplateName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(solutionTemplateName, nameof(solutionTemplateName));

            using var scope = _edgeSolutionTemplateSolutionTemplatesClientDiagnostics.CreateScope("EdgeSolutionTemplateCollection.Exists");
            scope.Start();
            try
            {
                var response = _edgeSolutionTemplateSolutionTemplatesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, solutionTemplateName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionTemplate_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionTemplateResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="solutionTemplateName"> The name of the SolutionTemplate. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="solutionTemplateName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionTemplateName"/> is null. </exception>
        public virtual async Task<NullableResponse<EdgeSolutionTemplateResource>> GetIfExistsAsync(string solutionTemplateName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(solutionTemplateName, nameof(solutionTemplateName));

            using var scope = _edgeSolutionTemplateSolutionTemplatesClientDiagnostics.CreateScope("EdgeSolutionTemplateCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _edgeSolutionTemplateSolutionTemplatesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, solutionTemplateName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<EdgeSolutionTemplateResource>(response.GetRawResponse());
                return Response.FromValue(new EdgeSolutionTemplateResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionTemplate_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionTemplateResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="solutionTemplateName"> The name of the SolutionTemplate. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="solutionTemplateName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionTemplateName"/> is null. </exception>
        public virtual NullableResponse<EdgeSolutionTemplateResource> GetIfExists(string solutionTemplateName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(solutionTemplateName, nameof(solutionTemplateName));

            using var scope = _edgeSolutionTemplateSolutionTemplatesClientDiagnostics.CreateScope("EdgeSolutionTemplateCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _edgeSolutionTemplateSolutionTemplatesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, solutionTemplateName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<EdgeSolutionTemplateResource>(response.GetRawResponse());
                return Response.FromValue(new EdgeSolutionTemplateResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<EdgeSolutionTemplateResource> IEnumerable<EdgeSolutionTemplateResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<EdgeSolutionTemplateResource> IAsyncEnumerable<EdgeSolutionTemplateResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeSolutionTemplateData.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A class representing the EdgeSolutionTemplate data model.
    /// Solution Template Resource. Contains capabilities and operations for creating versions.
    /// </summary>
    public partial class EdgeSolutionTemplateData : TrackedResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeSolutionTemplateData"/>. </summary>
        /// <param name="location"> The location. </param>
        public EdgeSolutionTemplateData(AzureLocation location) : base(location)
        {
        }

        /// <summary> Initializes a new instance of <see cref="EdgeSolutionTemplateData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="etag"> If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeSolutionTemplateData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, IDictionary<string, string> tags, AzureLocation location, EdgeSolutionTemplateProperties properties, ETag? etag, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData, tags, location)
        {
            Properties = properties;
            ETag = etag;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="EdgeSolutionTemplateData"/> for deserialization. </summary>
        internal EdgeSolutionTemplateData()
        {
        }

        /// <summary> The resource-specific properties for this resource. </summary>
        public EdgeSolutionTemplateProperties Properties { get; set; }
        /// <summary> If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. </summary>
        public ETag? ETag { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeSolutionTemplateData.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    public partial class EdgeSolutionTemplateData : IUtf8JsonSerializable, IJsonModel<EdgeSolutionTemplateData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeSolutionTemplateData>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeSolutionTemplateData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionTemplateData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeSolutionTemplateData)} does not support writing '{format}' format.");
            }

            base.JsonModelWriteCore(writer, options);
            if (Optional.IsDefined(Properties))
            {
                writer.WritePropertyName("properties"u8);
                writer.WriteObjectValue(Properties, options);
            }
            if (options.Format != "W" && Optional.IsDefined(ETag))
            {
                writer.WritePropertyName("eTag"u8);
                writer.WriteStringValue(ETag.Value.ToString());
            }
        }

        EdgeSolutionTemplateData IJsonModel<EdgeSolutionTemplateData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionTemplateData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeSolutionTemplateData)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeSolutionTemplateData(document.RootElement, options);
        }

        internal static EdgeSolutionTemplateData DeserializeEdgeSolutionTemplateData(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            EdgeSolutionTemplateProperties properties = default;
            ETag? etag = default;
            IDictionary<string, string> tags = default;
            AzureLocation location = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            SystemData systemData = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    properties = EdgeSolutionTemplateProperties.DeserializeEdgeSolutionTemplateProperties(property.Value, options);
                    continue;
                }
                if (property.NameEquals("eTag"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    etag = new ETag(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("tags"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("location"u8))
                {
                    location = new AzureLocation(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = ModelReaderWriter.Read<SystemData>(new BinaryData(Encoding.UTF8.GetBytes(property.Value.GetRawText())), ModelSerializationExtensions.WireOptions, AzureResourceManagerWorkloadOrchestrationContext.Default);
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeSolutionTemplateData(
                id,
                name,
                type,
                systemData,
                tags ?? new ChangeTrackingDictionary<string, string>(),
                location,
                properties,
                etag,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeSolutionTemplateData>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionTemplateData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeSolutionTemplateData)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeSolutionTemplateData IPersistableModel<EdgeSolutionTemplateData>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionTemplateData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeSolutionTemplateData(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeSolutionTemplateData)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeSolutionTemplateData>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeSolutionTemplateResource.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A Class representing an EdgeSolutionTemplate along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier"/> you can construct an <see cref="EdgeSolutionTemplateResource"/>
    /// from an instance of <see cref="ArmClient"/> using the GetEdgeSolutionTemplateResource method.
    /// Otherwise you can get one from its parent resource <see cref="ResourceGroupResource"/> using the GetEdgeSolutionTemplate method.
    /// </summary>
    public partial class EdgeSolutionTemplateResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="EdgeSolutionTemplateResource"/> instance. </summary>
        /// <param name="subscriptionId"> The subscriptionId. </param>
        /// <param name="resourceGroupName"> The resourceGroupName. </param>
        /// <param name="solutionTemplateName"> The solutionTemplateName. </param>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string solutionTemplateName)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _edgeSolutionTemplateSolutionTemplatesClientDiagnostics;
        private readonly SolutionTemplatesRestOperations _edgeSolutionTemplateSolutionTemplatesRestClient;
        private readonly EdgeSolutionTemplateData _data;

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.Edge/solutionTemplates";

        /// <summary> Initializes a new instance of the <see cref="EdgeSolutionTemplateResource"/> class for mocking. </summary>
        protected EdgeSolutionTemplateResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="EdgeSolutionTemplateResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal EdgeSolutionTemplateResource(ArmClient client, EdgeSolutionTemplateData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="EdgeSolutionTemplateResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal EdgeSolutionTemplateResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _edgeSolutionTemplateSolutionTemplatesClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.WorkloadOrchestration", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string edgeSolutionTemplateSolutionTemplatesApiVersion);
            _edgeSolutionTemplateSolutionTemplatesRestClient = new SolutionTemplatesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, edgeSolutionTemplateSolutionTemplatesApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual EdgeSolutionTemplateData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary> Gets a collection of EdgeSolutionTemplateVersionResources in the EdgeSolutionTemplate. </summary>
        /// <returns> An object representing collection of EdgeSolutionTemplateVersionResources and their operations over a EdgeSolutionTemplateVersionResource. </returns>
        public virtual EdgeSolutionTemplateVersionCollection GetEdgeSolutionTemplateVersions()
        {
            return GetCachedClient(client => new EdgeSolutionTemplateVersionCollection(client, Id));
        }

        /// <summary>
        /// Get a Solution Template Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}/versions/{solutionTemplateVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionTemplateVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionTemplateVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="solutionTemplateVersionName"> The name of the SolutionTemplateVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionTemplateVersionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="solutionTemplateVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<EdgeSolutionTemplateVersionResource>> GetEdgeSolutionTemplateVersionAsync(string solutionTemplateVersionName, CancellationToken cancellationToken = default)
        {
            return await GetEdgeSolutionTemplateVersions().GetAsync(solutionTemplateVersionName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a Solution Template Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}/versions/{solutionTemplateVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionTemplateVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionTemplateVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="solutionTemplateVersionName"> The name of the SolutionTemplateVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionTemplateVersionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="solutionTemplateVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<EdgeSolutionTemplateVersionResource> GetEdgeSolutionTemplateVersion(string solutionTemplateVersionName, CancellationToken cancellationToken = default)
        {
            return GetEdgeSolutionTemplateVersions().Get(solutionTemplateVersionName, cancellationToken);
        }

        /// <summary>
        /// Get a Solution Template Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionTemplate_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionTemplateResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<EdgeSolutionTemplateResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _edgeSolutionTemplateSolutionTemplatesClientDiagnostics.CreateScope("EdgeSolutionTemplateResource.Get");
            scope.Start();
            try
            {
                var response = await _edgeSolutionTemplateSolutionTemplatesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeSolutionTemplateResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a Solution Template Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionTemplate_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionTemplateResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<EdgeSolutionTemplateResource> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _edgeSolutionTemplateSolutionTemplatesClientDiagnostics.CreateScope("EdgeSolutionTemplateResource.Get");
            scope.Start();
            try
            {
                var response = _edgeSolutionTemplateSolutionTemplatesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeSolutionTemplateResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete a Solution Template Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionTemplate_Delete</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionTemplateResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> DeleteAsync(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _edgeSolutionTemplateSolutionTemplatesClientDiagnostics.CreateScope("EdgeSolutionTemplateResource.Delete");
            scope.Start();
            try
            {
                var response = await _edgeSolutionTemplateSolutionTemplatesRestClient.DeleteAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadOrchestrationArmOperation(_edgeSolutionTemplateSolutionTemplatesClientDiagnostics, Pipeline, _edgeSolutionTemplateSolutionTemplatesRestClient.CreateDeleteRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete a Solution Template Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionTemplate_Delete</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionTemplateResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation Delete(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _edgeSolutionTemplateSolutionTemplatesClientDiagnostics.CreateScope("EdgeSolutionTemplateResource.Delete");
            scope.Start();
            try
            {
                var response = _edgeSolutionTemplateSolutionTemplatesRestClient.Delete(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                var operation = new WorkloadOrchestrationArmOperation(_edgeSolutionTemplateSolutionTemplatesClientDiagnostics, Pipeline, _edgeSolutionTemplateSolutionTemplatesRestClient.CreateDeleteRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// update a Solution Template Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionTemplate_Update</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionTemplateResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="patch"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="patch"/> is null. </exception>
        public virtual async Task<Response<EdgeSolutionTemplateResource>> UpdateAsync(EdgeSolutionTemplatePatch patch, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(patch, nameof(patch));

            using var scope = _edgeSolutionTemplateSolutionTemplatesClientDiagnostics.CreateScope("EdgeSolutionTemplateResource.Update");
            scope.Start();
            try
            {
                var response = await _edgeSolutionTemplateSolutionTemplatesRestClient.UpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, patch, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new EdgeSolutionTemplateResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// update a Solution Template Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionTemplate_Update</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionTemplateResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="patch"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="patch"/> is null. </exception>
        public virtual Response<EdgeSolutionTemplateResource> Update(EdgeSolutionTemplatePatch patch, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(patch, nameof(patch));

            using var scope = _edgeSolutionTemplateSolutionTemplatesClientDiagnostics.CreateScope("EdgeSolutionTemplateResource.Update");
            scope.Start();
            try
            {
                var response = _edgeSolutionTemplateSolutionTemplatesRestClient.Update(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, patch, cancellationToken);
                return Response.FromValue(new EdgeSolutionTemplateResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create a Solution Template Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}/createVersion</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionTemplates_CreateVersion</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionTemplateResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="body"> The content of the action request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public virtual async Task<ArmOperation<EdgeSolutionTemplateVersionResource>> CreateVersionAsync(WaitUntil waitUntil, EdgeSolutionTemplateVersionWithUpdateType body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(body, nameof(body));

            using var scope = _edgeSolutionTemplateSolutionTemplatesClientDiagnostics.CreateScope("EdgeSolutionTemplateResource.CreateVersion");
            scope.Start();
            try
            {
                var response = await _edgeSolutionTemplateSolutionTemplatesRestClient.CreateVersionAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, body, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadOrchestrationArmOperation<EdgeSolutionTemplateVersionResource>(new EdgeSolutionTemplateVersionOperationSource(Client), _edgeSolutionTemplateSolutionTemplatesClientDiagnostics, Pipeline, _edgeSolutionTemplateSolutionTemplatesRestClient.CreateCreateVersionRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, body).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create a Solution Template Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}/createVersion</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionTemplates_CreateVersion</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionTemplateResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="body"> The content of the action request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public virtual ArmOperation<EdgeSolutionTemplateVersionResource> CreateVersion(WaitUntil waitUntil, EdgeSolutionTemplateVersionWithUpdateType body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(body, nameof(body));

            using var scope = _edgeSolutionTemplateSolutionTemplatesClientDiagnostics.CreateScope("EdgeSolutionTemplateResource.CreateVersion");
            scope.Start();
            try
            {
                var response = _edgeSolutionTemplateSolutionTemplatesRestClient.CreateVersion(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, body, cancellationToken);
                var operation = new WorkloadOrchestrationArmOperation<EdgeSolutionTemplateVersionResource>(new EdgeSolutionTemplateVersionOperationSource(Client), _edgeSolutionTemplateSolutionTemplatesClientDiagnostics, Pipeline, _edgeSolutionTemplateSolutionTemplatesRestClient.CreateCreateVersionRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, body).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Remove Solution Template Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}/removeVersion</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionTemplates_RemoveVersion</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionTemplateResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="content"> The content of the action request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        public virtual async Task<ArmOperation> RemoveVersionAsync(WaitUntil waitUntil, EdgeVersionContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = _edgeSolutionTemplateSolutionTemplatesClientDiagnostics.CreateScope("EdgeSolutionTemplateResource.RemoveVersion");
            scope.Start();
            try
            {
                var response = await _edgeSolutionTemplateSolutionTemplatesRestClient.RemoveVersionAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, content, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadOrchestrationArmOperation(_edgeSolutionTemplateSolutionTemplatesClientDiagnostics, Pipeline, _edgeSolutionTemplateSolutionTemplatesRestClient.CreateRemoveVersionRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, content).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Remove Solution Template Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}/removeVersion</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionTemplates_RemoveVersion</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionTemplateResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="content"> The content of the action request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        public virtual ArmOperation RemoveVersion(WaitUntil waitUntil, EdgeVersionContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = _edgeSolutionTemplateSolutionTemplatesClientDiagnostics.CreateScope("EdgeSolutionTemplateResource.RemoveVersion");
            scope.Start();
            try
            {
                var response = _edgeSolutionTemplateSolutionTemplatesRestClient.RemoveVersion(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, content, cancellationToken);
                var operation = new WorkloadOrchestrationArmOperation(_edgeSolutionTemplateSolutionTemplatesClientDiagnostics, Pipeline, _edgeSolutionTemplateSolutionTemplatesRestClient.CreateRemoveVersionRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, content).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Add a tag to the current resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionTemplate_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionTemplateResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="value"> The value for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> or <paramref name="value"/> is null. </exception>
        public virtual async Task<Response<EdgeSolutionTemplateResource>> AddTagAsync(string key, string value, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(key, nameof(key));
            Argument.AssertNotNull(value, nameof(value));

            using var scope = _edgeSolutionTemplateSolutionTemplatesClientDiagnostics.CreateScope("EdgeSolutionTemplateResource.AddTag");
            scope.Start();
            try
            {
                if (await CanUseTagResourceAsync(cancellationToken: cancellationToken).ConfigureAwait(false))
                {
                    var originalTags = await GetTagResource().GetAsync(cancellationToken).ConfigureAwait(false);
                    originalTags.Value.Data.TagValues[key] = value;
                    await GetTagResource().CreateOrUpdateAsync(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken).ConfigureAwait(false);
                    var originalResponse = await _edgeSolutionTemplateSolutionTemplatesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                    return Response.FromValue(new EdgeSolutionTemplateResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
                }
                else
                {
                    var current = (await GetAsync(cancellationToken: cancellationToken).ConfigureAwait(false)).Value.Data;
                    var patch = new EdgeSolutionTemplatePatch();
                    foreach (var tag in current.Tags)
                    {
                        patch.Tags.Add(tag);
                    }
                    patch.Tags[key] = value;
                    var result = await UpdateAsync(patch, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return result;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Add a tag to the current resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionTemplate_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionTemplateResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="value"> The value for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> or <paramref name="value"/> is null. </exception>
        public virtual Response<EdgeSolutionTemplateResource> AddTag(string key, string value, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(key, nameof(key));
            Argument.AssertNotNull(value, nameof(value));

            using var scope = _edgeSolutionTemplateSolutionTemplatesClientDiagnostics.CreateScope("EdgeSolutionTemplateResource.AddTag");
            scope.Start();
            try
            {
                if (CanUseTagResource(cancellationToken: cancellationToken))
                {
                    var originalTags = GetTagResource().Get(cancellationToken);
                    originalTags.Value.Data.TagValues[key] = value;
                    GetTagResource().CreateOrUpdate(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken);
                    var originalResponse = _edgeSolutionTemplateSolutionTemplatesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                    return Response.FromValue(new EdgeSolutionTemplateResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
                }
                else
                {
                    var current = Get(cancellationToken: cancellationToken).Value.Data;
                    var patch = new EdgeSolutionTemplatePatch();
                    foreach (var tag in current.Tags)
                    {
                        patch.Tags.Add(tag);
                    }
                    patch.Tags[key] = value;
                    var result = Update(patch, cancellationToken: cancellationToken);
                    return result;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Replace the tags on the resource with the given set.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionTemplate_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionTemplateResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="tags"> The set of tags to use as replacement. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tags"/> is null. </exception>
        public virtual async Task<Response<EdgeSolutionTemplateResource>> SetTagsAsync(IDictionary<string, string> tags, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(tags, nameof(tags));

            using var scope = _edgeSolutionTemplateSolutionTemplatesClientDiagnostics.CreateScope("EdgeSolutionTemplateResource.SetTags");
            scope.Start();
            try
            {
                if (await CanUseTagResourceAsync(cancellationToken: cancellationToken).ConfigureAwait(false))
                {
                    await GetTagResource().DeleteAsync(WaitUntil.Completed, cancellationToken: cancellationToken).ConfigureAwait(false);
                    var originalTags = await GetTagResource().GetAsync(cancellationToken).ConfigureAwait(false);
                    originalTags.Value.Data.TagValues.ReplaceWith(tags);
                    await GetTagResource().CreateOrUpdateAsync(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken).ConfigureAwait(false);
                    var originalResponse = await _edgeSolutionTemplateSolutionTemplatesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                    return Response.FromValue(new EdgeSolutionTemplateResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
                }
                else
                {
                    var current = (await GetAsync(cancellationToken: cancellationToken).ConfigureAwait(false)).Value.Data;
                    var patch = new EdgeSolutionTemplatePatch();
                    patch.Tags.ReplaceWith(tags);
                    var result = await UpdateAsync(patch, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return result;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Replace the tags on the resource with the given set.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionTemplate_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionTemplateResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="tags"> The set of tags to use as replacement. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tags"/> is null. </exception>
        public virtual Response<EdgeSolutionTemplateResource> SetTags(IDictionary<string, string> tags, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(tags, nameof(tags));

            using var scope = _edgeSolutionTemplateSolutionTemplatesClientDiagnostics.CreateScope("EdgeSolutionTemplateResource.SetTags");
            scope.Start();
            try
            {
                if (CanUseTagResource(cancellationToken: cancellationToken))
                {
                    GetTagResource().Delete(WaitUntil.Completed, cancellationToken: cancellationToken);
                    var originalTags = GetTagResource().Get(cancellationToken);
                    originalTags.Value.Data.TagValues.ReplaceWith(tags);
                    GetTagResource().CreateOrUpdate(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken);
                    var originalResponse = _edgeSolutionTemplateSolutionTemplatesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                    return Response.FromValue(new EdgeSolutionTemplateResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
                }
                else
                {
                    var current = Get(cancellationToken: cancellationToken).Value.Data;
                    var patch = new EdgeSolutionTemplatePatch();
                    patch.Tags.ReplaceWith(tags);
                    var result = Update(patch, cancellationToken: cancellationToken);
                    return result;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Removes a tag by key from the resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionTemplate_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionTemplateResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> is null. </exception>
        public virtual async Task<Response<EdgeSolutionTemplateResource>> RemoveTagAsync(string key, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(key, nameof(key));

            using var scope = _edgeSolutionTemplateSolutionTemplatesClientDiagnostics.CreateScope("EdgeSolutionTemplateResource.RemoveTag");
            scope.Start();
            try
            {
                if (await CanUseTagResourceAsync(cancellationToken: cancellationToken).ConfigureAwait(false))
                {
                    var originalTags = await GetTagResource().GetAsync(cancellationToken).ConfigureAwait(false);
                    originalTags.Value.Data.TagValues.Remove(key);
                    await GetTagResource().CreateOrUpdateAsync(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken).ConfigureAwait(false);
                    var originalResponse = await _edgeSolutionTemplateSolutionTemplatesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                    return Response.FromValue(new EdgeSolutionTemplateResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
                }
                else
                {
                    var current = (await GetAsync(cancellationToken: cancellationToken).ConfigureAwait(false)).Value.Data;
                    var patch = new EdgeSolutionTemplatePatch();
                    foreach (var tag in current.Tags)
                    {
                        patch.Tags.Add(tag);
                    }
                    patch.Tags.Remove(key);
                    var result = await UpdateAsync(patch, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return result;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Removes a tag by key from the resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionTemplate_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionTemplateResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> is null. </exception>
        public virtual Response<EdgeSolutionTemplateResource> RemoveTag(string key, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(key, nameof(key));

            using var scope = _edgeSolutionTemplateSolutionTemplatesClientDiagnostics.CreateScope("EdgeSolutionTemplateResource.RemoveTag");
            scope.Start();
            try
            {
                if (CanUseTagResource(cancellationToken: cancellationToken))
                {
                    var originalTags = GetTagResource().Get(cancellationToken);
                    originalTags.Value.Data.TagValues.Remove(key);
                    GetTagResource().CreateOrUpdate(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken);
                    var originalResponse = _edgeSolutionTemplateSolutionTemplatesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                    return Response.FromValue(new EdgeSolutionTemplateResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
                }
                else
                {
                    var current = Get(cancellationToken: cancellationToken).Value.Data;
                    var patch = new EdgeSolutionTemplatePatch();
                    foreach (var tag in current.Tags)
                    {
                        patch.Tags.Add(tag);
                    }
                    patch.Tags.Remove(key);
                    var result = Update(patch, cancellationToken: cancellationToken);
                    return result;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeSolutionTemplateResource.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Text.Json;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    public partial class EdgeSolutionTemplateResource : IJsonModel<EdgeSolutionTemplateData>
    {
        private static EdgeSolutionTemplateData s_dataDeserializationInstance;
        private static EdgeSolutionTemplateData DataDeserializationInstance => s_dataDeserializationInstance ??= new();

        void IJsonModel<EdgeSolutionTemplateData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options) => ((IJsonModel<EdgeSolutionTemplateData>)Data).Write(writer, options);

        EdgeSolutionTemplateData IJsonModel<EdgeSolutionTemplateData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => ((IJsonModel<EdgeSolutionTemplateData>)DataDeserializationInstance).Create(ref reader, options);

        BinaryData IPersistableModel<EdgeSolutionTemplateData>.Write(ModelReaderWriterOptions options) => ModelReaderWriter.Write<EdgeSolutionTemplateData>(Data, options, AzureResourceManagerWorkloadOrchestrationContext.Default);

        EdgeSolutionTemplateData IPersistableModel<EdgeSolutionTemplateData>.Create(BinaryData data, ModelReaderWriterOptions options) => ModelReaderWriter.Read<EdgeSolutionTemplateData>(data, options, AzureResourceManagerWorkloadOrchestrationContext.Default);

        string IPersistableModel<EdgeSolutionTemplateData>.GetFormatFromOptions(ModelReaderWriterOptions options) => ((IPersistableModel<EdgeSolutionTemplateData>)DataDeserializationInstance).GetFormatFromOptions(options);
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeSolutionTemplateVersionCollection.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A class representing a collection of <see cref="EdgeSolutionTemplateVersionResource"/> and their operations.
    /// Each <see cref="EdgeSolutionTemplateVersionResource"/> in the collection will belong to the same instance of <see cref="EdgeSolutionTemplateResource"/>.
    /// To get an <see cref="EdgeSolutionTemplateVersionCollection"/> instance call the GetEdgeSolutionTemplateVersions method from an instance of <see cref="EdgeSolutionTemplateResource"/>.
    /// </summary>
    public partial class EdgeSolutionTemplateVersionCollection : ArmCollection, IEnumerable<EdgeSolutionTemplateVersionResource>, IAsyncEnumerable<EdgeSolutionTemplateVersionResource>
    {
        private readonly ClientDiagnostics _edgeSolutionTemplateVersionSolutionTemplateVersionsClientDiagnostics;
        private readonly SolutionTemplateVersionsRestOperations _edgeSolutionTemplateVersionSolutionTemplateVersionsRestClient;

        /// <summary> Initializes a new instance of the <see cref="EdgeSolutionTemplateVersionCollection"/> class for mocking. </summary>
        protected EdgeSolutionTemplateVersionCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="EdgeSolutionTemplateVersionCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal EdgeSolutionTemplateVersionCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _edgeSolutionTemplateVersionSolutionTemplateVersionsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.WorkloadOrchestration", EdgeSolutionTemplateVersionResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(EdgeSolutionTemplateVersionResource.ResourceType, out string edgeSolutionTemplateVersionSolutionTemplateVersionsApiVersion);
            _edgeSolutionTemplateVersionSolutionTemplateVersionsRestClient = new SolutionTemplateVersionsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, edgeSolutionTemplateVersionSolutionTemplateVersionsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != EdgeSolutionTemplateResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, EdgeSolutionTemplateResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Get a Solution Template Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}/versions/{solutionTemplateVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionTemplateVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionTemplateVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="solutionTemplateVersionName"> The name of the SolutionTemplateVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="solutionTemplateVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionTemplateVersionName"/> is null. </exception>
        public virtual async Task<Response<EdgeSolutionTemplateVersionResource>> GetAsync(string solutionTemplateVersionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(solutionTemplateVersionName, nameof(solutionTemplateVersionName));

            using var scope = _edgeSolutionTemplateVersionSolutionTemplateVersionsClientDiagnostics.CreateScope("EdgeSolutionTemplateVersionCollection.Get");
            scope.Start();
            try
            {
                var response = await _edgeSolutionTemplateVersionSolutionTemplateVersionsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, solutionTemplateVersionName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeSolutionTemplateVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a Solution Template Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}/versions/{solutionTemplateVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionTemplateVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionTemplateVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="solutionTemplateVersionName"> The name of the SolutionTemplateVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="solutionTemplateVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionTemplateVersionName"/> is null. </exception>
        public virtual Response<EdgeSolutionTemplateVersionResource> Get(string solutionTemplateVersionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(solutionTemplateVersionName, nameof(solutionTemplateVersionName));

            using var scope = _edgeSolutionTemplateVersionSolutionTemplateVersionsClientDiagnostics.CreateScope("EdgeSolutionTemplateVersionCollection.Get");
            scope.Start();
            try
            {
                var response = _edgeSolutionTemplateVersionSolutionTemplateVersionsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, solutionTemplateVersionName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeSolutionTemplateVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List Solution Template Version Resources
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}/versions</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionTemplateVersion_ListBySolutionTemplate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionTemplateVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="EdgeSolutionTemplateVersionResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<EdgeSolutionTemplateVersionResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _edgeSolutionTemplateVersionSolutionTemplateVersionsRestClient.CreateListBySolutionTemplateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _edgeSolutionTemplateVersionSolutionTemplateVersionsRestClient.CreateListBySolutionTemplateNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new EdgeSolutionTemplateVersionResource(Client, EdgeSolutionTemplateVersionData.DeserializeEdgeSolutionTemplateVersionData(e)), _edgeSolutionTemplateVersionSolutionTemplateVersionsClientDiagnostics, Pipeline, "EdgeSolutionTemplateVersionCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List Solution Template Version Resources
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}/versions</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionTemplateVersion_ListBySolutionTemplate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionTemplateVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="EdgeSolutionTemplateVersionResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<EdgeSolutionTemplateVersionResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _edgeSolutionTemplateVersionSolutionTemplateVersionsRestClient.CreateListBySolutionTemplateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _edgeSolutionTemplateVersionSolutionTemplateVersionsRestClient.CreateListBySolutionTemplateNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new EdgeSolutionTemplateVersionResource(Client, EdgeSolutionTemplateVersionData.DeserializeEdgeSolutionTemplateVersionData(e)), _edgeSolutionTemplateVersionSolutionTemplateVersionsClientDiagnostics, Pipeline, "EdgeSolutionTemplateVersionCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}/versions/{solutionTemplateVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionTemplateVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionTemplateVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="solutionTemplateVersionName"> The name of the SolutionTemplateVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="solutionTemplateVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionTemplateVersionName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string solutionTemplateVersionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(solutionTemplateVersionName, nameof(solutionTemplateVersionName));

            using var scope = _edgeSolutionTemplateVersionSolutionTemplateVersionsClientDiagnostics.CreateScope("EdgeSolutionTemplateVersionCollection.Exists");
            scope.Start();
            try
            {
                var response = await _edgeSolutionTemplateVersionSolutionTemplateVersionsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, solutionTemplateVersionName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}/versions/{solutionTemplateVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionTemplateVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionTemplateVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="solutionTemplateVersionName"> The name of the SolutionTemplateVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="solutionTemplateVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionTemplateVersionName"/> is null. </exception>
        public virtual Response<bool> Exists(string solutionTemplateVersionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(solutionTemplateVersionName, nameof(solutionTemplateVersionName));

            using var scope = _edgeSolutionTemplateVersionSolutionTemplateVersionsClientDiagnostics.CreateScope("EdgeSolutionTemplateVersionCollection.Exists");
            scope.Start();
            try
            {
                var response = _edgeSolutionTemplateVersionSolutionTemplateVersionsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, solutionTemplateVersionName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}/versions/{solutionTemplateVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionTemplateVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionTemplateVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="solutionTemplateVersionName"> The name of the SolutionTemplateVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="solutionTemplateVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionTemplateVersionName"/> is null. </exception>
        public virtual async Task<NullableResponse<EdgeSolutionTemplateVersionResource>> GetIfExistsAsync(string solutionTemplateVersionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(solutionTemplateVersionName, nameof(solutionTemplateVersionName));

            using var scope = _edgeSolutionTemplateVersionSolutionTemplateVersionsClientDiagnostics.CreateScope("EdgeSolutionTemplateVersionCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _edgeSolutionTemplateVersionSolutionTemplateVersionsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, solutionTemplateVersionName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<EdgeSolutionTemplateVersionResource>(response.GetRawResponse());
                return Response.FromValue(new EdgeSolutionTemplateVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}/versions/{solutionTemplateVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionTemplateVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionTemplateVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="solutionTemplateVersionName"> The name of the SolutionTemplateVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="solutionTemplateVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionTemplateVersionName"/> is null. </exception>
        public virtual NullableResponse<EdgeSolutionTemplateVersionResource> GetIfExists(string solutionTemplateVersionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(solutionTemplateVersionName, nameof(solutionTemplateVersionName));

            using var scope = _edgeSolutionTemplateVersionSolutionTemplateVersionsClientDiagnostics.CreateScope("EdgeSolutionTemplateVersionCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _edgeSolutionTemplateVersionSolutionTemplateVersionsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, solutionTemplateVersionName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<EdgeSolutionTemplateVersionResource>(response.GetRawResponse());
                return Response.FromValue(new EdgeSolutionTemplateVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<EdgeSolutionTemplateVersionResource> IEnumerable<EdgeSolutionTemplateVersionResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<EdgeSolutionTemplateVersionResource> IAsyncEnumerable<EdgeSolutionTemplateVersionResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeSolutionTemplateVersionData.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A class representing the EdgeSolutionTemplateVersion data model.
    /// Solution Template Version Resource. Contains configurations that use expressions which can be resolved hierarchically along with edge specifications.
    /// </summary>
    public partial class EdgeSolutionTemplateVersionData : ResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeSolutionTemplateVersionData"/>. </summary>
        public EdgeSolutionTemplateVersionData()
        {
        }

        /// <summary> Initializes a new instance of <see cref="EdgeSolutionTemplateVersionData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="etag"> If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeSolutionTemplateVersionData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, EdgeSolutionTemplateVersionProperties properties, ETag? etag, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData)
        {
            Properties = properties;
            ETag = etag;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The resource-specific properties for this resource. </summary>
        public EdgeSolutionTemplateVersionProperties Properties { get; set; }
        /// <summary> If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. </summary>
        public ETag? ETag { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeSolutionTemplateVersionData.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    public partial class EdgeSolutionTemplateVersionData : IUtf8JsonSerializable, IJsonModel<EdgeSolutionTemplateVersionData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeSolutionTemplateVersionData>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeSolutionTemplateVersionData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionTemplateVersionData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeSolutionTemplateVersionData)} does not support writing '{format}' format.");
            }

            base.JsonModelWriteCore(writer, options);
            if (Optional.IsDefined(Properties))
            {
                writer.WritePropertyName("properties"u8);
                writer.WriteObjectValue(Properties, options);
            }
            if (options.Format != "W" && Optional.IsDefined(ETag))
            {
                writer.WritePropertyName("eTag"u8);
                writer.WriteStringValue(ETag.Value.ToString());
            }
        }

        EdgeSolutionTemplateVersionData IJsonModel<EdgeSolutionTemplateVersionData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionTemplateVersionData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeSolutionTemplateVersionData)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeSolutionTemplateVersionData(document.RootElement, options);
        }

        internal static EdgeSolutionTemplateVersionData DeserializeEdgeSolutionTemplateVersionData(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            EdgeSolutionTemplateVersionProperties properties = default;
            ETag? etag = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            SystemData systemData = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    properties = EdgeSolutionTemplateVersionProperties.DeserializeEdgeSolutionTemplateVersionProperties(property.Value, options);
                    continue;
                }
                if (property.NameEquals("eTag"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    etag = new ETag(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = ModelReaderWriter.Read<SystemData>(new BinaryData(Encoding.UTF8.GetBytes(property.Value.GetRawText())), ModelSerializationExtensions.WireOptions, AzureResourceManagerWorkloadOrchestrationContext.Default);
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeSolutionTemplateVersionData(
                id,
                name,
                type,
                systemData,
                properties,
                etag,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeSolutionTemplateVersionData>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionTemplateVersionData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeSolutionTemplateVersionData)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeSolutionTemplateVersionData IPersistableModel<EdgeSolutionTemplateVersionData>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionTemplateVersionData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeSolutionTemplateVersionData(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeSolutionTemplateVersionData)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeSolutionTemplateVersionData>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeSolutionTemplateVersionResource.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A Class representing an EdgeSolutionTemplateVersion along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier"/> you can construct an <see cref="EdgeSolutionTemplateVersionResource"/>
    /// from an instance of <see cref="ArmClient"/> using the GetEdgeSolutionTemplateVersionResource method.
    /// Otherwise you can get one from its parent resource <see cref="EdgeSolutionTemplateResource"/> using the GetEdgeSolutionTemplateVersion method.
    /// </summary>
    public partial class EdgeSolutionTemplateVersionResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="EdgeSolutionTemplateVersionResource"/> instance. </summary>
        /// <param name="subscriptionId"> The subscriptionId. </param>
        /// <param name="resourceGroupName"> The resourceGroupName. </param>
        /// <param name="solutionTemplateName"> The solutionTemplateName. </param>
        /// <param name="solutionTemplateVersionName"> The solutionTemplateVersionName. </param>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string solutionTemplateName, string solutionTemplateVersionName)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}/versions/{solutionTemplateVersionName}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _edgeSolutionTemplateVersionSolutionTemplateVersionsClientDiagnostics;
        private readonly SolutionTemplateVersionsRestOperations _edgeSolutionTemplateVersionSolutionTemplateVersionsRestClient;
        private readonly EdgeSolutionTemplateVersionData _data;

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.Edge/solutionTemplates/versions";

        /// <summary> Initializes a new instance of the <see cref="EdgeSolutionTemplateVersionResource"/> class for mocking. </summary>
        protected EdgeSolutionTemplateVersionResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="EdgeSolutionTemplateVersionResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal EdgeSolutionTemplateVersionResource(ArmClient client, EdgeSolutionTemplateVersionData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="EdgeSolutionTemplateVersionResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal EdgeSolutionTemplateVersionResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _edgeSolutionTemplateVersionSolutionTemplateVersionsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.WorkloadOrchestration", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string edgeSolutionTemplateVersionSolutionTemplateVersionsApiVersion);
            _edgeSolutionTemplateVersionSolutionTemplateVersionsRestClient = new SolutionTemplateVersionsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, edgeSolutionTemplateVersionSolutionTemplateVersionsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual EdgeSolutionTemplateVersionData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary>
        /// Get a Solution Template Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}/versions/{solutionTemplateVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionTemplateVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionTemplateVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<EdgeSolutionTemplateVersionResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _edgeSolutionTemplateVersionSolutionTemplateVersionsClientDiagnostics.CreateScope("EdgeSolutionTemplateVersionResource.Get");
            scope.Start();
            try
            {
                var response = await _edgeSolutionTemplateVersionSolutionTemplateVersionsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeSolutionTemplateVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a Solution Template Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}/versions/{solutionTemplateVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionTemplateVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionTemplateVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<EdgeSolutionTemplateVersionResource> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _edgeSolutionTemplateVersionSolutionTemplateVersionsClientDiagnostics.CreateScope("EdgeSolutionTemplateVersionResource.Get");
            scope.Start();
            try
            {
                var response = _edgeSolutionTemplateVersionSolutionTemplateVersionsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeSolutionTemplateVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Post request for bulk deploy
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}/versions/{solutionTemplateVersionName}/bulkDeploySolution</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionTemplateVersions_BulkDeploySolution</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionTemplateVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="content"> The content of the action request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        public virtual async Task<ArmOperation> BulkDeploySolutionAsync(WaitUntil waitUntil, BulkDeploySolutionContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = _edgeSolutionTemplateVersionSolutionTemplateVersionsClientDiagnostics.CreateScope("EdgeSolutionTemplateVersionResource.BulkDeploySolution");
            scope.Start();
            try
            {
                var response = await _edgeSolutionTemplateVersionSolutionTemplateVersionsRestClient.BulkDeploySolutionAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, content, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadOrchestrationArmOperation(_edgeSolutionTemplateVersionSolutionTemplateVersionsClientDiagnostics, Pipeline, _edgeSolutionTemplateVersionSolutionTemplateVersionsRestClient.CreateBulkDeploySolutionRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, content).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Post request for bulk deploy
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}/versions/{solutionTemplateVersionName}/bulkDeploySolution</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionTemplateVersions_BulkDeploySolution</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionTemplateVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="content"> The content of the action request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        public virtual ArmOperation BulkDeploySolution(WaitUntil waitUntil, BulkDeploySolutionContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = _edgeSolutionTemplateVersionSolutionTemplateVersionsClientDiagnostics.CreateScope("EdgeSolutionTemplateVersionResource.BulkDeploySolution");
            scope.Start();
            try
            {
                var response = _edgeSolutionTemplateVersionSolutionTemplateVersionsRestClient.BulkDeploySolution(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, content, cancellationToken);
                var operation = new WorkloadOrchestrationArmOperation(_edgeSolutionTemplateVersionSolutionTemplateVersionsClientDiagnostics, Pipeline, _edgeSolutionTemplateVersionSolutionTemplateVersionsRestClient.CreateBulkDeploySolutionRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, content).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Post request for bulk publish
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}/versions/{solutionTemplateVersionName}/bulkPublishSolution</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionTemplateVersions_BulkPublishSolution</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionTemplateVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="content"> The content of the action request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        public virtual async Task<ArmOperation> BulkPublishSolutionAsync(WaitUntil waitUntil, BulkPublishSolutionContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = _edgeSolutionTemplateVersionSolutionTemplateVersionsClientDiagnostics.CreateScope("EdgeSolutionTemplateVersionResource.BulkPublishSolution");
            scope.Start();
            try
            {
                var response = await _edgeSolutionTemplateVersionSolutionTemplateVersionsRestClient.BulkPublishSolutionAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, content, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadOrchestrationArmOperation(_edgeSolutionTemplateVersionSolutionTemplateVersionsClientDiagnostics, Pipeline, _edgeSolutionTemplateVersionSolutionTemplateVersionsRestClient.CreateBulkPublishSolutionRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, content).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Post request for bulk publish
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}/versions/{solutionTemplateVersionName}/bulkPublishSolution</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionTemplateVersions_BulkPublishSolution</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionTemplateVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="content"> The content of the action request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        public virtual ArmOperation BulkPublishSolution(WaitUntil waitUntil, BulkPublishSolutionContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = _edgeSolutionTemplateVersionSolutionTemplateVersionsClientDiagnostics.CreateScope("EdgeSolutionTemplateVersionResource.BulkPublishSolution");
            scope.Start();
            try
            {
                var response = _edgeSolutionTemplateVersionSolutionTemplateVersionsRestClient.BulkPublishSolution(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, content, cancellationToken);
                var operation = new WorkloadOrchestrationArmOperation(_edgeSolutionTemplateVersionSolutionTemplateVersionsClientDiagnostics, Pipeline, _edgeSolutionTemplateVersionSolutionTemplateVersionsRestClient.CreateBulkPublishSolutionRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, content).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeSolutionTemplateVersionResource.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Text.Json;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    public partial class EdgeSolutionTemplateVersionResource : IJsonModel<EdgeSolutionTemplateVersionData>
    {
        private static EdgeSolutionTemplateVersionData s_dataDeserializationInstance;
        private static EdgeSolutionTemplateVersionData DataDeserializationInstance => s_dataDeserializationInstance ??= new();

        void IJsonModel<EdgeSolutionTemplateVersionData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options) => ((IJsonModel<EdgeSolutionTemplateVersionData>)Data).Write(writer, options);

        EdgeSolutionTemplateVersionData IJsonModel<EdgeSolutionTemplateVersionData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => ((IJsonModel<EdgeSolutionTemplateVersionData>)DataDeserializationInstance).Create(ref reader, options);

        BinaryData IPersistableModel<EdgeSolutionTemplateVersionData>.Write(ModelReaderWriterOptions options) => ModelReaderWriter.Write<EdgeSolutionTemplateVersionData>(Data, options, AzureResourceManagerWorkloadOrchestrationContext.Default);

        EdgeSolutionTemplateVersionData IPersistableModel<EdgeSolutionTemplateVersionData>.Create(BinaryData data, ModelReaderWriterOptions options) => ModelReaderWriter.Read<EdgeSolutionTemplateVersionData>(data, options, AzureResourceManagerWorkloadOrchestrationContext.Default);

        string IPersistableModel<EdgeSolutionTemplateVersionData>.GetFormatFromOptions(ModelReaderWriterOptions options) => ((IPersistableModel<EdgeSolutionTemplateVersionData>)DataDeserializationInstance).GetFormatFromOptions(options);
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeSolutionVersionCollection.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A class representing a collection of <see cref="EdgeSolutionVersionResource"/> and their operations.
    /// Each <see cref="EdgeSolutionVersionResource"/> in the collection will belong to the same instance of <see cref="EdgeSolutionResource"/>.
    /// To get an <see cref="EdgeSolutionVersionCollection"/> instance call the GetEdgeSolutionVersions method from an instance of <see cref="EdgeSolutionResource"/>.
    /// </summary>
    public partial class EdgeSolutionVersionCollection : ArmCollection, IEnumerable<EdgeSolutionVersionResource>, IAsyncEnumerable<EdgeSolutionVersionResource>
    {
        private readonly ClientDiagnostics _edgeSolutionVersionSolutionVersionsClientDiagnostics;
        private readonly SolutionVersionsRestOperations _edgeSolutionVersionSolutionVersionsRestClient;

        /// <summary> Initializes a new instance of the <see cref="EdgeSolutionVersionCollection"/> class for mocking. </summary>
        protected EdgeSolutionVersionCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="EdgeSolutionVersionCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal EdgeSolutionVersionCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _edgeSolutionVersionSolutionVersionsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.WorkloadOrchestration", EdgeSolutionVersionResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(EdgeSolutionVersionResource.ResourceType, out string edgeSolutionVersionSolutionVersionsApiVersion);
            _edgeSolutionVersionSolutionVersionsRestClient = new SolutionVersionsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, edgeSolutionVersionSolutionVersionsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != EdgeSolutionResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, EdgeSolutionResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Create or update a Solution Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/versions/{solutionVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionVersion_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="solutionVersionName"> Name of the solution version. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="solutionVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionVersionName"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<EdgeSolutionVersionResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string solutionVersionName, EdgeSolutionVersionData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(solutionVersionName, nameof(solutionVersionName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _edgeSolutionVersionSolutionVersionsClientDiagnostics.CreateScope("EdgeSolutionVersionCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _edgeSolutionVersionSolutionVersionsRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, solutionVersionName, data, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadOrchestrationArmOperation<EdgeSolutionVersionResource>(new EdgeSolutionVersionOperationSource(Client), _edgeSolutionVersionSolutionVersionsClientDiagnostics, Pipeline, _edgeSolutionVersionSolutionVersionsRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, solutionVersionName, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create or update a Solution Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/versions/{solutionVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionVersion_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="solutionVersionName"> Name of the solution version. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="solutionVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionVersionName"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<EdgeSolutionVersionResource> CreateOrUpdate(WaitUntil waitUntil, string solutionVersionName, EdgeSolutionVersionData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(solutionVersionName, nameof(solutionVersionName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _edgeSolutionVersionSolutionVersionsClientDiagnostics.CreateScope("EdgeSolutionVersionCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _edgeSolutionVersionSolutionVersionsRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, solutionVersionName, data, cancellationToken);
                var operation = new WorkloadOrchestrationArmOperation<EdgeSolutionVersionResource>(new EdgeSolutionVersionOperationSource(Client), _edgeSolutionVersionSolutionVersionsClientDiagnostics, Pipeline, _edgeSolutionVersionSolutionVersionsRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, solutionVersionName, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a Solution Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/versions/{solutionVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="solutionVersionName"> Name of the solution version. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="solutionVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionVersionName"/> is null. </exception>
        public virtual async Task<Response<EdgeSolutionVersionResource>> GetAsync(string solutionVersionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(solutionVersionName, nameof(solutionVersionName));

            using var scope = _edgeSolutionVersionSolutionVersionsClientDiagnostics.CreateScope("EdgeSolutionVersionCollection.Get");
            scope.Start();
            try
            {
                var response = await _edgeSolutionVersionSolutionVersionsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, solutionVersionName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeSolutionVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a Solution Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/versions/{solutionVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="solutionVersionName"> Name of the solution version. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="solutionVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionVersionName"/> is null. </exception>
        public virtual Response<EdgeSolutionVersionResource> Get(string solutionVersionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(solutionVersionName, nameof(solutionVersionName));

            using var scope = _edgeSolutionVersionSolutionVersionsClientDiagnostics.CreateScope("EdgeSolutionVersionCollection.Get");
            scope.Start();
            try
            {
                var response = _edgeSolutionVersionSolutionVersionsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, solutionVersionName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeSolutionVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List Solution Version Resources
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/versions</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionVersion_ListBySolution</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="EdgeSolutionVersionResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<EdgeSolutionVersionResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _edgeSolutionVersionSolutionVersionsRestClient.CreateListBySolutionRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _edgeSolutionVersionSolutionVersionsRestClient.CreateListBySolutionNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new EdgeSolutionVersionResource(Client, EdgeSolutionVersionData.DeserializeEdgeSolutionVersionData(e)), _edgeSolutionVersionSolutionVersionsClientDiagnostics, Pipeline, "EdgeSolutionVersionCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List Solution Version Resources
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/versions</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionVersion_ListBySolution</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="EdgeSolutionVersionResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<EdgeSolutionVersionResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _edgeSolutionVersionSolutionVersionsRestClient.CreateListBySolutionRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _edgeSolutionVersionSolutionVersionsRestClient.CreateListBySolutionNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new EdgeSolutionVersionResource(Client, EdgeSolutionVersionData.DeserializeEdgeSolutionVersionData(e)), _edgeSolutionVersionSolutionVersionsClientDiagnostics, Pipeline, "EdgeSolutionVersionCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/versions/{solutionVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="solutionVersionName"> Name of the solution version. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="solutionVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionVersionName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string solutionVersionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(solutionVersionName, nameof(solutionVersionName));

            using var scope = _edgeSolutionVersionSolutionVersionsClientDiagnostics.CreateScope("EdgeSolutionVersionCollection.Exists");
            scope.Start();
            try
            {
                var response = await _edgeSolutionVersionSolutionVersionsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, solutionVersionName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/versions/{solutionVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="solutionVersionName"> Name of the solution version. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="solutionVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionVersionName"/> is null. </exception>
        public virtual Response<bool> Exists(string solutionVersionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(solutionVersionName, nameof(solutionVersionName));

            using var scope = _edgeSolutionVersionSolutionVersionsClientDiagnostics.CreateScope("EdgeSolutionVersionCollection.Exists");
            scope.Start();
            try
            {
                var response = _edgeSolutionVersionSolutionVersionsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, solutionVersionName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/versions/{solutionVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="solutionVersionName"> Name of the solution version. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="solutionVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionVersionName"/> is null. </exception>
        public virtual async Task<NullableResponse<EdgeSolutionVersionResource>> GetIfExistsAsync(string solutionVersionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(solutionVersionName, nameof(solutionVersionName));

            using var scope = _edgeSolutionVersionSolutionVersionsClientDiagnostics.CreateScope("EdgeSolutionVersionCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _edgeSolutionVersionSolutionVersionsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, solutionVersionName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<EdgeSolutionVersionResource>(response.GetRawResponse());
                return Response.FromValue(new EdgeSolutionVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/versions/{solutionVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="solutionVersionName"> Name of the solution version. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="solutionVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionVersionName"/> is null. </exception>
        public virtual NullableResponse<EdgeSolutionVersionResource> GetIfExists(string solutionVersionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(solutionVersionName, nameof(solutionVersionName));

            using var scope = _edgeSolutionVersionSolutionVersionsClientDiagnostics.CreateScope("EdgeSolutionVersionCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _edgeSolutionVersionSolutionVersionsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, solutionVersionName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<EdgeSolutionVersionResource>(response.GetRawResponse());
                return Response.FromValue(new EdgeSolutionVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<EdgeSolutionVersionResource> IEnumerable<EdgeSolutionVersionResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<EdgeSolutionVersionResource> IAsyncEnumerable<EdgeSolutionVersionResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeSolutionVersionData.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A class representing the EdgeSolutionVersion data model.
    /// Solution Version Resource. It has the resolved configuration along with edge specification.
    /// </summary>
    public partial class EdgeSolutionVersionData : ResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeSolutionVersionData"/>. </summary>
        public EdgeSolutionVersionData()
        {
        }

        /// <summary> Initializes a new instance of <see cref="EdgeSolutionVersionData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="extendedLocation"></param>
        /// <param name="etag"> If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeSolutionVersionData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, EdgeSolutionVersionProperties properties, ExtendedLocation extendedLocation, ETag? etag, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData)
        {
            Properties = properties;
            ExtendedLocation = extendedLocation;
            ETag = etag;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The resource-specific properties for this resource. </summary>
        public EdgeSolutionVersionProperties Properties { get; set; }
        /// <summary> Gets or sets the extended location. </summary>
        public ExtendedLocation ExtendedLocation { get; set; }
        /// <summary> If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. </summary>
        public ETag? ETag { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeSolutionVersionData.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    public partial class EdgeSolutionVersionData : IUtf8JsonSerializable, IJsonModel<EdgeSolutionVersionData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeSolutionVersionData>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeSolutionVersionData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionVersionData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeSolutionVersionData)} does not support writing '{format}' format.");
            }

            base.JsonModelWriteCore(writer, options);
            if (Optional.IsDefined(Properties))
            {
                writer.WritePropertyName("properties"u8);
                writer.WriteObjectValue(Properties, options);
            }
            if (Optional.IsDefined(ExtendedLocation))
            {
                writer.WritePropertyName("extendedLocation"u8);
                ((IJsonModel<ExtendedLocation>)ExtendedLocation).Write(writer, options);
            }
            if (options.Format != "W" && Optional.IsDefined(ETag))
            {
                writer.WritePropertyName("eTag"u8);
                writer.WriteStringValue(ETag.Value.ToString());
            }
        }

        EdgeSolutionVersionData IJsonModel<EdgeSolutionVersionData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionVersionData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeSolutionVersionData)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeSolutionVersionData(document.RootElement, options);
        }

        internal static EdgeSolutionVersionData DeserializeEdgeSolutionVersionData(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            EdgeSolutionVersionProperties properties = default;
            ExtendedLocation extendedLocation = default;
            ETag? etag = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            SystemData systemData = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    properties = EdgeSolutionVersionProperties.DeserializeEdgeSolutionVersionProperties(property.Value, options);
                    continue;
                }
                if (property.NameEquals("extendedLocation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    extendedLocation = ModelReaderWriter.Read<ExtendedLocation>(new BinaryData(Encoding.UTF8.GetBytes(property.Value.GetRawText())), options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                    continue;
                }
                if (property.NameEquals("eTag"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    etag = new ETag(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = ModelReaderWriter.Read<SystemData>(new BinaryData(Encoding.UTF8.GetBytes(property.Value.GetRawText())), ModelSerializationExtensions.WireOptions, AzureResourceManagerWorkloadOrchestrationContext.Default);
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeSolutionVersionData(
                id,
                name,
                type,
                systemData,
                properties,
                extendedLocation,
                etag,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeSolutionVersionData>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionVersionData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeSolutionVersionData)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeSolutionVersionData IPersistableModel<EdgeSolutionVersionData>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionVersionData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeSolutionVersionData(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeSolutionVersionData)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeSolutionVersionData>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeSolutionVersionResource.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A Class representing an EdgeSolutionVersion along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier"/> you can construct an <see cref="EdgeSolutionVersionResource"/>
    /// from an instance of <see cref="ArmClient"/> using the GetEdgeSolutionVersionResource method.
    /// Otherwise you can get one from its parent resource <see cref="EdgeSolutionResource"/> using the GetEdgeSolutionVersion method.
    /// </summary>
    public partial class EdgeSolutionVersionResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="EdgeSolutionVersionResource"/> instance. </summary>
        /// <param name="subscriptionId"> The subscriptionId. </param>
        /// <param name="resourceGroupName"> The resourceGroupName. </param>
        /// <param name="targetName"> The targetName. </param>
        /// <param name="solutionName"> The solutionName. </param>
        /// <param name="solutionVersionName"> The solutionVersionName. </param>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string targetName, string solutionName, string solutionVersionName)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/versions/{solutionVersionName}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _edgeSolutionVersionSolutionVersionsClientDiagnostics;
        private readonly SolutionVersionsRestOperations _edgeSolutionVersionSolutionVersionsRestClient;
        private readonly EdgeSolutionVersionData _data;

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.Edge/targets/solutions/versions";

        /// <summary> Initializes a new instance of the <see cref="EdgeSolutionVersionResource"/> class for mocking. </summary>
        protected EdgeSolutionVersionResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="EdgeSolutionVersionResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal EdgeSolutionVersionResource(ArmClient client, EdgeSolutionVersionData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="EdgeSolutionVersionResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal EdgeSolutionVersionResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _edgeSolutionVersionSolutionVersionsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.WorkloadOrchestration", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string edgeSolutionVersionSolutionVersionsApiVersion);
            _edgeSolutionVersionSolutionVersionsRestClient = new SolutionVersionsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, edgeSolutionVersionSolutionVersionsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual EdgeSolutionVersionData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary>
        /// Get a Solution Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/versions/{solutionVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<EdgeSolutionVersionResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _edgeSolutionVersionSolutionVersionsClientDiagnostics.CreateScope("EdgeSolutionVersionResource.Get");
            scope.Start();
            try
            {
                var response = await _edgeSolutionVersionSolutionVersionsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeSolutionVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a Solution Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/versions/{solutionVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<EdgeSolutionVersionResource> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _edgeSolutionVersionSolutionVersionsClientDiagnostics.CreateScope("EdgeSolutionVersionResource.Get");
            scope.Start();
            try
            {
                var response = _edgeSolutionVersionSolutionVersionsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeSolutionVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete a Solution Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/versions/{solutionVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionVersion_Delete</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> DeleteAsync(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _edgeSolutionVersionSolutionVersionsClientDiagnostics.CreateScope("EdgeSolutionVersionResource.Delete");
            scope.Start();
            try
            {
                var response = await _edgeSolutionVersionSolutionVersionsRestClient.DeleteAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadOrchestrationArmOperation(_edgeSolutionVersionSolutionVersionsClientDiagnostics, Pipeline, _edgeSolutionVersionSolutionVersionsRestClient.CreateDeleteRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete a Solution Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/versions/{solutionVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionVersion_Delete</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation Delete(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _edgeSolutionVersionSolutionVersionsClientDiagnostics.CreateScope("EdgeSolutionVersionResource.Delete");
            scope.Start();
            try
            {
                var response = _edgeSolutionVersionSolutionVersionsRestClient.Delete(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken);
                var operation = new WorkloadOrchestrationArmOperation(_edgeSolutionVersionSolutionVersionsClientDiagnostics, Pipeline, _edgeSolutionVersionSolutionVersionsRestClient.CreateDeleteRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Update a Solution Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/versions/{solutionVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionVersion_Update</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="data"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<EdgeSolutionVersionResource>> UpdateAsync(WaitUntil waitUntil, EdgeSolutionVersionData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _edgeSolutionVersionSolutionVersionsClientDiagnostics.CreateScope("EdgeSolutionVersionResource.Update");
            scope.Start();
            try
            {
                var response = await _edgeSolutionVersionSolutionVersionsRestClient.UpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, data, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadOrchestrationArmOperation<EdgeSolutionVersionResource>(new EdgeSolutionVersionOperationSource(Client), _edgeSolutionVersionSolutionVersionsClientDiagnostics, Pipeline, _edgeSolutionVersionSolutionVersionsRestClient.CreateUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, data).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Update a Solution Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/versions/{solutionVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionVersion_Update</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="data"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<EdgeSolutionVersionResource> Update(WaitUntil waitUntil, EdgeSolutionVersionData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _edgeSolutionVersionSolutionVersionsClientDiagnostics.CreateScope("EdgeSolutionVersionResource.Update");
            scope.Start();
            try
            {
                var response = _edgeSolutionVersionSolutionVersionsRestClient.Update(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, data, cancellationToken);
                var operation = new WorkloadOrchestrationArmOperation<EdgeSolutionVersionResource>(new EdgeSolutionVersionOperationSource(Client), _edgeSolutionVersionSolutionVersionsClientDiagnostics, Pipeline, _edgeSolutionVersionSolutionVersionsRestClient.CreateUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, data).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeSolutionVersionResource.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Text.Json;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    public partial class EdgeSolutionVersionResource : IJsonModel<EdgeSolutionVersionData>
    {
        private static EdgeSolutionVersionData s_dataDeserializationInstance;
        private static EdgeSolutionVersionData DataDeserializationInstance => s_dataDeserializationInstance ??= new();

        void IJsonModel<EdgeSolutionVersionData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options) => ((IJsonModel<EdgeSolutionVersionData>)Data).Write(writer, options);

        EdgeSolutionVersionData IJsonModel<EdgeSolutionVersionData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => ((IJsonModel<EdgeSolutionVersionData>)DataDeserializationInstance).Create(ref reader, options);

        BinaryData IPersistableModel<EdgeSolutionVersionData>.Write(ModelReaderWriterOptions options) => ModelReaderWriter.Write<EdgeSolutionVersionData>(Data, options, AzureResourceManagerWorkloadOrchestrationContext.Default);

        EdgeSolutionVersionData IPersistableModel<EdgeSolutionVersionData>.Create(BinaryData data, ModelReaderWriterOptions options) => ModelReaderWriter.Read<EdgeSolutionVersionData>(data, options, AzureResourceManagerWorkloadOrchestrationContext.Default);

        string IPersistableModel<EdgeSolutionVersionData>.GetFormatFromOptions(ModelReaderWriterOptions options) => ((IPersistableModel<EdgeSolutionVersionData>)DataDeserializationInstance).GetFormatFromOptions(options);
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeTargetCollection.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A class representing a collection of <see cref="EdgeTargetResource"/> and their operations.
    /// Each <see cref="EdgeTargetResource"/> in the collection will belong to the same instance of <see cref="ResourceGroupResource"/>.
    /// To get an <see cref="EdgeTargetCollection"/> instance call the GetEdgeTargets method from an instance of <see cref="ResourceGroupResource"/>.
    /// </summary>
    public partial class EdgeTargetCollection : ArmCollection, IEnumerable<EdgeTargetResource>, IAsyncEnumerable<EdgeTargetResource>
    {
        private readonly ClientDiagnostics _edgeTargetTargetsClientDiagnostics;
        private readonly TargetsRestOperations _edgeTargetTargetsRestClient;

        /// <summary> Initializes a new instance of the <see cref="EdgeTargetCollection"/> class for mocking. </summary>
        protected EdgeTargetCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="EdgeTargetCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal EdgeTargetCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _edgeTargetTargetsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.WorkloadOrchestration", EdgeTargetResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(EdgeTargetResource.ResourceType, out string edgeTargetTargetsApiVersion);
            _edgeTargetTargetsRestClient = new TargetsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, edgeTargetTargetsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceGroupResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceGroupResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Create or update a Target Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Target_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeTargetResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="targetName"> Name of the target. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="targetName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="targetName"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<EdgeTargetResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string targetName, EdgeTargetData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(targetName, nameof(targetName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _edgeTargetTargetsClientDiagnostics.CreateScope("EdgeTargetCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _edgeTargetTargetsRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, targetName, data, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadOrchestrationArmOperation<EdgeTargetResource>(new EdgeTargetOperationSource(Client), _edgeTargetTargetsClientDiagnostics, Pipeline, _edgeTargetTargetsRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, targetName, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create or update a Target Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Target_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeTargetResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="targetName"> Name of the target. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="targetName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="targetName"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<EdgeTargetResource> CreateOrUpdate(WaitUntil waitUntil, string targetName, EdgeTargetData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(targetName, nameof(targetName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _edgeTargetTargetsClientDiagnostics.CreateScope("EdgeTargetCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _edgeTargetTargetsRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, targetName, data, cancellationToken);
                var operation = new WorkloadOrchestrationArmOperation<EdgeTargetResource>(new EdgeTargetOperationSource(Client), _edgeTargetTargetsClientDiagnostics, Pipeline, _edgeTargetTargetsRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, targetName, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a Target Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Target_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeTargetResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="targetName"> Name of the target. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="targetName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="targetName"/> is null. </exception>
        public virtual async Task<Response<EdgeTargetResource>> GetAsync(string targetName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(targetName, nameof(targetName));

            using var scope = _edgeTargetTargetsClientDiagnostics.CreateScope("EdgeTargetCollection.Get");
            scope.Start();
            try
            {
                var response = await _edgeTargetTargetsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, targetName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeTargetResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a Target Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Target_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeTargetResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="targetName"> Name of the target. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="targetName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="targetName"/> is null. </exception>
        public virtual Response<EdgeTargetResource> Get(string targetName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(targetName, nameof(targetName));

            using var scope = _edgeTargetTargetsClientDiagnostics.CreateScope("EdgeTargetCollection.Get");
            scope.Start();
            try
            {
                var response = _edgeTargetTargetsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, targetName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeTargetResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List by specified resource group
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Target_ListByResourceGroup</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeTargetResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="EdgeTargetResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<EdgeTargetResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _edgeTargetTargetsRestClient.CreateListByResourceGroupRequest(Id.SubscriptionId, Id.ResourceGroupName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _edgeTargetTargetsRestClient.CreateListByResourceGroupNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new EdgeTargetResource(Client, EdgeTargetData.DeserializeEdgeTargetData(e)), _edgeTargetTargetsClientDiagnostics, Pipeline, "EdgeTargetCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List by specified resource group
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Target_ListByResourceGroup</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeTargetResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="EdgeTargetResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<EdgeTargetResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _edgeTargetTargetsRestClient.CreateListByResourceGroupRequest(Id.SubscriptionId, Id.ResourceGroupName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _edgeTargetTargetsRestClient.CreateListByResourceGroupNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new EdgeTargetResource(Client, EdgeTargetData.DeserializeEdgeTargetData(e)), _edgeTargetTargetsClientDiagnostics, Pipeline, "EdgeTargetCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Target_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeTargetResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="targetName"> Name of the target. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="targetName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="targetName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string targetName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(targetName, nameof(targetName));

            using var scope = _edgeTargetTargetsClientDiagnostics.CreateScope("EdgeTargetCollection.Exists");
            scope.Start();
            try
            {
                var response = await _edgeTargetTargetsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, targetName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Target_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeTargetResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="targetName"> Name of the target. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="targetName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="targetName"/> is null. </exception>
        public virtual Response<bool> Exists(string targetName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(targetName, nameof(targetName));

            using var scope = _edgeTargetTargetsClientDiagnostics.CreateScope("EdgeTargetCollection.Exists");
            scope.Start();
            try
            {
                var response = _edgeTargetTargetsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, targetName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Target_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeTargetResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="targetName"> Name of the target. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="targetName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="targetName"/> is null. </exception>
        public virtual async Task<NullableResponse<EdgeTargetResource>> GetIfExistsAsync(string targetName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(targetName, nameof(targetName));

            using var scope = _edgeTargetTargetsClientDiagnostics.CreateScope("EdgeTargetCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _edgeTargetTargetsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, targetName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<EdgeTargetResource>(response.GetRawResponse());
                return Response.FromValue(new EdgeTargetResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Target_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeTargetResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="targetName"> Name of the target. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="targetName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="targetName"/> is null. </exception>
        public virtual NullableResponse<EdgeTargetResource> GetIfExists(string targetName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(targetName, nameof(targetName));

            using var scope = _edgeTargetTargetsClientDiagnostics.CreateScope("EdgeTargetCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _edgeTargetTargetsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, targetName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<EdgeTargetResource>(response.GetRawResponse());
                return Response.FromValue(new EdgeTargetResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<EdgeTargetResource> IEnumerable<EdgeTargetResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<EdgeTargetResource> IAsyncEnumerable<EdgeTargetResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeTargetData.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A class representing the EdgeTarget data model.
    /// Target Resource. Represents a resource to be deployed on the edge.
    /// </summary>
    public partial class EdgeTargetData : TrackedResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeTargetData"/>. </summary>
        /// <param name="location"> The location. </param>
        public EdgeTargetData(AzureLocation location) : base(location)
        {
        }

        /// <summary> Initializes a new instance of <see cref="EdgeTargetData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="etag"> If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. </param>
        /// <param name="extendedLocation"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeTargetData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, IDictionary<string, string> tags, AzureLocation location, EdgeTargetProperties properties, ETag? etag, ExtendedLocation extendedLocation, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData, tags, location)
        {
            Properties = properties;
            ETag = etag;
            ExtendedLocation = extendedLocation;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="EdgeTargetData"/> for deserialization. </summary>
        internal EdgeTargetData()
        {
        }

        /// <summary> The resource-specific properties for this resource. </summary>
        public EdgeTargetProperties Properties { get; set; }
        /// <summary> If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. </summary>
        public ETag? ETag { get; }
        /// <summary> Gets or sets the extended location. </summary>
        public ExtendedLocation ExtendedLocation { get; set; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeTargetData.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    public partial class EdgeTargetData : IUtf8JsonSerializable, IJsonModel<EdgeTargetData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeTargetData>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeTargetData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeTargetData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeTargetData)} does not support writing '{format}' format.");
            }

            base.JsonModelWriteCore(writer, options);
            if (Optional.IsDefined(Properties))
            {
                writer.WritePropertyName("properties"u8);
                writer.WriteObjectValue(Properties, options);
            }
            if (options.Format != "W" && Optional.IsDefined(ETag))
            {
                writer.WritePropertyName("eTag"u8);
                writer.WriteStringValue(ETag.Value.ToString());
            }
            if (Optional.IsDefined(ExtendedLocation))
            {
                writer.WritePropertyName("extendedLocation"u8);
                ((IJsonModel<ExtendedLocation>)ExtendedLocation).Write(writer, options);
            }
        }

        EdgeTargetData IJsonModel<EdgeTargetData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeTargetData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeTargetData)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeTargetData(document.RootElement, options);
        }

        internal static EdgeTargetData DeserializeEdgeTargetData(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            EdgeTargetProperties properties = default;
            ETag? etag = default;
            ExtendedLocation extendedLocation = default;
            IDictionary<string, string> tags = default;
            AzureLocation location = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            SystemData systemData = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    properties = EdgeTargetProperties.DeserializeEdgeTargetProperties(property.Value, options);
                    continue;
                }
                if (property.NameEquals("eTag"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    etag = new ETag(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("extendedLocation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    extendedLocation = ModelReaderWriter.Read<ExtendedLocation>(new BinaryData(Encoding.UTF8.GetBytes(property.Value.GetRawText())), options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                    continue;
                }
                if (property.NameEquals("tags"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("location"u8))
                {
                    location = new AzureLocation(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = ModelReaderWriter.Read<SystemData>(new BinaryData(Encoding.UTF8.GetBytes(property.Value.GetRawText())), ModelSerializationExtensions.WireOptions, AzureResourceManagerWorkloadOrchestrationContext.Default);
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeTargetData(
                id,
                name,
                type,
                systemData,
                tags ?? new ChangeTrackingDictionary<string, string>(),
                location,
                properties,
                etag,
                extendedLocation,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeTargetData>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeTargetData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeTargetData)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeTargetData IPersistableModel<EdgeTargetData>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeTargetData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeTargetData(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeTargetData)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeTargetData>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeTargetResource.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Text.Json;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    public partial class EdgeTargetResource : IJsonModel<EdgeTargetData>
    {
        private static EdgeTargetData s_dataDeserializationInstance;
        private static EdgeTargetData DataDeserializationInstance => s_dataDeserializationInstance ??= new();

        void IJsonModel<EdgeTargetData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options) => ((IJsonModel<EdgeTargetData>)Data).Write(writer, options);

        EdgeTargetData IJsonModel<EdgeTargetData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => ((IJsonModel<EdgeTargetData>)DataDeserializationInstance).Create(ref reader, options);

        BinaryData IPersistableModel<EdgeTargetData>.Write(ModelReaderWriterOptions options) => ModelReaderWriter.Write<EdgeTargetData>(Data, options, AzureResourceManagerWorkloadOrchestrationContext.Default);

        EdgeTargetData IPersistableModel<EdgeTargetData>.Create(BinaryData data, ModelReaderWriterOptions options) => ModelReaderWriter.Read<EdgeTargetData>(data, options, AzureResourceManagerWorkloadOrchestrationContext.Default);

        string IPersistableModel<EdgeTargetData>.GetFormatFromOptions(ModelReaderWriterOptions options) => ((IPersistableModel<EdgeTargetData>)DataDeserializationInstance).GetFormatFromOptions(options);
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeWorkflowCollection.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A class representing a collection of <see cref="EdgeWorkflowResource"/> and their operations.
    /// Each <see cref="EdgeWorkflowResource"/> in the collection will belong to the same instance of <see cref="EdgeContextResource"/>.
    /// To get an <see cref="EdgeWorkflowCollection"/> instance call the GetEdgeWorkflows method from an instance of <see cref="EdgeContextResource"/>.
    /// </summary>
    public partial class EdgeWorkflowCollection : ArmCollection, IEnumerable<EdgeWorkflowResource>, IAsyncEnumerable<EdgeWorkflowResource>
    {
        private readonly ClientDiagnostics _edgeWorkflowWorkflowsClientDiagnostics;
        private readonly WorkflowsRestOperations _edgeWorkflowWorkflowsRestClient;

        /// <summary> Initializes a new instance of the <see cref="EdgeWorkflowCollection"/> class for mocking. </summary>
        protected EdgeWorkflowCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="EdgeWorkflowCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal EdgeWorkflowCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _edgeWorkflowWorkflowsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.WorkloadOrchestration", EdgeWorkflowResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(EdgeWorkflowResource.ResourceType, out string edgeWorkflowWorkflowsApiVersion);
            _edgeWorkflowWorkflowsRestClient = new WorkflowsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, edgeWorkflowWorkflowsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != EdgeContextResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, EdgeContextResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Create or update a Workflow resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Workflow_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeWorkflowResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="workflowName"> Name of the workflow. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="workflowName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="workflowName"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<EdgeWorkflowResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string workflowName, EdgeWorkflowData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(workflowName, nameof(workflowName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _edgeWorkflowWorkflowsClientDiagnostics.CreateScope("EdgeWorkflowCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _edgeWorkflowWorkflowsRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, workflowName, data, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadOrchestrationArmOperation<EdgeWorkflowResource>(new EdgeWorkflowOperationSource(Client), _edgeWorkflowWorkflowsClientDiagnostics, Pipeline, _edgeWorkflowWorkflowsRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, workflowName, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create or update a Workflow resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Workflow_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeWorkflowResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="workflowName"> Name of the workflow. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="workflowName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="workflowName"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<EdgeWorkflowResource> CreateOrUpdate(WaitUntil waitUntil, string workflowName, EdgeWorkflowData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(workflowName, nameof(workflowName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _edgeWorkflowWorkflowsClientDiagnostics.CreateScope("EdgeWorkflowCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _edgeWorkflowWorkflowsRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, workflowName, data, cancellationToken);
                var operation = new WorkloadOrchestrationArmOperation<EdgeWorkflowResource>(new EdgeWorkflowOperationSource(Client), _edgeWorkflowWorkflowsClientDiagnostics, Pipeline, _edgeWorkflowWorkflowsRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, workflowName, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a Workflow resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Workflow_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeWorkflowResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="workflowName"> Name of the workflow. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="workflowName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="workflowName"/> is null. </exception>
        public virtual async Task<Response<EdgeWorkflowResource>> GetAsync(string workflowName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(workflowName, nameof(workflowName));

            using var scope = _edgeWorkflowWorkflowsClientDiagnostics.CreateScope("EdgeWorkflowCollection.Get");
            scope.Start();
            try
            {
                var response = await _edgeWorkflowWorkflowsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, workflowName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeWorkflowResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a Workflow resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Workflow_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeWorkflowResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="workflowName"> Name of the workflow. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="workflowName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="workflowName"/> is null. </exception>
        public virtual Response<EdgeWorkflowResource> Get(string workflowName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(workflowName, nameof(workflowName));

            using var scope = _edgeWorkflowWorkflowsClientDiagnostics.CreateScope("EdgeWorkflowCollection.Get");
            scope.Start();
            try
            {
                var response = _edgeWorkflowWorkflowsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, workflowName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeWorkflowResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List Workflow resources
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Workflow_ListByContext</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeWorkflowResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="EdgeWorkflowResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<EdgeWorkflowResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _edgeWorkflowWorkflowsRestClient.CreateListByContextRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _edgeWorkflowWorkflowsRestClient.CreateListByContextNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new EdgeWorkflowResource(Client, EdgeWorkflowData.DeserializeEdgeWorkflowData(e)), _edgeWorkflowWorkflowsClientDiagnostics, Pipeline, "EdgeWorkflowCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List Workflow resources
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Workflow_ListByContext</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeWorkflowResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="EdgeWorkflowResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<EdgeWorkflowResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _edgeWorkflowWorkflowsRestClient.CreateListByContextRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _edgeWorkflowWorkflowsRestClient.CreateListByContextNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new EdgeWorkflowResource(Client, EdgeWorkflowData.DeserializeEdgeWorkflowData(e)), _edgeWorkflowWorkflowsClientDiagnostics, Pipeline, "EdgeWorkflowCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Workflow_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeWorkflowResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="workflowName"> Name of the workflow. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="workflowName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="workflowName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string workflowName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(workflowName, nameof(workflowName));

            using var scope = _edgeWorkflowWorkflowsClientDiagnostics.CreateScope("EdgeWorkflowCollection.Exists");
            scope.Start();
            try
            {
                var response = await _edgeWorkflowWorkflowsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, workflowName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Workflow_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeWorkflowResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="workflowName"> Name of the workflow. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="workflowName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="workflowName"/> is null. </exception>
        public virtual Response<bool> Exists(string workflowName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(workflowName, nameof(workflowName));

            using var scope = _edgeWorkflowWorkflowsClientDiagnostics.CreateScope("EdgeWorkflowCollection.Exists");
            scope.Start();
            try
            {
                var response = _edgeWorkflowWorkflowsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, workflowName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Workflow_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeWorkflowResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="workflowName"> Name of the workflow. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="workflowName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="workflowName"/> is null. </exception>
        public virtual async Task<NullableResponse<EdgeWorkflowResource>> GetIfExistsAsync(string workflowName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(workflowName, nameof(workflowName));

            using var scope = _edgeWorkflowWorkflowsClientDiagnostics.CreateScope("EdgeWorkflowCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _edgeWorkflowWorkflowsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, workflowName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<EdgeWorkflowResource>(response.GetRawResponse());
                return Response.FromValue(new EdgeWorkflowResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Workflow_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeWorkflowResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="workflowName"> Name of the workflow. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="workflowName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="workflowName"/> is null. </exception>
        public virtual NullableResponse<EdgeWorkflowResource> GetIfExists(string workflowName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(workflowName, nameof(workflowName));

            using var scope = _edgeWorkflowWorkflowsClientDiagnostics.CreateScope("EdgeWorkflowCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _edgeWorkflowWorkflowsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, workflowName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<EdgeWorkflowResource>(response.GetRawResponse());
                return Response.FromValue(new EdgeWorkflowResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<EdgeWorkflowResource> IEnumerable<EdgeWorkflowResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<EdgeWorkflowResource> IAsyncEnumerable<EdgeWorkflowResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeWorkflowData.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A class representing the EdgeWorkflow data model.
    /// Workflow Resource
    /// </summary>
    public partial class EdgeWorkflowData : ResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeWorkflowData"/>. </summary>
        public EdgeWorkflowData()
        {
        }

        /// <summary> Initializes a new instance of <see cref="EdgeWorkflowData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="extendedLocation"></param>
        /// <param name="etag"> If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeWorkflowData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, EdgeWorkflowProperties properties, ExtendedLocation extendedLocation, ETag? etag, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData)
        {
            Properties = properties;
            ExtendedLocation = extendedLocation;
            ETag = etag;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The resource-specific properties for this resource. </summary>
        public EdgeWorkflowProperties Properties { get; set; }
        /// <summary> Gets or sets the extended location. </summary>
        public ExtendedLocation ExtendedLocation { get; set; }
        /// <summary> If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. </summary>
        public ETag? ETag { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeWorkflowData.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    public partial class EdgeWorkflowData : IUtf8JsonSerializable, IJsonModel<EdgeWorkflowData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeWorkflowData>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeWorkflowData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeWorkflowData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeWorkflowData)} does not support writing '{format}' format.");
            }

            base.JsonModelWriteCore(writer, options);
            if (Optional.IsDefined(Properties))
            {
                writer.WritePropertyName("properties"u8);
                writer.WriteObjectValue(Properties, options);
            }
            if (Optional.IsDefined(ExtendedLocation))
            {
                writer.WritePropertyName("extendedLocation"u8);
                ((IJsonModel<ExtendedLocation>)ExtendedLocation).Write(writer, options);
            }
            if (options.Format != "W" && Optional.IsDefined(ETag))
            {
                writer.WritePropertyName("eTag"u8);
                writer.WriteStringValue(ETag.Value.ToString());
            }
        }

        EdgeWorkflowData IJsonModel<EdgeWorkflowData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeWorkflowData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeWorkflowData)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeWorkflowData(document.RootElement, options);
        }

        internal static EdgeWorkflowData DeserializeEdgeWorkflowData(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            EdgeWorkflowProperties properties = default;
            ExtendedLocation extendedLocation = default;
            ETag? etag = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            SystemData systemData = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    properties = EdgeWorkflowProperties.DeserializeEdgeWorkflowProperties(property.Value, options);
                    continue;
                }
                if (property.NameEquals("extendedLocation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    extendedLocation = ModelReaderWriter.Read<ExtendedLocation>(new BinaryData(Encoding.UTF8.GetBytes(property.Value.GetRawText())), options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                    continue;
                }
                if (property.NameEquals("eTag"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    etag = new ETag(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = ModelReaderWriter.Read<SystemData>(new BinaryData(Encoding.UTF8.GetBytes(property.Value.GetRawText())), ModelSerializationExtensions.WireOptions, AzureResourceManagerWorkloadOrchestrationContext.Default);
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeWorkflowData(
                id,
                name,
                type,
                systemData,
                properties,
                extendedLocation,
                etag,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeWorkflowData>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeWorkflowData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeWorkflowData)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeWorkflowData IPersistableModel<EdgeWorkflowData>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeWorkflowData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeWorkflowData(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeWorkflowData)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeWorkflowData>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeWorkflowResource.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A Class representing an EdgeWorkflow along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier"/> you can construct an <see cref="EdgeWorkflowResource"/>
    /// from an instance of <see cref="ArmClient"/> using the GetEdgeWorkflowResource method.
    /// Otherwise you can get one from its parent resource <see cref="EdgeContextResource"/> using the GetEdgeWorkflow method.
    /// </summary>
    public partial class EdgeWorkflowResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="EdgeWorkflowResource"/> instance. </summary>
        /// <param name="subscriptionId"> The subscriptionId. </param>
        /// <param name="resourceGroupName"> The resourceGroupName. </param>
        /// <param name="contextName"> The contextName. </param>
        /// <param name="workflowName"> The workflowName. </param>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string contextName, string workflowName)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _edgeWorkflowWorkflowsClientDiagnostics;
        private readonly WorkflowsRestOperations _edgeWorkflowWorkflowsRestClient;
        private readonly EdgeWorkflowData _data;

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.Edge/contexts/workflows";

        /// <summary> Initializes a new instance of the <see cref="EdgeWorkflowResource"/> class for mocking. </summary>
        protected EdgeWorkflowResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="EdgeWorkflowResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal EdgeWorkflowResource(ArmClient client, EdgeWorkflowData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="EdgeWorkflowResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal EdgeWorkflowResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _edgeWorkflowWorkflowsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.WorkloadOrchestration", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string edgeWorkflowWorkflowsApiVersion);
            _edgeWorkflowWorkflowsRestClient = new WorkflowsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, edgeWorkflowWorkflowsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual EdgeWorkflowData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary> Gets a collection of EdgeWorkflowVersionResources in the EdgeWorkflow. </summary>
        /// <returns> An object representing collection of EdgeWorkflowVersionResources and their operations over a EdgeWorkflowVersionResource. </returns>
        public virtual EdgeWorkflowVersionCollection GetEdgeWorkflowVersions()
        {
            return GetCachedClient(client => new EdgeWorkflowVersionCollection(client, Id));
        }

        /// <summary>
        /// Get a Workflow Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions/{versionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>WorkflowVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeWorkflowVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="versionName"> The name of the workflowVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="versionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="versionName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<EdgeWorkflowVersionResource>> GetEdgeWorkflowVersionAsync(string versionName, CancellationToken cancellationToken = default)
        {
            return await GetEdgeWorkflowVersions().GetAsync(versionName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a Workflow Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions/{versionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>WorkflowVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeWorkflowVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="versionName"> The name of the workflowVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="versionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="versionName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<EdgeWorkflowVersionResource> GetEdgeWorkflowVersion(string versionName, CancellationToken cancellationToken = default)
        {
            return GetEdgeWorkflowVersions().Get(versionName, cancellationToken);
        }

        /// <summary>
        /// Get a Workflow resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Workflow_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeWorkflowResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<EdgeWorkflowResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _edgeWorkflowWorkflowsClientDiagnostics.CreateScope("EdgeWorkflowResource.Get");
            scope.Start();
            try
            {
                var response = await _edgeWorkflowWorkflowsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeWorkflowResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a Workflow resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Workflow_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeWorkflowResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<EdgeWorkflowResource> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _edgeWorkflowWorkflowsClientDiagnostics.CreateScope("EdgeWorkflowResource.Get");
            scope.Start();
            try
            {
                var response = _edgeWorkflowWorkflowsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeWorkflowResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete a Workflow resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Workflow_Delete</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeWorkflowResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> DeleteAsync(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _edgeWorkflowWorkflowsClientDiagnostics.CreateScope("EdgeWorkflowResource.Delete");
            scope.Start();
            try
            {
                var response = await _edgeWorkflowWorkflowsRestClient.DeleteAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadOrchestrationArmOperation(_edgeWorkflowWorkflowsClientDiagnostics, Pipeline, _edgeWorkflowWorkflowsRestClient.CreateDeleteRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete a Workflow resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Workflow_Delete</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeWorkflowResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation Delete(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _edgeWorkflowWorkflowsClientDiagnostics.CreateScope("EdgeWorkflowResource.Delete");
            scope.Start();
            try
            {
                var response = _edgeWorkflowWorkflowsRestClient.Delete(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                var operation = new WorkloadOrchestrationArmOperation(_edgeWorkflowWorkflowsClientDiagnostics, Pipeline, _edgeWorkflowWorkflowsRestClient.CreateDeleteRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// update a Workflow resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Workflow_Update</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeWorkflowResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="data"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<EdgeWorkflowResource>> UpdateAsync(WaitUntil waitUntil, EdgeWorkflowData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _edgeWorkflowWorkflowsClientDiagnostics.CreateScope("EdgeWorkflowResource.Update");
            scope.Start();
            try
            {
                var response = await _edgeWorkflowWorkflowsRestClient.UpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, data, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadOrchestrationArmOperation<EdgeWorkflowResource>(new EdgeWorkflowOperationSource(Client), _edgeWorkflowWorkflowsClientDiagnostics, Pipeline, _edgeWorkflowWorkflowsRestClient.CreateUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, data).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// update a Workflow resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Workflow_Update</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeWorkflowResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="data"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<EdgeWorkflowResource> Update(WaitUntil waitUntil, EdgeWorkflowData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _edgeWorkflowWorkflowsClientDiagnostics.CreateScope("EdgeWorkflowResource.Update");
            scope.Start();
            try
            {
                var response = _edgeWorkflowWorkflowsRestClient.Update(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, data, cancellationToken);
                var operation = new WorkloadOrchestrationArmOperation<EdgeWorkflowResource>(new EdgeWorkflowOperationSource(Client), _edgeWorkflowWorkflowsClientDiagnostics, Pipeline, _edgeWorkflowWorkflowsRestClient.CreateUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, data).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeWorkflowResource.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Text.Json;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    public partial class EdgeWorkflowResource : IJsonModel<EdgeWorkflowData>
    {
        private static EdgeWorkflowData s_dataDeserializationInstance;
        private static EdgeWorkflowData DataDeserializationInstance => s_dataDeserializationInstance ??= new();

        void IJsonModel<EdgeWorkflowData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options) => ((IJsonModel<EdgeWorkflowData>)Data).Write(writer, options);

        EdgeWorkflowData IJsonModel<EdgeWorkflowData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => ((IJsonModel<EdgeWorkflowData>)DataDeserializationInstance).Create(ref reader, options);

        BinaryData IPersistableModel<EdgeWorkflowData>.Write(ModelReaderWriterOptions options) => ModelReaderWriter.Write<EdgeWorkflowData>(Data, options, AzureResourceManagerWorkloadOrchestrationContext.Default);

        EdgeWorkflowData IPersistableModel<EdgeWorkflowData>.Create(BinaryData data, ModelReaderWriterOptions options) => ModelReaderWriter.Read<EdgeWorkflowData>(data, options, AzureResourceManagerWorkloadOrchestrationContext.Default);

        string IPersistableModel<EdgeWorkflowData>.GetFormatFromOptions(ModelReaderWriterOptions options) => ((IPersistableModel<EdgeWorkflowData>)DataDeserializationInstance).GetFormatFromOptions(options);
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeWorkflowVersionCollection.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A class representing a collection of <see cref="EdgeWorkflowVersionResource"/> and their operations.
    /// Each <see cref="EdgeWorkflowVersionResource"/> in the collection will belong to the same instance of <see cref="EdgeWorkflowResource"/>.
    /// To get an <see cref="EdgeWorkflowVersionCollection"/> instance call the GetEdgeWorkflowVersions method from an instance of <see cref="EdgeWorkflowResource"/>.
    /// </summary>
    public partial class EdgeWorkflowVersionCollection : ArmCollection, IEnumerable<EdgeWorkflowVersionResource>, IAsyncEnumerable<EdgeWorkflowVersionResource>
    {
        private readonly ClientDiagnostics _edgeWorkflowVersionWorkflowVersionsClientDiagnostics;
        private readonly WorkflowVersionsRestOperations _edgeWorkflowVersionWorkflowVersionsRestClient;

        /// <summary> Initializes a new instance of the <see cref="EdgeWorkflowVersionCollection"/> class for mocking. </summary>
        protected EdgeWorkflowVersionCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="EdgeWorkflowVersionCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal EdgeWorkflowVersionCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _edgeWorkflowVersionWorkflowVersionsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.WorkloadOrchestration", EdgeWorkflowVersionResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(EdgeWorkflowVersionResource.ResourceType, out string edgeWorkflowVersionWorkflowVersionsApiVersion);
            _edgeWorkflowVersionWorkflowVersionsRestClient = new WorkflowVersionsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, edgeWorkflowVersionWorkflowVersionsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != EdgeWorkflowResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, EdgeWorkflowResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Create or update a Workflow Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions/{versionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>WorkflowVersion_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeWorkflowVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="versionName"> The name of the workflowVersion. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="versionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="versionName"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<EdgeWorkflowVersionResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string versionName, EdgeWorkflowVersionData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(versionName, nameof(versionName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _edgeWorkflowVersionWorkflowVersionsClientDiagnostics.CreateScope("EdgeWorkflowVersionCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _edgeWorkflowVersionWorkflowVersionsRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, versionName, data, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadOrchestrationArmOperation<EdgeWorkflowVersionResource>(new EdgeWorkflowVersionOperationSource(Client), _edgeWorkflowVersionWorkflowVersionsClientDiagnostics, Pipeline, _edgeWorkflowVersionWorkflowVersionsRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, versionName, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create or update a Workflow Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions/{versionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>WorkflowVersion_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeWorkflowVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="versionName"> The name of the workflowVersion. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="versionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="versionName"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<EdgeWorkflowVersionResource> CreateOrUpdate(WaitUntil waitUntil, string versionName, EdgeWorkflowVersionData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(versionName, nameof(versionName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _edgeWorkflowVersionWorkflowVersionsClientDiagnostics.CreateScope("EdgeWorkflowVersionCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _edgeWorkflowVersionWorkflowVersionsRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, versionName, data, cancellationToken);
                var operation = new WorkloadOrchestrationArmOperation<EdgeWorkflowVersionResource>(new EdgeWorkflowVersionOperationSource(Client), _edgeWorkflowVersionWorkflowVersionsClientDiagnostics, Pipeline, _edgeWorkflowVersionWorkflowVersionsRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, versionName, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a Workflow Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions/{versionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>WorkflowVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeWorkflowVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="versionName"> The name of the workflowVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="versionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="versionName"/> is null. </exception>
        public virtual async Task<Response<EdgeWorkflowVersionResource>> GetAsync(string versionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(versionName, nameof(versionName));

            using var scope = _edgeWorkflowVersionWorkflowVersionsClientDiagnostics.CreateScope("EdgeWorkflowVersionCollection.Get");
            scope.Start();
            try
            {
                var response = await _edgeWorkflowVersionWorkflowVersionsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, versionName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeWorkflowVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a Workflow Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions/{versionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>WorkflowVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeWorkflowVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="versionName"> The name of the workflowVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="versionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="versionName"/> is null. </exception>
        public virtual Response<EdgeWorkflowVersionResource> Get(string versionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(versionName, nameof(versionName));

            using var scope = _edgeWorkflowVersionWorkflowVersionsClientDiagnostics.CreateScope("EdgeWorkflowVersionCollection.Get");
            scope.Start();
            try
            {
                var response = _edgeWorkflowVersionWorkflowVersionsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, versionName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeWorkflowVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List Workflow Version Resources
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>WorkflowVersion_ListByWorkflow</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeWorkflowVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="EdgeWorkflowVersionResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<EdgeWorkflowVersionResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _edgeWorkflowVersionWorkflowVersionsRestClient.CreateListByWorkflowRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _edgeWorkflowVersionWorkflowVersionsRestClient.CreateListByWorkflowNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new EdgeWorkflowVersionResource(Client, EdgeWorkflowVersionData.DeserializeEdgeWorkflowVersionData(e)), _edgeWorkflowVersionWorkflowVersionsClientDiagnostics, Pipeline, "EdgeWorkflowVersionCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List Workflow Version Resources
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>WorkflowVersion_ListByWorkflow</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeWorkflowVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="EdgeWorkflowVersionResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<EdgeWorkflowVersionResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _edgeWorkflowVersionWorkflowVersionsRestClient.CreateListByWorkflowRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _edgeWorkflowVersionWorkflowVersionsRestClient.CreateListByWorkflowNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new EdgeWorkflowVersionResource(Client, EdgeWorkflowVersionData.DeserializeEdgeWorkflowVersionData(e)), _edgeWorkflowVersionWorkflowVersionsClientDiagnostics, Pipeline, "EdgeWorkflowVersionCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions/{versionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>WorkflowVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeWorkflowVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="versionName"> The name of the workflowVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="versionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="versionName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string versionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(versionName, nameof(versionName));

            using var scope = _edgeWorkflowVersionWorkflowVersionsClientDiagnostics.CreateScope("EdgeWorkflowVersionCollection.Exists");
            scope.Start();
            try
            {
                var response = await _edgeWorkflowVersionWorkflowVersionsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, versionName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions/{versionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>WorkflowVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeWorkflowVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="versionName"> The name of the workflowVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="versionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="versionName"/> is null. </exception>
        public virtual Response<bool> Exists(string versionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(versionName, nameof(versionName));

            using var scope = _edgeWorkflowVersionWorkflowVersionsClientDiagnostics.CreateScope("EdgeWorkflowVersionCollection.Exists");
            scope.Start();
            try
            {
                var response = _edgeWorkflowVersionWorkflowVersionsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, versionName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions/{versionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>WorkflowVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeWorkflowVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="versionName"> The name of the workflowVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="versionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="versionName"/> is null. </exception>
        public virtual async Task<NullableResponse<EdgeWorkflowVersionResource>> GetIfExistsAsync(string versionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(versionName, nameof(versionName));

            using var scope = _edgeWorkflowVersionWorkflowVersionsClientDiagnostics.CreateScope("EdgeWorkflowVersionCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _edgeWorkflowVersionWorkflowVersionsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, versionName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<EdgeWorkflowVersionResource>(response.GetRawResponse());
                return Response.FromValue(new EdgeWorkflowVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions/{versionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>WorkflowVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeWorkflowVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="versionName"> The name of the workflowVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="versionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="versionName"/> is null. </exception>
        public virtual NullableResponse<EdgeWorkflowVersionResource> GetIfExists(string versionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(versionName, nameof(versionName));

            using var scope = _edgeWorkflowVersionWorkflowVersionsClientDiagnostics.CreateScope("EdgeWorkflowVersionCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _edgeWorkflowVersionWorkflowVersionsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, versionName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<EdgeWorkflowVersionResource>(response.GetRawResponse());
                return Response.FromValue(new EdgeWorkflowVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<EdgeWorkflowVersionResource> IEnumerable<EdgeWorkflowVersionResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<EdgeWorkflowVersionResource> IAsyncEnumerable<EdgeWorkflowVersionResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeWorkflowVersionData.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A class representing the EdgeWorkflowVersion data model.
    /// Workflow Version Resource
    /// </summary>
    public partial class EdgeWorkflowVersionData : ResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeWorkflowVersionData"/>. </summary>
        public EdgeWorkflowVersionData()
        {
        }

        /// <summary> Initializes a new instance of <see cref="EdgeWorkflowVersionData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="extendedLocation"></param>
        /// <param name="etag"> If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeWorkflowVersionData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, EdgeWorkflowVersionProperties properties, ExtendedLocation extendedLocation, ETag? etag, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData)
        {
            Properties = properties;
            ExtendedLocation = extendedLocation;
            ETag = etag;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The resource-specific properties for this resource. </summary>
        public EdgeWorkflowVersionProperties Properties { get; set; }
        /// <summary> Gets or sets the extended location. </summary>
        public ExtendedLocation ExtendedLocation { get; set; }
        /// <summary> If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. </summary>
        public ETag? ETag { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeWorkflowVersionData.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    public partial class EdgeWorkflowVersionData : IUtf8JsonSerializable, IJsonModel<EdgeWorkflowVersionData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeWorkflowVersionData>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeWorkflowVersionData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeWorkflowVersionData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeWorkflowVersionData)} does not support writing '{format}' format.");
            }

            base.JsonModelWriteCore(writer, options);
            if (Optional.IsDefined(Properties))
            {
                writer.WritePropertyName("properties"u8);
                writer.WriteObjectValue(Properties, options);
            }
            if (Optional.IsDefined(ExtendedLocation))
            {
                writer.WritePropertyName("extendedLocation"u8);
                ((IJsonModel<ExtendedLocation>)ExtendedLocation).Write(writer, options);
            }
            if (options.Format != "W" && Optional.IsDefined(ETag))
            {
                writer.WritePropertyName("eTag"u8);
                writer.WriteStringValue(ETag.Value.ToString());
            }
        }

        EdgeWorkflowVersionData IJsonModel<EdgeWorkflowVersionData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeWorkflowVersionData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeWorkflowVersionData)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeWorkflowVersionData(document.RootElement, options);
        }

        internal static EdgeWorkflowVersionData DeserializeEdgeWorkflowVersionData(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            EdgeWorkflowVersionProperties properties = default;
            ExtendedLocation extendedLocation = default;
            ETag? etag = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            SystemData systemData = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    properties = EdgeWorkflowVersionProperties.DeserializeEdgeWorkflowVersionProperties(property.Value, options);
                    continue;
                }
                if (property.NameEquals("extendedLocation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    extendedLocation = ModelReaderWriter.Read<ExtendedLocation>(new BinaryData(Encoding.UTF8.GetBytes(property.Value.GetRawText())), options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                    continue;
                }
                if (property.NameEquals("eTag"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    etag = new ETag(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = ModelReaderWriter.Read<SystemData>(new BinaryData(Encoding.UTF8.GetBytes(property.Value.GetRawText())), ModelSerializationExtensions.WireOptions, AzureResourceManagerWorkloadOrchestrationContext.Default);
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeWorkflowVersionData(
                id,
                name,
                type,
                systemData,
                properties,
                extendedLocation,
                etag,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeWorkflowVersionData>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeWorkflowVersionData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeWorkflowVersionData)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeWorkflowVersionData IPersistableModel<EdgeWorkflowVersionData>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeWorkflowVersionData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeWorkflowVersionData(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeWorkflowVersionData)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeWorkflowVersionData>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeWorkflowVersionResource.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A Class representing an EdgeWorkflowVersion along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier"/> you can construct an <see cref="EdgeWorkflowVersionResource"/>
    /// from an instance of <see cref="ArmClient"/> using the GetEdgeWorkflowVersionResource method.
    /// Otherwise you can get one from its parent resource <see cref="EdgeWorkflowResource"/> using the GetEdgeWorkflowVersion method.
    /// </summary>
    public partial class EdgeWorkflowVersionResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="EdgeWorkflowVersionResource"/> instance. </summary>
        /// <param name="subscriptionId"> The subscriptionId. </param>
        /// <param name="resourceGroupName"> The resourceGroupName. </param>
        /// <param name="contextName"> The contextName. </param>
        /// <param name="workflowName"> The workflowName. </param>
        /// <param name="versionName"> The versionName. </param>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string contextName, string workflowName, string versionName)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions/{versionName}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _edgeWorkflowVersionWorkflowVersionsClientDiagnostics;
        private readonly WorkflowVersionsRestOperations _edgeWorkflowVersionWorkflowVersionsRestClient;
        private readonly EdgeWorkflowVersionData _data;

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.Edge/contexts/workflows/versions";

        /// <summary> Initializes a new instance of the <see cref="EdgeWorkflowVersionResource"/> class for mocking. </summary>
        protected EdgeWorkflowVersionResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="EdgeWorkflowVersionResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal EdgeWorkflowVersionResource(ArmClient client, EdgeWorkflowVersionData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="EdgeWorkflowVersionResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal EdgeWorkflowVersionResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _edgeWorkflowVersionWorkflowVersionsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.WorkloadOrchestration", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string edgeWorkflowVersionWorkflowVersionsApiVersion);
            _edgeWorkflowVersionWorkflowVersionsRestClient = new WorkflowVersionsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, edgeWorkflowVersionWorkflowVersionsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual EdgeWorkflowVersionData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary> Gets a collection of EdgeExecutionResources in the EdgeWorkflowVersion. </summary>
        /// <returns> An object representing collection of EdgeExecutionResources and their operations over a EdgeExecutionResource. </returns>
        public virtual EdgeExecutionCollection GetEdgeExecutions()
        {
            return GetCachedClient(client => new EdgeExecutionCollection(client, Id));
        }

        /// <summary>
        /// Get Execution Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions/{versionName}/executions/{executionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Execution_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeExecutionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="executionName"> The name of the Execution. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="executionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="executionName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<EdgeExecutionResource>> GetEdgeExecutionAsync(string executionName, CancellationToken cancellationToken = default)
        {
            return await GetEdgeExecutions().GetAsync(executionName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get Execution Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions/{versionName}/executions/{executionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Execution_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeExecutionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="executionName"> The name of the Execution. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="executionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="executionName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<EdgeExecutionResource> GetEdgeExecution(string executionName, CancellationToken cancellationToken = default)
        {
            return GetEdgeExecutions().Get(executionName, cancellationToken);
        }

        /// <summary>
        /// Get a Workflow Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions/{versionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>WorkflowVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeWorkflowVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<EdgeWorkflowVersionResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _edgeWorkflowVersionWorkflowVersionsClientDiagnostics.CreateScope("EdgeWorkflowVersionResource.Get");
            scope.Start();
            try
            {
                var response = await _edgeWorkflowVersionWorkflowVersionsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeWorkflowVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a Workflow Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions/{versionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>WorkflowVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeWorkflowVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<EdgeWorkflowVersionResource> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _edgeWorkflowVersionWorkflowVersionsClientDiagnostics.CreateScope("EdgeWorkflowVersionResource.Get");
            scope.Start();
            try
            {
                var response = _edgeWorkflowVersionWorkflowVersionsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeWorkflowVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete a Workflow Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions/{versionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>WorkflowVersion_Delete</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeWorkflowVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> DeleteAsync(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _edgeWorkflowVersionWorkflowVersionsClientDiagnostics.CreateScope("EdgeWorkflowVersionResource.Delete");
            scope.Start();
            try
            {
                var response = await _edgeWorkflowVersionWorkflowVersionsRestClient.DeleteAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadOrchestrationArmOperation(_edgeWorkflowVersionWorkflowVersionsClientDiagnostics, Pipeline, _edgeWorkflowVersionWorkflowVersionsRestClient.CreateDeleteRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete a Workflow Version Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions/{versionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>WorkflowVersion_Delete</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeWorkflowVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation Delete(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _edgeWorkflowVersionWorkflowVersionsClientDiagnostics.CreateScope("EdgeWorkflowVersionResource.Delete");
            scope.Start();
            try
            {
                var response = _edgeWorkflowVersionWorkflowVersionsRestClient.Delete(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken);
                var operation = new WorkloadOrchestrationArmOperation(_edgeWorkflowVersionWorkflowVersionsClientDiagnostics, Pipeline, _edgeWorkflowVersionWorkflowVersionsRestClient.CreateDeleteRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// update an WorkflowVersion Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions/{versionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>WorkflowVersion_Update</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeWorkflowVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="data"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<EdgeWorkflowVersionResource>> UpdateAsync(WaitUntil waitUntil, EdgeWorkflowVersionData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _edgeWorkflowVersionWorkflowVersionsClientDiagnostics.CreateScope("EdgeWorkflowVersionResource.Update");
            scope.Start();
            try
            {
                var response = await _edgeWorkflowVersionWorkflowVersionsRestClient.UpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, data, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadOrchestrationArmOperation<EdgeWorkflowVersionResource>(new EdgeWorkflowVersionOperationSource(Client), _edgeWorkflowVersionWorkflowVersionsClientDiagnostics, Pipeline, _edgeWorkflowVersionWorkflowVersionsRestClient.CreateUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, data).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// update an WorkflowVersion Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}/workflows/{workflowName}/versions/{versionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>WorkflowVersion_Update</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeWorkflowVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="data"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<EdgeWorkflowVersionResource> Update(WaitUntil waitUntil, EdgeWorkflowVersionData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _edgeWorkflowVersionWorkflowVersionsClientDiagnostics.CreateScope("EdgeWorkflowVersionResource.Update");
            scope.Start();
            try
            {
                var response = _edgeWorkflowVersionWorkflowVersionsRestClient.Update(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, data, cancellationToken);
                var operation = new WorkloadOrchestrationArmOperation<EdgeWorkflowVersionResource>(new EdgeWorkflowVersionOperationSource(Client), _edgeWorkflowVersionWorkflowVersionsClientDiagnostics, Pipeline, _edgeWorkflowVersionWorkflowVersionsRestClient.CreateUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, data).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/EdgeWorkflowVersionResource.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Text.Json;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    public partial class EdgeWorkflowVersionResource : IJsonModel<EdgeWorkflowVersionData>
    {
        private static EdgeWorkflowVersionData s_dataDeserializationInstance;
        private static EdgeWorkflowVersionData DataDeserializationInstance => s_dataDeserializationInstance ??= new();

        void IJsonModel<EdgeWorkflowVersionData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options) => ((IJsonModel<EdgeWorkflowVersionData>)Data).Write(writer, options);

        EdgeWorkflowVersionData IJsonModel<EdgeWorkflowVersionData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => ((IJsonModel<EdgeWorkflowVersionData>)DataDeserializationInstance).Create(ref reader, options);

        BinaryData IPersistableModel<EdgeWorkflowVersionData>.Write(ModelReaderWriterOptions options) => ModelReaderWriter.Write<EdgeWorkflowVersionData>(Data, options, AzureResourceManagerWorkloadOrchestrationContext.Default);

        EdgeWorkflowVersionData IPersistableModel<EdgeWorkflowVersionData>.Create(BinaryData data, ModelReaderWriterOptions options) => ModelReaderWriter.Read<EdgeWorkflowVersionData>(data, options, AzureResourceManagerWorkloadOrchestrationContext.Default);

        string IPersistableModel<EdgeWorkflowVersionData>.GetFormatFromOptions(ModelReaderWriterOptions options) => ((IPersistableModel<EdgeWorkflowVersionData>)DataDeserializationInstance).GetFormatFromOptions(options);
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/ProviderConstants.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using Azure.Core.Pipeline;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    internal static class ProviderConstants
    {
        public static string DefaultProviderNamespace { get; } = ClientDiagnostics.GetResourceProviderNamespace(typeof(ProviderConstants).Assembly);
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Extensions/MockableWorkloadOrchestrationArmClient.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Mocking
{
    /// <summary> A class to add extension methods to ArmClient. </summary>
    public partial class MockableWorkloadOrchestrationArmClient : ArmResource
    {
        /// <summary> Initializes a new instance of the <see cref="MockableWorkloadOrchestrationArmClient"/> class for mocking. </summary>
        protected MockableWorkloadOrchestrationArmClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="MockableWorkloadOrchestrationArmClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MockableWorkloadOrchestrationArmClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        internal MockableWorkloadOrchestrationArmClient(ArmClient client) : this(client, ResourceIdentifier.Root)
        {
        }

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary> Gets a collection of EdgeJobResources in the ArmClient. </summary>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <returns> An object representing collection of EdgeJobResources and their operations over a EdgeJobResource. </returns>
        public virtual EdgeJobCollection GetEdgeJobs(ResourceIdentifier scope)
        {
            return new EdgeJobCollection(Client, scope);
        }

        /// <summary>
        /// Get a Job resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/jobs/{jobName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Job_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeJobResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <param name="jobName"> The name of the Job. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<EdgeJobResource>> GetEdgeJobAsync(ResourceIdentifier scope, string jobName, CancellationToken cancellationToken = default)
        {
            return await GetEdgeJobs(scope).GetAsync(jobName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a Job resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/jobs/{jobName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Job_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeJobResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <param name="jobName"> The name of the Job. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<EdgeJobResource> GetEdgeJob(ResourceIdentifier scope, string jobName, CancellationToken cancellationToken = default)
        {
            return GetEdgeJobs(scope).Get(jobName, cancellationToken);
        }

        /// <summary> Gets a collection of EdgeSchemaReferenceResources in the ArmClient. </summary>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <returns> An object representing collection of EdgeSchemaReferenceResources and their operations over a EdgeSchemaReferenceResource. </returns>
        public virtual EdgeSchemaReferenceCollection GetEdgeSchemaReferences(ResourceIdentifier scope)
        {
            return new EdgeSchemaReferenceCollection(Client, scope);
        }

        /// <summary>
        /// Get a Schema Reference Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/schemaReferences/{schemaReferenceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SchemaReference_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaReferenceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <param name="schemaReferenceName"> The name of the SchemaReference. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="schemaReferenceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="schemaReferenceName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<EdgeSchemaReferenceResource>> GetEdgeSchemaReferenceAsync(ResourceIdentifier scope, string schemaReferenceName, CancellationToken cancellationToken = default)
        {
            return await GetEdgeSchemaReferences(scope).GetAsync(schemaReferenceName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a Schema Reference Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/schemaReferences/{schemaReferenceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SchemaReference_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaReferenceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <param name="schemaReferenceName"> The name of the SchemaReference. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="schemaReferenceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="schemaReferenceName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<EdgeSchemaReferenceResource> GetEdgeSchemaReference(ResourceIdentifier scope, string schemaReferenceName, CancellationToken cancellationToken = default)
        {
            return GetEdgeSchemaReferences(scope).Get(schemaReferenceName, cancellationToken);
        }

        /// <summary>
        /// Gets an object representing an <see cref="EdgeDynamicSchemaResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="EdgeDynamicSchemaResource.CreateResourceIdentifier" /> to create an <see cref="EdgeDynamicSchemaResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="EdgeDynamicSchemaResource"/> object. </returns>
        public virtual EdgeDynamicSchemaResource GetEdgeDynamicSchemaResource(ResourceIdentifier id)
        {
            EdgeDynamicSchemaResource.ValidateResourceId(id);
            return new EdgeDynamicSchemaResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing an <see cref="EdgeSchemaResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="EdgeSchemaResource.CreateResourceIdentifier" /> to create an <see cref="EdgeSchemaResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="EdgeSchemaResource"/> object. </returns>
        public virtual EdgeSchemaResource GetEdgeSchemaResource(ResourceIdentifier id)
        {
            EdgeSchemaResource.ValidateResourceId(id);
            return new EdgeSchemaResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing an <see cref="EdgeSchemaVersionResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="EdgeSchemaVersionResource.CreateResourceIdentifier" /> to create an <see cref="EdgeSchemaVersionResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="EdgeSchemaVersionResource"/> object. </returns>
        public virtual EdgeSchemaVersionResource GetEdgeSchemaVersionResource(ResourceIdentifier id)
        {
            EdgeSchemaVersionResource.ValidateResourceId(id);
            return new EdgeSchemaVersionResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing an <see cref="EdgeSolutionVersionResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="EdgeSolutionVersionResource.CreateResourceIdentifier" /> to create an <see cref="EdgeSolutionVersionResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="EdgeSolutionVersionResource"/> object. </returns>
        public virtual EdgeSolutionVersionResource GetEdgeSolutionVersionResource(ResourceIdentifier id)
        {
            EdgeSolutionVersionResource.ValidateResourceId(id);
            return new EdgeSolutionVersionResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing an <see cref="EdgeJobResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="EdgeJobResource.CreateResourceIdentifier" /> to create an <see cref="EdgeJobResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="EdgeJobResource"/> object. </returns>
        public virtual EdgeJobResource GetEdgeJobResource(ResourceIdentifier id)
        {
            EdgeJobResource.ValidateResourceId(id);
            return new EdgeJobResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing an <see cref="EdgeTargetResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="EdgeTargetResource.CreateResourceIdentifier" /> to create an <see cref="EdgeTargetResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="EdgeTargetResource"/> object. </returns>
        public virtual EdgeTargetResource GetEdgeTargetResource(ResourceIdentifier id)
        {
            EdgeTargetResource.ValidateResourceId(id);
            return new EdgeTargetResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing an <see cref="EdgeDynamicSchemaVersionResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="EdgeDynamicSchemaVersionResource.CreateResourceIdentifier" /> to create an <see cref="EdgeDynamicSchemaVersionResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="EdgeDynamicSchemaVersionResource"/> object. </returns>
        public virtual EdgeDynamicSchemaVersionResource GetEdgeDynamicSchemaVersionResource(ResourceIdentifier id)
        {
            EdgeDynamicSchemaVersionResource.ValidateResourceId(id);
            return new EdgeDynamicSchemaVersionResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing an <see cref="EdgeSchemaReferenceResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="EdgeSchemaReferenceResource.CreateResourceIdentifier" /> to create an <see cref="EdgeSchemaReferenceResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="EdgeSchemaReferenceResource"/> object. </returns>
        public virtual EdgeSchemaReferenceResource GetEdgeSchemaReferenceResource(ResourceIdentifier id)
        {
            EdgeSchemaReferenceResource.ValidateResourceId(id);
            return new EdgeSchemaReferenceResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing an <see cref="EdgeSolutionResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="EdgeSolutionResource.CreateResourceIdentifier" /> to create an <see cref="EdgeSolutionResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="EdgeSolutionResource"/> object. </returns>
        public virtual EdgeSolutionResource GetEdgeSolutionResource(ResourceIdentifier id)
        {
            EdgeSolutionResource.ValidateResourceId(id);
            return new EdgeSolutionResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing an <see cref="EdgeSolutionTemplateVersionResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="EdgeSolutionTemplateVersionResource.CreateResourceIdentifier" /> to create an <see cref="EdgeSolutionTemplateVersionResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="EdgeSolutionTemplateVersionResource"/> object. </returns>
        public virtual EdgeSolutionTemplateVersionResource GetEdgeSolutionTemplateVersionResource(ResourceIdentifier id)
        {
            EdgeSolutionTemplateVersionResource.ValidateResourceId(id);
            return new EdgeSolutionTemplateVersionResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing an <see cref="EdgeSolutionTemplateResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="EdgeSolutionTemplateResource.CreateResourceIdentifier" /> to create an <see cref="EdgeSolutionTemplateResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="EdgeSolutionTemplateResource"/> object. </returns>
        public virtual EdgeSolutionTemplateResource GetEdgeSolutionTemplateResource(ResourceIdentifier id)
        {
            EdgeSolutionTemplateResource.ValidateResourceId(id);
            return new EdgeSolutionTemplateResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing an <see cref="EdgeDeploymentInstanceResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="EdgeDeploymentInstanceResource.CreateResourceIdentifier" /> to create an <see cref="EdgeDeploymentInstanceResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="EdgeDeploymentInstanceResource"/> object. </returns>
        public virtual EdgeDeploymentInstanceResource GetEdgeDeploymentInstanceResource(ResourceIdentifier id)
        {
            EdgeDeploymentInstanceResource.ValidateResourceId(id);
            return new EdgeDeploymentInstanceResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing an <see cref="EdgeDeploymentInstanceHistoryResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="EdgeDeploymentInstanceHistoryResource.CreateResourceIdentifier" /> to create an <see cref="EdgeDeploymentInstanceHistoryResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="EdgeDeploymentInstanceHistoryResource"/> object. </returns>
        public virtual EdgeDeploymentInstanceHistoryResource GetEdgeDeploymentInstanceHistoryResource(ResourceIdentifier id)
        {
            EdgeDeploymentInstanceHistoryResource.ValidateResourceId(id);
            return new EdgeDeploymentInstanceHistoryResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing an <see cref="EdgeConfigTemplateResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="EdgeConfigTemplateResource.CreateResourceIdentifier" /> to create an <see cref="EdgeConfigTemplateResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="EdgeConfigTemplateResource"/> object. </returns>
        public virtual EdgeConfigTemplateResource GetEdgeConfigTemplateResource(ResourceIdentifier id)
        {
            EdgeConfigTemplateResource.ValidateResourceId(id);
            return new EdgeConfigTemplateResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing an <see cref="EdgeConfigTemplateVersionResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="EdgeConfigTemplateVersionResource.CreateResourceIdentifier" /> to create an <see cref="EdgeConfigTemplateVersionResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="EdgeConfigTemplateVersionResource"/> object. </returns>
        public virtual EdgeConfigTemplateVersionResource GetEdgeConfigTemplateVersionResource(ResourceIdentifier id)
        {
            EdgeConfigTemplateVersionResource.ValidateResourceId(id);
            return new EdgeConfigTemplateVersionResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing an <see cref="EdgeWorkflowResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="EdgeWorkflowResource.CreateResourceIdentifier" /> to create an <see cref="EdgeWorkflowResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="EdgeWorkflowResource"/> object. </returns>
        public virtual EdgeWorkflowResource GetEdgeWorkflowResource(ResourceIdentifier id)
        {
            EdgeWorkflowResource.ValidateResourceId(id);
            return new EdgeWorkflowResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing an <see cref="EdgeWorkflowVersionResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="EdgeWorkflowVersionResource.CreateResourceIdentifier" /> to create an <see cref="EdgeWorkflowVersionResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="EdgeWorkflowVersionResource"/> object. </returns>
        public virtual EdgeWorkflowVersionResource GetEdgeWorkflowVersionResource(ResourceIdentifier id)
        {
            EdgeWorkflowVersionResource.ValidateResourceId(id);
            return new EdgeWorkflowVersionResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing an <see cref="EdgeExecutionResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="EdgeExecutionResource.CreateResourceIdentifier" /> to create an <see cref="EdgeExecutionResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="EdgeExecutionResource"/> object. </returns>
        public virtual EdgeExecutionResource GetEdgeExecutionResource(ResourceIdentifier id)
        {
            EdgeExecutionResource.ValidateResourceId(id);
            return new EdgeExecutionResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing an <see cref="EdgeDiagnosticResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="EdgeDiagnosticResource.CreateResourceIdentifier" /> to create an <see cref="EdgeDiagnosticResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="EdgeDiagnosticResource"/> object. </returns>
        public virtual EdgeDiagnosticResource GetEdgeDiagnosticResource(ResourceIdentifier id)
        {
            EdgeDiagnosticResource.ValidateResourceId(id);
            return new EdgeDiagnosticResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing an <see cref="EdgeContextResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="EdgeContextResource.CreateResourceIdentifier" /> to create an <see cref="EdgeContextResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="EdgeContextResource"/> object. </returns>
        public virtual EdgeContextResource GetEdgeContextResource(ResourceIdentifier id)
        {
            EdgeContextResource.ValidateResourceId(id);
            return new EdgeContextResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing an <see cref="EdgeSiteReferenceResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="EdgeSiteReferenceResource.CreateResourceIdentifier" /> to create an <see cref="EdgeSiteReferenceResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="EdgeSiteReferenceResource"/> object. </returns>
        public virtual EdgeSiteReferenceResource GetEdgeSiteReferenceResource(ResourceIdentifier id)
        {
            EdgeSiteReferenceResource.ValidateResourceId(id);
            return new EdgeSiteReferenceResource(Client, id);
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Extensions/MockableWorkloadOrchestrationResourceGroupResource.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Mocking
{
    /// <summary> A class to add extension methods to ResourceGroupResource. </summary>
    public partial class MockableWorkloadOrchestrationResourceGroupResource : ArmResource
    {
        /// <summary> Initializes a new instance of the <see cref="MockableWorkloadOrchestrationResourceGroupResource"/> class for mocking. </summary>
        protected MockableWorkloadOrchestrationResourceGroupResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="MockableWorkloadOrchestrationResourceGroupResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MockableWorkloadOrchestrationResourceGroupResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary> Gets a collection of EdgeSchemaResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of EdgeSchemaResources and their operations over a EdgeSchemaResource. </returns>
        public virtual EdgeSchemaCollection GetEdgeSchemas()
        {
            return GetCachedClient(client => new EdgeSchemaCollection(client, Id));
        }

        /// <summary>
        /// Get a Schema Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Schema_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="schemaName"> The name of the Schema. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="schemaName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="schemaName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<EdgeSchemaResource>> GetEdgeSchemaAsync(string schemaName, CancellationToken cancellationToken = default)
        {
            return await GetEdgeSchemas().GetAsync(schemaName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a Schema Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/schemas/{schemaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Schema_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="schemaName"> The name of the Schema. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="schemaName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="schemaName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<EdgeSchemaResource> GetEdgeSchema(string schemaName, CancellationToken cancellationToken = default)
        {
            return GetEdgeSchemas().Get(schemaName, cancellationToken);
        }

        /// <summary> Gets a collection of EdgeTargetResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of EdgeTargetResources and their operations over a EdgeTargetResource. </returns>
        public virtual EdgeTargetCollection GetEdgeTargets()
        {
            return GetCachedClient(client => new EdgeTargetCollection(client, Id));
        }

        /// <summary>
        /// Get a Target Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Target_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeTargetResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="targetName"> Name of the target. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="targetName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="targetName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<EdgeTargetResource>> GetEdgeTargetAsync(string targetName, CancellationToken cancellationToken = default)
        {
            return await GetEdgeTargets().GetAsync(targetName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a Target Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Target_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeTargetResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="targetName"> Name of the target. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="targetName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="targetName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<EdgeTargetResource> GetEdgeTarget(string targetName, CancellationToken cancellationToken = default)
        {
            return GetEdgeTargets().Get(targetName, cancellationToken);
        }

        /// <summary> Gets a collection of EdgeSolutionTemplateResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of EdgeSolutionTemplateResources and their operations over a EdgeSolutionTemplateResource. </returns>
        public virtual EdgeSolutionTemplateCollection GetEdgeSolutionTemplates()
        {
            return GetCachedClient(client => new EdgeSolutionTemplateCollection(client, Id));
        }

        /// <summary>
        /// Get a Solution Template Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionTemplate_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionTemplateResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="solutionTemplateName"> The name of the SolutionTemplate. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionTemplateName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="solutionTemplateName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<EdgeSolutionTemplateResource>> GetEdgeSolutionTemplateAsync(string solutionTemplateName, CancellationToken cancellationToken = default)
        {
            return await GetEdgeSolutionTemplates().GetAsync(solutionTemplateName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a Solution Template Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionTemplate_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionTemplateResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="solutionTemplateName"> The name of the SolutionTemplate. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionTemplateName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="solutionTemplateName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<EdgeSolutionTemplateResource> GetEdgeSolutionTemplate(string solutionTemplateName, CancellationToken cancellationToken = default)
        {
            return GetEdgeSolutionTemplates().Get(solutionTemplateName, cancellationToken);
        }

        /// <summary> Gets a collection of EdgeConfigTemplateResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of EdgeConfigTemplateResources and their operations over a EdgeConfigTemplateResource. </returns>
        public virtual EdgeConfigTemplateCollection GetEdgeConfigTemplates()
        {
            return GetCachedClient(client => new EdgeConfigTemplateCollection(client, Id));
        }

        /// <summary>
        /// Get a Config Template Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConfigTemplate_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeConfigTemplateResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="configTemplateName"> The name of the ConfigTemplate. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="configTemplateName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="configTemplateName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<EdgeConfigTemplateResource>> GetEdgeConfigTemplateAsync(string configTemplateName, CancellationToken cancellationToken = default)
        {
            return await GetEdgeConfigTemplates().GetAsync(configTemplateName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a Config Template Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConfigTemplate_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeConfigTemplateResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="configTemplateName"> The name of the ConfigTemplate. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="configTemplateName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="configTemplateName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<EdgeConfigTemplateResource> GetEdgeConfigTemplate(string configTemplateName, CancellationToken cancellationToken = default)
        {
            return GetEdgeConfigTemplates().Get(configTemplateName, cancellationToken);
        }

        /// <summary> Gets a collection of EdgeDiagnosticResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of EdgeDiagnosticResources and their operations over a EdgeDiagnosticResource. </returns>
        public virtual EdgeDiagnosticCollection GetEdgeDiagnostics()
        {
            return GetCachedClient(client => new EdgeDiagnosticCollection(client, Id));
        }

        /// <summary>
        /// Returns details of specified Diagnostic resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/diagnostics/{diagnosticName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Diagnostic_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDiagnosticResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="diagnosticName"> Name of Diagnostic. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="diagnosticName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="diagnosticName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<EdgeDiagnosticResource>> GetEdgeDiagnosticAsync(string diagnosticName, CancellationToken cancellationToken = default)
        {
            return await GetEdgeDiagnostics().GetAsync(diagnosticName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Returns details of specified Diagnostic resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/diagnostics/{diagnosticName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Diagnostic_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDiagnosticResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="diagnosticName"> Name of Diagnostic. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="diagnosticName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="diagnosticName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<EdgeDiagnosticResource> GetEdgeDiagnostic(string diagnosticName, CancellationToken cancellationToken = default)
        {
            return GetEdgeDiagnostics().Get(diagnosticName, cancellationToken);
        }

        /// <summary> Gets a collection of EdgeContextResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of EdgeContextResources and their operations over a EdgeContextResource. </returns>
        public virtual EdgeContextCollection GetEdgeContexts()
        {
            return GetCachedClient(client => new EdgeContextCollection(client, Id));
        }

        /// <summary>
        /// Get Context Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Context_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeContextResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="contextName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="contextName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<EdgeContextResource>> GetEdgeContextAsync(string contextName, CancellationToken cancellationToken = default)
        {
            return await GetEdgeContexts().GetAsync(contextName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get Context Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/contexts/{contextName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Context_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeContextResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="contextName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="contextName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<EdgeContextResource> GetEdgeContext(string contextName, CancellationToken cancellationToken = default)
        {
            return GetEdgeContexts().Get(contextName, cancellationToken);
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Extensions/MockableWorkloadOrchestrationSubscriptionResource.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Threading;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.WorkloadOrchestration.Mocking
{
    /// <summary> A class to add extension methods to SubscriptionResource. </summary>
    public partial class MockableWorkloadOrchestrationSubscriptionResource : ArmResource
    {
        private ClientDiagnostics _edgeSchemaSchemasClientDiagnostics;
        private SchemasRestOperations _edgeSchemaSchemasRestClient;
        private ClientDiagnostics _edgeTargetTargetsClientDiagnostics;
        private TargetsRestOperations _edgeTargetTargetsRestClient;
        private ClientDiagnostics _edgeSolutionTemplateSolutionTemplatesClientDiagnostics;
        private SolutionTemplatesRestOperations _edgeSolutionTemplateSolutionTemplatesRestClient;
        private ClientDiagnostics _edgeConfigTemplateConfigTemplatesClientDiagnostics;
        private ConfigTemplatesRestOperations _edgeConfigTemplateConfigTemplatesRestClient;
        private ClientDiagnostics _edgeDiagnosticDiagnosticsClientDiagnostics;
        private DiagnosticsRestOperations _edgeDiagnosticDiagnosticsRestClient;
        private ClientDiagnostics _edgeContextContextsClientDiagnostics;
        private ContextsRestOperations _edgeContextContextsRestClient;

        /// <summary> Initializes a new instance of the <see cref="MockableWorkloadOrchestrationSubscriptionResource"/> class for mocking. </summary>
        protected MockableWorkloadOrchestrationSubscriptionResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="MockableWorkloadOrchestrationSubscriptionResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MockableWorkloadOrchestrationSubscriptionResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics EdgeSchemaSchemasClientDiagnostics => _edgeSchemaSchemasClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.WorkloadOrchestration", EdgeSchemaResource.ResourceType.Namespace, Diagnostics);
        private SchemasRestOperations EdgeSchemaSchemasRestClient => _edgeSchemaSchemasRestClient ??= new SchemasRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(EdgeSchemaResource.ResourceType));
        private ClientDiagnostics EdgeTargetTargetsClientDiagnostics => _edgeTargetTargetsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.WorkloadOrchestration", EdgeTargetResource.ResourceType.Namespace, Diagnostics);
        private TargetsRestOperations EdgeTargetTargetsRestClient => _edgeTargetTargetsRestClient ??= new TargetsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(EdgeTargetResource.ResourceType));
        private ClientDiagnostics EdgeSolutionTemplateSolutionTemplatesClientDiagnostics => _edgeSolutionTemplateSolutionTemplatesClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.WorkloadOrchestration", EdgeSolutionTemplateResource.ResourceType.Namespace, Diagnostics);
        private SolutionTemplatesRestOperations EdgeSolutionTemplateSolutionTemplatesRestClient => _edgeSolutionTemplateSolutionTemplatesRestClient ??= new SolutionTemplatesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(EdgeSolutionTemplateResource.ResourceType));
        private ClientDiagnostics EdgeConfigTemplateConfigTemplatesClientDiagnostics => _edgeConfigTemplateConfigTemplatesClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.WorkloadOrchestration", EdgeConfigTemplateResource.ResourceType.Namespace, Diagnostics);
        private ConfigTemplatesRestOperations EdgeConfigTemplateConfigTemplatesRestClient => _edgeConfigTemplateConfigTemplatesRestClient ??= new ConfigTemplatesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(EdgeConfigTemplateResource.ResourceType));
        private ClientDiagnostics EdgeDiagnosticDiagnosticsClientDiagnostics => _edgeDiagnosticDiagnosticsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.WorkloadOrchestration", EdgeDiagnosticResource.ResourceType.Namespace, Diagnostics);
        private DiagnosticsRestOperations EdgeDiagnosticDiagnosticsRestClient => _edgeDiagnosticDiagnosticsRestClient ??= new DiagnosticsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(EdgeDiagnosticResource.ResourceType));
        private ClientDiagnostics EdgeContextContextsClientDiagnostics => _edgeContextContextsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.WorkloadOrchestration", EdgeContextResource.ResourceType.Namespace, Diagnostics);
        private ContextsRestOperations EdgeContextContextsRestClient => _edgeContextContextsRestClient ??= new ContextsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(EdgeContextResource.ResourceType));

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary>
        /// List by subscription
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Edge/schemas</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Schema_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="EdgeSchemaResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<EdgeSchemaResource> GetEdgeSchemasAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => EdgeSchemaSchemasRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => EdgeSchemaSchemasRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new EdgeSchemaResource(Client, EdgeSchemaData.DeserializeEdgeSchemaData(e)), EdgeSchemaSchemasClientDiagnostics, Pipeline, "MockableWorkloadOrchestrationSubscriptionResource.GetEdgeSchemas", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List by subscription
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Edge/schemas</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Schema_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="EdgeSchemaResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<EdgeSchemaResource> GetEdgeSchemas(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => EdgeSchemaSchemasRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => EdgeSchemaSchemasRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new EdgeSchemaResource(Client, EdgeSchemaData.DeserializeEdgeSchemaData(e)), EdgeSchemaSchemasClientDiagnostics, Pipeline, "MockableWorkloadOrchestrationSubscriptionResource.GetEdgeSchemas", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List by subscription
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Edge/targets</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Target_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeTargetResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="EdgeTargetResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<EdgeTargetResource> GetEdgeTargetsAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => EdgeTargetTargetsRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => EdgeTargetTargetsRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new EdgeTargetResource(Client, EdgeTargetData.DeserializeEdgeTargetData(e)), EdgeTargetTargetsClientDiagnostics, Pipeline, "MockableWorkloadOrchestrationSubscriptionResource.GetEdgeTargets", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List by subscription
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Edge/targets</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Target_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeTargetResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="EdgeTargetResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<EdgeTargetResource> GetEdgeTargets(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => EdgeTargetTargetsRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => EdgeTargetTargetsRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new EdgeTargetResource(Client, EdgeTargetData.DeserializeEdgeTargetData(e)), EdgeTargetTargetsClientDiagnostics, Pipeline, "MockableWorkloadOrchestrationSubscriptionResource.GetEdgeTargets", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List by subscription
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Edge/solutionTemplates</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionTemplate_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionTemplateResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="EdgeSolutionTemplateResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<EdgeSolutionTemplateResource> GetEdgeSolutionTemplatesAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => EdgeSolutionTemplateSolutionTemplatesRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => EdgeSolutionTemplateSolutionTemplatesRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new EdgeSolutionTemplateResource(Client, EdgeSolutionTemplateData.DeserializeEdgeSolutionTemplateData(e)), EdgeSolutionTemplateSolutionTemplatesClientDiagnostics, Pipeline, "MockableWorkloadOrchestrationSubscriptionResource.GetEdgeSolutionTemplates", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List by subscription
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Edge/solutionTemplates</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionTemplate_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSolutionTemplateResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="EdgeSolutionTemplateResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<EdgeSolutionTemplateResource> GetEdgeSolutionTemplates(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => EdgeSolutionTemplateSolutionTemplatesRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => EdgeSolutionTemplateSolutionTemplatesRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new EdgeSolutionTemplateResource(Client, EdgeSolutionTemplateData.DeserializeEdgeSolutionTemplateData(e)), EdgeSolutionTemplateSolutionTemplatesClientDiagnostics, Pipeline, "MockableWorkloadOrchestrationSubscriptionResource.GetEdgeSolutionTemplates", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List by subscription
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Edge/configTemplates</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConfigTemplate_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeConfigTemplateResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="EdgeConfigTemplateResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<EdgeConfigTemplateResource> GetEdgeConfigTemplatesAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => EdgeConfigTemplateConfigTemplatesRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => EdgeConfigTemplateConfigTemplatesRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new EdgeConfigTemplateResource(Client, EdgeConfigTemplateData.DeserializeEdgeConfigTemplateData(e)), EdgeConfigTemplateConfigTemplatesClientDiagnostics, Pipeline, "MockableWorkloadOrchestrationSubscriptionResource.GetEdgeConfigTemplates", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List by subscription
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Edge/configTemplates</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConfigTemplate_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeConfigTemplateResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="EdgeConfigTemplateResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<EdgeConfigTemplateResource> GetEdgeConfigTemplates(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => EdgeConfigTemplateConfigTemplatesRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => EdgeConfigTemplateConfigTemplatesRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new EdgeConfigTemplateResource(Client, EdgeConfigTemplateData.DeserializeEdgeConfigTemplateData(e)), EdgeConfigTemplateConfigTemplatesClientDiagnostics, Pipeline, "MockableWorkloadOrchestrationSubscriptionResource.GetEdgeConfigTemplates", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists Diagnostics resources within an Azure subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Edge/diagnostics</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Diagnostic_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDiagnosticResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="EdgeDiagnosticResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<EdgeDiagnosticResource> GetEdgeDiagnosticsAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => EdgeDiagnosticDiagnosticsRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => EdgeDiagnosticDiagnosticsRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new EdgeDiagnosticResource(Client, EdgeDiagnosticData.DeserializeEdgeDiagnosticData(e)), EdgeDiagnosticDiagnosticsClientDiagnostics, Pipeline, "MockableWorkloadOrchestrationSubscriptionResource.GetEdgeDiagnostics", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists Diagnostics resources within an Azure subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Edge/diagnostics</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Diagnostic_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDiagnosticResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="EdgeDiagnosticResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<EdgeDiagnosticResource> GetEdgeDiagnostics(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => EdgeDiagnosticDiagnosticsRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => EdgeDiagnosticDiagnosticsRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new EdgeDiagnosticResource(Client, EdgeDiagnosticData.DeserializeEdgeDiagnosticData(e)), EdgeDiagnosticDiagnosticsClientDiagnostics, Pipeline, "MockableWorkloadOrchestrationSubscriptionResource.GetEdgeDiagnostics", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List by subscription
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Edge/contexts</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Context_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeContextResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="EdgeContextResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<EdgeContextResource> GetEdgeContextsAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => EdgeContextContextsRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => EdgeContextContextsRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new EdgeContextResource(Client, EdgeContextData.DeserializeEdgeContextData(e)), EdgeContextContextsClientDiagnostics, Pipeline, "MockableWorkloadOrchestrationSubscriptionResource.GetEdgeContexts", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List by subscription
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Edge/contexts</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Context_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeContextResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="EdgeContextResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<EdgeContextResource> GetEdgeContexts(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => EdgeContextContextsRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => EdgeContextContextsRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new EdgeContextResource(Client, EdgeContextData.DeserializeEdgeContextData(e)), EdgeContextContextsClientDiagnostics, Pipeline, "MockableWorkloadOrchestrationSubscriptionResource.GetEdgeContexts", "value", "nextLink", cancellationToken);
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Internal/Argument.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    internal static class Argument
    {
        public static void AssertNotNull<T>(T value, string name)
        {
            if (value is null)
            {
                throw new ArgumentNullException(name);
            }
        }

        public static void AssertNotNull<T>(T? value, string name)
        where T : struct
        {
            if (!value.HasValue)
            {
                throw new ArgumentNullException(name);
            }
        }

        public static void AssertNotNullOrEmpty<T>(IEnumerable<T> value, string name)
        {
            if (value is null)
            {
                throw new ArgumentNullException(name);
            }
            if (value is ICollection<T> collectionOfT && collectionOfT.Count == 0)
            {
                throw new ArgumentException("Value cannot be an empty collection.", name);
            }
            if (value is ICollection collection && collection.Count == 0)
            {
                throw new ArgumentException("Value cannot be an empty collection.", name);
            }
            using IEnumerator<T> e = value.GetEnumerator();
            if (!e.MoveNext())
            {
                throw new ArgumentException("Value cannot be an empty collection.", name);
            }
        }

        public static void AssertNotNullOrEmpty(string value, string name)
        {
            if (value is null)
            {
                throw new ArgumentNullException(name);
            }
            if (value.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", name);
            }
        }

        public static void AssertNotNullOrWhiteSpace(string value, string name)
        {
            if (value is null)
            {
                throw new ArgumentNullException(name);
            }
            if (string.IsNullOrWhiteSpace(value))
            {
                throw new ArgumentException("Value cannot be empty or contain only white-space characters.", name);
            }
        }

        public static void AssertNotDefault<T>(ref T value, string name)
        where T : struct, IEquatable<T>
        {
            if (value.Equals(default))
            {
                throw new ArgumentException("Value cannot be empty.", name);
            }
        }

        public static void AssertInRange<T>(T value, T minimum, T maximum, string name)
        where T : notnull, IComparable<T>
        {
            if (minimum.CompareTo(value) > 0)
            {
                throw new ArgumentOutOfRangeException(name, "Value is less than the minimum allowed.");
            }
            if (maximum.CompareTo(value) < 0)
            {
                throw new ArgumentOutOfRangeException(name, "Value is greater than the maximum allowed.");
            }
        }

        public static void AssertEnumDefined(Type enumType, object value, string name)
        {
            if (!Enum.IsDefined(enumType, value))
            {
                throw new ArgumentException($"Value not defined for {enumType.FullName}.", name);
            }
        }

        public static T CheckNotNull<T>(T value, string name)
        where T : class
        {
            AssertNotNull(value, name);
            return value;
        }

        public static string CheckNotNullOrEmpty(string value, string name)
        {
            AssertNotNullOrEmpty(value, name);
            return value;
        }

        public static void AssertNull<T>(T value, string name, string message = null)
        {
            if (value != null)
            {
                throw new ArgumentException(message ?? "Value must be null.", name);
            }
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Internal/ChangeTrackingDictionary.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    internal class ChangeTrackingDictionary<TKey, TValue> : IDictionary<TKey, TValue>, IReadOnlyDictionary<TKey, TValue> where TKey : notnull
    {
        private IDictionary<TKey, TValue> _innerDictionary;

        public ChangeTrackingDictionary()
        {
        }

        public ChangeTrackingDictionary(IDictionary<TKey, TValue> dictionary)
        {
            if (dictionary == null)
            {
                return;
            }
            _innerDictionary = new Dictionary<TKey, TValue>(dictionary);
        }

        public ChangeTrackingDictionary(IReadOnlyDictionary<TKey, TValue> dictionary)
        {
            if (dictionary == null)
            {
                return;
            }
            _innerDictionary = new Dictionary<TKey, TValue>();
            foreach (var pair in dictionary)
            {
                _innerDictionary.Add(pair);
            }
        }

        public bool IsUndefined => _innerDictionary == null;

        public int Count => IsUndefined ? 0 : EnsureDictionary().Count;

        public bool IsReadOnly => IsUndefined ? false : EnsureDictionary().IsReadOnly;

        public ICollection<TKey> Keys => IsUndefined ? Array.Empty<TKey>() : EnsureDictionary().Keys;

        public ICollection<TValue> Values => IsUndefined ? Array.Empty<TValue>() : EnsureDictionary().Values;

        public TValue this[TKey key]
        {
            get
            {
                if (IsUndefined)
                {
                    throw new KeyNotFoundException(nameof(key));
                }
                return EnsureDictionary()[key];
            }
            set
            {
                EnsureDictionary()[key] = value;
            }
        }

        IEnumerable<TKey> IReadOnlyDictionary<TKey, TValue>.Keys => Keys;

        IEnumerable<TValue> IReadOnlyDictionary<TKey, TValue>.Values => Values;

        public IEnumerator<KeyValuePair<TKey, TValue>> GetEnumerator()
        {
            if (IsUndefined)
            {
                IEnumerator<KeyValuePair<TKey, TValue>> enumerateEmpty()
                {
                    yield break;
                }
                return enumerateEmpty();
            }
            return EnsureDictionary().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Add(KeyValuePair<TKey, TValue> item)
        {
            EnsureDictionary().Add(item);
        }

        public void Clear()
        {
            EnsureDictionary().Clear();
        }

        public bool Contains(KeyValuePair<TKey, TValue> item)
        {
            if (IsUndefined)
            {
                return false;
            }
            return EnsureDictionary().Contains(item);
        }

        public void CopyTo(KeyValuePair<TKey, TValue>[] array, int index)
        {
            if (IsUndefined)
            {
                return;
            }
            EnsureDictionary().CopyTo(array, index);
        }

        public bool Remove(KeyValuePair<TKey, TValue> item)
        {
            if (IsUndefined)
            {
                return false;
            }
            return EnsureDictionary().Remove(item);
        }

        public void Add(TKey key, TValue value)
        {
            EnsureDictionary().Add(key, value);
        }

        public bool ContainsKey(TKey key)
        {
            if (IsUndefined)
            {
                return false;
            }
            return EnsureDictionary().ContainsKey(key);
        }

        public bool Remove(TKey key)
        {
            if (IsUndefined)
            {
                return false;
            }
            return EnsureDictionary().Remove(key);
        }

        public bool TryGetValue(TKey key, out TValue value)
        {
            if (IsUndefined)
            {
                value = default;
                return false;
            }
            return EnsureDictionary().TryGetValue(key, out value);
        }

        public IDictionary<TKey, TValue> EnsureDictionary()
        {
            return _innerDictionary ??= new Dictionary<TKey, TValue>();
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Internal/ChangeTrackingList.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    internal class ChangeTrackingList<T> : IList<T>, IReadOnlyList<T>
    {
        private IList<T> _innerList;

        public ChangeTrackingList()
        {
        }

        public ChangeTrackingList(IList<T> innerList)
        {
            if (innerList != null)
            {
                _innerList = innerList;
            }
        }

        public ChangeTrackingList(IReadOnlyList<T> innerList)
        {
            if (innerList != null)
            {
                _innerList = innerList.ToList();
            }
        }

        public bool IsUndefined => _innerList == null;

        public int Count => IsUndefined ? 0 : EnsureList().Count;

        public bool IsReadOnly => IsUndefined ? false : EnsureList().IsReadOnly;

        public T this[int index]
        {
            get
            {
                if (IsUndefined)
                {
                    throw new ArgumentOutOfRangeException(nameof(index));
                }
                return EnsureList()[index];
            }
            set
            {
                if (IsUndefined)
                {
                    throw new ArgumentOutOfRangeException(nameof(index));
                }
                EnsureList()[index] = value;
            }
        }

        public void Reset()
        {
            _innerList = null;
        }

        public IEnumerator<T> GetEnumerator()
        {
            if (IsUndefined)
            {
                IEnumerator<T> enumerateEmpty()
                {
                    yield break;
                }
                return enumerateEmpty();
            }
            return EnsureList().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Add(T item)
        {
            EnsureList().Add(item);
        }

        public void Clear()
        {
            EnsureList().Clear();
        }

        public bool Contains(T item)
        {
            if (IsUndefined)
            {
                return false;
            }
            return EnsureList().Contains(item);
        }

        public void CopyTo(T[] array, int arrayIndex)
        {
            if (IsUndefined)
            {
                return;
            }
            EnsureList().CopyTo(array, arrayIndex);
        }

        public bool Remove(T item)
        {
            if (IsUndefined)
            {
                return false;
            }
            return EnsureList().Remove(item);
        }

        public int IndexOf(T item)
        {
            if (IsUndefined)
            {
                return -1;
            }
            return EnsureList().IndexOf(item);
        }

        public void Insert(int index, T item)
        {
            EnsureList().Insert(index, item);
        }

        public void RemoveAt(int index)
        {
            if (IsUndefined)
            {
                throw new ArgumentOutOfRangeException(nameof(index));
            }
            EnsureList().RemoveAt(index);
        }

        public IList<T> EnsureList()
        {
            return _innerList ??= new List<T>();
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Internal/ModelSerializationExtensions.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.Text.Json;
using System.Xml;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    internal static class ModelSerializationExtensions
    {
        internal static readonly JsonDocumentOptions JsonDocumentOptions = new JsonDocumentOptions { MaxDepth = 256 };
        internal static readonly ModelReaderWriterOptions WireOptions = new ModelReaderWriterOptions("W");
        internal static readonly ModelReaderWriterOptions WireV3Options = new ModelReaderWriterOptions("W|v3");
        internal static readonly ModelReaderWriterOptions JsonV3Options = new ModelReaderWriterOptions("J|v3");
        internal static readonly BinaryData SentinelValue = BinaryData.FromBytes("\"__EMPTY__\""u8.ToArray());

        public static object GetObject(this JsonElement element)
        {
            switch (element.ValueKind)
            {
                case JsonValueKind.String:
                    return element.GetString();
                case JsonValueKind.Number:
                    if (element.TryGetInt32(out int intValue))
                    {
                        return intValue;
                    }
                    if (element.TryGetInt64(out long longValue))
                    {
                        return longValue;
                    }
                    return element.GetDouble();
                case JsonValueKind.True:
                    return true;
                case JsonValueKind.False:
                    return false;
                case JsonValueKind.Undefined:
                case JsonValueKind.Null:
                    return null;
                case JsonValueKind.Object:
                    var dictionary = new Dictionary<string, object>();
                    foreach (var jsonProperty in element.EnumerateObject())
                    {
                        dictionary.Add(jsonProperty.Name, jsonProperty.Value.GetObject());
                    }
                    return dictionary;
                case JsonValueKind.Array:
                    var list = new List<object>();
                    foreach (var item in element.EnumerateArray())
                    {
                        list.Add(item.GetObject());
                    }
                    return list.ToArray();
                default:
                    throw new NotSupportedException($"Not supported value kind {element.ValueKind}");
            }
        }

        public static byte[] GetBytesFromBase64(this JsonElement element, string format)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }

            return format switch
            {
                "U" => TypeFormatters.FromBase64UrlString(element.GetRequiredString()),
                "D" => element.GetBytesFromBase64(),
                _ => throw new ArgumentException($"Format is not supported: '{format}'", nameof(format))
            };
        }

        public static DateTimeOffset GetDateTimeOffset(this JsonElement element, string format) => format switch
        {
            "U" when element.ValueKind == JsonValueKind.Number => DateTimeOffset.FromUnixTimeSeconds(element.GetInt64()),
            _ => TypeFormatters.ParseDateTimeOffset(element.GetString(), format)
        };

        public static TimeSpan GetTimeSpan(this JsonElement element, string format) => TypeFormatters.ParseTimeSpan(element.GetString(), format);

        public static char GetChar(this JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.String)
            {
                var text = element.GetString();
                if (text == null || text.Length != 1)
                {
                    throw new NotSupportedException($"Cannot convert \"{text}\" to a char");
                }
                return text[0];
            }
            else
            {
                throw new NotSupportedException($"Cannot convert {element.ValueKind} to a char");
            }
        }

        [Conditional("DEBUG")]
        public static void ThrowNonNullablePropertyIsNull(this JsonProperty property)
        {
            throw new JsonException($"A property '{property.Name}' defined as non-nullable but received as null from the service. This exception only happens in DEBUG builds of the library and would be ignored in the release build");
        }

        public static string GetRequiredString(this JsonElement element)
        {
            var value = element.GetString();
            if (value == null)
            {
                throw new InvalidOperationException($"The requested operation requires an element of type 'String', but the target element has type '{element.ValueKind}'.");
            }
            return value;
        }

        public static void WriteStringValue(this Utf8JsonWriter writer, DateTimeOffset value, string format)
        {
            writer.WriteStringValue(TypeFormatters.ToString(value, format));
        }

        public static void WriteStringValue(this Utf8JsonWriter writer, DateTime value, string format)
        {
            writer.WriteStringValue(TypeFormatters.ToString(value, format));
        }

        public static void WriteStringValue(this Utf8JsonWriter writer, TimeSpan value, string format)
        {
            writer.WriteStringValue(TypeFormatters.ToString(value, format));
        }

        public static void WriteStringValue(this Utf8JsonWriter writer, char value)
        {
            writer.WriteStringValue(value.ToString(CultureInfo.InvariantCulture));
        }

        public static void WriteBase64StringValue(this Utf8JsonWriter writer, byte[] value, string format)
        {
            if (value == null)
            {
                writer.WriteNullValue();
                return;
            }
            switch (format)
            {
                case "U":
                    writer.WriteStringValue(TypeFormatters.ToBase64UrlString(value));
                    break;
                case "D":
                    writer.WriteBase64StringValue(value);
                    break;
                default:
                    throw new ArgumentException($"Format is not supported: '{format}'", nameof(format));
            }
        }

        public static void WriteNumberValue(this Utf8JsonWriter writer, DateTimeOffset value, string format)
        {
            if (format != "U")
            {
                throw new ArgumentOutOfRangeException(nameof(format), "Only 'U' format is supported when writing a DateTimeOffset as a Number.");
            }
            writer.WriteNumberValue(value.ToUnixTimeSeconds());
        }

        public static void WriteObjectValue<T>(this Utf8JsonWriter writer, T value, ModelReaderWriterOptions options = null)
        {
            switch (value)
            {
                case null:
                    writer.WriteNullValue();
                    break;
                case IJsonModel<T> jsonModel:
                    jsonModel.Write(writer, options ?? WireOptions);
                    break;
                case IUtf8JsonSerializable serializable:
                    serializable.Write(writer);
                    break;
                case byte[] bytes:
                    writer.WriteBase64StringValue(bytes);
                    break;
                case BinaryData bytes0:
                    writer.WriteBase64StringValue(bytes0);
                    break;
                case JsonElement json:
                    json.WriteTo(writer);
                    break;
                case int i:
                    writer.WriteNumberValue(i);
                    break;
                case decimal d:
                    writer.WriteNumberValue(d);
                    break;
                case double d0:
                    if (double.IsNaN(d0))
                    {
                        writer.WriteStringValue("NaN");
                    }
                    else
                    {
                        writer.WriteNumberValue(d0);
                    }
                    break;
                case float f:
                    writer.WriteNumberValue(f);
                    break;
                case long l:
                    writer.WriteNumberValue(l);
                    break;
                case string s:
                    writer.WriteStringValue(s);
                    break;
                case bool b:
                    writer.WriteBooleanValue(b);
                    break;
                case Guid g:
                    writer.WriteStringValue(g);
                    break;
                case DateTimeOffset dateTimeOffset:
                    writer.WriteStringValue(dateTimeOffset, "O");
                    break;
                case DateTime dateTime:
                    writer.WriteStringValue(dateTime, "O");
                    break;
                case IEnumerable<KeyValuePair<string, object>> enumerable:
                    writer.WriteStartObject();
                    foreach (var pair in enumerable)
                    {
                        writer.WritePropertyName(pair.Key);
                        writer.WriteObjectValue<object>(pair.Value, options);
                    }
                    writer.WriteEndObject();
                    break;
                case IEnumerable<object> objectEnumerable:
                    writer.WriteStartArray();
                    foreach (var item in objectEnumerable)
                    {
                        writer.WriteObjectValue<object>(item, options);
                    }
                    writer.WriteEndArray();
                    break;
                case TimeSpan timeSpan:
                    writer.WriteStringValue(timeSpan, "P");
                    break;
                default:
                    throw new NotSupportedException($"Not supported type {value.GetType()}");
            }
        }

        public static void WriteObjectValue(this Utf8JsonWriter writer, object value, ModelReaderWriterOptions options = null)
        {
            writer.WriteObjectValue<object>(value, options);
        }

        internal static bool IsSentinelValue(BinaryData value)
        {
            ReadOnlySpan<byte> sentinelSpan = SentinelValue.ToMemory().Span;
            ReadOnlySpan<byte> valueSpan = value.ToMemory().Span;
            return sentinelSpan.SequenceEqual(valueSpan);
        }

        internal static class TypeFormatters
        {
            private const string RoundtripZFormat = "yyyy-MM-ddTHH:mm:ss.fffffffZ";
            public const string DefaultNumberFormat = "G";

            public static string ToString(bool value) => value ? "true" : "false";

            public static string ToString(DateTime value, string format) => value.Kind switch
            {
                DateTimeKind.Utc => ToString((DateTimeOffset)value, format),
                _ => throw new NotSupportedException($"DateTime {value} has a Kind of {value.Kind}. Azure SDK requires it to be UTC. You can call DateTime.SpecifyKind to change Kind property value to DateTimeKind.Utc.")
            };

            public static string ToString(DateTimeOffset value, string format) => format switch
            {
                "D" => value.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture),
                "U" => value.ToUnixTimeSeconds().ToString(CultureInfo.InvariantCulture),
                "O" => value.ToUniversalTime().ToString(RoundtripZFormat, CultureInfo.InvariantCulture),
                "o" => value.ToUniversalTime().ToString(RoundtripZFormat, CultureInfo.InvariantCulture),
                "R" => value.ToString("r", CultureInfo.InvariantCulture),
                _ => value.ToString(format, CultureInfo.InvariantCulture)
            };

            public static string ToString(TimeSpan value, string format) => format switch
            {
                "P" => XmlConvert.ToString(value),
                _ => value.ToString(format, CultureInfo.InvariantCulture)
            };

            public static string ToString(byte[] value, string format) => format switch
            {
                "U" => ToBase64UrlString(value),
                "D" => Convert.ToBase64String(value),
                _ => throw new ArgumentException($"Format is not supported: '{format}'", nameof(format))
            };

            public static string ToBase64UrlString(byte[] value)
            {
                int numWholeOrPartialInputBlocks = checked(value.Length + 2) / 3;
                int size = checked(numWholeOrPartialInputBlocks * 4);
                char[] output = new char[size];

                int numBase64Chars = Convert.ToBase64CharArray(value, 0, value.Length, output, 0);

                int i = 0;
                for (; i < numBase64Chars; i++)
                {
                    char ch = output[i];
                    if (ch == '+')
                    {
                        output[i] = '-';
                    }
                    else
                    {
                        if (ch == '/')
                        {
                            output[i] = '_';
                        }
                        else
                        {
                            if (ch == '=')
                            {
                                break;
                            }
                        }
                    }
                }

                return new string(output, 0, i);
            }

            public static byte[] FromBase64UrlString(string value)
            {
                int paddingCharsToAdd = (value.Length % 4) switch
                {
                    0 => 0,
                    2 => 2,
                    3 => 1,
                    _ => throw new InvalidOperationException("Malformed input")
                };
                char[] output = new char[(value.Length + paddingCharsToAdd)];
                int i = 0;
                for (; i < value.Length; i++)
                {
                    char ch = value[i];
                    if (ch == '-')
                    {
                        output[i] = '+';
                    }
                    else
                    {
                        if (ch == '_')
                        {
                            output[i] = '/';
                        }
                        else
                        {
                            output[i] = ch;
                        }
                    }
                }

                for (; i < output.Length; i++)
                {
                    output[i] = '=';
                }

                return Convert.FromBase64CharArray(output, 0, output.Length);
            }

            public static DateTimeOffset ParseDateTimeOffset(string value, string format) => format switch
            {
                "U" => DateTimeOffset.FromUnixTimeSeconds(long.Parse(value, CultureInfo.InvariantCulture)),
                _ => DateTimeOffset.Parse(value, CultureInfo.InvariantCulture, DateTimeStyles.AssumeUniversal)
            };

            public static TimeSpan ParseTimeSpan(string value, string format) => format switch
            {
                "P" => XmlConvert.ToTimeSpan(value),
                _ => TimeSpan.ParseExact(value, format, CultureInfo.InvariantCulture)
            };

            public static string ConvertToString(object value, string format = null) => value switch
            {
                null => "null",
                string s => s,
                bool b => ToString(b),
                int or float or double or long or decimal => ((IFormattable)value).ToString(DefaultNumberFormat, CultureInfo.InvariantCulture),
                byte[] b0 when format != null => ToString(b0, format),
                IEnumerable<string> s0 => string.Join(",", s0),
                DateTimeOffset dateTime when format != null => ToString(dateTime, format),
                TimeSpan timeSpan when format != null => ToString(timeSpan, format),
                TimeSpan timeSpan0 => XmlConvert.ToString(timeSpan0),
                Guid guid => guid.ToString(),
                BinaryData binaryData => ConvertToString(binaryData.ToArray(), format),
                _ => value.ToString()
            };
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Internal/Optional.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    internal static class Optional
    {
        public static bool IsCollectionDefined<T>(IEnumerable<T> collection)
        {
            return !(collection is ChangeTrackingList<T> changeTrackingList && changeTrackingList.IsUndefined);
        }

        public static bool IsCollectionDefined<TKey, TValue>(IDictionary<TKey, TValue> collection)
        {
            return !(collection is ChangeTrackingDictionary<TKey, TValue> changeTrackingDictionary && changeTrackingDictionary.IsUndefined);
        }

        public static bool IsCollectionDefined<TKey, TValue>(IReadOnlyDictionary<TKey, TValue> collection)
        {
            return !(collection is ChangeTrackingDictionary<TKey, TValue> changeTrackingDictionary && changeTrackingDictionary.IsUndefined);
        }

        public static bool IsDefined<T>(T? value)
        where T : struct
        {
            return value.HasValue;
        }

        public static bool IsDefined(object value)
        {
            return value != null;
        }

        public static bool IsDefined(JsonElement value)
        {
            return value.ValueKind != JsonValueKind.Undefined;
        }

        public static bool IsDefined(string value)
        {
            return value != null;
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Internal/Utf8JsonRequestContent.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.IO;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    internal class Utf8JsonRequestContent : RequestContent
    {
        private readonly MemoryStream _stream;
        private readonly RequestContent _content;

        public Utf8JsonRequestContent()
        {
            _stream = new MemoryStream();
            _content = Create(_stream);
            JsonWriter = new Utf8JsonWriter(_stream);
        }

        public Utf8JsonWriter JsonWriter { get; }

        public override async Task WriteToAsync(Stream stream, CancellationToken cancellationToken = default)
        {
            await JsonWriter.FlushAsync().ConfigureAwait(false);
            await _content.WriteToAsync(stream, cancellationToken).ConfigureAwait(false);
        }

        public override void WriteTo(Stream stream, CancellationToken cancellationToken = default)
        {
            JsonWriter.Flush();
            _content.WriteTo(stream, cancellationToken);
        }

        public override bool TryComputeLength(out long length)
        {
            length = JsonWriter.BytesCommitted + JsonWriter.BytesPending;
            return true;
        }

        public override void Dispose()
        {
            JsonWriter.Dispose();
            _content.Dispose();
            _stream.Dispose();
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/LongRunningOperation/EdgeConfigTemplateOperationSource.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.ClientModel.Primitives;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    internal class EdgeConfigTemplateOperationSource : IOperationSource<EdgeConfigTemplateResource>
    {
        private readonly ArmClient _client;

        internal EdgeConfigTemplateOperationSource(ArmClient client)
        {
            _client = client;
        }

        EdgeConfigTemplateResource IOperationSource<EdgeConfigTemplateResource>.CreateResult(Response response, CancellationToken cancellationToken)
        {
            var data = ModelReaderWriter.Read<EdgeConfigTemplateData>(response.Content, ModelReaderWriterOptions.Json, AzureResourceManagerWorkloadOrchestrationContext.Default);
            return new EdgeConfigTemplateResource(_client, data);
        }

        async ValueTask<EdgeConfigTemplateResource> IOperationSource<EdgeConfigTemplateResource>.CreateResultAsync(Response response, CancellationToken cancellationToken)
        {
            var data = ModelReaderWriter.Read<EdgeConfigTemplateData>(response.Content, ModelReaderWriterOptions.Json, AzureResourceManagerWorkloadOrchestrationContext.Default);
            return await Task.FromResult(new EdgeConfigTemplateResource(_client, data)).ConfigureAwait(false);
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/LongRunningOperation/EdgeConfigTemplateVersionOperationSource.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.ClientModel.Primitives;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    internal class EdgeConfigTemplateVersionOperationSource : IOperationSource<EdgeConfigTemplateVersionResource>
    {
        private readonly ArmClient _client;

        internal EdgeConfigTemplateVersionOperationSource(ArmClient client)
        {
            _client = client;
        }

        EdgeConfigTemplateVersionResource IOperationSource<EdgeConfigTemplateVersionResource>.CreateResult(Response response, CancellationToken cancellationToken)
        {
            var data = ModelReaderWriter.Read<EdgeConfigTemplateVersionData>(response.Content, ModelReaderWriterOptions.Json, AzureResourceManagerWorkloadOrchestrationContext.Default);
            return new EdgeConfigTemplateVersionResource(_client, data);
        }

        async ValueTask<EdgeConfigTemplateVersionResource> IOperationSource<EdgeConfigTemplateVersionResource>.CreateResultAsync(Response response, CancellationToken cancellationToken)
        {
            var data = ModelReaderWriter.Read<EdgeConfigTemplateVersionData>(response.Content, ModelReaderWriterOptions.Json, AzureResourceManagerWorkloadOrchestrationContext.Default);
            return await Task.FromResult(new EdgeConfigTemplateVersionResource(_client, data)).ConfigureAwait(false);
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/LongRunningOperation/EdgeContextOperationSource.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.ClientModel.Primitives;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    internal class EdgeContextOperationSource : IOperationSource<EdgeContextResource>
    {
        private readonly ArmClient _client;

        internal EdgeContextOperationSource(ArmClient client)
        {
            _client = client;
        }

        EdgeContextResource IOperationSource<EdgeContextResource>.CreateResult(Response response, CancellationToken cancellationToken)
        {
            var data = ModelReaderWriter.Read<EdgeContextData>(response.Content, ModelReaderWriterOptions.Json, AzureResourceManagerWorkloadOrchestrationContext.Default);
            return new EdgeContextResource(_client, data);
        }

        async ValueTask<EdgeContextResource> IOperationSource<EdgeContextResource>.CreateResultAsync(Response response, CancellationToken cancellationToken)
        {
            var data = ModelReaderWriter.Read<EdgeContextData>(response.Content, ModelReaderWriterOptions.Json, AzureResourceManagerWorkloadOrchestrationContext.Default);
            return await Task.FromResult(new EdgeContextResource(_client, data)).ConfigureAwait(false);
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/LongRunningOperation/EdgeDeploymentInstanceOperationSource.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.ClientModel.Primitives;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    internal class EdgeDeploymentInstanceOperationSource : IOperationSource<EdgeDeploymentInstanceResource>
    {
        private readonly ArmClient _client;

        internal EdgeDeploymentInstanceOperationSource(ArmClient client)
        {
            _client = client;
        }

        EdgeDeploymentInstanceResource IOperationSource<EdgeDeploymentInstanceResource>.CreateResult(Response response, CancellationToken cancellationToken)
        {
            var data = ModelReaderWriter.Read<EdgeDeploymentInstanceData>(response.Content, ModelReaderWriterOptions.Json, AzureResourceManagerWorkloadOrchestrationContext.Default);
            return new EdgeDeploymentInstanceResource(_client, data);
        }

        async ValueTask<EdgeDeploymentInstanceResource> IOperationSource<EdgeDeploymentInstanceResource>.CreateResultAsync(Response response, CancellationToken cancellationToken)
        {
            var data = ModelReaderWriter.Read<EdgeDeploymentInstanceData>(response.Content, ModelReaderWriterOptions.Json, AzureResourceManagerWorkloadOrchestrationContext.Default);
            return await Task.FromResult(new EdgeDeploymentInstanceResource(_client, data)).ConfigureAwait(false);
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/LongRunningOperation/EdgeDiagnosticOperationSource.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.ClientModel.Primitives;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    internal class EdgeDiagnosticOperationSource : IOperationSource<EdgeDiagnosticResource>
    {
        private readonly ArmClient _client;

        internal EdgeDiagnosticOperationSource(ArmClient client)
        {
            _client = client;
        }

        EdgeDiagnosticResource IOperationSource<EdgeDiagnosticResource>.CreateResult(Response response, CancellationToken cancellationToken)
        {
            var data = ModelReaderWriter.Read<EdgeDiagnosticData>(response.Content, ModelReaderWriterOptions.Json, AzureResourceManagerWorkloadOrchestrationContext.Default);
            return new EdgeDiagnosticResource(_client, data);
        }

        async ValueTask<EdgeDiagnosticResource> IOperationSource<EdgeDiagnosticResource>.CreateResultAsync(Response response, CancellationToken cancellationToken)
        {
            var data = ModelReaderWriter.Read<EdgeDiagnosticData>(response.Content, ModelReaderWriterOptions.Json, AzureResourceManagerWorkloadOrchestrationContext.Default);
            return await Task.FromResult(new EdgeDiagnosticResource(_client, data)).ConfigureAwait(false);
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/LongRunningOperation/EdgeDynamicSchemaOperationSource.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.ClientModel.Primitives;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    internal class EdgeDynamicSchemaOperationSource : IOperationSource<EdgeDynamicSchemaResource>
    {
        private readonly ArmClient _client;

        internal EdgeDynamicSchemaOperationSource(ArmClient client)
        {
            _client = client;
        }

        EdgeDynamicSchemaResource IOperationSource<EdgeDynamicSchemaResource>.CreateResult(Response response, CancellationToken cancellationToken)
        {
            var data = ModelReaderWriter.Read<EdgeDynamicSchemaData>(response.Content, ModelReaderWriterOptions.Json, AzureResourceManagerWorkloadOrchestrationContext.Default);
            return new EdgeDynamicSchemaResource(_client, data);
        }

        async ValueTask<EdgeDynamicSchemaResource> IOperationSource<EdgeDynamicSchemaResource>.CreateResultAsync(Response response, CancellationToken cancellationToken)
        {
            var data = ModelReaderWriter.Read<EdgeDynamicSchemaData>(response.Content, ModelReaderWriterOptions.Json, AzureResourceManagerWorkloadOrchestrationContext.Default);
            return await Task.FromResult(new EdgeDynamicSchemaResource(_client, data)).ConfigureAwait(false);
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/LongRunningOperation/EdgeDynamicSchemaVersionOperationSource.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.ClientModel.Primitives;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    internal class EdgeDynamicSchemaVersionOperationSource : IOperationSource<EdgeDynamicSchemaVersionResource>
    {
        private readonly ArmClient _client;

        internal EdgeDynamicSchemaVersionOperationSource(ArmClient client)
        {
            _client = client;
        }

        EdgeDynamicSchemaVersionResource IOperationSource<EdgeDynamicSchemaVersionResource>.CreateResult(Response response, CancellationToken cancellationToken)
        {
            var data = ModelReaderWriter.Read<EdgeDynamicSchemaVersionData>(response.Content, ModelReaderWriterOptions.Json, AzureResourceManagerWorkloadOrchestrationContext.Default);
            return new EdgeDynamicSchemaVersionResource(_client, data);
        }

        async ValueTask<EdgeDynamicSchemaVersionResource> IOperationSource<EdgeDynamicSchemaVersionResource>.CreateResultAsync(Response response, CancellationToken cancellationToken)
        {
            var data = ModelReaderWriter.Read<EdgeDynamicSchemaVersionData>(response.Content, ModelReaderWriterOptions.Json, AzureResourceManagerWorkloadOrchestrationContext.Default);
            return await Task.FromResult(new EdgeDynamicSchemaVersionResource(_client, data)).ConfigureAwait(false);
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/LongRunningOperation/EdgeExecutionOperationSource.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.ClientModel.Primitives;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    internal class EdgeExecutionOperationSource : IOperationSource<EdgeExecutionResource>
    {
        private readonly ArmClient _client;

        internal EdgeExecutionOperationSource(ArmClient client)
        {
            _client = client;
        }

        EdgeExecutionResource IOperationSource<EdgeExecutionResource>.CreateResult(Response response, CancellationToken cancellationToken)
        {
            var data = ModelReaderWriter.Read<EdgeExecutionData>(response.Content, ModelReaderWriterOptions.Json, AzureResourceManagerWorkloadOrchestrationContext.Default);
            return new EdgeExecutionResource(_client, data);
        }

        async ValueTask<EdgeExecutionResource> IOperationSource<EdgeExecutionResource>.CreateResultAsync(Response response, CancellationToken cancellationToken)
        {
            var data = ModelReaderWriter.Read<EdgeExecutionData>(response.Content, ModelReaderWriterOptions.Json, AzureResourceManagerWorkloadOrchestrationContext.Default);
            return await Task.FromResult(new EdgeExecutionResource(_client, data)).ConfigureAwait(false);
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/LongRunningOperation/EdgeSchemaOperationSource.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.ClientModel.Primitives;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    internal class EdgeSchemaOperationSource : IOperationSource<EdgeSchemaResource>
    {
        private readonly ArmClient _client;

        internal EdgeSchemaOperationSource(ArmClient client)
        {
            _client = client;
        }

        EdgeSchemaResource IOperationSource<EdgeSchemaResource>.CreateResult(Response response, CancellationToken cancellationToken)
        {
            var data = ModelReaderWriter.Read<EdgeSchemaData>(response.Content, ModelReaderWriterOptions.Json, AzureResourceManagerWorkloadOrchestrationContext.Default);
            return new EdgeSchemaResource(_client, data);
        }

        async ValueTask<EdgeSchemaResource> IOperationSource<EdgeSchemaResource>.CreateResultAsync(Response response, CancellationToken cancellationToken)
        {
            var data = ModelReaderWriter.Read<EdgeSchemaData>(response.Content, ModelReaderWriterOptions.Json, AzureResourceManagerWorkloadOrchestrationContext.Default);
            return await Task.FromResult(new EdgeSchemaResource(_client, data)).ConfigureAwait(false);
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/LongRunningOperation/EdgeSchemaVersionOperationSource.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.ClientModel.Primitives;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    internal class EdgeSchemaVersionOperationSource : IOperationSource<EdgeSchemaVersionResource>
    {
        private readonly ArmClient _client;

        internal EdgeSchemaVersionOperationSource(ArmClient client)
        {
            _client = client;
        }

        EdgeSchemaVersionResource IOperationSource<EdgeSchemaVersionResource>.CreateResult(Response response, CancellationToken cancellationToken)
        {
            var data = ModelReaderWriter.Read<EdgeSchemaVersionData>(response.Content, ModelReaderWriterOptions.Json, AzureResourceManagerWorkloadOrchestrationContext.Default);
            return new EdgeSchemaVersionResource(_client, data);
        }

        async ValueTask<EdgeSchemaVersionResource> IOperationSource<EdgeSchemaVersionResource>.CreateResultAsync(Response response, CancellationToken cancellationToken)
        {
            var data = ModelReaderWriter.Read<EdgeSchemaVersionData>(response.Content, ModelReaderWriterOptions.Json, AzureResourceManagerWorkloadOrchestrationContext.Default);
            return await Task.FromResult(new EdgeSchemaVersionResource(_client, data)).ConfigureAwait(false);
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/LongRunningOperation/EdgeSiteReferenceOperationSource.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.ClientModel.Primitives;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    internal class EdgeSiteReferenceOperationSource : IOperationSource<EdgeSiteReferenceResource>
    {
        private readonly ArmClient _client;

        internal EdgeSiteReferenceOperationSource(ArmClient client)
        {
            _client = client;
        }

        EdgeSiteReferenceResource IOperationSource<EdgeSiteReferenceResource>.CreateResult(Response response, CancellationToken cancellationToken)
        {
            var data = ModelReaderWriter.Read<EdgeSiteReferenceData>(response.Content, ModelReaderWriterOptions.Json, AzureResourceManagerWorkloadOrchestrationContext.Default);
            return new EdgeSiteReferenceResource(_client, data);
        }

        async ValueTask<EdgeSiteReferenceResource> IOperationSource<EdgeSiteReferenceResource>.CreateResultAsync(Response response, CancellationToken cancellationToken)
        {
            var data = ModelReaderWriter.Read<EdgeSiteReferenceData>(response.Content, ModelReaderWriterOptions.Json, AzureResourceManagerWorkloadOrchestrationContext.Default);
            return await Task.FromResult(new EdgeSiteReferenceResource(_client, data)).ConfigureAwait(false);
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/LongRunningOperation/EdgeSolutionOperationSource.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.ClientModel.Primitives;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    internal class EdgeSolutionOperationSource : IOperationSource<EdgeSolutionResource>
    {
        private readonly ArmClient _client;

        internal EdgeSolutionOperationSource(ArmClient client)
        {
            _client = client;
        }

        EdgeSolutionResource IOperationSource<EdgeSolutionResource>.CreateResult(Response response, CancellationToken cancellationToken)
        {
            var data = ModelReaderWriter.Read<EdgeSolutionData>(response.Content, ModelReaderWriterOptions.Json, AzureResourceManagerWorkloadOrchestrationContext.Default);
            return new EdgeSolutionResource(_client, data);
        }

        async ValueTask<EdgeSolutionResource> IOperationSource<EdgeSolutionResource>.CreateResultAsync(Response response, CancellationToken cancellationToken)
        {
            var data = ModelReaderWriter.Read<EdgeSolutionData>(response.Content, ModelReaderWriterOptions.Json, AzureResourceManagerWorkloadOrchestrationContext.Default);
            return await Task.FromResult(new EdgeSolutionResource(_client, data)).ConfigureAwait(false);
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/LongRunningOperation/EdgeSolutionTemplateOperationSource.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.ClientModel.Primitives;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    internal class EdgeSolutionTemplateOperationSource : IOperationSource<EdgeSolutionTemplateResource>
    {
        private readonly ArmClient _client;

        internal EdgeSolutionTemplateOperationSource(ArmClient client)
        {
            _client = client;
        }

        EdgeSolutionTemplateResource IOperationSource<EdgeSolutionTemplateResource>.CreateResult(Response response, CancellationToken cancellationToken)
        {
            var data = ModelReaderWriter.Read<EdgeSolutionTemplateData>(response.Content, ModelReaderWriterOptions.Json, AzureResourceManagerWorkloadOrchestrationContext.Default);
            return new EdgeSolutionTemplateResource(_client, data);
        }

        async ValueTask<EdgeSolutionTemplateResource> IOperationSource<EdgeSolutionTemplateResource>.CreateResultAsync(Response response, CancellationToken cancellationToken)
        {
            var data = ModelReaderWriter.Read<EdgeSolutionTemplateData>(response.Content, ModelReaderWriterOptions.Json, AzureResourceManagerWorkloadOrchestrationContext.Default);
            return await Task.FromResult(new EdgeSolutionTemplateResource(_client, data)).ConfigureAwait(false);
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/LongRunningOperation/EdgeSolutionTemplateVersionOperationSource.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.ClientModel.Primitives;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    internal class EdgeSolutionTemplateVersionOperationSource : IOperationSource<EdgeSolutionTemplateVersionResource>
    {
        private readonly ArmClient _client;

        internal EdgeSolutionTemplateVersionOperationSource(ArmClient client)
        {
            _client = client;
        }

        EdgeSolutionTemplateVersionResource IOperationSource<EdgeSolutionTemplateVersionResource>.CreateResult(Response response, CancellationToken cancellationToken)
        {
            var data = ModelReaderWriter.Read<EdgeSolutionTemplateVersionData>(response.Content, ModelReaderWriterOptions.Json, AzureResourceManagerWorkloadOrchestrationContext.Default);
            return new EdgeSolutionTemplateVersionResource(_client, data);
        }

        async ValueTask<EdgeSolutionTemplateVersionResource> IOperationSource<EdgeSolutionTemplateVersionResource>.CreateResultAsync(Response response, CancellationToken cancellationToken)
        {
            var data = ModelReaderWriter.Read<EdgeSolutionTemplateVersionData>(response.Content, ModelReaderWriterOptions.Json, AzureResourceManagerWorkloadOrchestrationContext.Default);
            return await Task.FromResult(new EdgeSolutionTemplateVersionResource(_client, data)).ConfigureAwait(false);
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/LongRunningOperation/EdgeSolutionVersionOperationSource.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.ClientModel.Primitives;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    internal class EdgeSolutionVersionOperationSource : IOperationSource<EdgeSolutionVersionResource>
    {
        private readonly ArmClient _client;

        internal EdgeSolutionVersionOperationSource(ArmClient client)
        {
            _client = client;
        }

        EdgeSolutionVersionResource IOperationSource<EdgeSolutionVersionResource>.CreateResult(Response response, CancellationToken cancellationToken)
        {
            var data = ModelReaderWriter.Read<EdgeSolutionVersionData>(response.Content, ModelReaderWriterOptions.Json, AzureResourceManagerWorkloadOrchestrationContext.Default);
            return new EdgeSolutionVersionResource(_client, data);
        }

        async ValueTask<EdgeSolutionVersionResource> IOperationSource<EdgeSolutionVersionResource>.CreateResultAsync(Response response, CancellationToken cancellationToken)
        {
            var data = ModelReaderWriter.Read<EdgeSolutionVersionData>(response.Content, ModelReaderWriterOptions.Json, AzureResourceManagerWorkloadOrchestrationContext.Default);
            return await Task.FromResult(new EdgeSolutionVersionResource(_client, data)).ConfigureAwait(false);
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/LongRunningOperation/EdgeTargetOperationSource.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.ClientModel.Primitives;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    internal class EdgeTargetOperationSource : IOperationSource<EdgeTargetResource>
    {
        private readonly ArmClient _client;

        internal EdgeTargetOperationSource(ArmClient client)
        {
            _client = client;
        }

        EdgeTargetResource IOperationSource<EdgeTargetResource>.CreateResult(Response response, CancellationToken cancellationToken)
        {
            var data = ModelReaderWriter.Read<EdgeTargetData>(response.Content, ModelReaderWriterOptions.Json, AzureResourceManagerWorkloadOrchestrationContext.Default);
            return new EdgeTargetResource(_client, data);
        }

        async ValueTask<EdgeTargetResource> IOperationSource<EdgeTargetResource>.CreateResultAsync(Response response, CancellationToken cancellationToken)
        {
            var data = ModelReaderWriter.Read<EdgeTargetData>(response.Content, ModelReaderWriterOptions.Json, AzureResourceManagerWorkloadOrchestrationContext.Default);
            return await Task.FromResult(new EdgeTargetResource(_client, data)).ConfigureAwait(false);
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/LongRunningOperation/EdgeWorkflowOperationSource.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.ClientModel.Primitives;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    internal class EdgeWorkflowOperationSource : IOperationSource<EdgeWorkflowResource>
    {
        private readonly ArmClient _client;

        internal EdgeWorkflowOperationSource(ArmClient client)
        {
            _client = client;
        }

        EdgeWorkflowResource IOperationSource<EdgeWorkflowResource>.CreateResult(Response response, CancellationToken cancellationToken)
        {
            var data = ModelReaderWriter.Read<EdgeWorkflowData>(response.Content, ModelReaderWriterOptions.Json, AzureResourceManagerWorkloadOrchestrationContext.Default);
            return new EdgeWorkflowResource(_client, data);
        }

        async ValueTask<EdgeWorkflowResource> IOperationSource<EdgeWorkflowResource>.CreateResultAsync(Response response, CancellationToken cancellationToken)
        {
            var data = ModelReaderWriter.Read<EdgeWorkflowData>(response.Content, ModelReaderWriterOptions.Json, AzureResourceManagerWorkloadOrchestrationContext.Default);
            return await Task.FromResult(new EdgeWorkflowResource(_client, data)).ConfigureAwait(false);
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/LongRunningOperation/EdgeWorkflowVersionOperationSource.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.ClientModel.Primitives;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    internal class EdgeWorkflowVersionOperationSource : IOperationSource<EdgeWorkflowVersionResource>
    {
        private readonly ArmClient _client;

        internal EdgeWorkflowVersionOperationSource(ArmClient client)
        {
            _client = client;
        }

        EdgeWorkflowVersionResource IOperationSource<EdgeWorkflowVersionResource>.CreateResult(Response response, CancellationToken cancellationToken)
        {
            var data = ModelReaderWriter.Read<EdgeWorkflowVersionData>(response.Content, ModelReaderWriterOptions.Json, AzureResourceManagerWorkloadOrchestrationContext.Default);
            return new EdgeWorkflowVersionResource(_client, data);
        }

        async ValueTask<EdgeWorkflowVersionResource> IOperationSource<EdgeWorkflowVersionResource>.CreateResultAsync(Response response, CancellationToken cancellationToken)
        {
            var data = ModelReaderWriter.Read<EdgeWorkflowVersionData>(response.Content, ModelReaderWriterOptions.Json, AzureResourceManagerWorkloadOrchestrationContext.Default);
            return await Task.FromResult(new EdgeWorkflowVersionResource(_client, data)).ConfigureAwait(false);
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/LongRunningOperation/ResolvedConfigurationOperationSource.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    internal class ResolvedConfigurationOperationSource : IOperationSource<ResolvedConfiguration>
    {
        ResolvedConfiguration IOperationSource<ResolvedConfiguration>.CreateResult(Response response, CancellationToken cancellationToken)
        {
            using var document = JsonDocument.Parse(response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
            return ResolvedConfiguration.DeserializeResolvedConfiguration(document.RootElement);
        }

        async ValueTask<ResolvedConfiguration> IOperationSource<ResolvedConfiguration>.CreateResultAsync(Response response, CancellationToken cancellationToken)
        {
            using var document = await JsonDocument.ParseAsync(response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
            return ResolvedConfiguration.DeserializeResolvedConfiguration(document.RootElement);
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/LongRunningOperation/WorkloadOrchestrationArmOperation.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.WorkloadOrchestration
{
#pragma warning disable SA1649 // File name should match first type name
    internal class WorkloadOrchestrationArmOperation : ArmOperation
#pragma warning restore SA1649 // File name should match first type name
    {
        private readonly OperationInternal _operation;
        private readonly RehydrationToken? _completeRehydrationToken;
        private readonly NextLinkOperationImplementation _nextLinkOperation;
        private readonly string _operationId;

        /// <summary> Initializes a new instance of WorkloadOrchestrationArmOperation for mocking. </summary>
        protected WorkloadOrchestrationArmOperation()
        {
        }

        internal WorkloadOrchestrationArmOperation(Response response, RehydrationToken? rehydrationToken = null)
        {
            _operation = OperationInternal.Succeeded(response);
            _completeRehydrationToken = rehydrationToken;
            _operationId = GetOperationId(rehydrationToken);
        }

        internal WorkloadOrchestrationArmOperation(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Request request, Response response, OperationFinalStateVia finalStateVia, bool skipApiVersionOverride = false, string apiVersionOverrideValue = null)
        {
            var nextLinkOperation = NextLinkOperationImplementation.Create(pipeline, request.Method, request.Uri.ToUri(), response, finalStateVia, skipApiVersionOverride, apiVersionOverrideValue);
            if (nextLinkOperation is NextLinkOperationImplementation nextLinkOperationValue)
            {
                _nextLinkOperation = nextLinkOperationValue;
                _operationId = _nextLinkOperation.OperationId;
            }
            else
            {
                _completeRehydrationToken = NextLinkOperationImplementation.GetRehydrationToken(request.Method, request.Uri.ToUri(), response, finalStateVia);
                _operationId = GetOperationId(_completeRehydrationToken);
            }
            _operation = new OperationInternal(nextLinkOperation, clientDiagnostics, response, "WorkloadOrchestrationArmOperation", fallbackStrategy: new SequentialDelayStrategy());
        }

        private string GetOperationId(RehydrationToken? rehydrationToken)
        {
            if (rehydrationToken is null)
            {
                return null;
            }
            var data = ModelReaderWriter.Write(rehydrationToken, ModelReaderWriterOptions.Json, AzureResourceManagerWorkloadOrchestrationContext.Default);
            using var document = JsonDocument.Parse(data);
            var lroDetails = document.RootElement;
            return lroDetails.GetProperty("id").GetString();
        }
        /// <inheritdoc />
        public override string Id => _operationId ?? NextLinkOperationImplementation.NotSet;

        /// <inheritdoc />
        public override RehydrationToken? GetRehydrationToken() => _nextLinkOperation?.GetRehydrationToken() ?? _completeRehydrationToken;

        /// <inheritdoc />
        public override bool HasCompleted => _operation.HasCompleted;

        /// <inheritdoc />
        public override Response GetRawResponse() => _operation.RawResponse;

        /// <inheritdoc />
        public override Response UpdateStatus(CancellationToken cancellationToken = default) => _operation.UpdateStatus(cancellationToken);

        /// <inheritdoc />
        public override ValueTask<Response> UpdateStatusAsync(CancellationToken cancellationToken = default) => _operation.UpdateStatusAsync(cancellationToken);

        /// <inheritdoc />
        public override Response WaitForCompletionResponse(CancellationToken cancellationToken = default) => _operation.WaitForCompletionResponse(cancellationToken);

        /// <inheritdoc />
        public override Response WaitForCompletionResponse(TimeSpan pollingInterval, CancellationToken cancellationToken = default) => _operation.WaitForCompletionResponse(pollingInterval, cancellationToken);

        /// <inheritdoc />
        public override ValueTask<Response> WaitForCompletionResponseAsync(CancellationToken cancellationToken = default) => _operation.WaitForCompletionResponseAsync(cancellationToken);

        /// <inheritdoc />
        public override ValueTask<Response> WaitForCompletionResponseAsync(TimeSpan pollingInterval, CancellationToken cancellationToken = default) => _operation.WaitForCompletionResponseAsync(pollingInterval, cancellationToken);
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/LongRunningOperation/WorkloadOrchestrationArmOperationOfT.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.WorkloadOrchestration
{
#pragma warning disable SA1649 // File name should match first type name
    internal class WorkloadOrchestrationArmOperation<T> : ArmOperation<T>
#pragma warning restore SA1649 // File name should match first type name
    {
        private readonly OperationInternal<T> _operation;
        private readonly RehydrationToken? _completeRehydrationToken;
        private readonly NextLinkOperationImplementation _nextLinkOperation;
        private readonly string _operationId;

        /// <summary> Initializes a new instance of WorkloadOrchestrationArmOperation for mocking. </summary>
        protected WorkloadOrchestrationArmOperation()
        {
        }

        internal WorkloadOrchestrationArmOperation(Response<T> response, RehydrationToken? rehydrationToken = null)
        {
            _operation = OperationInternal<T>.Succeeded(response.GetRawResponse(), response.Value);
            _completeRehydrationToken = rehydrationToken;
            _operationId = GetOperationId(rehydrationToken);
        }

        internal WorkloadOrchestrationArmOperation(IOperationSource<T> source, ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Request request, Response response, OperationFinalStateVia finalStateVia, bool skipApiVersionOverride = false, string apiVersionOverrideValue = null)
        {
            var nextLinkOperation = NextLinkOperationImplementation.Create(pipeline, request.Method, request.Uri.ToUri(), response, finalStateVia, skipApiVersionOverride, apiVersionOverrideValue);
            if (nextLinkOperation is NextLinkOperationImplementation nextLinkOperationValue)
            {
                _nextLinkOperation = nextLinkOperationValue;
                _operationId = _nextLinkOperation.OperationId;
            }
            else
            {
                _completeRehydrationToken = NextLinkOperationImplementation.GetRehydrationToken(request.Method, request.Uri.ToUri(), response, finalStateVia);
                _operationId = GetOperationId(_completeRehydrationToken);
            }
            _operation = new OperationInternal<T>(NextLinkOperationImplementation.Create(source, nextLinkOperation), clientDiagnostics, response, "WorkloadOrchestrationArmOperation", fallbackStrategy: new SequentialDelayStrategy());
        }

        private string GetOperationId(RehydrationToken? rehydrationToken)
        {
            if (rehydrationToken is null)
            {
                return null;
            }
            var data = ModelReaderWriter.Write(rehydrationToken, ModelReaderWriterOptions.Json, AzureResourceManagerWorkloadOrchestrationContext.Default);
            using var document = JsonDocument.Parse(data);
            var lroDetails = document.RootElement;
            return lroDetails.GetProperty("id").GetString();
        }
        /// <inheritdoc />
        public override string Id => _operationId ?? NextLinkOperationImplementation.NotSet;

        /// <inheritdoc />
        public override RehydrationToken? GetRehydrationToken() => _nextLinkOperation?.GetRehydrationToken() ?? _completeRehydrationToken;

        /// <inheritdoc />
        public override T Value => _operation.Value;

        /// <inheritdoc />
        public override bool HasValue => _operation.HasValue;

        /// <inheritdoc />
        public override bool HasCompleted => _operation.HasCompleted;

        /// <inheritdoc />
        public override Response GetRawResponse() => _operation.RawResponse;

        /// <inheritdoc />
        public override Response UpdateStatus(CancellationToken cancellationToken = default) => _operation.UpdateStatus(cancellationToken);

        /// <inheritdoc />
        public override ValueTask<Response> UpdateStatusAsync(CancellationToken cancellationToken = default) => _operation.UpdateStatusAsync(cancellationToken);

        /// <inheritdoc />
        public override Response<T> WaitForCompletion(CancellationToken cancellationToken = default) => _operation.WaitForCompletion(cancellationToken);

        /// <inheritdoc />
        public override Response<T> WaitForCompletion(TimeSpan pollingInterval, CancellationToken cancellationToken = default) => _operation.WaitForCompletion(pollingInterval, cancellationToken);

        /// <inheritdoc />
        public override ValueTask<Response<T>> WaitForCompletionAsync(CancellationToken cancellationToken = default) => _operation.WaitForCompletionAsync(cancellationToken);

        /// <inheritdoc />
        public override ValueTask<Response<T>> WaitForCompletionAsync(TimeSpan pollingInterval, CancellationToken cancellationToken = default) => _operation.WaitForCompletionAsync(pollingInterval, cancellationToken);
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/AvailableSolutionTemplateVersion.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Available Solution template Version along with latest revision. </summary>
    public partial class AvailableSolutionTemplateVersion
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="AvailableSolutionTemplateVersion"/>. </summary>
        /// <param name="solutionTemplateVersion"> Solution template Version. </param>
        /// <param name="latestConfigRevision"> Latest Configuration Revision. </param>
        /// <param name="isConfigured"> Has this solution template version been configured. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionTemplateVersion"/> or <paramref name="latestConfigRevision"/> is null. </exception>
        internal AvailableSolutionTemplateVersion(string solutionTemplateVersion, string latestConfigRevision, bool isConfigured)
        {
            Argument.AssertNotNull(solutionTemplateVersion, nameof(solutionTemplateVersion));
            Argument.AssertNotNull(latestConfigRevision, nameof(latestConfigRevision));

            SolutionTemplateVersion = solutionTemplateVersion;
            LatestConfigRevision = latestConfigRevision;
            IsConfigured = isConfigured;
        }

        /// <summary> Initializes a new instance of <see cref="AvailableSolutionTemplateVersion"/>. </summary>
        /// <param name="solutionTemplateVersion"> Solution template Version. </param>
        /// <param name="latestConfigRevision"> Latest Configuration Revision. </param>
        /// <param name="isConfigured"> Has this solution template version been configured. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal AvailableSolutionTemplateVersion(string solutionTemplateVersion, string latestConfigRevision, bool isConfigured, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            SolutionTemplateVersion = solutionTemplateVersion;
            LatestConfigRevision = latestConfigRevision;
            IsConfigured = isConfigured;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="AvailableSolutionTemplateVersion"/> for deserialization. </summary>
        internal AvailableSolutionTemplateVersion()
        {
        }

        /// <summary> Solution template Version. </summary>
        public string SolutionTemplateVersion { get; }
        /// <summary> Latest Configuration Revision. </summary>
        public string LatestConfigRevision { get; }
        /// <summary> Has this solution template version been configured. </summary>
        public bool IsConfigured { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/AvailableSolutionTemplateVersion.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class AvailableSolutionTemplateVersion : IUtf8JsonSerializable, IJsonModel<AvailableSolutionTemplateVersion>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<AvailableSolutionTemplateVersion>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<AvailableSolutionTemplateVersion>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AvailableSolutionTemplateVersion>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AvailableSolutionTemplateVersion)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("solutionTemplateVersion"u8);
            writer.WriteStringValue(SolutionTemplateVersion);
            writer.WritePropertyName("latestConfigRevision"u8);
            writer.WriteStringValue(LatestConfigRevision);
            writer.WritePropertyName("isConfigured"u8);
            writer.WriteBooleanValue(IsConfigured);
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        AvailableSolutionTemplateVersion IJsonModel<AvailableSolutionTemplateVersion>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AvailableSolutionTemplateVersion>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AvailableSolutionTemplateVersion)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeAvailableSolutionTemplateVersion(document.RootElement, options);
        }

        internal static AvailableSolutionTemplateVersion DeserializeAvailableSolutionTemplateVersion(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string solutionTemplateVersion = default;
            string latestConfigRevision = default;
            bool isConfigured = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("solutionTemplateVersion"u8))
                {
                    solutionTemplateVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("latestConfigRevision"u8))
                {
                    latestConfigRevision = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("isConfigured"u8))
                {
                    isConfigured = property.Value.GetBoolean();
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new AvailableSolutionTemplateVersion(solutionTemplateVersion, latestConfigRevision, isConfigured, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<AvailableSolutionTemplateVersion>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AvailableSolutionTemplateVersion>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(AvailableSolutionTemplateVersion)} does not support writing '{options.Format}' format.");
            }
        }

        AvailableSolutionTemplateVersion IPersistableModel<AvailableSolutionTemplateVersion>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AvailableSolutionTemplateVersion>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeAvailableSolutionTemplateVersion(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(AvailableSolutionTemplateVersion)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<AvailableSolutionTemplateVersion>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/AzureResourceManagerWorkloadOrchestrationContext.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.ClientModel.Primitives;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// Context class which will be filled in by the System.ClientModel.SourceGeneration.
    /// For more information see 'https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/System.ClientModel/src/docs/ModelReaderWriterContext.md'
    /// </summary>
    [ModelReaderWriterBuildable(typeof(AvailableSolutionTemplateVersion))]
    [ModelReaderWriterBuildable(typeof(BulkDeploySolutionContent))]
    [ModelReaderWriterBuildable(typeof(BulkDeployTargetDetails))]
    [ModelReaderWriterBuildable(typeof(BulkPublishSolutionContent))]
    [ModelReaderWriterBuildable(typeof(BulkPublishTargetDetails))]
    [ModelReaderWriterBuildable(typeof(ConfigTemplateListResult))]
    [ModelReaderWriterBuildable(typeof(ConfigTemplateUpdateProperties))]
    [ModelReaderWriterBuildable(typeof(ConfigTemplateVersionListResult))]
    [ModelReaderWriterBuildable(typeof(ConfigTemplateVersionWithUpdateType))]
    [ModelReaderWriterBuildable(typeof(ContextCapability))]
    [ModelReaderWriterBuildable(typeof(ContextHierarchy))]
    [ModelReaderWriterBuildable(typeof(ContextListResult))]
    [ModelReaderWriterBuildable(typeof(DeployJobContent))]
    [ModelReaderWriterBuildable(typeof(DeployJobStepStatistics))]
    [ModelReaderWriterBuildable(typeof(DiagnosticListResult))]
    [ModelReaderWriterBuildable(typeof(DynamicSchemaListResult))]
    [ModelReaderWriterBuildable(typeof(DynamicSchemaVersionListResult))]
    [ModelReaderWriterBuildable(typeof(EdgeConfigTemplateData))]
    [ModelReaderWriterBuildable(typeof(EdgeConfigTemplatePatch))]
    [ModelReaderWriterBuildable(typeof(EdgeConfigTemplateProperties))]
    [ModelReaderWriterBuildable(typeof(EdgeConfigTemplateResource))]
    [ModelReaderWriterBuildable(typeof(EdgeConfigTemplateVersionData))]
    [ModelReaderWriterBuildable(typeof(EdgeConfigTemplateVersionProperties))]
    [ModelReaderWriterBuildable(typeof(EdgeConfigTemplateVersionResource))]
    [ModelReaderWriterBuildable(typeof(EdgeContextData))]
    [ModelReaderWriterBuildable(typeof(EdgeContextPatch))]
    [ModelReaderWriterBuildable(typeof(EdgeContextPatchProperties))]
    [ModelReaderWriterBuildable(typeof(EdgeContextProperties))]
    [ModelReaderWriterBuildable(typeof(EdgeContextResource))]
    [ModelReaderWriterBuildable(typeof(EdgeDeploymentInstanceData))]
    [ModelReaderWriterBuildable(typeof(EdgeDeploymentInstanceHistoryData))]
    [ModelReaderWriterBuildable(typeof(EdgeDeploymentInstanceHistoryProperties))]
    [ModelReaderWriterBuildable(typeof(EdgeDeploymentInstanceHistoryResource))]
    [ModelReaderWriterBuildable(typeof(EdgeDeploymentInstanceProperties))]
    [ModelReaderWriterBuildable(typeof(EdgeDeploymentInstanceResource))]
    [ModelReaderWriterBuildable(typeof(EdgeDeploymentStatus))]
    [ModelReaderWriterBuildable(typeof(EdgeDiagnosticData))]
    [ModelReaderWriterBuildable(typeof(EdgeDiagnosticPatch))]
    [ModelReaderWriterBuildable(typeof(EdgeDiagnosticPatchProperties))]
    [ModelReaderWriterBuildable(typeof(EdgeDiagnosticProperties))]
    [ModelReaderWriterBuildable(typeof(EdgeDiagnosticResource))]
    [ModelReaderWriterBuildable(typeof(EdgeDynamicSchemaData))]
    [ModelReaderWriterBuildable(typeof(EdgeDynamicSchemaProperties))]
    [ModelReaderWriterBuildable(typeof(EdgeDynamicSchemaResource))]
    [ModelReaderWriterBuildable(typeof(EdgeDynamicSchemaVersionData))]
    [ModelReaderWriterBuildable(typeof(EdgeDynamicSchemaVersionResource))]
    [ModelReaderWriterBuildable(typeof(EdgeExecutionData))]
    [ModelReaderWriterBuildable(typeof(EdgeExecutionProperties))]
    [ModelReaderWriterBuildable(typeof(EdgeExecutionResource))]
    [ModelReaderWriterBuildable(typeof(EdgeExecutionStageStatus))]
    [ModelReaderWriterBuildable(typeof(EdgeExecutionStatus))]
    [ModelReaderWriterBuildable(typeof(EdgeJobContent))]
    [ModelReaderWriterBuildable(typeof(EdgeJobData))]
    [ModelReaderWriterBuildable(typeof(EdgeJobProperties))]
    [ModelReaderWriterBuildable(typeof(EdgeJobResource))]
    [ModelReaderWriterBuildable(typeof(EdgeJobStep))]
    [ModelReaderWriterBuildable(typeof(EdgeJobStepStatistics))]
    [ModelReaderWriterBuildable(typeof(EdgeSchemaData))]
    [ModelReaderWriterBuildable(typeof(EdgeSchemaPatch))]
    [ModelReaderWriterBuildable(typeof(EdgeSchemaPatchProperties))]
    [ModelReaderWriterBuildable(typeof(EdgeSchemaProperties))]
    [ModelReaderWriterBuildable(typeof(EdgeSchemaReferenceData))]
    [ModelReaderWriterBuildable(typeof(EdgeSchemaReferenceProperties))]
    [ModelReaderWriterBuildable(typeof(EdgeSchemaReferenceResource))]
    [ModelReaderWriterBuildable(typeof(EdgeSchemaResource))]
    [ModelReaderWriterBuildable(typeof(EdgeSchemaVersionData))]
    [ModelReaderWriterBuildable(typeof(EdgeSchemaVersionProperties))]
    [ModelReaderWriterBuildable(typeof(EdgeSchemaVersionResource))]
    [ModelReaderWriterBuildable(typeof(EdgeSchemaVersionWithUpdateType))]
    [ModelReaderWriterBuildable(typeof(EdgeSiteReferenceData))]
    [ModelReaderWriterBuildable(typeof(EdgeSiteReferenceProperties))]
    [ModelReaderWriterBuildable(typeof(EdgeSiteReferenceResource))]
    [ModelReaderWriterBuildable(typeof(EdgeSolutionData))]
    [ModelReaderWriterBuildable(typeof(EdgeSolutionDependency))]
    [ModelReaderWriterBuildable(typeof(EdgeSolutionDependencyContent))]
    [ModelReaderWriterBuildable(typeof(EdgeSolutionPatch))]
    [ModelReaderWriterBuildable(typeof(EdgeSolutionPatchProperties))]
    [ModelReaderWriterBuildable(typeof(EdgeSolutionProperties))]
    [ModelReaderWriterBuildable(typeof(EdgeSolutionResource))]
    [ModelReaderWriterBuildable(typeof(EdgeSolutionTemplateContent))]
    [ModelReaderWriterBuildable(typeof(EdgeSolutionTemplateData))]
    [ModelReaderWriterBuildable(typeof(EdgeSolutionTemplatePatch))]
    [ModelReaderWriterBuildable(typeof(EdgeSolutionTemplatePatchProperties))]
    [ModelReaderWriterBuildable(typeof(EdgeSolutionTemplateProperties))]
    [ModelReaderWriterBuildable(typeof(EdgeSolutionTemplateResource))]
    [ModelReaderWriterBuildable(typeof(EdgeSolutionTemplateVersionData))]
    [ModelReaderWriterBuildable(typeof(EdgeSolutionTemplateVersionProperties))]
    [ModelReaderWriterBuildable(typeof(EdgeSolutionTemplateVersionResource))]
    [ModelReaderWriterBuildable(typeof(EdgeSolutionTemplateVersionWithUpdateType))]
    [ModelReaderWriterBuildable(typeof(EdgeSolutionVersionContent))]
    [ModelReaderWriterBuildable(typeof(EdgeSolutionVersionData))]
    [ModelReaderWriterBuildable(typeof(EdgeSolutionVersionProperties))]
    [ModelReaderWriterBuildable(typeof(EdgeSolutionVersionResource))]
    [ModelReaderWriterBuildable(typeof(EdgeTargetData))]
    [ModelReaderWriterBuildable(typeof(EdgeTargetPatch))]
    [ModelReaderWriterBuildable(typeof(EdgeTargetPatchProperties))]
    [ModelReaderWriterBuildable(typeof(EdgeTargetProperties))]
    [ModelReaderWriterBuildable(typeof(EdgeTargetResource))]
    [ModelReaderWriterBuildable(typeof(EdgeTargetSnapshot))]
    [ModelReaderWriterBuildable(typeof(EdgeTargetStatus))]
    [ModelReaderWriterBuildable(typeof(EdgeVersionContent))]
    [ModelReaderWriterBuildable(typeof(EdgeWorkflowData))]
    [ModelReaderWriterBuildable(typeof(EdgeWorkflowProperties))]
    [ModelReaderWriterBuildable(typeof(EdgeWorkflowResource))]
    [ModelReaderWriterBuildable(typeof(EdgeWorkflowStageSpec))]
    [ModelReaderWriterBuildable(typeof(EdgeWorkflowTaskConfig))]
    [ModelReaderWriterBuildable(typeof(EdgeWorkflowTaskSpec))]
    [ModelReaderWriterBuildable(typeof(EdgeWorkflowVersionData))]
    [ModelReaderWriterBuildable(typeof(EdgeWorkflowVersionProperties))]
    [ModelReaderWriterBuildable(typeof(EdgeWorkflowVersionResource))]
    [ModelReaderWriterBuildable(typeof(ExecutionListResult))]
    [ModelReaderWriterBuildable(typeof(ExtendedLocation))]
    [ModelReaderWriterBuildable(typeof(InstallSolutionContent))]
    [ModelReaderWriterBuildable(typeof(InstanceHistoryListResult))]
    [ModelReaderWriterBuildable(typeof(InstanceListResult))]
    [ModelReaderWriterBuildable(typeof(InstanceReconciliationPolicy))]
    [ModelReaderWriterBuildable(typeof(JobListResult))]
    [ModelReaderWriterBuildable(typeof(RemoveRevisionContent))]
    [ModelReaderWriterBuildable(typeof(RemoveVersionResult))]
    [ModelReaderWriterBuildable(typeof(ResolvedConfiguration))]
    [ModelReaderWriterBuildable(typeof(ResponseError))]
    [ModelReaderWriterBuildable(typeof(SchemaListResult))]
    [ModelReaderWriterBuildable(typeof(SchemaReferenceListResult))]
    [ModelReaderWriterBuildable(typeof(SchemaVersionListResult))]
    [ModelReaderWriterBuildable(typeof(SiteReferenceListResult))]
    [ModelReaderWriterBuildable(typeof(SolutionListResult))]
    [ModelReaderWriterBuildable(typeof(SolutionTemplateListResult))]
    [ModelReaderWriterBuildable(typeof(SolutionTemplateVersionListResult))]
    [ModelReaderWriterBuildable(typeof(SolutionVersionListResult))]
    [ModelReaderWriterBuildable(typeof(SolutionVersionSnapshot))]
    [ModelReaderWriterBuildable(typeof(SystemData))]
    [ModelReaderWriterBuildable(typeof(TargetComponentStatus))]
    [ModelReaderWriterBuildable(typeof(TargetListResult))]
    [ModelReaderWriterBuildable(typeof(TaskErrorAction))]
    [ModelReaderWriterBuildable(typeof(UninstallSolutionContent))]
    [ModelReaderWriterBuildable(typeof(UnknownEdgeJobContent))]
    [ModelReaderWriterBuildable(typeof(UnknownEdgeJobStepStatistics))]
    [ModelReaderWriterBuildable(typeof(UpdateExternalValidationStatusContent))]
    [ModelReaderWriterBuildable(typeof(WorkflowListResult))]
    [ModelReaderWriterBuildable(typeof(WorkflowVersionListResult))]
    public partial class AzureResourceManagerWorkloadOrchestrationContext : ModelReaderWriterContext
    {
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/BulkDeploySolutionContent.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Bulk deploy solution parameter. </summary>
    public partial class BulkDeploySolutionContent
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="BulkDeploySolutionContent"/>. </summary>
        /// <param name="targets"> Targets to which solution needs to be deployed. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="targets"/> is null. </exception>
        public BulkDeploySolutionContent(IEnumerable<BulkDeployTargetDetails> targets)
        {
            Argument.AssertNotNull(targets, nameof(targets));

            Targets = targets.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="BulkDeploySolutionContent"/>. </summary>
        /// <param name="targets"> Targets to which solution needs to be deployed. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal BulkDeploySolutionContent(IList<BulkDeployTargetDetails> targets, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Targets = targets;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="BulkDeploySolutionContent"/> for deserialization. </summary>
        internal BulkDeploySolutionContent()
        {
        }

        /// <summary> Targets to which solution needs to be deployed. </summary>
        public IList<BulkDeployTargetDetails> Targets { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/BulkDeploySolutionContent.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class BulkDeploySolutionContent : IUtf8JsonSerializable, IJsonModel<BulkDeploySolutionContent>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<BulkDeploySolutionContent>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<BulkDeploySolutionContent>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BulkDeploySolutionContent>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(BulkDeploySolutionContent)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("targets"u8);
            writer.WriteStartArray();
            foreach (var item in Targets)
            {
                writer.WriteObjectValue(item, options);
            }
            writer.WriteEndArray();
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        BulkDeploySolutionContent IJsonModel<BulkDeploySolutionContent>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BulkDeploySolutionContent>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(BulkDeploySolutionContent)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeBulkDeploySolutionContent(document.RootElement, options);
        }

        internal static BulkDeploySolutionContent DeserializeBulkDeploySolutionContent(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IList<BulkDeployTargetDetails> targets = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("targets"u8))
                {
                    List<BulkDeployTargetDetails> array = new List<BulkDeployTargetDetails>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(BulkDeployTargetDetails.DeserializeBulkDeployTargetDetails(item, options));
                    }
                    targets = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new BulkDeploySolutionContent(targets, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<BulkDeploySolutionContent>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BulkDeploySolutionContent>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(BulkDeploySolutionContent)} does not support writing '{options.Format}' format.");
            }
        }

        BulkDeploySolutionContent IPersistableModel<BulkDeploySolutionContent>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BulkDeploySolutionContent>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeBulkDeploySolutionContent(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(BulkDeploySolutionContent)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<BulkDeploySolutionContent>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/BulkDeployTargetDetails.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Bulk deploy target details. </summary>
    public partial class BulkDeployTargetDetails
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="BulkDeployTargetDetails"/>. </summary>
        /// <param name="solutionVersionId"> ArmId of Target Solution Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionVersionId"/> is null. </exception>
        public BulkDeployTargetDetails(ResourceIdentifier solutionVersionId)
        {
            Argument.AssertNotNull(solutionVersionId, nameof(solutionVersionId));

            SolutionVersionId = solutionVersionId;
        }

        /// <summary> Initializes a new instance of <see cref="BulkDeployTargetDetails"/>. </summary>
        /// <param name="solutionVersionId"> ArmId of Target Solution Version. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal BulkDeployTargetDetails(ResourceIdentifier solutionVersionId, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            SolutionVersionId = solutionVersionId;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="BulkDeployTargetDetails"/> for deserialization. </summary>
        internal BulkDeployTargetDetails()
        {
        }

        /// <summary> ArmId of Target Solution Version. </summary>
        public ResourceIdentifier SolutionVersionId { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/BulkDeployTargetDetails.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class BulkDeployTargetDetails : IUtf8JsonSerializable, IJsonModel<BulkDeployTargetDetails>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<BulkDeployTargetDetails>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<BulkDeployTargetDetails>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BulkDeployTargetDetails>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(BulkDeployTargetDetails)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("solutionVersionId"u8);
            writer.WriteStringValue(SolutionVersionId);
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        BulkDeployTargetDetails IJsonModel<BulkDeployTargetDetails>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BulkDeployTargetDetails>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(BulkDeployTargetDetails)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeBulkDeployTargetDetails(document.RootElement, options);
        }

        internal static BulkDeployTargetDetails DeserializeBulkDeployTargetDetails(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceIdentifier solutionVersionId = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("solutionVersionId"u8))
                {
                    solutionVersionId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new BulkDeployTargetDetails(solutionVersionId, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<BulkDeployTargetDetails>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BulkDeployTargetDetails>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(BulkDeployTargetDetails)} does not support writing '{options.Format}' format.");
            }
        }

        BulkDeployTargetDetails IPersistableModel<BulkDeployTargetDetails>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BulkDeployTargetDetails>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeBulkDeployTargetDetails(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(BulkDeployTargetDetails)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<BulkDeployTargetDetails>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/BulkPublishSolutionContent.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Bulk publish solution parameter. </summary>
    public partial class BulkPublishSolutionContent
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="BulkPublishSolutionContent"/>. </summary>
        /// <param name="targets"> Targets to which solution needs to be published. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="targets"/> is null. </exception>
        public BulkPublishSolutionContent(IEnumerable<BulkPublishTargetDetails> targets)
        {
            Argument.AssertNotNull(targets, nameof(targets));

            Targets = targets.ToList();
            SolutionDependencies = new ChangeTrackingList<EdgeSolutionDependencyContent>();
        }

        /// <summary> Initializes a new instance of <see cref="BulkPublishSolutionContent"/>. </summary>
        /// <param name="targets"> Targets to which solution needs to be published. </param>
        /// <param name="solutionInstanceName"> Name of the solution instance. </param>
        /// <param name="solutionDependencies"> Solution dependencies. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal BulkPublishSolutionContent(IList<BulkPublishTargetDetails> targets, string solutionInstanceName, IList<EdgeSolutionDependencyContent> solutionDependencies, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Targets = targets;
            SolutionInstanceName = solutionInstanceName;
            SolutionDependencies = solutionDependencies;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="BulkPublishSolutionContent"/> for deserialization. </summary>
        internal BulkPublishSolutionContent()
        {
        }

        /// <summary> Targets to which solution needs to be published. </summary>
        public IList<BulkPublishTargetDetails> Targets { get; }
        /// <summary> Name of the solution instance. </summary>
        public string SolutionInstanceName { get; set; }
        /// <summary> Solution dependencies. </summary>
        public IList<EdgeSolutionDependencyContent> SolutionDependencies { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/BulkPublishSolutionContent.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class BulkPublishSolutionContent : IUtf8JsonSerializable, IJsonModel<BulkPublishSolutionContent>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<BulkPublishSolutionContent>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<BulkPublishSolutionContent>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BulkPublishSolutionContent>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(BulkPublishSolutionContent)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("targets"u8);
            writer.WriteStartArray();
            foreach (var item in Targets)
            {
                writer.WriteObjectValue(item, options);
            }
            writer.WriteEndArray();
            if (Optional.IsDefined(SolutionInstanceName))
            {
                writer.WritePropertyName("solutionInstanceName"u8);
                writer.WriteStringValue(SolutionInstanceName);
            }
            if (Optional.IsCollectionDefined(SolutionDependencies))
            {
                writer.WritePropertyName("solutionDependencies"u8);
                writer.WriteStartArray();
                foreach (var item in SolutionDependencies)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        BulkPublishSolutionContent IJsonModel<BulkPublishSolutionContent>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BulkPublishSolutionContent>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(BulkPublishSolutionContent)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeBulkPublishSolutionContent(document.RootElement, options);
        }

        internal static BulkPublishSolutionContent DeserializeBulkPublishSolutionContent(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IList<BulkPublishTargetDetails> targets = default;
            string solutionInstanceName = default;
            IList<EdgeSolutionDependencyContent> solutionDependencies = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("targets"u8))
                {
                    List<BulkPublishTargetDetails> array = new List<BulkPublishTargetDetails>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(BulkPublishTargetDetails.DeserializeBulkPublishTargetDetails(item, options));
                    }
                    targets = array;
                    continue;
                }
                if (property.NameEquals("solutionInstanceName"u8))
                {
                    solutionInstanceName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("solutionDependencies"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<EdgeSolutionDependencyContent> array = new List<EdgeSolutionDependencyContent>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(EdgeSolutionDependencyContent.DeserializeEdgeSolutionDependencyContent(item, options));
                    }
                    solutionDependencies = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new BulkPublishSolutionContent(targets, solutionInstanceName, solutionDependencies ?? new ChangeTrackingList<EdgeSolutionDependencyContent>(), serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<BulkPublishSolutionContent>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BulkPublishSolutionContent>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(BulkPublishSolutionContent)} does not support writing '{options.Format}' format.");
            }
        }

        BulkPublishSolutionContent IPersistableModel<BulkPublishSolutionContent>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BulkPublishSolutionContent>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeBulkPublishSolutionContent(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(BulkPublishSolutionContent)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<BulkPublishSolutionContent>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/BulkPublishTargetDetails.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Bulk publish target details. </summary>
    public partial class BulkPublishTargetDetails
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="BulkPublishTargetDetails"/>. </summary>
        /// <param name="targetId"> ArmId of Target. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="targetId"/> is null. </exception>
        public BulkPublishTargetDetails(ResourceIdentifier targetId)
        {
            Argument.AssertNotNull(targetId, nameof(targetId));

            TargetId = targetId;
        }

        /// <summary> Initializes a new instance of <see cref="BulkPublishTargetDetails"/>. </summary>
        /// <param name="targetId"> ArmId of Target. </param>
        /// <param name="solutionInstanceName"> Name of the solution instance. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal BulkPublishTargetDetails(ResourceIdentifier targetId, string solutionInstanceName, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            TargetId = targetId;
            SolutionInstanceName = solutionInstanceName;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="BulkPublishTargetDetails"/> for deserialization. </summary>
        internal BulkPublishTargetDetails()
        {
        }

        /// <summary> ArmId of Target. </summary>
        public ResourceIdentifier TargetId { get; }
        /// <summary> Name of the solution instance. </summary>
        public string SolutionInstanceName { get; set; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/BulkPublishTargetDetails.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class BulkPublishTargetDetails : IUtf8JsonSerializable, IJsonModel<BulkPublishTargetDetails>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<BulkPublishTargetDetails>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<BulkPublishTargetDetails>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BulkPublishTargetDetails>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(BulkPublishTargetDetails)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("targetId"u8);
            writer.WriteStringValue(TargetId);
            if (Optional.IsDefined(SolutionInstanceName))
            {
                writer.WritePropertyName("solutionInstanceName"u8);
                writer.WriteStringValue(SolutionInstanceName);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        BulkPublishTargetDetails IJsonModel<BulkPublishTargetDetails>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BulkPublishTargetDetails>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(BulkPublishTargetDetails)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeBulkPublishTargetDetails(document.RootElement, options);
        }

        internal static BulkPublishTargetDetails DeserializeBulkPublishTargetDetails(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceIdentifier targetId = default;
            string solutionInstanceName = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("targetId"u8))
                {
                    targetId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("solutionInstanceName"u8))
                {
                    solutionInstanceName = property.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new BulkPublishTargetDetails(targetId, solutionInstanceName, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<BulkPublishTargetDetails>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BulkPublishTargetDetails>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(BulkPublishTargetDetails)} does not support writing '{options.Format}' format.");
            }
        }

        BulkPublishTargetDetails IPersistableModel<BulkPublishTargetDetails>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BulkPublishTargetDetails>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeBulkPublishTargetDetails(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(BulkPublishTargetDetails)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<BulkPublishTargetDetails>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/ConfigTemplateListResult.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> The response of a ConfigTemplate list operation. </summary>
    internal partial class ConfigTemplateListResult
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ConfigTemplateListResult"/>. </summary>
        /// <param name="value"> The ConfigTemplate items on this page. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        internal ConfigTemplateListResult(IEnumerable<EdgeConfigTemplateData> value)
        {
            Argument.AssertNotNull(value, nameof(value));

            Value = value.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="ConfigTemplateListResult"/>. </summary>
        /// <param name="value"> The ConfigTemplate items on this page. </param>
        /// <param name="nextLink"> The link to the next page of items. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ConfigTemplateListResult(IReadOnlyList<EdgeConfigTemplateData> value, Uri nextLink, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Value = value;
            NextLink = nextLink;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="ConfigTemplateListResult"/> for deserialization. </summary>
        internal ConfigTemplateListResult()
        {
        }

        /// <summary> The ConfigTemplate items on this page. </summary>
        public IReadOnlyList<EdgeConfigTemplateData> Value { get; }
        /// <summary> The link to the next page of items. </summary>
        public Uri NextLink { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/ConfigTemplateListResult.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    internal partial class ConfigTemplateListResult : IUtf8JsonSerializable, IJsonModel<ConfigTemplateListResult>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ConfigTemplateListResult>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<ConfigTemplateListResult>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ConfigTemplateListResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ConfigTemplateListResult)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("value"u8);
            writer.WriteStartArray();
            foreach (var item in Value)
            {
                writer.WriteObjectValue(item, options);
            }
            writer.WriteEndArray();
            if (Optional.IsDefined(NextLink))
            {
                writer.WritePropertyName("nextLink"u8);
                writer.WriteStringValue(NextLink.AbsoluteUri);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        ConfigTemplateListResult IJsonModel<ConfigTemplateListResult>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ConfigTemplateListResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ConfigTemplateListResult)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeConfigTemplateListResult(document.RootElement, options);
        }

        internal static ConfigTemplateListResult DeserializeConfigTemplateListResult(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IReadOnlyList<EdgeConfigTemplateData> value = default;
            Uri nextLink = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("value"u8))
                {
                    List<EdgeConfigTemplateData> array = new List<EdgeConfigTemplateData>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(EdgeConfigTemplateData.DeserializeEdgeConfigTemplateData(item, options));
                    }
                    value = array;
                    continue;
                }
                if (property.NameEquals("nextLink"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    nextLink = new Uri(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new ConfigTemplateListResult(value, nextLink, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<ConfigTemplateListResult>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ConfigTemplateListResult>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(ConfigTemplateListResult)} does not support writing '{options.Format}' format.");
            }
        }

        ConfigTemplateListResult IPersistableModel<ConfigTemplateListResult>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ConfigTemplateListResult>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeConfigTemplateListResult(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ConfigTemplateListResult)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<ConfigTemplateListResult>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/ConfigTemplateUpdateProperties.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> The updatable properties of the ConfigTemplate. </summary>
    internal partial class ConfigTemplateUpdateProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ConfigTemplateUpdateProperties"/>. </summary>
        public ConfigTemplateUpdateProperties()
        {
        }

        /// <summary> Initializes a new instance of <see cref="ConfigTemplateUpdateProperties"/>. </summary>
        /// <param name="description"> Description of config template. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ConfigTemplateUpdateProperties(string description, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Description = description;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Description of config template. </summary>
        public string Description { get; set; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/ConfigTemplateUpdateProperties.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    internal partial class ConfigTemplateUpdateProperties : IUtf8JsonSerializable, IJsonModel<ConfigTemplateUpdateProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ConfigTemplateUpdateProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<ConfigTemplateUpdateProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ConfigTemplateUpdateProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ConfigTemplateUpdateProperties)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description"u8);
                writer.WriteStringValue(Description);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        ConfigTemplateUpdateProperties IJsonModel<ConfigTemplateUpdateProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ConfigTemplateUpdateProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ConfigTemplateUpdateProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeConfigTemplateUpdateProperties(document.RootElement, options);
        }

        internal static ConfigTemplateUpdateProperties DeserializeConfigTemplateUpdateProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string description = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("description"u8))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new ConfigTemplateUpdateProperties(description, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<ConfigTemplateUpdateProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ConfigTemplateUpdateProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(ConfigTemplateUpdateProperties)} does not support writing '{options.Format}' format.");
            }
        }

        ConfigTemplateUpdateProperties IPersistableModel<ConfigTemplateUpdateProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ConfigTemplateUpdateProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeConfigTemplateUpdateProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ConfigTemplateUpdateProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<ConfigTemplateUpdateProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/ConfigTemplateVersionListResult.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> The response of a ConfigTemplateVersion list operation. </summary>
    internal partial class ConfigTemplateVersionListResult
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ConfigTemplateVersionListResult"/>. </summary>
        /// <param name="value"> The ConfigTemplateVersion items on this page. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        internal ConfigTemplateVersionListResult(IEnumerable<EdgeConfigTemplateVersionData> value)
        {
            Argument.AssertNotNull(value, nameof(value));

            Value = value.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="ConfigTemplateVersionListResult"/>. </summary>
        /// <param name="value"> The ConfigTemplateVersion items on this page. </param>
        /// <param name="nextLink"> The link to the next page of items. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ConfigTemplateVersionListResult(IReadOnlyList<EdgeConfigTemplateVersionData> value, Uri nextLink, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Value = value;
            NextLink = nextLink;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="ConfigTemplateVersionListResult"/> for deserialization. </summary>
        internal ConfigTemplateVersionListResult()
        {
        }

        /// <summary> The ConfigTemplateVersion items on this page. </summary>
        public IReadOnlyList<EdgeConfigTemplateVersionData> Value { get; }
        /// <summary> The link to the next page of items. </summary>
        public Uri NextLink { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/ConfigTemplateVersionListResult.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    internal partial class ConfigTemplateVersionListResult : IUtf8JsonSerializable, IJsonModel<ConfigTemplateVersionListResult>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ConfigTemplateVersionListResult>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<ConfigTemplateVersionListResult>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ConfigTemplateVersionListResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ConfigTemplateVersionListResult)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("value"u8);
            writer.WriteStartArray();
            foreach (var item in Value)
            {
                writer.WriteObjectValue(item, options);
            }
            writer.WriteEndArray();
            if (Optional.IsDefined(NextLink))
            {
                writer.WritePropertyName("nextLink"u8);
                writer.WriteStringValue(NextLink.AbsoluteUri);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        ConfigTemplateVersionListResult IJsonModel<ConfigTemplateVersionListResult>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ConfigTemplateVersionListResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ConfigTemplateVersionListResult)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeConfigTemplateVersionListResult(document.RootElement, options);
        }

        internal static ConfigTemplateVersionListResult DeserializeConfigTemplateVersionListResult(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IReadOnlyList<EdgeConfigTemplateVersionData> value = default;
            Uri nextLink = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("value"u8))
                {
                    List<EdgeConfigTemplateVersionData> array = new List<EdgeConfigTemplateVersionData>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(EdgeConfigTemplateVersionData.DeserializeEdgeConfigTemplateVersionData(item, options));
                    }
                    value = array;
                    continue;
                }
                if (property.NameEquals("nextLink"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    nextLink = new Uri(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new ConfigTemplateVersionListResult(value, nextLink, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<ConfigTemplateVersionListResult>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ConfigTemplateVersionListResult>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(ConfigTemplateVersionListResult)} does not support writing '{options.Format}' format.");
            }
        }

        ConfigTemplateVersionListResult IPersistableModel<ConfigTemplateVersionListResult>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ConfigTemplateVersionListResult>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeConfigTemplateVersionListResult(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ConfigTemplateVersionListResult)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<ConfigTemplateVersionListResult>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/ConfigTemplateVersionWithUpdateType.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Config Template Version With Update Type. </summary>
    public partial class ConfigTemplateVersionWithUpdateType
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ConfigTemplateVersionWithUpdateType"/>. </summary>
        /// <param name="configTemplateVersion"> Config Template Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="configTemplateVersion"/> is null. </exception>
        public ConfigTemplateVersionWithUpdateType(EdgeConfigTemplateVersionData configTemplateVersion)
        {
            Argument.AssertNotNull(configTemplateVersion, nameof(configTemplateVersion));

            ConfigTemplateVersion = configTemplateVersion;
        }

        /// <summary> Initializes a new instance of <see cref="ConfigTemplateVersionWithUpdateType"/>. </summary>
        /// <param name="updateType"> Update type. </param>
        /// <param name="version"> Version to create. </param>
        /// <param name="configTemplateVersion"> Config Template Version. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ConfigTemplateVersionWithUpdateType(EdgeUpdateType? updateType, string version, EdgeConfigTemplateVersionData configTemplateVersion, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            UpdateType = updateType;
            Version = version;
            ConfigTemplateVersion = configTemplateVersion;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="ConfigTemplateVersionWithUpdateType"/> for deserialization. </summary>
        internal ConfigTemplateVersionWithUpdateType()
        {
        }

        /// <summary> Update type. </summary>
        public EdgeUpdateType? UpdateType { get; set; }
        /// <summary> Version to create. </summary>
        public string Version { get; set; }
        /// <summary> Config Template Version. </summary>
        public EdgeConfigTemplateVersionData ConfigTemplateVersion { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/ConfigTemplateVersionWithUpdateType.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class ConfigTemplateVersionWithUpdateType : IUtf8JsonSerializable, IJsonModel<ConfigTemplateVersionWithUpdateType>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ConfigTemplateVersionWithUpdateType>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<ConfigTemplateVersionWithUpdateType>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ConfigTemplateVersionWithUpdateType>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ConfigTemplateVersionWithUpdateType)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(UpdateType))
            {
                writer.WritePropertyName("updateType"u8);
                writer.WriteStringValue(UpdateType.Value.ToString());
            }
            if (Optional.IsDefined(Version))
            {
                writer.WritePropertyName("version"u8);
                writer.WriteStringValue(Version);
            }
            writer.WritePropertyName("configTemplateVersion"u8);
            writer.WriteObjectValue(ConfigTemplateVersion, options);
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        ConfigTemplateVersionWithUpdateType IJsonModel<ConfigTemplateVersionWithUpdateType>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ConfigTemplateVersionWithUpdateType>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ConfigTemplateVersionWithUpdateType)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeConfigTemplateVersionWithUpdateType(document.RootElement, options);
        }

        internal static ConfigTemplateVersionWithUpdateType DeserializeConfigTemplateVersionWithUpdateType(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            EdgeUpdateType? updateType = default;
            string version = default;
            EdgeConfigTemplateVersionData configTemplateVersion = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("updateType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    updateType = new EdgeUpdateType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("version"u8))
                {
                    version = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("configTemplateVersion"u8))
                {
                    configTemplateVersion = EdgeConfigTemplateVersionData.DeserializeEdgeConfigTemplateVersionData(property.Value, options);
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new ConfigTemplateVersionWithUpdateType(updateType, version, configTemplateVersion, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<ConfigTemplateVersionWithUpdateType>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ConfigTemplateVersionWithUpdateType>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(ConfigTemplateVersionWithUpdateType)} does not support writing '{options.Format}' format.");
            }
        }

        ConfigTemplateVersionWithUpdateType IPersistableModel<ConfigTemplateVersionWithUpdateType>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ConfigTemplateVersionWithUpdateType>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeConfigTemplateVersionWithUpdateType(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ConfigTemplateVersionWithUpdateType)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<ConfigTemplateVersionWithUpdateType>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/ContextCapability.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Capability, to match in Solution Templates and Targets. </summary>
    public partial class ContextCapability
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ContextCapability"/>. </summary>
        /// <param name="name"> Name of Capability. </param>
        /// <param name="description"> Description of Capability. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="description"/> is null. </exception>
        public ContextCapability(string name, string description)
        {
            Argument.AssertNotNull(name, nameof(name));
            Argument.AssertNotNull(description, nameof(description));

            Name = name;
            Description = description;
        }

        /// <summary> Initializes a new instance of <see cref="ContextCapability"/>. </summary>
        /// <param name="name"> Name of Capability. </param>
        /// <param name="description"> Description of Capability. </param>
        /// <param name="state"> State of resource. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ContextCapability(string name, string description, EdgeResourceState? state, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Name = name;
            Description = description;
            State = state;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="ContextCapability"/> for deserialization. </summary>
        internal ContextCapability()
        {
        }

        /// <summary> Name of Capability. </summary>
        public string Name { get; set; }
        /// <summary> Description of Capability. </summary>
        public string Description { get; set; }
        /// <summary> State of resource. </summary>
        public EdgeResourceState? State { get; set; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/ContextCapability.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class ContextCapability : IUtf8JsonSerializable, IJsonModel<ContextCapability>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ContextCapability>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<ContextCapability>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ContextCapability>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ContextCapability)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("name"u8);
            writer.WriteStringValue(Name);
            writer.WritePropertyName("description"u8);
            writer.WriteStringValue(Description);
            if (Optional.IsDefined(State))
            {
                writer.WritePropertyName("state"u8);
                writer.WriteStringValue(State.Value.ToString());
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        ContextCapability IJsonModel<ContextCapability>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ContextCapability>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ContextCapability)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeContextCapability(document.RootElement, options);
        }

        internal static ContextCapability DeserializeContextCapability(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string name = default;
            string description = default;
            EdgeResourceState? state = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("description"u8))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("state"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    state = new EdgeResourceState(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new ContextCapability(name, description, state, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<ContextCapability>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ContextCapability>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(ContextCapability)} does not support writing '{options.Format}' format.");
            }
        }

        ContextCapability IPersistableModel<ContextCapability>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ContextCapability>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeContextCapability(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ContextCapability)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<ContextCapability>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/ContextHierarchy.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Hierarchy, to tag Sites / Hierarchy Provider nodes with what they represent. </summary>
    public partial class ContextHierarchy
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ContextHierarchy"/>. </summary>
        /// <param name="name"> Name of Hierarchy. </param>
        /// <param name="description"> Description of Hierarchy. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="description"/> is null. </exception>
        public ContextHierarchy(string name, string description)
        {
            Argument.AssertNotNull(name, nameof(name));
            Argument.AssertNotNull(description, nameof(description));

            Name = name;
            Description = description;
        }

        /// <summary> Initializes a new instance of <see cref="ContextHierarchy"/>. </summary>
        /// <param name="name"> Name of Hierarchy. </param>
        /// <param name="description"> Description of Hierarchy. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ContextHierarchy(string name, string description, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Name = name;
            Description = description;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="ContextHierarchy"/> for deserialization. </summary>
        internal ContextHierarchy()
        {
        }

        /// <summary> Name of Hierarchy. </summary>
        public string Name { get; set; }
        /// <summary> Description of Hierarchy. </summary>
        public string Description { get; set; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/ContextHierarchy.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class ContextHierarchy : IUtf8JsonSerializable, IJsonModel<ContextHierarchy>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ContextHierarchy>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<ContextHierarchy>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ContextHierarchy>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ContextHierarchy)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("name"u8);
            writer.WriteStringValue(Name);
            writer.WritePropertyName("description"u8);
            writer.WriteStringValue(Description);
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        ContextHierarchy IJsonModel<ContextHierarchy>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ContextHierarchy>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ContextHierarchy)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeContextHierarchy(document.RootElement, options);
        }

        internal static ContextHierarchy DeserializeContextHierarchy(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string name = default;
            string description = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("description"u8))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new ContextHierarchy(name, description, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<ContextHierarchy>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ContextHierarchy>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(ContextHierarchy)} does not support writing '{options.Format}' format.");
            }
        }

        ContextHierarchy IPersistableModel<ContextHierarchy>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ContextHierarchy>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeContextHierarchy(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ContextHierarchy)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<ContextHierarchy>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/ContextListResult.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> The response of a Context list operation. </summary>
    internal partial class ContextListResult
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ContextListResult"/>. </summary>
        /// <param name="value"> The Context items on this page. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        internal ContextListResult(IEnumerable<EdgeContextData> value)
        {
            Argument.AssertNotNull(value, nameof(value));

            Value = value.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="ContextListResult"/>. </summary>
        /// <param name="value"> The Context items on this page. </param>
        /// <param name="nextLink"> The link to the next page of items. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ContextListResult(IReadOnlyList<EdgeContextData> value, Uri nextLink, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Value = value;
            NextLink = nextLink;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="ContextListResult"/> for deserialization. </summary>
        internal ContextListResult()
        {
        }

        /// <summary> The Context items on this page. </summary>
        public IReadOnlyList<EdgeContextData> Value { get; }
        /// <summary> The link to the next page of items. </summary>
        public Uri NextLink { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/ContextListResult.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    internal partial class ContextListResult : IUtf8JsonSerializable, IJsonModel<ContextListResult>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ContextListResult>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<ContextListResult>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ContextListResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ContextListResult)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("value"u8);
            writer.WriteStartArray();
            foreach (var item in Value)
            {
                writer.WriteObjectValue(item, options);
            }
            writer.WriteEndArray();
            if (Optional.IsDefined(NextLink))
            {
                writer.WritePropertyName("nextLink"u8);
                writer.WriteStringValue(NextLink.AbsoluteUri);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        ContextListResult IJsonModel<ContextListResult>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ContextListResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ContextListResult)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeContextListResult(document.RootElement, options);
        }

        internal static ContextListResult DeserializeContextListResult(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IReadOnlyList<EdgeContextData> value = default;
            Uri nextLink = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("value"u8))
                {
                    List<EdgeContextData> array = new List<EdgeContextData>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(EdgeContextData.DeserializeEdgeContextData(item, options));
                    }
                    value = array;
                    continue;
                }
                if (property.NameEquals("nextLink"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    nextLink = new Uri(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new ContextListResult(value, nextLink, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<ContextListResult>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ContextListResult>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(ContextListResult)} does not support writing '{options.Format}' format.");
            }
        }

        ContextListResult IPersistableModel<ContextListResult>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ContextListResult>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeContextListResult(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ContextListResult)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<ContextListResult>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/DeployJobContent.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Parameters for a deployment job. </summary>
    public partial class DeployJobContent : EdgeJobContent
    {
        /// <summary> Initializes a new instance of <see cref="DeployJobContent"/>. </summary>
        internal DeployJobContent()
        {
            JobType = EdgeJobType.Deploy;
        }

        /// <summary> Initializes a new instance of <see cref="DeployJobContent"/>. </summary>
        /// <param name="jobType"> Job type discriminator value. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="parameter"></param>
        internal DeployJobContent(EdgeJobType jobType, IDictionary<string, BinaryData> serializedAdditionalRawData, InstallSolutionContent parameter) : base(jobType, serializedAdditionalRawData)
        {
            Parameter = parameter;
            JobType = jobType;
        }

        /// <summary> Gets the parameter. </summary>
        internal InstallSolutionContent Parameter { get; }
        /// <summary> Solution Version ARM Id. </summary>
        public ResourceIdentifier ParameterSolutionVersionId
        {
            get => Parameter?.SolutionVersionId;
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/DeployJobContent.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class DeployJobContent : IUtf8JsonSerializable, IJsonModel<DeployJobContent>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<DeployJobContent>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<DeployJobContent>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DeployJobContent>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DeployJobContent)} does not support writing '{format}' format.");
            }

            base.JsonModelWriteCore(writer, options);
            if (Optional.IsDefined(Parameter))
            {
                writer.WritePropertyName("parameter"u8);
                writer.WriteObjectValue(Parameter, options);
            }
        }

        DeployJobContent IJsonModel<DeployJobContent>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DeployJobContent>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DeployJobContent)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeDeployJobContent(document.RootElement, options);
        }

        internal static DeployJobContent DeserializeDeployJobContent(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            InstallSolutionContent parameter = default;
            EdgeJobType jobType = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("parameter"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    parameter = InstallSolutionContent.DeserializeInstallSolutionContent(property.Value, options);
                    continue;
                }
                if (property.NameEquals("jobType"u8))
                {
                    jobType = new EdgeJobType(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new DeployJobContent(jobType, serializedAdditionalRawData, parameter);
        }

        BinaryData IPersistableModel<DeployJobContent>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DeployJobContent>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(DeployJobContent)} does not support writing '{options.Format}' format.");
            }
        }

        DeployJobContent IPersistableModel<DeployJobContent>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DeployJobContent>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeDeployJobContent(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(DeployJobContent)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<DeployJobContent>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/DeployJobStepStatistics.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Deploy statistics for a job step, including total, success, and failed counts. </summary>
    public partial class DeployJobStepStatistics : EdgeJobStepStatistics
    {
        /// <summary> Initializes a new instance of <see cref="DeployJobStepStatistics"/>. </summary>
        internal DeployJobStepStatistics()
        {
            StatisticsType = EdgeJobType.Deploy;
        }

        /// <summary> Initializes a new instance of <see cref="DeployJobStepStatistics"/>. </summary>
        /// <param name="statisticsType"> Statistics type discriminator value. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="totalCount"> Total count of items processed in this step. </param>
        /// <param name="successCount"> Count of successful items in this step. </param>
        /// <param name="failedCount"> Count of failed items in this step. </param>
        internal DeployJobStepStatistics(EdgeJobType statisticsType, IDictionary<string, BinaryData> serializedAdditionalRawData, int? totalCount, int? successCount, int? failedCount) : base(statisticsType, serializedAdditionalRawData)
        {
            TotalCount = totalCount;
            SuccessCount = successCount;
            FailedCount = failedCount;
            StatisticsType = statisticsType;
        }

        /// <summary> Total count of items processed in this step. </summary>
        public int? TotalCount { get; }
        /// <summary> Count of successful items in this step. </summary>
        public int? SuccessCount { get; }
        /// <summary> Count of failed items in this step. </summary>
        public int? FailedCount { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/DeployJobStepStatistics.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class DeployJobStepStatistics : IUtf8JsonSerializable, IJsonModel<DeployJobStepStatistics>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<DeployJobStepStatistics>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<DeployJobStepStatistics>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DeployJobStepStatistics>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DeployJobStepStatistics)} does not support writing '{format}' format.");
            }

            base.JsonModelWriteCore(writer, options);
            if (Optional.IsDefined(TotalCount))
            {
                writer.WritePropertyName("totalCount"u8);
                writer.WriteNumberValue(TotalCount.Value);
            }
            if (Optional.IsDefined(SuccessCount))
            {
                writer.WritePropertyName("successCount"u8);
                writer.WriteNumberValue(SuccessCount.Value);
            }
            if (Optional.IsDefined(FailedCount))
            {
                writer.WritePropertyName("failedCount"u8);
                writer.WriteNumberValue(FailedCount.Value);
            }
        }

        DeployJobStepStatistics IJsonModel<DeployJobStepStatistics>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DeployJobStepStatistics>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DeployJobStepStatistics)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeDeployJobStepStatistics(document.RootElement, options);
        }

        internal static DeployJobStepStatistics DeserializeDeployJobStepStatistics(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            int? totalCount = default;
            int? successCount = default;
            int? failedCount = default;
            EdgeJobType statisticsType = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("totalCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    totalCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("successCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    successCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("failedCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    failedCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("statisticsType"u8))
                {
                    statisticsType = new EdgeJobType(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new DeployJobStepStatistics(statisticsType, serializedAdditionalRawData, totalCount, successCount, failedCount);
        }

        BinaryData IPersistableModel<DeployJobStepStatistics>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DeployJobStepStatistics>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(DeployJobStepStatistics)} does not support writing '{options.Format}' format.");
            }
        }

        DeployJobStepStatistics IPersistableModel<DeployJobStepStatistics>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DeployJobStepStatistics>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeDeployJobStepStatistics(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(DeployJobStepStatistics)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<DeployJobStepStatistics>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/DiagnosticListResult.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> The response of a Diagnostic list operation. </summary>
    internal partial class DiagnosticListResult
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="DiagnosticListResult"/>. </summary>
        /// <param name="value"> The Diagnostic items on this page. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        internal DiagnosticListResult(IEnumerable<EdgeDiagnosticData> value)
        {
            Argument.AssertNotNull(value, nameof(value));

            Value = value.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="DiagnosticListResult"/>. </summary>
        /// <param name="value"> The Diagnostic items on this page. </param>
        /// <param name="nextLink"> The link to the next page of items. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal DiagnosticListResult(IReadOnlyList<EdgeDiagnosticData> value, Uri nextLink, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Value = value;
            NextLink = nextLink;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="DiagnosticListResult"/> for deserialization. </summary>
        internal DiagnosticListResult()
        {
        }

        /// <summary> The Diagnostic items on this page. </summary>
        public IReadOnlyList<EdgeDiagnosticData> Value { get; }
        /// <summary> The link to the next page of items. </summary>
        public Uri NextLink { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/DiagnosticListResult.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    internal partial class DiagnosticListResult : IUtf8JsonSerializable, IJsonModel<DiagnosticListResult>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<DiagnosticListResult>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<DiagnosticListResult>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DiagnosticListResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DiagnosticListResult)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("value"u8);
            writer.WriteStartArray();
            foreach (var item in Value)
            {
                writer.WriteObjectValue(item, options);
            }
            writer.WriteEndArray();
            if (Optional.IsDefined(NextLink))
            {
                writer.WritePropertyName("nextLink"u8);
                writer.WriteStringValue(NextLink.AbsoluteUri);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        DiagnosticListResult IJsonModel<DiagnosticListResult>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DiagnosticListResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DiagnosticListResult)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeDiagnosticListResult(document.RootElement, options);
        }

        internal static DiagnosticListResult DeserializeDiagnosticListResult(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IReadOnlyList<EdgeDiagnosticData> value = default;
            Uri nextLink = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("value"u8))
                {
                    List<EdgeDiagnosticData> array = new List<EdgeDiagnosticData>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(EdgeDiagnosticData.DeserializeEdgeDiagnosticData(item, options));
                    }
                    value = array;
                    continue;
                }
                if (property.NameEquals("nextLink"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    nextLink = new Uri(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new DiagnosticListResult(value, nextLink, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<DiagnosticListResult>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DiagnosticListResult>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(DiagnosticListResult)} does not support writing '{options.Format}' format.");
            }
        }

        DiagnosticListResult IPersistableModel<DiagnosticListResult>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DiagnosticListResult>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeDiagnosticListResult(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(DiagnosticListResult)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<DiagnosticListResult>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/DynamicSchemaListResult.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> The response of a DynamicSchema list operation. </summary>
    internal partial class DynamicSchemaListResult
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="DynamicSchemaListResult"/>. </summary>
        /// <param name="value"> The DynamicSchema items on this page. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        internal DynamicSchemaListResult(IEnumerable<EdgeDynamicSchemaData> value)
        {
            Argument.AssertNotNull(value, nameof(value));

            Value = value.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="DynamicSchemaListResult"/>. </summary>
        /// <param name="value"> The DynamicSchema items on this page. </param>
        /// <param name="nextLink"> The link to the next page of items. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal DynamicSchemaListResult(IReadOnlyList<EdgeDynamicSchemaData> value, Uri nextLink, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Value = value;
            NextLink = nextLink;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="DynamicSchemaListResult"/> for deserialization. </summary>
        internal DynamicSchemaListResult()
        {
        }

        /// <summary> The DynamicSchema items on this page. </summary>
        public IReadOnlyList<EdgeDynamicSchemaData> Value { get; }
        /// <summary> The link to the next page of items. </summary>
        public Uri NextLink { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/DynamicSchemaListResult.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    internal partial class DynamicSchemaListResult : IUtf8JsonSerializable, IJsonModel<DynamicSchemaListResult>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<DynamicSchemaListResult>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<DynamicSchemaListResult>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DynamicSchemaListResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DynamicSchemaListResult)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("value"u8);
            writer.WriteStartArray();
            foreach (var item in Value)
            {
                writer.WriteObjectValue(item, options);
            }
            writer.WriteEndArray();
            if (Optional.IsDefined(NextLink))
            {
                writer.WritePropertyName("nextLink"u8);
                writer.WriteStringValue(NextLink.AbsoluteUri);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        DynamicSchemaListResult IJsonModel<DynamicSchemaListResult>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DynamicSchemaListResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DynamicSchemaListResult)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeDynamicSchemaListResult(document.RootElement, options);
        }

        internal static DynamicSchemaListResult DeserializeDynamicSchemaListResult(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IReadOnlyList<EdgeDynamicSchemaData> value = default;
            Uri nextLink = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("value"u8))
                {
                    List<EdgeDynamicSchemaData> array = new List<EdgeDynamicSchemaData>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(EdgeDynamicSchemaData.DeserializeEdgeDynamicSchemaData(item, options));
                    }
                    value = array;
                    continue;
                }
                if (property.NameEquals("nextLink"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    nextLink = new Uri(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new DynamicSchemaListResult(value, nextLink, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<DynamicSchemaListResult>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DynamicSchemaListResult>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(DynamicSchemaListResult)} does not support writing '{options.Format}' format.");
            }
        }

        DynamicSchemaListResult IPersistableModel<DynamicSchemaListResult>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DynamicSchemaListResult>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeDynamicSchemaListResult(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(DynamicSchemaListResult)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<DynamicSchemaListResult>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/DynamicSchemaVersionListResult.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> The response of a DynamicSchemaVersion list operation. </summary>
    internal partial class DynamicSchemaVersionListResult
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="DynamicSchemaVersionListResult"/>. </summary>
        /// <param name="value"> The DynamicSchemaVersion items on this page. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        internal DynamicSchemaVersionListResult(IEnumerable<EdgeDynamicSchemaVersionData> value)
        {
            Argument.AssertNotNull(value, nameof(value));

            Value = value.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="DynamicSchemaVersionListResult"/>. </summary>
        /// <param name="value"> The DynamicSchemaVersion items on this page. </param>
        /// <param name="nextLink"> The link to the next page of items. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal DynamicSchemaVersionListResult(IReadOnlyList<EdgeDynamicSchemaVersionData> value, Uri nextLink, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Value = value;
            NextLink = nextLink;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="DynamicSchemaVersionListResult"/> for deserialization. </summary>
        internal DynamicSchemaVersionListResult()
        {
        }

        /// <summary> The DynamicSchemaVersion items on this page. </summary>
        public IReadOnlyList<EdgeDynamicSchemaVersionData> Value { get; }
        /// <summary> The link to the next page of items. </summary>
        public Uri NextLink { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/DynamicSchemaVersionListResult.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    internal partial class DynamicSchemaVersionListResult : IUtf8JsonSerializable, IJsonModel<DynamicSchemaVersionListResult>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<DynamicSchemaVersionListResult>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<DynamicSchemaVersionListResult>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DynamicSchemaVersionListResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DynamicSchemaVersionListResult)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("value"u8);
            writer.WriteStartArray();
            foreach (var item in Value)
            {
                writer.WriteObjectValue(item, options);
            }
            writer.WriteEndArray();
            if (Optional.IsDefined(NextLink))
            {
                writer.WritePropertyName("nextLink"u8);
                writer.WriteStringValue(NextLink.AbsoluteUri);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        DynamicSchemaVersionListResult IJsonModel<DynamicSchemaVersionListResult>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DynamicSchemaVersionListResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DynamicSchemaVersionListResult)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeDynamicSchemaVersionListResult(document.RootElement, options);
        }

        internal static DynamicSchemaVersionListResult DeserializeDynamicSchemaVersionListResult(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IReadOnlyList<EdgeDynamicSchemaVersionData> value = default;
            Uri nextLink = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("value"u8))
                {
                    List<EdgeDynamicSchemaVersionData> array = new List<EdgeDynamicSchemaVersionData>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(EdgeDynamicSchemaVersionData.DeserializeEdgeDynamicSchemaVersionData(item, options));
                    }
                    value = array;
                    continue;
                }
                if (property.NameEquals("nextLink"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    nextLink = new Uri(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new DynamicSchemaVersionListResult(value, nextLink, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<DynamicSchemaVersionListResult>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DynamicSchemaVersionListResult>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(DynamicSchemaVersionListResult)} does not support writing '{options.Format}' format.");
            }
        }

        DynamicSchemaVersionListResult IPersistableModel<DynamicSchemaVersionListResult>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DynamicSchemaVersionListResult>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeDynamicSchemaVersionListResult(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(DynamicSchemaVersionListResult)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<DynamicSchemaVersionListResult>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeConfigTemplatePatch.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> The type used for update operations of the ConfigTemplate. </summary>
    public partial class EdgeConfigTemplatePatch
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeConfigTemplatePatch"/>. </summary>
        public EdgeConfigTemplatePatch()
        {
            Tags = new ChangeTrackingDictionary<string, string>();
        }

        /// <summary> Initializes a new instance of <see cref="EdgeConfigTemplatePatch"/>. </summary>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeConfigTemplatePatch(IDictionary<string, string> tags, ConfigTemplateUpdateProperties properties, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Tags = tags;
            Properties = properties;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Resource tags. </summary>
        public IDictionary<string, string> Tags { get; }
        /// <summary> The resource-specific properties for this resource. </summary>
        internal ConfigTemplateUpdateProperties Properties { get; set; }
        /// <summary> Description of config template. </summary>
        public string ConfigTemplateUpdateDescription
        {
            get => Properties is null ? default : Properties.Description;
            set
            {
                if (Properties is null)
                    Properties = new ConfigTemplateUpdateProperties();
                Properties.Description = value;
            }
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeConfigTemplatePatch.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class EdgeConfigTemplatePatch : IUtf8JsonSerializable, IJsonModel<EdgeConfigTemplatePatch>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeConfigTemplatePatch>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeConfigTemplatePatch>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeConfigTemplatePatch>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeConfigTemplatePatch)} does not support writing '{format}' format.");
            }

            if (Optional.IsCollectionDefined(Tags))
            {
                writer.WritePropertyName("tags"u8);
                writer.WriteStartObject();
                foreach (var item in Tags)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(Properties))
            {
                writer.WritePropertyName("properties"u8);
                writer.WriteObjectValue(Properties, options);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        EdgeConfigTemplatePatch IJsonModel<EdgeConfigTemplatePatch>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeConfigTemplatePatch>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeConfigTemplatePatch)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeConfigTemplatePatch(document.RootElement, options);
        }

        internal static EdgeConfigTemplatePatch DeserializeEdgeConfigTemplatePatch(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IDictionary<string, string> tags = default;
            ConfigTemplateUpdateProperties properties = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("tags"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    properties = ConfigTemplateUpdateProperties.DeserializeConfigTemplateUpdateProperties(property.Value, options);
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeConfigTemplatePatch(tags ?? new ChangeTrackingDictionary<string, string>(), properties, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeConfigTemplatePatch>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeConfigTemplatePatch>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeConfigTemplatePatch)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeConfigTemplatePatch IPersistableModel<EdgeConfigTemplatePatch>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeConfigTemplatePatch>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeConfigTemplatePatch(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeConfigTemplatePatch)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeConfigTemplatePatch>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeConfigTemplateProperties.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Config Template Properties. </summary>
    public partial class EdgeConfigTemplateProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeConfigTemplateProperties"/>. </summary>
        /// <param name="description"> Description of config template. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="description"/> is null. </exception>
        public EdgeConfigTemplateProperties(string description)
        {
            Argument.AssertNotNull(description, nameof(description));

            Description = description;
        }

        /// <summary> Initializes a new instance of <see cref="EdgeConfigTemplateProperties"/>. </summary>
        /// <param name="description"> Description of config template. </param>
        /// <param name="latestVersion"> Latest config template version. </param>
        /// <param name="provisioningState"> Provisioning state of resource. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeConfigTemplateProperties(string description, string latestVersion, WorkloadOrchestrationProvisioningState? provisioningState, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Description = description;
            LatestVersion = latestVersion;
            ProvisioningState = provisioningState;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="EdgeConfigTemplateProperties"/> for deserialization. </summary>
        internal EdgeConfigTemplateProperties()
        {
        }

        /// <summary> Description of config template. </summary>
        public string Description { get; set; }
        /// <summary> Latest config template version. </summary>
        public string LatestVersion { get; }
        /// <summary> Provisioning state of resource. </summary>
        public WorkloadOrchestrationProvisioningState? ProvisioningState { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeConfigTemplateProperties.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class EdgeConfigTemplateProperties : IUtf8JsonSerializable, IJsonModel<EdgeConfigTemplateProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeConfigTemplateProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeConfigTemplateProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeConfigTemplateProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeConfigTemplateProperties)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("description"u8);
            writer.WriteStringValue(Description);
            if (options.Format != "W" && Optional.IsDefined(LatestVersion))
            {
                writer.WritePropertyName("latestVersion"u8);
                writer.WriteStringValue(LatestVersion);
            }
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        EdgeConfigTemplateProperties IJsonModel<EdgeConfigTemplateProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeConfigTemplateProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeConfigTemplateProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeConfigTemplateProperties(document.RootElement, options);
        }

        internal static EdgeConfigTemplateProperties DeserializeEdgeConfigTemplateProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string description = default;
            string latestVersion = default;
            WorkloadOrchestrationProvisioningState? provisioningState = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("description"u8))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("latestVersion"u8))
                {
                    latestVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new WorkloadOrchestrationProvisioningState(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeConfigTemplateProperties(description, latestVersion, provisioningState, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeConfigTemplateProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeConfigTemplateProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeConfigTemplateProperties)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeConfigTemplateProperties IPersistableModel<EdgeConfigTemplateProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeConfigTemplateProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeConfigTemplateProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeConfigTemplateProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeConfigTemplateProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeConfigTemplateVersionProperties.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Config Template Version Properties. </summary>
    public partial class EdgeConfigTemplateVersionProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeConfigTemplateVersionProperties"/>. </summary>
        /// <param name="configurations"> Configuration values. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="configurations"/> is null. </exception>
        public EdgeConfigTemplateVersionProperties(string configurations)
        {
            Argument.AssertNotNull(configurations, nameof(configurations));

            Configurations = configurations;
        }

        /// <summary> Initializes a new instance of <see cref="EdgeConfigTemplateVersionProperties"/>. </summary>
        /// <param name="configurations"> Configuration values. </param>
        /// <param name="provisioningState"> Provisioning state of resource. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeConfigTemplateVersionProperties(string configurations, WorkloadOrchestrationProvisioningState? provisioningState, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Configurations = configurations;
            ProvisioningState = provisioningState;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="EdgeConfigTemplateVersionProperties"/> for deserialization. </summary>
        internal EdgeConfigTemplateVersionProperties()
        {
        }

        /// <summary> Configuration values. </summary>
        public string Configurations { get; set; }
        /// <summary> Provisioning state of resource. </summary>
        public WorkloadOrchestrationProvisioningState? ProvisioningState { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeConfigTemplateVersionProperties.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class EdgeConfigTemplateVersionProperties : IUtf8JsonSerializable, IJsonModel<EdgeConfigTemplateVersionProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeConfigTemplateVersionProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeConfigTemplateVersionProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeConfigTemplateVersionProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeConfigTemplateVersionProperties)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("configurations"u8);
            writer.WriteStringValue(Configurations);
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        EdgeConfigTemplateVersionProperties IJsonModel<EdgeConfigTemplateVersionProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeConfigTemplateVersionProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeConfigTemplateVersionProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeConfigTemplateVersionProperties(document.RootElement, options);
        }

        internal static EdgeConfigTemplateVersionProperties DeserializeEdgeConfigTemplateVersionProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string configurations = default;
            WorkloadOrchestrationProvisioningState? provisioningState = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("configurations"u8))
                {
                    configurations = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new WorkloadOrchestrationProvisioningState(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeConfigTemplateVersionProperties(configurations, provisioningState, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeConfigTemplateVersionProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeConfigTemplateVersionProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeConfigTemplateVersionProperties)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeConfigTemplateVersionProperties IPersistableModel<EdgeConfigTemplateVersionProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeConfigTemplateVersionProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeConfigTemplateVersionProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeConfigTemplateVersionProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeConfigTemplateVersionProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeContextPatch.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> The type used for update operations of the Context. </summary>
    public partial class EdgeContextPatch
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeContextPatch"/>. </summary>
        public EdgeContextPatch()
        {
            Tags = new ChangeTrackingDictionary<string, string>();
        }

        /// <summary> Initializes a new instance of <see cref="EdgeContextPatch"/>. </summary>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeContextPatch(IDictionary<string, string> tags, EdgeContextPatchProperties properties, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Tags = tags;
            Properties = properties;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Resource tags. </summary>
        public IDictionary<string, string> Tags { get; }
        /// <summary> The resource-specific properties for this resource. </summary>
        public EdgeContextPatchProperties Properties { get; set; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeContextPatch.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class EdgeContextPatch : IUtf8JsonSerializable, IJsonModel<EdgeContextPatch>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeContextPatch>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeContextPatch>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeContextPatch>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeContextPatch)} does not support writing '{format}' format.");
            }

            if (Optional.IsCollectionDefined(Tags))
            {
                writer.WritePropertyName("tags"u8);
                writer.WriteStartObject();
                foreach (var item in Tags)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(Properties))
            {
                writer.WritePropertyName("properties"u8);
                writer.WriteObjectValue(Properties, options);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        EdgeContextPatch IJsonModel<EdgeContextPatch>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeContextPatch>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeContextPatch)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeContextPatch(document.RootElement, options);
        }

        internal static EdgeContextPatch DeserializeEdgeContextPatch(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IDictionary<string, string> tags = default;
            EdgeContextPatchProperties properties = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("tags"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    properties = EdgeContextPatchProperties.DeserializeEdgeContextPatchProperties(property.Value, options);
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeContextPatch(tags ?? new ChangeTrackingDictionary<string, string>(), properties, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeContextPatch>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeContextPatch>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeContextPatch)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeContextPatch IPersistableModel<EdgeContextPatch>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeContextPatch>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeContextPatch(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeContextPatch)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeContextPatch>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeContextPatchProperties.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> The updatable properties of the Context. </summary>
    public partial class EdgeContextPatchProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeContextPatchProperties"/>. </summary>
        public EdgeContextPatchProperties()
        {
            Capabilities = new ChangeTrackingList<ContextCapability>();
            Hierarchies = new ChangeTrackingList<ContextHierarchy>();
        }

        /// <summary> Initializes a new instance of <see cref="EdgeContextPatchProperties"/>. </summary>
        /// <param name="capabilities"> List of Capabilities. </param>
        /// <param name="hierarchies"> List of Hierarchies. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeContextPatchProperties(IList<ContextCapability> capabilities, IList<ContextHierarchy> hierarchies, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Capabilities = capabilities;
            Hierarchies = hierarchies;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> List of Capabilities. </summary>
        public IList<ContextCapability> Capabilities { get; }
        /// <summary> List of Hierarchies. </summary>
        public IList<ContextHierarchy> Hierarchies { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeContextPatchProperties.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class EdgeContextPatchProperties : IUtf8JsonSerializable, IJsonModel<EdgeContextPatchProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeContextPatchProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeContextPatchProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeContextPatchProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeContextPatchProperties)} does not support writing '{format}' format.");
            }

            if (Optional.IsCollectionDefined(Capabilities))
            {
                writer.WritePropertyName("capabilities"u8);
                writer.WriteStartArray();
                foreach (var item in Capabilities)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Hierarchies))
            {
                writer.WritePropertyName("hierarchies"u8);
                writer.WriteStartArray();
                foreach (var item in Hierarchies)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        EdgeContextPatchProperties IJsonModel<EdgeContextPatchProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeContextPatchProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeContextPatchProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeContextPatchProperties(document.RootElement, options);
        }

        internal static EdgeContextPatchProperties DeserializeEdgeContextPatchProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IList<ContextCapability> capabilities = default;
            IList<ContextHierarchy> hierarchies = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("capabilities"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ContextCapability> array = new List<ContextCapability>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ContextCapability.DeserializeContextCapability(item, options));
                    }
                    capabilities = array;
                    continue;
                }
                if (property.NameEquals("hierarchies"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ContextHierarchy> array = new List<ContextHierarchy>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ContextHierarchy.DeserializeContextHierarchy(item, options));
                    }
                    hierarchies = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeContextPatchProperties(capabilities ?? new ChangeTrackingList<ContextCapability>(), hierarchies ?? new ChangeTrackingList<ContextHierarchy>(), serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeContextPatchProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeContextPatchProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeContextPatchProperties)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeContextPatchProperties IPersistableModel<EdgeContextPatchProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeContextPatchProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeContextPatchProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeContextPatchProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeContextPatchProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeContextProperties.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Context Properties. </summary>
    public partial class EdgeContextProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeContextProperties"/>. </summary>
        /// <param name="capabilities"> List of Capabilities. </param>
        /// <param name="hierarchies"> List of Hierarchies. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="capabilities"/> or <paramref name="hierarchies"/> is null. </exception>
        public EdgeContextProperties(IEnumerable<ContextCapability> capabilities, IEnumerable<ContextHierarchy> hierarchies)
        {
            Argument.AssertNotNull(capabilities, nameof(capabilities));
            Argument.AssertNotNull(hierarchies, nameof(hierarchies));

            Capabilities = capabilities.ToList();
            Hierarchies = hierarchies.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="EdgeContextProperties"/>. </summary>
        /// <param name="capabilities"> List of Capabilities. </param>
        /// <param name="hierarchies"> List of Hierarchies. </param>
        /// <param name="provisioningState"> Provisioning state of resource. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeContextProperties(IList<ContextCapability> capabilities, IList<ContextHierarchy> hierarchies, WorkloadOrchestrationProvisioningState? provisioningState, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Capabilities = capabilities;
            Hierarchies = hierarchies;
            ProvisioningState = provisioningState;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="EdgeContextProperties"/> for deserialization. </summary>
        internal EdgeContextProperties()
        {
        }

        /// <summary> List of Capabilities. </summary>
        public IList<ContextCapability> Capabilities { get; }
        /// <summary> List of Hierarchies. </summary>
        public IList<ContextHierarchy> Hierarchies { get; }
        /// <summary> Provisioning state of resource. </summary>
        public WorkloadOrchestrationProvisioningState? ProvisioningState { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeContextProperties.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class EdgeContextProperties : IUtf8JsonSerializable, IJsonModel<EdgeContextProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeContextProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeContextProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeContextProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeContextProperties)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("capabilities"u8);
            writer.WriteStartArray();
            foreach (var item in Capabilities)
            {
                writer.WriteObjectValue(item, options);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("hierarchies"u8);
            writer.WriteStartArray();
            foreach (var item in Hierarchies)
            {
                writer.WriteObjectValue(item, options);
            }
            writer.WriteEndArray();
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        EdgeContextProperties IJsonModel<EdgeContextProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeContextProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeContextProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeContextProperties(document.RootElement, options);
        }

        internal static EdgeContextProperties DeserializeEdgeContextProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IList<ContextCapability> capabilities = default;
            IList<ContextHierarchy> hierarchies = default;
            WorkloadOrchestrationProvisioningState? provisioningState = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("capabilities"u8))
                {
                    List<ContextCapability> array = new List<ContextCapability>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ContextCapability.DeserializeContextCapability(item, options));
                    }
                    capabilities = array;
                    continue;
                }
                if (property.NameEquals("hierarchies"u8))
                {
                    List<ContextHierarchy> array = new List<ContextHierarchy>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ContextHierarchy.DeserializeContextHierarchy(item, options));
                    }
                    hierarchies = array;
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new WorkloadOrchestrationProvisioningState(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeContextProperties(capabilities, hierarchies, provisioningState, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeContextProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeContextProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeContextProperties)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeContextProperties IPersistableModel<EdgeContextProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeContextProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeContextProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeContextProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeContextProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeDeploymentInstanceHistoryProperties.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Instance History Properties. </summary>
    public partial class EdgeDeploymentInstanceHistoryProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeDeploymentInstanceHistoryProperties"/>. </summary>
        /// <param name="solutionVersion"> Solution version of instance. </param>
        /// <param name="target"> Target of instance. </param>
        internal EdgeDeploymentInstanceHistoryProperties(SolutionVersionSnapshot solutionVersion, EdgeTargetSnapshot target)
        {
            SolutionVersion = solutionVersion;
            Target = target;
        }

        /// <summary> Initializes a new instance of <see cref="EdgeDeploymentInstanceHistoryProperties"/>. </summary>
        /// <param name="solutionVersion"> Solution version of instance. </param>
        /// <param name="target"> Target of instance. </param>
        /// <param name="solutionScope"> Scope of instance. </param>
        /// <param name="activeState"> State of instance. </param>
        /// <param name="reconciliationPolicy"> Reconciliation policy of instance. </param>
        /// <param name="status"> Deployment Status of instance. </param>
        /// <param name="provisioningState"> Provisioning state of resource. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeDeploymentInstanceHistoryProperties(SolutionVersionSnapshot solutionVersion, EdgeTargetSnapshot target, string solutionScope, InstanceActiveState? activeState, InstanceReconciliationPolicy reconciliationPolicy, EdgeDeploymentStatus status, WorkloadOrchestrationProvisioningState? provisioningState, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            SolutionVersion = solutionVersion;
            Target = target;
            SolutionScope = solutionScope;
            ActiveState = activeState;
            ReconciliationPolicy = reconciliationPolicy;
            Status = status;
            ProvisioningState = provisioningState;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="EdgeDeploymentInstanceHistoryProperties"/> for deserialization. </summary>
        internal EdgeDeploymentInstanceHistoryProperties()
        {
        }

        /// <summary> Solution version of instance. </summary>
        public SolutionVersionSnapshot SolutionVersion { get; }
        /// <summary> Target of instance. </summary>
        public EdgeTargetSnapshot Target { get; }
        /// <summary> Scope of instance. </summary>
        public string SolutionScope { get; }
        /// <summary> State of instance. </summary>
        public InstanceActiveState? ActiveState { get; }
        /// <summary> Reconciliation policy of instance. </summary>
        public InstanceReconciliationPolicy ReconciliationPolicy { get; }
        /// <summary> Deployment Status of instance. </summary>
        public EdgeDeploymentStatus Status { get; }
        /// <summary> Provisioning state of resource. </summary>
        public WorkloadOrchestrationProvisioningState? ProvisioningState { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeDeploymentInstanceHistoryProperties.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class EdgeDeploymentInstanceHistoryProperties : IUtf8JsonSerializable, IJsonModel<EdgeDeploymentInstanceHistoryProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeDeploymentInstanceHistoryProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeDeploymentInstanceHistoryProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeDeploymentInstanceHistoryProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeDeploymentInstanceHistoryProperties)} does not support writing '{format}' format.");
            }

            if (options.Format != "W")
            {
                writer.WritePropertyName("solutionVersion"u8);
                writer.WriteObjectValue(SolutionVersion, options);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("target"u8);
                writer.WriteObjectValue(Target, options);
            }
            if (options.Format != "W" && Optional.IsDefined(SolutionScope))
            {
                writer.WritePropertyName("solutionScope"u8);
                writer.WriteStringValue(SolutionScope);
            }
            if (Optional.IsDefined(ActiveState))
            {
                writer.WritePropertyName("activeState"u8);
                writer.WriteStringValue(ActiveState.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(ReconciliationPolicy))
            {
                writer.WritePropertyName("reconciliationPolicy"u8);
                writer.WriteObjectValue(ReconciliationPolicy, options);
            }
            if (options.Format != "W" && Optional.IsDefined(Status))
            {
                writer.WritePropertyName("status"u8);
                writer.WriteObjectValue(Status, options);
            }
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        EdgeDeploymentInstanceHistoryProperties IJsonModel<EdgeDeploymentInstanceHistoryProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeDeploymentInstanceHistoryProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeDeploymentInstanceHistoryProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeDeploymentInstanceHistoryProperties(document.RootElement, options);
        }

        internal static EdgeDeploymentInstanceHistoryProperties DeserializeEdgeDeploymentInstanceHistoryProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            SolutionVersionSnapshot solutionVersion = default;
            EdgeTargetSnapshot target = default;
            string solutionScope = default;
            InstanceActiveState? activeState = default;
            InstanceReconciliationPolicy reconciliationPolicy = default;
            EdgeDeploymentStatus status = default;
            WorkloadOrchestrationProvisioningState? provisioningState = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("solutionVersion"u8))
                {
                    solutionVersion = SolutionVersionSnapshot.DeserializeSolutionVersionSnapshot(property.Value, options);
                    continue;
                }
                if (property.NameEquals("target"u8))
                {
                    target = EdgeTargetSnapshot.DeserializeEdgeTargetSnapshot(property.Value, options);
                    continue;
                }
                if (property.NameEquals("solutionScope"u8))
                {
                    solutionScope = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("activeState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    activeState = new InstanceActiveState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("reconciliationPolicy"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    reconciliationPolicy = InstanceReconciliationPolicy.DeserializeInstanceReconciliationPolicy(property.Value, options);
                    continue;
                }
                if (property.NameEquals("status"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    status = EdgeDeploymentStatus.DeserializeEdgeDeploymentStatus(property.Value, options);
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new WorkloadOrchestrationProvisioningState(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeDeploymentInstanceHistoryProperties(
                solutionVersion,
                target,
                solutionScope,
                activeState,
                reconciliationPolicy,
                status,
                provisioningState,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeDeploymentInstanceHistoryProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeDeploymentInstanceHistoryProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeDeploymentInstanceHistoryProperties)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeDeploymentInstanceHistoryProperties IPersistableModel<EdgeDeploymentInstanceHistoryProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeDeploymentInstanceHistoryProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeDeploymentInstanceHistoryProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeDeploymentInstanceHistoryProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeDeploymentInstanceHistoryProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeDeploymentInstanceProperties.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Instance Properties. </summary>
    public partial class EdgeDeploymentInstanceProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeDeploymentInstanceProperties"/>. </summary>
        /// <param name="solutionVersionId"> Solution version of instance. </param>
        /// <param name="targetId"> Target of instance. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionVersionId"/> or <paramref name="targetId"/> is null. </exception>
        public EdgeDeploymentInstanceProperties(string solutionVersionId, string targetId)
        {
            Argument.AssertNotNull(solutionVersionId, nameof(solutionVersionId));
            Argument.AssertNotNull(targetId, nameof(targetId));

            SolutionVersionId = solutionVersionId;
            TargetId = targetId;
        }

        /// <summary> Initializes a new instance of <see cref="EdgeDeploymentInstanceProperties"/>. </summary>
        /// <param name="solutionVersionId"> Solution version of instance. </param>
        /// <param name="targetId"> Target of instance. </param>
        /// <param name="activeState"> State of instance. </param>
        /// <param name="reconciliationPolicy"> Reconciliation policy of instance. </param>
        /// <param name="solutionScope"> Scope of instance. </param>
        /// <param name="status"> Status of instance. </param>
        /// <param name="deploymentTimestampEpoch"> Deployment timestamp of instance. </param>
        /// <param name="provisioningState"> Provisioning state of resource. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeDeploymentInstanceProperties(string solutionVersionId, string targetId, InstanceActiveState? activeState, InstanceReconciliationPolicy reconciliationPolicy, string solutionScope, EdgeDeploymentStatus status, long? deploymentTimestampEpoch, WorkloadOrchestrationProvisioningState? provisioningState, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            SolutionVersionId = solutionVersionId;
            TargetId = targetId;
            ActiveState = activeState;
            ReconciliationPolicy = reconciliationPolicy;
            SolutionScope = solutionScope;
            Status = status;
            DeploymentTimestampEpoch = deploymentTimestampEpoch;
            ProvisioningState = provisioningState;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="EdgeDeploymentInstanceProperties"/> for deserialization. </summary>
        internal EdgeDeploymentInstanceProperties()
        {
        }

        /// <summary> Solution version of instance. </summary>
        public string SolutionVersionId { get; set; }
        /// <summary> Target of instance. </summary>
        public string TargetId { get; set; }
        /// <summary> State of instance. </summary>
        public InstanceActiveState? ActiveState { get; set; }
        /// <summary> Reconciliation policy of instance. </summary>
        public InstanceReconciliationPolicy ReconciliationPolicy { get; set; }
        /// <summary> Scope of instance. </summary>
        public string SolutionScope { get; set; }
        /// <summary> Status of instance. </summary>
        public EdgeDeploymentStatus Status { get; }
        /// <summary> Deployment timestamp of instance. </summary>
        public long? DeploymentTimestampEpoch { get; }
        /// <summary> Provisioning state of resource. </summary>
        public WorkloadOrchestrationProvisioningState? ProvisioningState { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeDeploymentInstanceProperties.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class EdgeDeploymentInstanceProperties : IUtf8JsonSerializable, IJsonModel<EdgeDeploymentInstanceProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeDeploymentInstanceProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeDeploymentInstanceProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeDeploymentInstanceProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeDeploymentInstanceProperties)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("solutionVersionId"u8);
            writer.WriteStringValue(SolutionVersionId);
            writer.WritePropertyName("targetId"u8);
            writer.WriteStringValue(TargetId);
            if (Optional.IsDefined(ActiveState))
            {
                writer.WritePropertyName("activeState"u8);
                writer.WriteStringValue(ActiveState.Value.ToString());
            }
            if (Optional.IsDefined(ReconciliationPolicy))
            {
                writer.WritePropertyName("reconciliationPolicy"u8);
                writer.WriteObjectValue(ReconciliationPolicy, options);
            }
            if (Optional.IsDefined(SolutionScope))
            {
                writer.WritePropertyName("solutionScope"u8);
                writer.WriteStringValue(SolutionScope);
            }
            if (options.Format != "W" && Optional.IsDefined(Status))
            {
                writer.WritePropertyName("status"u8);
                writer.WriteObjectValue(Status, options);
            }
            if (options.Format != "W" && Optional.IsDefined(DeploymentTimestampEpoch))
            {
                writer.WritePropertyName("deploymentTimestampEpoch"u8);
                writer.WriteNumberValue(DeploymentTimestampEpoch.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        EdgeDeploymentInstanceProperties IJsonModel<EdgeDeploymentInstanceProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeDeploymentInstanceProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeDeploymentInstanceProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeDeploymentInstanceProperties(document.RootElement, options);
        }

        internal static EdgeDeploymentInstanceProperties DeserializeEdgeDeploymentInstanceProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string solutionVersionId = default;
            string targetId = default;
            InstanceActiveState? activeState = default;
            InstanceReconciliationPolicy reconciliationPolicy = default;
            string solutionScope = default;
            EdgeDeploymentStatus status = default;
            long? deploymentTimestampEpoch = default;
            WorkloadOrchestrationProvisioningState? provisioningState = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("solutionVersionId"u8))
                {
                    solutionVersionId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetId"u8))
                {
                    targetId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("activeState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    activeState = new InstanceActiveState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("reconciliationPolicy"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    reconciliationPolicy = InstanceReconciliationPolicy.DeserializeInstanceReconciliationPolicy(property.Value, options);
                    continue;
                }
                if (property.NameEquals("solutionScope"u8))
                {
                    solutionScope = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("status"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    status = EdgeDeploymentStatus.DeserializeEdgeDeploymentStatus(property.Value, options);
                    continue;
                }
                if (property.NameEquals("deploymentTimestampEpoch"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    deploymentTimestampEpoch = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new WorkloadOrchestrationProvisioningState(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeDeploymentInstanceProperties(
                solutionVersionId,
                targetId,
                activeState,
                reconciliationPolicy,
                solutionScope,
                status,
                deploymentTimestampEpoch,
                provisioningState,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeDeploymentInstanceProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeDeploymentInstanceProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeDeploymentInstanceProperties)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeDeploymentInstanceProperties IPersistableModel<EdgeDeploymentInstanceProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeDeploymentInstanceProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeDeploymentInstanceProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeDeploymentInstanceProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeDeploymentInstanceProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeDeploymentStatus.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Deployment Status. </summary>
    public partial class EdgeDeploymentStatus
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeDeploymentStatus"/>. </summary>
        internal EdgeDeploymentStatus()
        {
            TargetStatuses = new ChangeTrackingList<EdgeTargetStatus>();
        }

        /// <summary> Initializes a new instance of <see cref="EdgeDeploymentStatus"/>. </summary>
        /// <param name="lastModified"> The lastModified of the Status. </param>
        /// <param name="deployed"> Indicates if Instance is deployed. </param>
        /// <param name="expectedRunningJobId"> The expected running job id. </param>
        /// <param name="runningJobId"> The running job id. </param>
        /// <param name="status"> Deployment status. </param>
        /// <param name="statusDetails"> Status details. </param>
        /// <param name="generation"> Deployment Generation. </param>
        /// <param name="targetStatuses"> Target resource statuses. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeDeploymentStatus(DateTimeOffset? lastModified, int? deployed, int? expectedRunningJobId, int? runningJobId, string status, string statusDetails, int? generation, IReadOnlyList<EdgeTargetStatus> targetStatuses, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            LastModified = lastModified;
            Deployed = deployed;
            ExpectedRunningJobId = expectedRunningJobId;
            RunningJobId = runningJobId;
            Status = status;
            StatusDetails = statusDetails;
            Generation = generation;
            TargetStatuses = targetStatuses;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The lastModified of the Status. </summary>
        public DateTimeOffset? LastModified { get; }
        /// <summary> Indicates if Instance is deployed. </summary>
        public int? Deployed { get; }
        /// <summary> The expected running job id. </summary>
        public int? ExpectedRunningJobId { get; }
        /// <summary> The running job id. </summary>
        public int? RunningJobId { get; }
        /// <summary> Deployment status. </summary>
        public string Status { get; }
        /// <summary> Status details. </summary>
        public string StatusDetails { get; }
        /// <summary> Deployment Generation. </summary>
        public int? Generation { get; }
        /// <summary> Target resource statuses. </summary>
        public IReadOnlyList<EdgeTargetStatus> TargetStatuses { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeDeploymentStatus.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class EdgeDeploymentStatus : IUtf8JsonSerializable, IJsonModel<EdgeDeploymentStatus>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeDeploymentStatus>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeDeploymentStatus>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeDeploymentStatus>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeDeploymentStatus)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(LastModified))
            {
                writer.WritePropertyName("lastModified"u8);
                writer.WriteStringValue(LastModified.Value, "O");
            }
            if (Optional.IsDefined(Deployed))
            {
                writer.WritePropertyName("deployed"u8);
                writer.WriteNumberValue(Deployed.Value);
            }
            if (Optional.IsDefined(ExpectedRunningJobId))
            {
                writer.WritePropertyName("expectedRunningJobId"u8);
                writer.WriteNumberValue(ExpectedRunningJobId.Value);
            }
            if (Optional.IsDefined(RunningJobId))
            {
                writer.WritePropertyName("runningJobId"u8);
                writer.WriteNumberValue(RunningJobId.Value);
            }
            if (Optional.IsDefined(Status))
            {
                writer.WritePropertyName("status"u8);
                writer.WriteStringValue(Status);
            }
            if (Optional.IsDefined(StatusDetails))
            {
                writer.WritePropertyName("statusDetails"u8);
                writer.WriteStringValue(StatusDetails);
            }
            if (Optional.IsDefined(Generation))
            {
                writer.WritePropertyName("generation"u8);
                writer.WriteNumberValue(Generation.Value);
            }
            if (Optional.IsCollectionDefined(TargetStatuses))
            {
                writer.WritePropertyName("targetStatuses"u8);
                writer.WriteStartArray();
                foreach (var item in TargetStatuses)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        EdgeDeploymentStatus IJsonModel<EdgeDeploymentStatus>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeDeploymentStatus>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeDeploymentStatus)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeDeploymentStatus(document.RootElement, options);
        }

        internal static EdgeDeploymentStatus DeserializeEdgeDeploymentStatus(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            DateTimeOffset? lastModified = default;
            int? deployed = default;
            int? expectedRunningJobId = default;
            int? runningJobId = default;
            string status = default;
            string statusDetails = default;
            int? generation = default;
            IReadOnlyList<EdgeTargetStatus> targetStatuses = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("lastModified"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastModified = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("deployed"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    deployed = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("expectedRunningJobId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    expectedRunningJobId = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("runningJobId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    runningJobId = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("status"u8))
                {
                    status = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("statusDetails"u8))
                {
                    statusDetails = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("generation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    generation = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("targetStatuses"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<EdgeTargetStatus> array = new List<EdgeTargetStatus>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(EdgeTargetStatus.DeserializeEdgeTargetStatus(item, options));
                    }
                    targetStatuses = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeDeploymentStatus(
                lastModified,
                deployed,
                expectedRunningJobId,
                runningJobId,
                status,
                statusDetails,
                generation,
                targetStatuses ?? new ChangeTrackingList<EdgeTargetStatus>(),
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeDeploymentStatus>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeDeploymentStatus>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeDeploymentStatus)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeDeploymentStatus IPersistableModel<EdgeDeploymentStatus>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeDeploymentStatus>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeDeploymentStatus(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeDeploymentStatus)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeDeploymentStatus>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeDiagnosticPatch.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> The type used for update operations of the Diagnostic. </summary>
    public partial class EdgeDiagnosticPatch
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeDiagnosticPatch"/>. </summary>
        public EdgeDiagnosticPatch()
        {
            Tags = new ChangeTrackingDictionary<string, string>();
        }

        /// <summary> Initializes a new instance of <see cref="EdgeDiagnosticPatch"/>. </summary>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeDiagnosticPatch(EdgeDiagnosticPatchProperties properties, IDictionary<string, string> tags, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Properties = properties;
            Tags = tags;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The resource-specific properties for this resource. </summary>
        public EdgeDiagnosticPatchProperties Properties { get; set; }
        /// <summary> Resource tags. </summary>
        public IDictionary<string, string> Tags { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeDiagnosticPatch.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class EdgeDiagnosticPatch : IUtf8JsonSerializable, IJsonModel<EdgeDiagnosticPatch>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeDiagnosticPatch>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeDiagnosticPatch>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeDiagnosticPatch>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeDiagnosticPatch)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(Properties))
            {
                writer.WritePropertyName("properties"u8);
                writer.WriteObjectValue(Properties, options);
            }
            if (Optional.IsCollectionDefined(Tags))
            {
                writer.WritePropertyName("tags"u8);
                writer.WriteStartObject();
                foreach (var item in Tags)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        EdgeDiagnosticPatch IJsonModel<EdgeDiagnosticPatch>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeDiagnosticPatch>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeDiagnosticPatch)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeDiagnosticPatch(document.RootElement, options);
        }

        internal static EdgeDiagnosticPatch DeserializeEdgeDiagnosticPatch(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            EdgeDiagnosticPatchProperties properties = default;
            IDictionary<string, string> tags = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    properties = EdgeDiagnosticPatchProperties.DeserializeEdgeDiagnosticPatchProperties(property.Value, options);
                    continue;
                }
                if (property.NameEquals("tags"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeDiagnosticPatch(properties, tags ?? new ChangeTrackingDictionary<string, string>(), serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeDiagnosticPatch>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeDiagnosticPatch>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeDiagnosticPatch)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeDiagnosticPatch IPersistableModel<EdgeDiagnosticPatch>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeDiagnosticPatch>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeDiagnosticPatch(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeDiagnosticPatch)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeDiagnosticPatch>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeDiagnosticPatchProperties.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> The updatable properties of the Diagnostic. </summary>
    public partial class EdgeDiagnosticPatchProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeDiagnosticPatchProperties"/>. </summary>
        public EdgeDiagnosticPatchProperties()
        {
        }

        /// <summary> Initializes a new instance of <see cref="EdgeDiagnosticPatchProperties"/>. </summary>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeDiagnosticPatchProperties(IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeDiagnosticPatchProperties.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class EdgeDiagnosticPatchProperties : IUtf8JsonSerializable, IJsonModel<EdgeDiagnosticPatchProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeDiagnosticPatchProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeDiagnosticPatchProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeDiagnosticPatchProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeDiagnosticPatchProperties)} does not support writing '{format}' format.");
            }

            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        EdgeDiagnosticPatchProperties IJsonModel<EdgeDiagnosticPatchProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeDiagnosticPatchProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeDiagnosticPatchProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeDiagnosticPatchProperties(document.RootElement, options);
        }

        internal static EdgeDiagnosticPatchProperties DeserializeEdgeDiagnosticPatchProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeDiagnosticPatchProperties(serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeDiagnosticPatchProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeDiagnosticPatchProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeDiagnosticPatchProperties)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeDiagnosticPatchProperties IPersistableModel<EdgeDiagnosticPatchProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeDiagnosticPatchProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeDiagnosticPatchProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeDiagnosticPatchProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeDiagnosticPatchProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeDiagnosticProperties.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> The properties of a Diagnostic resource. </summary>
    internal partial class EdgeDiagnosticProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeDiagnosticProperties"/>. </summary>
        public EdgeDiagnosticProperties()
        {
        }

        /// <summary> Initializes a new instance of <see cref="EdgeDiagnosticProperties"/>. </summary>
        /// <param name="provisioningState"> The status of the last operation. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeDiagnosticProperties(WorkloadOrchestrationProvisioningState? provisioningState, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ProvisioningState = provisioningState;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The status of the last operation. </summary>
        public WorkloadOrchestrationProvisioningState? ProvisioningState { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeDiagnosticProperties.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    internal partial class EdgeDiagnosticProperties : IUtf8JsonSerializable, IJsonModel<EdgeDiagnosticProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeDiagnosticProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeDiagnosticProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeDiagnosticProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeDiagnosticProperties)} does not support writing '{format}' format.");
            }

            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        EdgeDiagnosticProperties IJsonModel<EdgeDiagnosticProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeDiagnosticProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeDiagnosticProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeDiagnosticProperties(document.RootElement, options);
        }

        internal static EdgeDiagnosticProperties DeserializeEdgeDiagnosticProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            WorkloadOrchestrationProvisioningState? provisioningState = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new WorkloadOrchestrationProvisioningState(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeDiagnosticProperties(provisioningState, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeDiagnosticProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeDiagnosticProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeDiagnosticProperties)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeDiagnosticProperties IPersistableModel<EdgeDiagnosticProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeDiagnosticProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeDiagnosticProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeDiagnosticProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeDiagnosticProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeDynamicSchemaProperties.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> DynamicSchema Properties. </summary>
    public partial class EdgeDynamicSchemaProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeDynamicSchemaProperties"/>. </summary>
        public EdgeDynamicSchemaProperties()
        {
        }

        /// <summary> Initializes a new instance of <see cref="EdgeDynamicSchemaProperties"/>. </summary>
        /// <param name="configurationType"> Type of configuration. </param>
        /// <param name="configurationModel"> Type of configuration model. </param>
        /// <param name="provisioningState"> Provisioning state of resource. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeDynamicSchemaProperties(EdgeSchemaConfigurationType? configurationType, EdgeSchemaConfigurationModelType? configurationModel, WorkloadOrchestrationProvisioningState? provisioningState, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ConfigurationType = configurationType;
            ConfigurationModel = configurationModel;
            ProvisioningState = provisioningState;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Type of configuration. </summary>
        public EdgeSchemaConfigurationType? ConfigurationType { get; }
        /// <summary> Type of configuration model. </summary>
        public EdgeSchemaConfigurationModelType? ConfigurationModel { get; }
        /// <summary> Provisioning state of resource. </summary>
        public WorkloadOrchestrationProvisioningState? ProvisioningState { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeDynamicSchemaProperties.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class EdgeDynamicSchemaProperties : IUtf8JsonSerializable, IJsonModel<EdgeDynamicSchemaProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeDynamicSchemaProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeDynamicSchemaProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeDynamicSchemaProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeDynamicSchemaProperties)} does not support writing '{format}' format.");
            }

            if (options.Format != "W" && Optional.IsDefined(ConfigurationType))
            {
                writer.WritePropertyName("configurationType"u8);
                writer.WriteStringValue(ConfigurationType.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(ConfigurationModel))
            {
                writer.WritePropertyName("configurationModel"u8);
                writer.WriteStringValue(ConfigurationModel.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        EdgeDynamicSchemaProperties IJsonModel<EdgeDynamicSchemaProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeDynamicSchemaProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeDynamicSchemaProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeDynamicSchemaProperties(document.RootElement, options);
        }

        internal static EdgeDynamicSchemaProperties DeserializeEdgeDynamicSchemaProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            EdgeSchemaConfigurationType? configurationType = default;
            EdgeSchemaConfigurationModelType? configurationModel = default;
            WorkloadOrchestrationProvisioningState? provisioningState = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("configurationType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    configurationType = new EdgeSchemaConfigurationType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("configurationModel"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    configurationModel = new EdgeSchemaConfigurationModelType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new WorkloadOrchestrationProvisioningState(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeDynamicSchemaProperties(configurationType, configurationModel, provisioningState, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeDynamicSchemaProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeDynamicSchemaProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeDynamicSchemaProperties)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeDynamicSchemaProperties IPersistableModel<EdgeDynamicSchemaProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeDynamicSchemaProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeDynamicSchemaProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeDynamicSchemaProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeDynamicSchemaProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeExecutionProperties.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Execution Properties. </summary>
    public partial class EdgeExecutionProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeExecutionProperties"/>. </summary>
        /// <param name="workflowVersionId"> Workflow version of execution. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workflowVersionId"/> is null. </exception>
        public EdgeExecutionProperties(string workflowVersionId)
        {
            Argument.AssertNotNull(workflowVersionId, nameof(workflowVersionId));

            WorkflowVersionId = workflowVersionId;
            Specification = new ChangeTrackingDictionary<string, BinaryData>();
        }

        /// <summary> Initializes a new instance of <see cref="EdgeExecutionProperties"/>. </summary>
        /// <param name="workflowVersionId"> Workflow version of execution. </param>
        /// <param name="specification"> Execution specification. </param>
        /// <param name="status"> Status of Execution. </param>
        /// <param name="provisioningState"> Provisioning state of resource. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeExecutionProperties(string workflowVersionId, IDictionary<string, BinaryData> specification, EdgeExecutionStatus status, WorkloadOrchestrationProvisioningState? provisioningState, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            WorkflowVersionId = workflowVersionId;
            Specification = specification;
            Status = status;
            ProvisioningState = provisioningState;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="EdgeExecutionProperties"/> for deserialization. </summary>
        internal EdgeExecutionProperties()
        {
        }

        /// <summary> Workflow version of execution. </summary>
        public string WorkflowVersionId { get; set; }
        /// <summary>
        /// Execution specification
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IDictionary<string, BinaryData> Specification { get; }
        /// <summary> Status of Execution. </summary>
        public EdgeExecutionStatus Status { get; }
        /// <summary> Provisioning state of resource. </summary>
        public WorkloadOrchestrationProvisioningState? ProvisioningState { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeExecutionProperties.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class EdgeExecutionProperties : IUtf8JsonSerializable, IJsonModel<EdgeExecutionProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeExecutionProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeExecutionProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeExecutionProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeExecutionProperties)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("workflowVersionId"u8);
            writer.WriteStringValue(WorkflowVersionId);
            if (Optional.IsCollectionDefined(Specification))
            {
                writer.WritePropertyName("specification"u8);
                writer.WriteStartObject();
                foreach (var item in Specification)
                {
                    writer.WritePropertyName(item.Key);
                    if (item.Value == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
                writer.WriteEndObject();
            }
            if (options.Format != "W" && Optional.IsDefined(Status))
            {
                writer.WritePropertyName("status"u8);
                writer.WriteObjectValue(Status, options);
            }
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        EdgeExecutionProperties IJsonModel<EdgeExecutionProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeExecutionProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeExecutionProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeExecutionProperties(document.RootElement, options);
        }

        internal static EdgeExecutionProperties DeserializeEdgeExecutionProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string workflowVersionId = default;
            IDictionary<string, BinaryData> specification = default;
            EdgeExecutionStatus status = default;
            WorkloadOrchestrationProvisioningState? provisioningState = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("workflowVersionId"u8))
                {
                    workflowVersionId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("specification"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, BinaryData> dictionary = new Dictionary<string, BinaryData>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.Value.ValueKind == JsonValueKind.Null)
                        {
                            dictionary.Add(property0.Name, null);
                        }
                        else
                        {
                            dictionary.Add(property0.Name, BinaryData.FromString(property0.Value.GetRawText()));
                        }
                    }
                    specification = dictionary;
                    continue;
                }
                if (property.NameEquals("status"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    status = EdgeExecutionStatus.DeserializeEdgeExecutionStatus(property.Value, options);
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new WorkloadOrchestrationProvisioningState(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeExecutionProperties(workflowVersionId, specification ?? new ChangeTrackingDictionary<string, BinaryData>(), status, provisioningState, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeExecutionProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeExecutionProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeExecutionProperties)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeExecutionProperties IPersistableModel<EdgeExecutionProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeExecutionProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeExecutionProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeExecutionProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeExecutionProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeExecutionStageStatus.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Result of Stage execution. </summary>
    public partial class EdgeExecutionStageStatus
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeExecutionStageStatus"/>. </summary>
        internal EdgeExecutionStageStatus()
        {
            Inputs = new ChangeTrackingDictionary<string, BinaryData>();
            Outputs = new ChangeTrackingDictionary<string, BinaryData>();
        }

        /// <summary> Initializes a new instance of <see cref="EdgeExecutionStageStatus"/>. </summary>
        /// <param name="status"> Deployment status. </param>
        /// <param name="statusMessage"> Status message. </param>
        /// <param name="stage"> Current stage. </param>
        /// <param name="nextstage"> Next stage. </param>
        /// <param name="errorMessage"> Error message. </param>
        /// <param name="isActive"> whether this stage is active or inactive. </param>
        /// <param name="inputs"> The inputs of the StageHistory, Inputs holds a key-value map of user-defined parameters for the initial stage. </param>
        /// <param name="outputs"> The outputs of the StageHistory, it is different as the different input stages. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeExecutionStageStatus(int? status, string statusMessage, string stage, string nextstage, string errorMessage, InstanceActiveState? isActive, IReadOnlyDictionary<string, BinaryData> inputs, IReadOnlyDictionary<string, BinaryData> outputs, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Status = status;
            StatusMessage = statusMessage;
            Stage = stage;
            Nextstage = nextstage;
            ErrorMessage = errorMessage;
            IsActive = isActive;
            Inputs = inputs;
            Outputs = outputs;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Deployment status. </summary>
        public int? Status { get; }
        /// <summary> Status message. </summary>
        public string StatusMessage { get; }
        /// <summary> Current stage. </summary>
        public string Stage { get; }
        /// <summary> Next stage. </summary>
        public string Nextstage { get; }
        /// <summary> Error message. </summary>
        public string ErrorMessage { get; }
        /// <summary> whether this stage is active or inactive. </summary>
        public InstanceActiveState? IsActive { get; }
        /// <summary>
        /// The inputs of the StageHistory, Inputs holds a key-value map of user-defined parameters for the initial stage
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IReadOnlyDictionary<string, BinaryData> Inputs { get; }
        /// <summary>
        /// The outputs of the StageHistory, it is different as the different input stages.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IReadOnlyDictionary<string, BinaryData> Outputs { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeExecutionStageStatus.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class EdgeExecutionStageStatus : IUtf8JsonSerializable, IJsonModel<EdgeExecutionStageStatus>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeExecutionStageStatus>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeExecutionStageStatus>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeExecutionStageStatus>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeExecutionStageStatus)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(Status))
            {
                writer.WritePropertyName("status"u8);
                writer.WriteNumberValue(Status.Value);
            }
            if (Optional.IsDefined(StatusMessage))
            {
                writer.WritePropertyName("statusMessage"u8);
                writer.WriteStringValue(StatusMessage);
            }
            if (Optional.IsDefined(Stage))
            {
                writer.WritePropertyName("stage"u8);
                writer.WriteStringValue(Stage);
            }
            if (Optional.IsDefined(Nextstage))
            {
                writer.WritePropertyName("nextstage"u8);
                writer.WriteStringValue(Nextstage);
            }
            if (Optional.IsDefined(ErrorMessage))
            {
                writer.WritePropertyName("errorMessage"u8);
                writer.WriteStringValue(ErrorMessage);
            }
            if (Optional.IsDefined(IsActive))
            {
                writer.WritePropertyName("isActive"u8);
                writer.WriteStringValue(IsActive.Value.ToString());
            }
            if (Optional.IsCollectionDefined(Inputs))
            {
                writer.WritePropertyName("inputs"u8);
                writer.WriteStartObject();
                foreach (var item in Inputs)
                {
                    writer.WritePropertyName(item.Key);
                    if (item.Value == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
                writer.WriteEndObject();
            }
            if (Optional.IsCollectionDefined(Outputs))
            {
                writer.WritePropertyName("outputs"u8);
                writer.WriteStartObject();
                foreach (var item in Outputs)
                {
                    writer.WritePropertyName(item.Key);
                    if (item.Value == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
                writer.WriteEndObject();
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        EdgeExecutionStageStatus IJsonModel<EdgeExecutionStageStatus>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeExecutionStageStatus>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeExecutionStageStatus)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeExecutionStageStatus(document.RootElement, options);
        }

        internal static EdgeExecutionStageStatus DeserializeEdgeExecutionStageStatus(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            int? status = default;
            string statusMessage = default;
            string stage = default;
            string nextstage = default;
            string errorMessage = default;
            InstanceActiveState? isActive = default;
            IReadOnlyDictionary<string, BinaryData> inputs = default;
            IReadOnlyDictionary<string, BinaryData> outputs = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("status"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    status = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("statusMessage"u8))
                {
                    statusMessage = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("stage"u8))
                {
                    stage = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("nextstage"u8))
                {
                    nextstage = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("errorMessage"u8))
                {
                    errorMessage = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("isActive"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isActive = new InstanceActiveState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("inputs"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, BinaryData> dictionary = new Dictionary<string, BinaryData>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.Value.ValueKind == JsonValueKind.Null)
                        {
                            dictionary.Add(property0.Name, null);
                        }
                        else
                        {
                            dictionary.Add(property0.Name, BinaryData.FromString(property0.Value.GetRawText()));
                        }
                    }
                    inputs = dictionary;
                    continue;
                }
                if (property.NameEquals("outputs"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, BinaryData> dictionary = new Dictionary<string, BinaryData>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.Value.ValueKind == JsonValueKind.Null)
                        {
                            dictionary.Add(property0.Name, null);
                        }
                        else
                        {
                            dictionary.Add(property0.Name, BinaryData.FromString(property0.Value.GetRawText()));
                        }
                    }
                    outputs = dictionary;
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeExecutionStageStatus(
                status,
                statusMessage,
                stage,
                nextstage,
                errorMessage,
                isActive,
                inputs ?? new ChangeTrackingDictionary<string, BinaryData>(),
                outputs ?? new ChangeTrackingDictionary<string, BinaryData>(),
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeExecutionStageStatus>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeExecutionStageStatus>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeExecutionStageStatus)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeExecutionStageStatus IPersistableModel<EdgeExecutionStageStatus>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeExecutionStageStatus>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeExecutionStageStatus(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeExecutionStageStatus)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeExecutionStageStatus>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeExecutionStatus.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Execution Status. </summary>
    public partial class EdgeExecutionStatus
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeExecutionStatus"/>. </summary>
        internal EdgeExecutionStatus()
        {
            StageHistory = new ChangeTrackingList<EdgeExecutionStageStatus>();
        }

        /// <summary> Initializes a new instance of <see cref="EdgeExecutionStatus"/>. </summary>
        /// <param name="updateOn"> The lastModified timestamp of the Status. </param>
        /// <param name="status"> Deployment status. </param>
        /// <param name="statusMessage"> status details. </param>
        /// <param name="stageHistory"> target resource statuses. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeExecutionStatus(DateTimeOffset? updateOn, int? status, string statusMessage, IReadOnlyList<EdgeExecutionStageStatus> stageHistory, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            UpdateOn = updateOn;
            Status = status;
            StatusMessage = statusMessage;
            StageHistory = stageHistory;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The lastModified timestamp of the Status. </summary>
        public DateTimeOffset? UpdateOn { get; }
        /// <summary> Deployment status. </summary>
        public int? Status { get; }
        /// <summary> status details. </summary>
        public string StatusMessage { get; }
        /// <summary> target resource statuses. </summary>
        public IReadOnlyList<EdgeExecutionStageStatus> StageHistory { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeExecutionStatus.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class EdgeExecutionStatus : IUtf8JsonSerializable, IJsonModel<EdgeExecutionStatus>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeExecutionStatus>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeExecutionStatus>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeExecutionStatus>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeExecutionStatus)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(UpdateOn))
            {
                writer.WritePropertyName("updateTime"u8);
                writer.WriteStringValue(UpdateOn.Value, "O");
            }
            if (Optional.IsDefined(Status))
            {
                writer.WritePropertyName("status"u8);
                writer.WriteNumberValue(Status.Value);
            }
            if (Optional.IsDefined(StatusMessage))
            {
                writer.WritePropertyName("statusMessage"u8);
                writer.WriteStringValue(StatusMessage);
            }
            if (Optional.IsCollectionDefined(StageHistory))
            {
                writer.WritePropertyName("stageHistory"u8);
                writer.WriteStartArray();
                foreach (var item in StageHistory)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        EdgeExecutionStatus IJsonModel<EdgeExecutionStatus>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeExecutionStatus>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeExecutionStatus)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeExecutionStatus(document.RootElement, options);
        }

        internal static EdgeExecutionStatus DeserializeEdgeExecutionStatus(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            DateTimeOffset? updateTime = default;
            int? status = default;
            string statusMessage = default;
            IReadOnlyList<EdgeExecutionStageStatus> stageHistory = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("updateTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    updateTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("status"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    status = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("statusMessage"u8))
                {
                    statusMessage = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("stageHistory"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<EdgeExecutionStageStatus> array = new List<EdgeExecutionStageStatus>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(EdgeExecutionStageStatus.DeserializeEdgeExecutionStageStatus(item, options));
                    }
                    stageHistory = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeExecutionStatus(updateTime, status, statusMessage, stageHistory ?? new ChangeTrackingList<EdgeExecutionStageStatus>(), serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeExecutionStatus>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeExecutionStatus>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeExecutionStatus)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeExecutionStatus IPersistableModel<EdgeExecutionStatus>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeExecutionStatus>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeExecutionStatus(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeExecutionStatus)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeExecutionStatus>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeJobContent.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary>
    /// Base Job Parameter
    /// Please note <see cref="EdgeJobContent"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
    /// The available derived classes include <see cref="DeployJobContent"/>.
    /// </summary>
    public abstract partial class EdgeJobContent
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private protected IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeJobContent"/>. </summary>
        protected EdgeJobContent()
        {
        }

        /// <summary> Initializes a new instance of <see cref="EdgeJobContent"/>. </summary>
        /// <param name="jobType"> Job type discriminator value. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeJobContent(EdgeJobType jobType, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            JobType = jobType;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Job type discriminator value. </summary>
        internal EdgeJobType JobType { get; set; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeJobContent.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    [PersistableModelProxy(typeof(UnknownEdgeJobContent))]
    public partial class EdgeJobContent : IUtf8JsonSerializable, IJsonModel<EdgeJobContent>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeJobContent>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeJobContent>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeJobContent>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeJobContent)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("jobType"u8);
            writer.WriteStringValue(JobType.ToString());
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        EdgeJobContent IJsonModel<EdgeJobContent>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeJobContent>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeJobContent)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeJobContent(document.RootElement, options);
        }

        internal static EdgeJobContent DeserializeEdgeJobContent(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            if (element.TryGetProperty("jobType", out JsonElement discriminator))
            {
                switch (discriminator.GetString())
                {
                    case "deploy": return DeployJobContent.DeserializeDeployJobContent(element, options);
                }
            }
            return UnknownEdgeJobContent.DeserializeUnknownEdgeJobContent(element, options);
        }

        BinaryData IPersistableModel<EdgeJobContent>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeJobContent>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeJobContent)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeJobContent IPersistableModel<EdgeJobContent>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeJobContent>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeJobContent(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeJobContent)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeJobContent>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeJobProperties.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Properties of a Job resource, including type, status, parameters, steps, and error details. </summary>
    public partial class EdgeJobProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeJobProperties"/>. </summary>
        /// <param name="jobType"> The type of job. </param>
        /// <param name="status"> Status of the job. </param>
        internal EdgeJobProperties(EdgeJobType jobType, EdgeJobStatus status)
        {
            JobType = jobType;
            Status = status;
            Steps = new ChangeTrackingList<EdgeJobStep>();
        }

        /// <summary> Initializes a new instance of <see cref="EdgeJobProperties"/>. </summary>
        /// <param name="jobType"> The type of job. </param>
        /// <param name="startOn"> Start time of the job (ISO8601). </param>
        /// <param name="endOn"> End time of the job (ISO8601). </param>
        /// <param name="status"> Status of the job. </param>
        /// <param name="jobParameter">
        /// Parameters for the job.
        /// Please note <see cref="EdgeJobContent"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="DeployJobContent"/>.
        /// </param>
        /// <param name="correlationId"> Correlation ID for tracking. </param>
        /// <param name="steps"> Steps and substatuses for the job. </param>
        /// <param name="triggeredBy"> The OID or identity that triggered the job. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <param name="errorDetails"> Error Details if any failure is there. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeJobProperties(EdgeJobType jobType, DateTimeOffset? startOn, DateTimeOffset? endOn, EdgeJobStatus status, EdgeJobContent jobParameter, string correlationId, IReadOnlyList<EdgeJobStep> steps, string triggeredBy, WorkloadOrchestrationProvisioningState? provisioningState, ResponseError errorDetails, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            JobType = jobType;
            StartOn = startOn;
            EndOn = endOn;
            Status = status;
            JobParameter = jobParameter;
            CorrelationId = correlationId;
            Steps = steps;
            TriggeredBy = triggeredBy;
            ProvisioningState = provisioningState;
            ErrorDetails = errorDetails;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="EdgeJobProperties"/> for deserialization. </summary>
        internal EdgeJobProperties()
        {
        }

        /// <summary> The type of job. </summary>
        public EdgeJobType JobType { get; }
        /// <summary> Start time of the job (ISO8601). </summary>
        public DateTimeOffset? StartOn { get; }
        /// <summary> End time of the job (ISO8601). </summary>
        public DateTimeOffset? EndOn { get; }
        /// <summary> Status of the job. </summary>
        public EdgeJobStatus Status { get; }
        /// <summary>
        /// Parameters for the job.
        /// Please note <see cref="EdgeJobContent"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="DeployJobContent"/>.
        /// </summary>
        public EdgeJobContent JobParameter { get; }
        /// <summary> Correlation ID for tracking. </summary>
        public string CorrelationId { get; }
        /// <summary> Steps and substatuses for the job. </summary>
        public IReadOnlyList<EdgeJobStep> Steps { get; }
        /// <summary> The OID or identity that triggered the job. </summary>
        public string TriggeredBy { get; }
        /// <summary> Provisioning state of the resource. </summary>
        public WorkloadOrchestrationProvisioningState? ProvisioningState { get; }
        /// <summary> Error Details if any failure is there. </summary>
        public ResponseError ErrorDetails { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeJobProperties.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class EdgeJobProperties : IUtf8JsonSerializable, IJsonModel<EdgeJobProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeJobProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeJobProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeJobProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeJobProperties)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("jobType"u8);
            writer.WriteStringValue(JobType.ToString());
            if (Optional.IsDefined(StartOn))
            {
                writer.WritePropertyName("startTime"u8);
                writer.WriteStringValue(StartOn.Value, "O");
            }
            if (Optional.IsDefined(EndOn))
            {
                writer.WritePropertyName("endTime"u8);
                writer.WriteStringValue(EndOn.Value, "O");
            }
            writer.WritePropertyName("status"u8);
            writer.WriteStringValue(Status.ToString());
            if (Optional.IsDefined(JobParameter))
            {
                writer.WritePropertyName("jobParameter"u8);
                writer.WriteObjectValue(JobParameter, options);
            }
            if (Optional.IsDefined(CorrelationId))
            {
                writer.WritePropertyName("correlationId"u8);
                writer.WriteStringValue(CorrelationId);
            }
            if (Optional.IsCollectionDefined(Steps))
            {
                writer.WritePropertyName("steps"u8);
                writer.WriteStartArray();
                foreach (var item in Steps)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(TriggeredBy))
            {
                writer.WritePropertyName("triggeredBy"u8);
                writer.WriteStringValue(TriggeredBy);
            }
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(ErrorDetails))
            {
                writer.WritePropertyName("errorDetails"u8);
                ((IJsonModel<ResponseError>)ErrorDetails).Write(writer, options);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        EdgeJobProperties IJsonModel<EdgeJobProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeJobProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeJobProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeJobProperties(document.RootElement, options);
        }

        internal static EdgeJobProperties DeserializeEdgeJobProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            EdgeJobType jobType = default;
            DateTimeOffset? startTime = default;
            DateTimeOffset? endTime = default;
            EdgeJobStatus status = default;
            EdgeJobContent jobParameter = default;
            string correlationId = default;
            IReadOnlyList<EdgeJobStep> steps = default;
            string triggeredBy = default;
            WorkloadOrchestrationProvisioningState? provisioningState = default;
            ResponseError errorDetails = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("jobType"u8))
                {
                    jobType = new EdgeJobType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("startTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    startTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("endTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    endTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("status"u8))
                {
                    status = new EdgeJobStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("jobParameter"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    jobParameter = EdgeJobContent.DeserializeEdgeJobContent(property.Value, options);
                    continue;
                }
                if (property.NameEquals("correlationId"u8))
                {
                    correlationId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("steps"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<EdgeJobStep> array = new List<EdgeJobStep>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(EdgeJobStep.DeserializeEdgeJobStep(item, options));
                    }
                    steps = array;
                    continue;
                }
                if (property.NameEquals("triggeredBy"u8))
                {
                    triggeredBy = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new WorkloadOrchestrationProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("errorDetails"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    errorDetails = ModelReaderWriter.Read<ResponseError>(new BinaryData(Encoding.UTF8.GetBytes(property.Value.GetRawText())), options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeJobProperties(
                jobType,
                startTime,
                endTime,
                status,
                jobParameter,
                correlationId,
                steps ?? new ChangeTrackingList<EdgeJobStep>(),
                triggeredBy,
                provisioningState,
                errorDetails,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeJobProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeJobProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeJobProperties)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeJobProperties IPersistableModel<EdgeJobProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeJobProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeJobProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeJobProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeJobProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeJobStatus.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Status of a job or job step. </summary>
    public readonly partial struct EdgeJobStatus : IEquatable<EdgeJobStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="EdgeJobStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EdgeJobStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NotStartedValue = "NotStarted";
        private const string InProgressValue = "InProgress";
        private const string SucceededValue = "Succeeded";
        private const string FailedValue = "Failed";

        /// <summary> The job or step is not started. </summary>
        public static EdgeJobStatus NotStarted { get; } = new EdgeJobStatus(NotStartedValue);
        /// <summary> The job or step is in progress. </summary>
        public static EdgeJobStatus InProgress { get; } = new EdgeJobStatus(InProgressValue);
        /// <summary> The job or step succeeded. </summary>
        public static EdgeJobStatus Succeeded { get; } = new EdgeJobStatus(SucceededValue);
        /// <summary> The job or step failed. </summary>
        public static EdgeJobStatus Failed { get; } = new EdgeJobStatus(FailedValue);
        /// <summary> Determines if two <see cref="EdgeJobStatus"/> values are the same. </summary>
        public static bool operator ==(EdgeJobStatus left, EdgeJobStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EdgeJobStatus"/> values are not the same. </summary>
        public static bool operator !=(EdgeJobStatus left, EdgeJobStatus right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="EdgeJobStatus"/>. </summary>
        public static implicit operator EdgeJobStatus(string value) => new EdgeJobStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EdgeJobStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EdgeJobStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeJobStep.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Job Step. </summary>
    public partial class EdgeJobStep
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeJobStep"/>. </summary>
        /// <param name="name"> Name of the step. </param>
        /// <param name="status"> Status of the step. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        internal EdgeJobStep(string name, EdgeJobStatus status)
        {
            Argument.AssertNotNull(name, nameof(name));

            Name = name;
            Status = status;
            Steps = new ChangeTrackingList<EdgeJobStep>();
        }

        /// <summary> Initializes a new instance of <see cref="EdgeJobStep"/>. </summary>
        /// <param name="name"> Name of the step. </param>
        /// <param name="status"> Status of the step. </param>
        /// <param name="startOn"> Start time of the step (ISO8601). </param>
        /// <param name="endOn"> End time of the step (ISO8601). </param>
        /// <param name="message"> Message for the step. </param>
        /// <param name="statistics">
        /// Statistics for the step
        /// Please note <see cref="EdgeJobStepStatistics"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="DeployJobStepStatistics"/>.
        /// </param>
        /// <param name="steps"> Nested substeps for this step. </param>
        /// <param name="errorDetails"> Error Details if any failure is there. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeJobStep(string name, EdgeJobStatus status, DateTimeOffset? startOn, DateTimeOffset? endOn, string message, EdgeJobStepStatistics statistics, IReadOnlyList<EdgeJobStep> steps, ResponseError errorDetails, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Name = name;
            Status = status;
            StartOn = startOn;
            EndOn = endOn;
            Message = message;
            Statistics = statistics;
            Steps = steps;
            ErrorDetails = errorDetails;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="EdgeJobStep"/> for deserialization. </summary>
        internal EdgeJobStep()
        {
        }

        /// <summary> Name of the step. </summary>
        public string Name { get; }
        /// <summary> Status of the step. </summary>
        public EdgeJobStatus Status { get; }
        /// <summary> Start time of the step (ISO8601). </summary>
        public DateTimeOffset? StartOn { get; }
        /// <summary> End time of the step (ISO8601). </summary>
        public DateTimeOffset? EndOn { get; }
        /// <summary> Message for the step. </summary>
        public string Message { get; }
        /// <summary>
        /// Statistics for the step
        /// Please note <see cref="EdgeJobStepStatistics"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="DeployJobStepStatistics"/>.
        /// </summary>
        public EdgeJobStepStatistics Statistics { get; }
        /// <summary> Nested substeps for this step. </summary>
        public IReadOnlyList<EdgeJobStep> Steps { get; }
        /// <summary> Error Details if any failure is there. </summary>
        public ResponseError ErrorDetails { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeJobStep.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class EdgeJobStep : IUtf8JsonSerializable, IJsonModel<EdgeJobStep>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeJobStep>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeJobStep>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeJobStep>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeJobStep)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("name"u8);
            writer.WriteStringValue(Name);
            writer.WritePropertyName("status"u8);
            writer.WriteStringValue(Status.ToString());
            if (Optional.IsDefined(StartOn))
            {
                writer.WritePropertyName("startTime"u8);
                writer.WriteStringValue(StartOn.Value, "O");
            }
            if (Optional.IsDefined(EndOn))
            {
                writer.WritePropertyName("endTime"u8);
                writer.WriteStringValue(EndOn.Value, "O");
            }
            if (Optional.IsDefined(Message))
            {
                writer.WritePropertyName("message"u8);
                writer.WriteStringValue(Message);
            }
            if (Optional.IsDefined(Statistics))
            {
                writer.WritePropertyName("statistics"u8);
                writer.WriteObjectValue(Statistics, options);
            }
            if (Optional.IsCollectionDefined(Steps))
            {
                writer.WritePropertyName("steps"u8);
                writer.WriteStartArray();
                foreach (var item in Steps)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsDefined(ErrorDetails))
            {
                writer.WritePropertyName("errorDetails"u8);
                ((IJsonModel<ResponseError>)ErrorDetails).Write(writer, options);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        EdgeJobStep IJsonModel<EdgeJobStep>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeJobStep>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeJobStep)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeJobStep(document.RootElement, options);
        }

        internal static EdgeJobStep DeserializeEdgeJobStep(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string name = default;
            EdgeJobStatus status = default;
            DateTimeOffset? startTime = default;
            DateTimeOffset? endTime = default;
            string message = default;
            EdgeJobStepStatistics statistics = default;
            IReadOnlyList<EdgeJobStep> steps = default;
            ResponseError errorDetails = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("status"u8))
                {
                    status = new EdgeJobStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("startTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    startTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("endTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    endTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("message"u8))
                {
                    message = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("statistics"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    statistics = EdgeJobStepStatistics.DeserializeEdgeJobStepStatistics(property.Value, options);
                    continue;
                }
                if (property.NameEquals("steps"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<EdgeJobStep> array = new List<EdgeJobStep>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DeserializeEdgeJobStep(item, options));
                    }
                    steps = array;
                    continue;
                }
                if (property.NameEquals("errorDetails"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    errorDetails = ModelReaderWriter.Read<ResponseError>(new BinaryData(Encoding.UTF8.GetBytes(property.Value.GetRawText())), options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeJobStep(
                name,
                status,
                startTime,
                endTime,
                message,
                statistics,
                steps ?? new ChangeTrackingList<EdgeJobStep>(),
                errorDetails,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeJobStep>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeJobStep>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeJobStep)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeJobStep IPersistableModel<EdgeJobStep>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeJobStep>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeJobStep(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeJobStep)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeJobStep>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeJobStepStatistics.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary>
    /// Base Job Step Statistics
    /// Please note <see cref="EdgeJobStepStatistics"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
    /// The available derived classes include <see cref="DeployJobStepStatistics"/>.
    /// </summary>
    public abstract partial class EdgeJobStepStatistics
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private protected IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeJobStepStatistics"/>. </summary>
        protected EdgeJobStepStatistics()
        {
        }

        /// <summary> Initializes a new instance of <see cref="EdgeJobStepStatistics"/>. </summary>
        /// <param name="statisticsType"> Statistics type discriminator value. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeJobStepStatistics(EdgeJobType statisticsType, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            StatisticsType = statisticsType;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Statistics type discriminator value. </summary>
        internal EdgeJobType StatisticsType { get; set; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeJobStepStatistics.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    [PersistableModelProxy(typeof(UnknownEdgeJobStepStatistics))]
    public partial class EdgeJobStepStatistics : IUtf8JsonSerializable, IJsonModel<EdgeJobStepStatistics>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeJobStepStatistics>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeJobStepStatistics>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeJobStepStatistics>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeJobStepStatistics)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("statisticsType"u8);
            writer.WriteStringValue(StatisticsType.ToString());
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        EdgeJobStepStatistics IJsonModel<EdgeJobStepStatistics>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeJobStepStatistics>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeJobStepStatistics)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeJobStepStatistics(document.RootElement, options);
        }

        internal static EdgeJobStepStatistics DeserializeEdgeJobStepStatistics(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            if (element.TryGetProperty("statisticsType", out JsonElement discriminator))
            {
                switch (discriminator.GetString())
                {
                    case "deploy": return DeployJobStepStatistics.DeserializeDeployJobStepStatistics(element, options);
                }
            }
            return UnknownEdgeJobStepStatistics.DeserializeUnknownEdgeJobStepStatistics(element, options);
        }

        BinaryData IPersistableModel<EdgeJobStepStatistics>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeJobStepStatistics>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeJobStepStatistics)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeJobStepStatistics IPersistableModel<EdgeJobStepStatistics>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeJobStepStatistics>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeJobStepStatistics(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeJobStepStatistics)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeJobStepStatistics>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeJobType.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> JobType for the job. Supports extensibility via string values. </summary>
    public readonly partial struct EdgeJobType : IEquatable<EdgeJobType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="EdgeJobType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EdgeJobType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string DeployValue = "deploy";
        private const string StagingValue = "staging";
        private const string ExternalValidationValue = "externalValidation";

        /// <summary> A deployment job. </summary>
        public static EdgeJobType Deploy { get; } = new EdgeJobType(DeployValue);
        /// <summary> A staging job. </summary>
        public static EdgeJobType Staging { get; } = new EdgeJobType(StagingValue);
        /// <summary> A validation job. </summary>
        public static EdgeJobType ExternalValidation { get; } = new EdgeJobType(ExternalValidationValue);
        /// <summary> Determines if two <see cref="EdgeJobType"/> values are the same. </summary>
        public static bool operator ==(EdgeJobType left, EdgeJobType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EdgeJobType"/> values are not the same. </summary>
        public static bool operator !=(EdgeJobType left, EdgeJobType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="EdgeJobType"/>. </summary>
        public static implicit operator EdgeJobType(string value) => new EdgeJobType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EdgeJobType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EdgeJobType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeResourceState.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Resource Type State. </summary>
    public readonly partial struct EdgeResourceState : IEquatable<EdgeResourceState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="EdgeResourceState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EdgeResourceState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ActiveValue = "active";
        private const string InactiveValue = "inactive";

        /// <summary> Resource is active. </summary>
        public static EdgeResourceState Active { get; } = new EdgeResourceState(ActiveValue);
        /// <summary> Resource is inactive. </summary>
        public static EdgeResourceState Inactive { get; } = new EdgeResourceState(InactiveValue);
        /// <summary> Determines if two <see cref="EdgeResourceState"/> values are the same. </summary>
        public static bool operator ==(EdgeResourceState left, EdgeResourceState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EdgeResourceState"/> values are not the same. </summary>
        public static bool operator !=(EdgeResourceState left, EdgeResourceState right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="EdgeResourceState"/>. </summary>
        public static implicit operator EdgeResourceState(string value) => new EdgeResourceState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EdgeResourceState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EdgeResourceState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeSchemaConfigurationModelType.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Available configuration models. </summary>
    public readonly partial struct EdgeSchemaConfigurationModelType : IEquatable<EdgeSchemaConfigurationModelType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="EdgeSchemaConfigurationModelType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EdgeSchemaConfigurationModelType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ApplicationValue = "Application";
        private const string CommonValue = "Common";

        /// <summary> Configuration model Application. </summary>
        public static EdgeSchemaConfigurationModelType Application { get; } = new EdgeSchemaConfigurationModelType(ApplicationValue);
        /// <summary> Configuration model Common. </summary>
        public static EdgeSchemaConfigurationModelType Common { get; } = new EdgeSchemaConfigurationModelType(CommonValue);
        /// <summary> Determines if two <see cref="EdgeSchemaConfigurationModelType"/> values are the same. </summary>
        public static bool operator ==(EdgeSchemaConfigurationModelType left, EdgeSchemaConfigurationModelType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EdgeSchemaConfigurationModelType"/> values are not the same. </summary>
        public static bool operator !=(EdgeSchemaConfigurationModelType left, EdgeSchemaConfigurationModelType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="EdgeSchemaConfigurationModelType"/>. </summary>
        public static implicit operator EdgeSchemaConfigurationModelType(string value) => new EdgeSchemaConfigurationModelType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EdgeSchemaConfigurationModelType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EdgeSchemaConfigurationModelType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeSchemaConfigurationType.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Available configuration types. </summary>
    public readonly partial struct EdgeSchemaConfigurationType : IEquatable<EdgeSchemaConfigurationType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="EdgeSchemaConfigurationType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EdgeSchemaConfigurationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SharedValue = "Shared";
        private const string HierarchyValue = "Hierarchy";

        /// <summary> Configuration type Shared. </summary>
        public static EdgeSchemaConfigurationType Shared { get; } = new EdgeSchemaConfigurationType(SharedValue);
        /// <summary> Configuration type Hierarchy. </summary>
        public static EdgeSchemaConfigurationType Hierarchy { get; } = new EdgeSchemaConfigurationType(HierarchyValue);
        /// <summary> Determines if two <see cref="EdgeSchemaConfigurationType"/> values are the same. </summary>
        public static bool operator ==(EdgeSchemaConfigurationType left, EdgeSchemaConfigurationType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EdgeSchemaConfigurationType"/> values are not the same. </summary>
        public static bool operator !=(EdgeSchemaConfigurationType left, EdgeSchemaConfigurationType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="EdgeSchemaConfigurationType"/>. </summary>
        public static implicit operator EdgeSchemaConfigurationType(string value) => new EdgeSchemaConfigurationType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EdgeSchemaConfigurationType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EdgeSchemaConfigurationType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeSchemaPatch.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> The type used for update operations of the Schema. </summary>
    public partial class EdgeSchemaPatch
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeSchemaPatch"/>. </summary>
        public EdgeSchemaPatch()
        {
            Tags = new ChangeTrackingDictionary<string, string>();
        }

        /// <summary> Initializes a new instance of <see cref="EdgeSchemaPatch"/>. </summary>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeSchemaPatch(EdgeSchemaPatchProperties properties, IDictionary<string, string> tags, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Properties = properties;
            Tags = tags;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The resource-specific properties for this resource. </summary>
        public EdgeSchemaPatchProperties Properties { get; set; }
        /// <summary> Resource tags. </summary>
        public IDictionary<string, string> Tags { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeSchemaPatch.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class EdgeSchemaPatch : IUtf8JsonSerializable, IJsonModel<EdgeSchemaPatch>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeSchemaPatch>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeSchemaPatch>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSchemaPatch>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeSchemaPatch)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(Properties))
            {
                writer.WritePropertyName("properties"u8);
                writer.WriteObjectValue(Properties, options);
            }
            if (Optional.IsCollectionDefined(Tags))
            {
                writer.WritePropertyName("tags"u8);
                writer.WriteStartObject();
                foreach (var item in Tags)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        EdgeSchemaPatch IJsonModel<EdgeSchemaPatch>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSchemaPatch>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeSchemaPatch)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeSchemaPatch(document.RootElement, options);
        }

        internal static EdgeSchemaPatch DeserializeEdgeSchemaPatch(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            EdgeSchemaPatchProperties properties = default;
            IDictionary<string, string> tags = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    properties = EdgeSchemaPatchProperties.DeserializeEdgeSchemaPatchProperties(property.Value, options);
                    continue;
                }
                if (property.NameEquals("tags"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeSchemaPatch(properties, tags ?? new ChangeTrackingDictionary<string, string>(), serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeSchemaPatch>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSchemaPatch>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeSchemaPatch)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeSchemaPatch IPersistableModel<EdgeSchemaPatch>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSchemaPatch>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeSchemaPatch(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeSchemaPatch)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeSchemaPatch>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeSchemaPatchProperties.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> The updatable properties of the Schema. </summary>
    public partial class EdgeSchemaPatchProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeSchemaPatchProperties"/>. </summary>
        public EdgeSchemaPatchProperties()
        {
        }

        /// <summary> Initializes a new instance of <see cref="EdgeSchemaPatchProperties"/>. </summary>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeSchemaPatchProperties(IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeSchemaPatchProperties.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class EdgeSchemaPatchProperties : IUtf8JsonSerializable, IJsonModel<EdgeSchemaPatchProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeSchemaPatchProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeSchemaPatchProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSchemaPatchProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeSchemaPatchProperties)} does not support writing '{format}' format.");
            }

            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        EdgeSchemaPatchProperties IJsonModel<EdgeSchemaPatchProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSchemaPatchProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeSchemaPatchProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeSchemaPatchProperties(document.RootElement, options);
        }

        internal static EdgeSchemaPatchProperties DeserializeEdgeSchemaPatchProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeSchemaPatchProperties(serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeSchemaPatchProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSchemaPatchProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeSchemaPatchProperties)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeSchemaPatchProperties IPersistableModel<EdgeSchemaPatchProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSchemaPatchProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeSchemaPatchProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeSchemaPatchProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeSchemaPatchProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeSchemaProperties.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Schema Properties. </summary>
    public partial class EdgeSchemaProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeSchemaProperties"/>. </summary>
        public EdgeSchemaProperties()
        {
        }

        /// <summary> Initializes a new instance of <see cref="EdgeSchemaProperties"/>. </summary>
        /// <param name="currentVersion"> Current Version of schema. </param>
        /// <param name="provisioningState"> Provisioning state of resource. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeSchemaProperties(string currentVersion, WorkloadOrchestrationProvisioningState? provisioningState, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            CurrentVersion = currentVersion;
            ProvisioningState = provisioningState;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Current Version of schema. </summary>
        public string CurrentVersion { get; }
        /// <summary> Provisioning state of resource. </summary>
        public WorkloadOrchestrationProvisioningState? ProvisioningState { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeSchemaProperties.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class EdgeSchemaProperties : IUtf8JsonSerializable, IJsonModel<EdgeSchemaProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeSchemaProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeSchemaProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSchemaProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeSchemaProperties)} does not support writing '{format}' format.");
            }

            if (options.Format != "W" && Optional.IsDefined(CurrentVersion))
            {
                writer.WritePropertyName("currentVersion"u8);
                writer.WriteStringValue(CurrentVersion);
            }
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        EdgeSchemaProperties IJsonModel<EdgeSchemaProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSchemaProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeSchemaProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeSchemaProperties(document.RootElement, options);
        }

        internal static EdgeSchemaProperties DeserializeEdgeSchemaProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string currentVersion = default;
            WorkloadOrchestrationProvisioningState? provisioningState = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("currentVersion"u8))
                {
                    currentVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new WorkloadOrchestrationProvisioningState(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeSchemaProperties(currentVersion, provisioningState, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeSchemaProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSchemaProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeSchemaProperties)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeSchemaProperties IPersistableModel<EdgeSchemaProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSchemaProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeSchemaProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeSchemaProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeSchemaProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeSchemaReferenceProperties.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Schema Reference Properties. </summary>
    public partial class EdgeSchemaReferenceProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeSchemaReferenceProperties"/>. </summary>
        /// <param name="schemaId"> Schema Id of schema reference. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="schemaId"/> is null. </exception>
        internal EdgeSchemaReferenceProperties(string schemaId)
        {
            Argument.AssertNotNull(schemaId, nameof(schemaId));

            SchemaId = schemaId;
        }

        /// <summary> Initializes a new instance of <see cref="EdgeSchemaReferenceProperties"/>. </summary>
        /// <param name="schemaId"> Schema Id of schema reference. </param>
        /// <param name="provisioningState"> Provisioning state of resource. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeSchemaReferenceProperties(string schemaId, WorkloadOrchestrationProvisioningState? provisioningState, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            SchemaId = schemaId;
            ProvisioningState = provisioningState;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="EdgeSchemaReferenceProperties"/> for deserialization. </summary>
        internal EdgeSchemaReferenceProperties()
        {
        }

        /// <summary> Schema Id of schema reference. </summary>
        public string SchemaId { get; }
        /// <summary> Provisioning state of resource. </summary>
        public WorkloadOrchestrationProvisioningState? ProvisioningState { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeSchemaReferenceProperties.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class EdgeSchemaReferenceProperties : IUtf8JsonSerializable, IJsonModel<EdgeSchemaReferenceProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeSchemaReferenceProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeSchemaReferenceProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSchemaReferenceProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeSchemaReferenceProperties)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("schemaId"u8);
            writer.WriteStringValue(SchemaId);
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        EdgeSchemaReferenceProperties IJsonModel<EdgeSchemaReferenceProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSchemaReferenceProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeSchemaReferenceProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeSchemaReferenceProperties(document.RootElement, options);
        }

        internal static EdgeSchemaReferenceProperties DeserializeEdgeSchemaReferenceProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string schemaId = default;
            WorkloadOrchestrationProvisioningState? provisioningState = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("schemaId"u8))
                {
                    schemaId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new WorkloadOrchestrationProvisioningState(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeSchemaReferenceProperties(schemaId, provisioningState, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeSchemaReferenceProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSchemaReferenceProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeSchemaReferenceProperties)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeSchemaReferenceProperties IPersistableModel<EdgeSchemaReferenceProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSchemaReferenceProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeSchemaReferenceProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeSchemaReferenceProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeSchemaReferenceProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeSchemaVersionProperties.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Schema Version Properties. </summary>
    public partial class EdgeSchemaVersionProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeSchemaVersionProperties"/>. </summary>
        /// <param name="value"> Value of schema version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EdgeSchemaVersionProperties(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            Value = value;
        }

        /// <summary> Initializes a new instance of <see cref="EdgeSchemaVersionProperties"/>. </summary>
        /// <param name="value"> Value of schema version. </param>
        /// <param name="provisioningState"> Provisioning state of resource. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeSchemaVersionProperties(string value, WorkloadOrchestrationProvisioningState? provisioningState, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Value = value;
            ProvisioningState = provisioningState;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="EdgeSchemaVersionProperties"/> for deserialization. </summary>
        internal EdgeSchemaVersionProperties()
        {
        }

        /// <summary> Value of schema version. </summary>
        public string Value { get; set; }
        /// <summary> Provisioning state of resource. </summary>
        public WorkloadOrchestrationProvisioningState? ProvisioningState { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeSchemaVersionProperties.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class EdgeSchemaVersionProperties : IUtf8JsonSerializable, IJsonModel<EdgeSchemaVersionProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeSchemaVersionProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeSchemaVersionProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSchemaVersionProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeSchemaVersionProperties)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("value"u8);
            writer.WriteStringValue(Value);
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        EdgeSchemaVersionProperties IJsonModel<EdgeSchemaVersionProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSchemaVersionProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeSchemaVersionProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeSchemaVersionProperties(document.RootElement, options);
        }

        internal static EdgeSchemaVersionProperties DeserializeEdgeSchemaVersionProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string value = default;
            WorkloadOrchestrationProvisioningState? provisioningState = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("value"u8))
                {
                    value = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new WorkloadOrchestrationProvisioningState(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeSchemaVersionProperties(value, provisioningState, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeSchemaVersionProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSchemaVersionProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeSchemaVersionProperties)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeSchemaVersionProperties IPersistableModel<EdgeSchemaVersionProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSchemaVersionProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeSchemaVersionProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeSchemaVersionProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeSchemaVersionProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeSchemaVersionWithUpdateType.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Schema Version With Update Type. </summary>
    public partial class EdgeSchemaVersionWithUpdateType
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeSchemaVersionWithUpdateType"/>. </summary>
        /// <param name="schemaVersion"> Schema Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="schemaVersion"/> is null. </exception>
        public EdgeSchemaVersionWithUpdateType(EdgeSchemaVersionData schemaVersion)
        {
            Argument.AssertNotNull(schemaVersion, nameof(schemaVersion));

            SchemaVersion = schemaVersion;
        }

        /// <summary> Initializes a new instance of <see cref="EdgeSchemaVersionWithUpdateType"/>. </summary>
        /// <param name="updateType"> Update type. </param>
        /// <param name="version"> Version to create. </param>
        /// <param name="schemaVersion"> Schema Version. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeSchemaVersionWithUpdateType(EdgeUpdateType? updateType, string version, EdgeSchemaVersionData schemaVersion, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            UpdateType = updateType;
            Version = version;
            SchemaVersion = schemaVersion;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="EdgeSchemaVersionWithUpdateType"/> for deserialization. </summary>
        internal EdgeSchemaVersionWithUpdateType()
        {
        }

        /// <summary> Update type. </summary>
        public EdgeUpdateType? UpdateType { get; set; }
        /// <summary> Version to create. </summary>
        public string Version { get; set; }
        /// <summary> Schema Version. </summary>
        public EdgeSchemaVersionData SchemaVersion { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeSchemaVersionWithUpdateType.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class EdgeSchemaVersionWithUpdateType : IUtf8JsonSerializable, IJsonModel<EdgeSchemaVersionWithUpdateType>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeSchemaVersionWithUpdateType>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeSchemaVersionWithUpdateType>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSchemaVersionWithUpdateType>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeSchemaVersionWithUpdateType)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(UpdateType))
            {
                writer.WritePropertyName("updateType"u8);
                writer.WriteStringValue(UpdateType.Value.ToString());
            }
            if (Optional.IsDefined(Version))
            {
                writer.WritePropertyName("version"u8);
                writer.WriteStringValue(Version);
            }
            writer.WritePropertyName("schemaVersion"u8);
            writer.WriteObjectValue(SchemaVersion, options);
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        EdgeSchemaVersionWithUpdateType IJsonModel<EdgeSchemaVersionWithUpdateType>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSchemaVersionWithUpdateType>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeSchemaVersionWithUpdateType)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeSchemaVersionWithUpdateType(document.RootElement, options);
        }

        internal static EdgeSchemaVersionWithUpdateType DeserializeEdgeSchemaVersionWithUpdateType(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            EdgeUpdateType? updateType = default;
            string version = default;
            EdgeSchemaVersionData schemaVersion = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("updateType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    updateType = new EdgeUpdateType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("version"u8))
                {
                    version = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("schemaVersion"u8))
                {
                    schemaVersion = EdgeSchemaVersionData.DeserializeEdgeSchemaVersionData(property.Value, options);
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeSchemaVersionWithUpdateType(updateType, version, schemaVersion, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeSchemaVersionWithUpdateType>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSchemaVersionWithUpdateType>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeSchemaVersionWithUpdateType)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeSchemaVersionWithUpdateType IPersistableModel<EdgeSchemaVersionWithUpdateType>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSchemaVersionWithUpdateType>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeSchemaVersionWithUpdateType(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeSchemaVersionWithUpdateType)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeSchemaVersionWithUpdateType>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeSiteReferenceProperties.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Site Reference Properties. </summary>
    public partial class EdgeSiteReferenceProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeSiteReferenceProperties"/>. </summary>
        /// <param name="siteId"> Azure Resource ID for Site. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="siteId"/> is null. </exception>
        public EdgeSiteReferenceProperties(string siteId)
        {
            Argument.AssertNotNull(siteId, nameof(siteId));

            SiteId = siteId;
        }

        /// <summary> Initializes a new instance of <see cref="EdgeSiteReferenceProperties"/>. </summary>
        /// <param name="siteId"> Azure Resource ID for Site. </param>
        /// <param name="provisioningState"> Provisioning State. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeSiteReferenceProperties(string siteId, WorkloadOrchestrationProvisioningState? provisioningState, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            SiteId = siteId;
            ProvisioningState = provisioningState;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="EdgeSiteReferenceProperties"/> for deserialization. </summary>
        internal EdgeSiteReferenceProperties()
        {
        }

        /// <summary> Azure Resource ID for Site. </summary>
        public string SiteId { get; set; }
        /// <summary> Provisioning State. </summary>
        public WorkloadOrchestrationProvisioningState? ProvisioningState { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeSiteReferenceProperties.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class EdgeSiteReferenceProperties : IUtf8JsonSerializable, IJsonModel<EdgeSiteReferenceProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeSiteReferenceProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeSiteReferenceProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSiteReferenceProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeSiteReferenceProperties)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("siteId"u8);
            writer.WriteStringValue(SiteId);
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        EdgeSiteReferenceProperties IJsonModel<EdgeSiteReferenceProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSiteReferenceProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeSiteReferenceProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeSiteReferenceProperties(document.RootElement, options);
        }

        internal static EdgeSiteReferenceProperties DeserializeEdgeSiteReferenceProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string siteId = default;
            WorkloadOrchestrationProvisioningState? provisioningState = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("siteId"u8))
                {
                    siteId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new WorkloadOrchestrationProvisioningState(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeSiteReferenceProperties(siteId, provisioningState, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeSiteReferenceProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSiteReferenceProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeSiteReferenceProperties)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeSiteReferenceProperties IPersistableModel<EdgeSiteReferenceProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSiteReferenceProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeSiteReferenceProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeSiteReferenceProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeSiteReferenceProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeSolutionDependency.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Solution Dependency Context. </summary>
    public partial class EdgeSolutionDependency
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeSolutionDependency"/>. </summary>
        /// <param name="solutionVersionId"> Solution Version Id. </param>
        /// <param name="solutionTemplateVersionId"> Solution Template Version Id. </param>
        /// <param name="targetId"> Target Id. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionVersionId"/>, <paramref name="solutionTemplateVersionId"/> or <paramref name="targetId"/> is null. </exception>
        internal EdgeSolutionDependency(ResourceIdentifier solutionVersionId, ResourceIdentifier solutionTemplateVersionId, ResourceIdentifier targetId)
        {
            Argument.AssertNotNull(solutionVersionId, nameof(solutionVersionId));
            Argument.AssertNotNull(solutionTemplateVersionId, nameof(solutionTemplateVersionId));
            Argument.AssertNotNull(targetId, nameof(targetId));

            SolutionVersionId = solutionVersionId;
            SolutionTemplateVersionId = solutionTemplateVersionId;
            TargetId = targetId;
            Dependencies = new ChangeTrackingList<EdgeSolutionDependency>();
        }

        /// <summary> Initializes a new instance of <see cref="EdgeSolutionDependency"/>. </summary>
        /// <param name="solutionVersionId"> Solution Version Id. </param>
        /// <param name="solutionInstanceName"> Solution Instance Name. </param>
        /// <param name="solutionTemplateVersionId"> Solution Template Version Id. </param>
        /// <param name="targetId"> Target Id. </param>
        /// <param name="dependencies"> Solution dependencies. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeSolutionDependency(ResourceIdentifier solutionVersionId, string solutionInstanceName, ResourceIdentifier solutionTemplateVersionId, ResourceIdentifier targetId, IReadOnlyList<EdgeSolutionDependency> dependencies, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            SolutionVersionId = solutionVersionId;
            SolutionInstanceName = solutionInstanceName;
            SolutionTemplateVersionId = solutionTemplateVersionId;
            TargetId = targetId;
            Dependencies = dependencies;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="EdgeSolutionDependency"/> for deserialization. </summary>
        internal EdgeSolutionDependency()
        {
        }

        /// <summary> Solution Version Id. </summary>
        public ResourceIdentifier SolutionVersionId { get; }
        /// <summary> Solution Instance Name. </summary>
        public string SolutionInstanceName { get; }
        /// <summary> Solution Template Version Id. </summary>
        public ResourceIdentifier SolutionTemplateVersionId { get; }
        /// <summary> Target Id. </summary>
        public ResourceIdentifier TargetId { get; }
        /// <summary> Solution dependencies. </summary>
        public IReadOnlyList<EdgeSolutionDependency> Dependencies { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeSolutionDependency.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class EdgeSolutionDependency : IUtf8JsonSerializable, IJsonModel<EdgeSolutionDependency>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeSolutionDependency>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeSolutionDependency>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionDependency>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeSolutionDependency)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("solutionVersionId"u8);
            writer.WriteStringValue(SolutionVersionId);
            if (Optional.IsDefined(SolutionInstanceName))
            {
                writer.WritePropertyName("solutionInstanceName"u8);
                writer.WriteStringValue(SolutionInstanceName);
            }
            writer.WritePropertyName("solutionTemplateVersionId"u8);
            writer.WriteStringValue(SolutionTemplateVersionId);
            writer.WritePropertyName("targetId"u8);
            writer.WriteStringValue(TargetId);
            if (Optional.IsCollectionDefined(Dependencies))
            {
                writer.WritePropertyName("dependencies"u8);
                writer.WriteStartArray();
                foreach (var item in Dependencies)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        EdgeSolutionDependency IJsonModel<EdgeSolutionDependency>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionDependency>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeSolutionDependency)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeSolutionDependency(document.RootElement, options);
        }

        internal static EdgeSolutionDependency DeserializeEdgeSolutionDependency(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceIdentifier solutionVersionId = default;
            string solutionInstanceName = default;
            ResourceIdentifier solutionTemplateVersionId = default;
            ResourceIdentifier targetId = default;
            IReadOnlyList<EdgeSolutionDependency> dependencies = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("solutionVersionId"u8))
                {
                    solutionVersionId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("solutionInstanceName"u8))
                {
                    solutionInstanceName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("solutionTemplateVersionId"u8))
                {
                    solutionTemplateVersionId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("targetId"u8))
                {
                    targetId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("dependencies"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<EdgeSolutionDependency> array = new List<EdgeSolutionDependency>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DeserializeEdgeSolutionDependency(item, options));
                    }
                    dependencies = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeSolutionDependency(
                solutionVersionId,
                solutionInstanceName,
                solutionTemplateVersionId,
                targetId,
                dependencies ?? new ChangeTrackingList<EdgeSolutionDependency>(),
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeSolutionDependency>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionDependency>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeSolutionDependency)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeSolutionDependency IPersistableModel<EdgeSolutionDependency>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionDependency>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeSolutionDependency(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeSolutionDependency)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeSolutionDependency>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeSolutionDependencyContent.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Solution Dependency Context. </summary>
    public partial class EdgeSolutionDependencyContent
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeSolutionDependencyContent"/>. </summary>
        public EdgeSolutionDependencyContent()
        {
            Dependencies = new ChangeTrackingList<EdgeSolutionDependencyContent>();
        }

        /// <summary> Initializes a new instance of <see cref="EdgeSolutionDependencyContent"/>. </summary>
        /// <param name="solutionVersionId"> Solution Version Id. </param>
        /// <param name="solutionTemplateId"> Solution Template Id. </param>
        /// <param name="solutionTemplateVersion"> Solution Template Version. </param>
        /// <param name="solutionInstanceName"> Solution Instance Name. </param>
        /// <param name="targetId"> Target Id. </param>
        /// <param name="dependencies"> Solution dependencies. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeSolutionDependencyContent(ResourceIdentifier solutionVersionId, ResourceIdentifier solutionTemplateId, string solutionTemplateVersion, string solutionInstanceName, ResourceIdentifier targetId, IList<EdgeSolutionDependencyContent> dependencies, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            SolutionVersionId = solutionVersionId;
            SolutionTemplateId = solutionTemplateId;
            SolutionTemplateVersion = solutionTemplateVersion;
            SolutionInstanceName = solutionInstanceName;
            TargetId = targetId;
            Dependencies = dependencies;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Solution Version Id. </summary>
        public ResourceIdentifier SolutionVersionId { get; set; }
        /// <summary> Solution Template Id. </summary>
        public ResourceIdentifier SolutionTemplateId { get; set; }
        /// <summary> Solution Template Version. </summary>
        public string SolutionTemplateVersion { get; set; }
        /// <summary> Solution Instance Name. </summary>
        public string SolutionInstanceName { get; set; }
        /// <summary> Target Id. </summary>
        public ResourceIdentifier TargetId { get; set; }
        /// <summary> Solution dependencies. </summary>
        public IList<EdgeSolutionDependencyContent> Dependencies { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeSolutionDependencyContent.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class EdgeSolutionDependencyContent : IUtf8JsonSerializable, IJsonModel<EdgeSolutionDependencyContent>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeSolutionDependencyContent>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeSolutionDependencyContent>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionDependencyContent>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeSolutionDependencyContent)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(SolutionVersionId))
            {
                writer.WritePropertyName("solutionVersionId"u8);
                writer.WriteStringValue(SolutionVersionId);
            }
            if (Optional.IsDefined(SolutionTemplateId))
            {
                writer.WritePropertyName("solutionTemplateId"u8);
                writer.WriteStringValue(SolutionTemplateId);
            }
            if (Optional.IsDefined(SolutionTemplateVersion))
            {
                writer.WritePropertyName("solutionTemplateVersion"u8);
                writer.WriteStringValue(SolutionTemplateVersion);
            }
            if (Optional.IsDefined(SolutionInstanceName))
            {
                writer.WritePropertyName("solutionInstanceName"u8);
                writer.WriteStringValue(SolutionInstanceName);
            }
            if (Optional.IsDefined(TargetId))
            {
                writer.WritePropertyName("targetId"u8);
                writer.WriteStringValue(TargetId);
            }
            if (Optional.IsCollectionDefined(Dependencies))
            {
                writer.WritePropertyName("dependencies"u8);
                writer.WriteStartArray();
                foreach (var item in Dependencies)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        EdgeSolutionDependencyContent IJsonModel<EdgeSolutionDependencyContent>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionDependencyContent>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeSolutionDependencyContent)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeSolutionDependencyContent(document.RootElement, options);
        }

        internal static EdgeSolutionDependencyContent DeserializeEdgeSolutionDependencyContent(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceIdentifier solutionVersionId = default;
            ResourceIdentifier solutionTemplateId = default;
            string solutionTemplateVersion = default;
            string solutionInstanceName = default;
            ResourceIdentifier targetId = default;
            IList<EdgeSolutionDependencyContent> dependencies = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("solutionVersionId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    solutionVersionId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("solutionTemplateId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    solutionTemplateId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("solutionTemplateVersion"u8))
                {
                    solutionTemplateVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("solutionInstanceName"u8))
                {
                    solutionInstanceName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    targetId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("dependencies"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<EdgeSolutionDependencyContent> array = new List<EdgeSolutionDependencyContent>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DeserializeEdgeSolutionDependencyContent(item, options));
                    }
                    dependencies = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeSolutionDependencyContent(
                solutionVersionId,
                solutionTemplateId,
                solutionTemplateVersion,
                solutionInstanceName,
                targetId,
                dependencies ?? new ChangeTrackingList<EdgeSolutionDependencyContent>(),
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeSolutionDependencyContent>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionDependencyContent>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeSolutionDependencyContent)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeSolutionDependencyContent IPersistableModel<EdgeSolutionDependencyContent>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionDependencyContent>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeSolutionDependencyContent(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeSolutionDependencyContent)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeSolutionDependencyContent>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeSolutionPatch.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> The type used for update operations of the Solution. </summary>
    public partial class EdgeSolutionPatch
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeSolutionPatch"/>. </summary>
        public EdgeSolutionPatch()
        {
        }

        /// <summary> Initializes a new instance of <see cref="EdgeSolutionPatch"/>. </summary>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeSolutionPatch(EdgeSolutionPatchProperties properties, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Properties = properties;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The resource-specific properties for this resource. </summary>
        public EdgeSolutionPatchProperties Properties { get; set; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeSolutionPatch.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class EdgeSolutionPatch : IUtf8JsonSerializable, IJsonModel<EdgeSolutionPatch>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeSolutionPatch>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeSolutionPatch>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionPatch>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeSolutionPatch)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(Properties))
            {
                writer.WritePropertyName("properties"u8);
                writer.WriteObjectValue(Properties, options);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        EdgeSolutionPatch IJsonModel<EdgeSolutionPatch>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionPatch>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeSolutionPatch)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeSolutionPatch(document.RootElement, options);
        }

        internal static EdgeSolutionPatch DeserializeEdgeSolutionPatch(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            EdgeSolutionPatchProperties properties = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    properties = EdgeSolutionPatchProperties.DeserializeEdgeSolutionPatchProperties(property.Value, options);
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeSolutionPatch(properties, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeSolutionPatch>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionPatch>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeSolutionPatch)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeSolutionPatch IPersistableModel<EdgeSolutionPatch>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionPatch>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeSolutionPatch(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeSolutionPatch)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeSolutionPatch>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeSolutionPatchProperties.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> The updatable properties of the Solution. </summary>
    public partial class EdgeSolutionPatchProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeSolutionPatchProperties"/>. </summary>
        public EdgeSolutionPatchProperties()
        {
        }

        /// <summary> Initializes a new instance of <see cref="EdgeSolutionPatchProperties"/>. </summary>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeSolutionPatchProperties(IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeSolutionPatchProperties.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class EdgeSolutionPatchProperties : IUtf8JsonSerializable, IJsonModel<EdgeSolutionPatchProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeSolutionPatchProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeSolutionPatchProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionPatchProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeSolutionPatchProperties)} does not support writing '{format}' format.");
            }

            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        EdgeSolutionPatchProperties IJsonModel<EdgeSolutionPatchProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionPatchProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeSolutionPatchProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeSolutionPatchProperties(document.RootElement, options);
        }

        internal static EdgeSolutionPatchProperties DeserializeEdgeSolutionPatchProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeSolutionPatchProperties(serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeSolutionPatchProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionPatchProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeSolutionPatchProperties)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeSolutionPatchProperties IPersistableModel<EdgeSolutionPatchProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionPatchProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeSolutionPatchProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeSolutionPatchProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeSolutionPatchProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeSolutionProperties.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Solution Properties. </summary>
    public partial class EdgeSolutionProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeSolutionProperties"/>. </summary>
        public EdgeSolutionProperties()
        {
            AvailableSolutionTemplateVersions = new ChangeTrackingList<AvailableSolutionTemplateVersion>();
        }

        /// <summary> Initializes a new instance of <see cref="EdgeSolutionProperties"/>. </summary>
        /// <param name="solutionTemplateId"> Solution template Id. </param>
        /// <param name="availableSolutionTemplateVersions"> List of latest revisions for available solution template versions. </param>
        /// <param name="provisioningState"> Provisioning state of resource. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeSolutionProperties(string solutionTemplateId, IReadOnlyList<AvailableSolutionTemplateVersion> availableSolutionTemplateVersions, WorkloadOrchestrationProvisioningState? provisioningState, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            SolutionTemplateId = solutionTemplateId;
            AvailableSolutionTemplateVersions = availableSolutionTemplateVersions;
            ProvisioningState = provisioningState;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Solution template Id. </summary>
        public string SolutionTemplateId { get; }
        /// <summary> List of latest revisions for available solution template versions. </summary>
        public IReadOnlyList<AvailableSolutionTemplateVersion> AvailableSolutionTemplateVersions { get; }
        /// <summary> Provisioning state of resource. </summary>
        public WorkloadOrchestrationProvisioningState? ProvisioningState { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeSolutionProperties.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class EdgeSolutionProperties : IUtf8JsonSerializable, IJsonModel<EdgeSolutionProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeSolutionProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeSolutionProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeSolutionProperties)} does not support writing '{format}' format.");
            }

            if (options.Format != "W" && Optional.IsDefined(SolutionTemplateId))
            {
                writer.WritePropertyName("solutionTemplateId"u8);
                writer.WriteStringValue(SolutionTemplateId);
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(AvailableSolutionTemplateVersions))
            {
                writer.WritePropertyName("availableSolutionTemplateVersions"u8);
                writer.WriteStartArray();
                foreach (var item in AvailableSolutionTemplateVersions)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        EdgeSolutionProperties IJsonModel<EdgeSolutionProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeSolutionProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeSolutionProperties(document.RootElement, options);
        }

        internal static EdgeSolutionProperties DeserializeEdgeSolutionProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string solutionTemplateId = default;
            IReadOnlyList<AvailableSolutionTemplateVersion> availableSolutionTemplateVersions = default;
            WorkloadOrchestrationProvisioningState? provisioningState = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("solutionTemplateId"u8))
                {
                    solutionTemplateId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("availableSolutionTemplateVersions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<AvailableSolutionTemplateVersion> array = new List<AvailableSolutionTemplateVersion>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AvailableSolutionTemplateVersion.DeserializeAvailableSolutionTemplateVersion(item, options));
                    }
                    availableSolutionTemplateVersions = array;
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new WorkloadOrchestrationProvisioningState(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeSolutionProperties(solutionTemplateId, availableSolutionTemplateVersions ?? new ChangeTrackingList<AvailableSolutionTemplateVersion>(), provisioningState, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeSolutionProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeSolutionProperties)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeSolutionProperties IPersistableModel<EdgeSolutionProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeSolutionProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeSolutionProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeSolutionProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeSolutionTemplateContent.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Solution Template Parameter. </summary>
    public partial class EdgeSolutionTemplateContent
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeSolutionTemplateContent"/>. </summary>
        /// <param name="solutionTemplateVersionId"> Solution Template Version ARM Id. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionTemplateVersionId"/> is null. </exception>
        public EdgeSolutionTemplateContent(ResourceIdentifier solutionTemplateVersionId)
        {
            Argument.AssertNotNull(solutionTemplateVersionId, nameof(solutionTemplateVersionId));

            SolutionTemplateVersionId = solutionTemplateVersionId;
            SolutionDependencies = new ChangeTrackingList<EdgeSolutionDependencyContent>();
        }

        /// <summary> Initializes a new instance of <see cref="EdgeSolutionTemplateContent"/>. </summary>
        /// <param name="solutionTemplateVersionId"> Solution Template Version ARM Id. </param>
        /// <param name="solutionInstanceName"> Solution Instance Name. </param>
        /// <param name="solutionDependencies"> Solution Dependencies. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeSolutionTemplateContent(ResourceIdentifier solutionTemplateVersionId, string solutionInstanceName, IList<EdgeSolutionDependencyContent> solutionDependencies, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            SolutionTemplateVersionId = solutionTemplateVersionId;
            SolutionInstanceName = solutionInstanceName;
            SolutionDependencies = solutionDependencies;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="EdgeSolutionTemplateContent"/> for deserialization. </summary>
        internal EdgeSolutionTemplateContent()
        {
        }

        /// <summary> Solution Template Version ARM Id. </summary>
        public ResourceIdentifier SolutionTemplateVersionId { get; }
        /// <summary> Solution Instance Name. </summary>
        public string SolutionInstanceName { get; set; }
        /// <summary> Solution Dependencies. </summary>
        public IList<EdgeSolutionDependencyContent> SolutionDependencies { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeSolutionTemplateContent.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class EdgeSolutionTemplateContent : IUtf8JsonSerializable, IJsonModel<EdgeSolutionTemplateContent>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeSolutionTemplateContent>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeSolutionTemplateContent>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionTemplateContent>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeSolutionTemplateContent)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("solutionTemplateVersionId"u8);
            writer.WriteStringValue(SolutionTemplateVersionId);
            if (Optional.IsDefined(SolutionInstanceName))
            {
                writer.WritePropertyName("solutionInstanceName"u8);
                writer.WriteStringValue(SolutionInstanceName);
            }
            if (Optional.IsCollectionDefined(SolutionDependencies))
            {
                writer.WritePropertyName("solutionDependencies"u8);
                writer.WriteStartArray();
                foreach (var item in SolutionDependencies)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        EdgeSolutionTemplateContent IJsonModel<EdgeSolutionTemplateContent>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionTemplateContent>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeSolutionTemplateContent)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeSolutionTemplateContent(document.RootElement, options);
        }

        internal static EdgeSolutionTemplateContent DeserializeEdgeSolutionTemplateContent(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceIdentifier solutionTemplateVersionId = default;
            string solutionInstanceName = default;
            IList<EdgeSolutionDependencyContent> solutionDependencies = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("solutionTemplateVersionId"u8))
                {
                    solutionTemplateVersionId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("solutionInstanceName"u8))
                {
                    solutionInstanceName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("solutionDependencies"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<EdgeSolutionDependencyContent> array = new List<EdgeSolutionDependencyContent>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(EdgeSolutionDependencyContent.DeserializeEdgeSolutionDependencyContent(item, options));
                    }
                    solutionDependencies = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeSolutionTemplateContent(solutionTemplateVersionId, solutionInstanceName, solutionDependencies ?? new ChangeTrackingList<EdgeSolutionDependencyContent>(), serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeSolutionTemplateContent>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionTemplateContent>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeSolutionTemplateContent)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeSolutionTemplateContent IPersistableModel<EdgeSolutionTemplateContent>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionTemplateContent>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeSolutionTemplateContent(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeSolutionTemplateContent)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeSolutionTemplateContent>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeSolutionTemplatePatch.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> The type used for update operations of the SolutionTemplate. </summary>
    public partial class EdgeSolutionTemplatePatch
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeSolutionTemplatePatch"/>. </summary>
        public EdgeSolutionTemplatePatch()
        {
            Tags = new ChangeTrackingDictionary<string, string>();
        }

        /// <summary> Initializes a new instance of <see cref="EdgeSolutionTemplatePatch"/>. </summary>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeSolutionTemplatePatch(IDictionary<string, string> tags, EdgeSolutionTemplatePatchProperties properties, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Tags = tags;
            Properties = properties;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Resource tags. </summary>
        public IDictionary<string, string> Tags { get; }
        /// <summary> The resource-specific properties for this resource. </summary>
        public EdgeSolutionTemplatePatchProperties Properties { get; set; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeSolutionTemplatePatch.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class EdgeSolutionTemplatePatch : IUtf8JsonSerializable, IJsonModel<EdgeSolutionTemplatePatch>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeSolutionTemplatePatch>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeSolutionTemplatePatch>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionTemplatePatch>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeSolutionTemplatePatch)} does not support writing '{format}' format.");
            }

            if (Optional.IsCollectionDefined(Tags))
            {
                writer.WritePropertyName("tags"u8);
                writer.WriteStartObject();
                foreach (var item in Tags)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(Properties))
            {
                writer.WritePropertyName("properties"u8);
                writer.WriteObjectValue(Properties, options);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        EdgeSolutionTemplatePatch IJsonModel<EdgeSolutionTemplatePatch>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionTemplatePatch>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeSolutionTemplatePatch)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeSolutionTemplatePatch(document.RootElement, options);
        }

        internal static EdgeSolutionTemplatePatch DeserializeEdgeSolutionTemplatePatch(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IDictionary<string, string> tags = default;
            EdgeSolutionTemplatePatchProperties properties = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("tags"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    properties = EdgeSolutionTemplatePatchProperties.DeserializeEdgeSolutionTemplatePatchProperties(property.Value, options);
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeSolutionTemplatePatch(tags ?? new ChangeTrackingDictionary<string, string>(), properties, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeSolutionTemplatePatch>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionTemplatePatch>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeSolutionTemplatePatch)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeSolutionTemplatePatch IPersistableModel<EdgeSolutionTemplatePatch>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionTemplatePatch>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeSolutionTemplatePatch(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeSolutionTemplatePatch)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeSolutionTemplatePatch>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeSolutionTemplatePatchProperties.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> The updatable properties of the SolutionTemplate. </summary>
    public partial class EdgeSolutionTemplatePatchProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeSolutionTemplatePatchProperties"/>. </summary>
        public EdgeSolutionTemplatePatchProperties()
        {
            Capabilities = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="EdgeSolutionTemplatePatchProperties"/>. </summary>
        /// <param name="description"> Description of Solution template. </param>
        /// <param name="capabilities"> List of capabilities. </param>
        /// <param name="state"> State of resource. </param>
        /// <param name="isExternalValidationEnabled"> Flag to enable external validation. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeSolutionTemplatePatchProperties(string description, IList<string> capabilities, EdgeResourceState? state, bool? isExternalValidationEnabled, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Description = description;
            Capabilities = capabilities;
            State = state;
            IsExternalValidationEnabled = isExternalValidationEnabled;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Description of Solution template. </summary>
        public string Description { get; set; }
        /// <summary> List of capabilities. </summary>
        public IList<string> Capabilities { get; }
        /// <summary> State of resource. </summary>
        public EdgeResourceState? State { get; set; }
        /// <summary> Flag to enable external validation. </summary>
        public bool? IsExternalValidationEnabled { get; set; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeSolutionTemplatePatchProperties.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class EdgeSolutionTemplatePatchProperties : IUtf8JsonSerializable, IJsonModel<EdgeSolutionTemplatePatchProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeSolutionTemplatePatchProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeSolutionTemplatePatchProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionTemplatePatchProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeSolutionTemplatePatchProperties)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description"u8);
                writer.WriteStringValue(Description);
            }
            if (Optional.IsCollectionDefined(Capabilities))
            {
                writer.WritePropertyName("capabilities"u8);
                writer.WriteStartArray();
                foreach (var item in Capabilities)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(State))
            {
                writer.WritePropertyName("state"u8);
                writer.WriteStringValue(State.Value.ToString());
            }
            if (Optional.IsDefined(IsExternalValidationEnabled))
            {
                writer.WritePropertyName("enableExternalValidation"u8);
                writer.WriteBooleanValue(IsExternalValidationEnabled.Value);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        EdgeSolutionTemplatePatchProperties IJsonModel<EdgeSolutionTemplatePatchProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionTemplatePatchProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeSolutionTemplatePatchProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeSolutionTemplatePatchProperties(document.RootElement, options);
        }

        internal static EdgeSolutionTemplatePatchProperties DeserializeEdgeSolutionTemplatePatchProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string description = default;
            IList<string> capabilities = default;
            EdgeResourceState? state = default;
            bool? enableExternalValidation = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("description"u8))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("capabilities"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    capabilities = array;
                    continue;
                }
                if (property.NameEquals("state"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    state = new EdgeResourceState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("enableExternalValidation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enableExternalValidation = property.Value.GetBoolean();
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeSolutionTemplatePatchProperties(description, capabilities ?? new ChangeTrackingList<string>(), state, enableExternalValidation, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeSolutionTemplatePatchProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionTemplatePatchProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeSolutionTemplatePatchProperties)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeSolutionTemplatePatchProperties IPersistableModel<EdgeSolutionTemplatePatchProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionTemplatePatchProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeSolutionTemplatePatchProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeSolutionTemplatePatchProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeSolutionTemplatePatchProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeSolutionTemplateProperties.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Solution Template Properties. </summary>
    public partial class EdgeSolutionTemplateProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeSolutionTemplateProperties"/>. </summary>
        /// <param name="description"> Description of Solution template. </param>
        /// <param name="capabilities"> List of capabilities. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="description"/> or <paramref name="capabilities"/> is null. </exception>
        public EdgeSolutionTemplateProperties(string description, IEnumerable<string> capabilities)
        {
            Argument.AssertNotNull(description, nameof(description));
            Argument.AssertNotNull(capabilities, nameof(capabilities));

            Description = description;
            Capabilities = capabilities.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="EdgeSolutionTemplateProperties"/>. </summary>
        /// <param name="description"> Description of Solution template. </param>
        /// <param name="capabilities"> List of capabilities. </param>
        /// <param name="latestVersion"> Latest solution template version. </param>
        /// <param name="state"> State of resource. </param>
        /// <param name="isExternalValidationEnabled"> Flag to enable external validation. </param>
        /// <param name="provisioningState"> Provisioning state of resource. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeSolutionTemplateProperties(string description, IList<string> capabilities, string latestVersion, EdgeResourceState? state, bool? isExternalValidationEnabled, WorkloadOrchestrationProvisioningState? provisioningState, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Description = description;
            Capabilities = capabilities;
            LatestVersion = latestVersion;
            State = state;
            IsExternalValidationEnabled = isExternalValidationEnabled;
            ProvisioningState = provisioningState;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="EdgeSolutionTemplateProperties"/> for deserialization. </summary>
        internal EdgeSolutionTemplateProperties()
        {
        }

        /// <summary> Description of Solution template. </summary>
        public string Description { get; set; }
        /// <summary> List of capabilities. </summary>
        public IList<string> Capabilities { get; }
        /// <summary> Latest solution template version. </summary>
        public string LatestVersion { get; }
        /// <summary> State of resource. </summary>
        public EdgeResourceState? State { get; set; }
        /// <summary> Flag to enable external validation. </summary>
        public bool? IsExternalValidationEnabled { get; set; }
        /// <summary> Provisioning state of resource. </summary>
        public WorkloadOrchestrationProvisioningState? ProvisioningState { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeSolutionTemplateProperties.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class EdgeSolutionTemplateProperties : IUtf8JsonSerializable, IJsonModel<EdgeSolutionTemplateProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeSolutionTemplateProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeSolutionTemplateProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionTemplateProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeSolutionTemplateProperties)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("description"u8);
            writer.WriteStringValue(Description);
            writer.WritePropertyName("capabilities"u8);
            writer.WriteStartArray();
            foreach (var item in Capabilities)
            {
                writer.WriteStringValue(item);
            }
            writer.WriteEndArray();
            if (options.Format != "W" && Optional.IsDefined(LatestVersion))
            {
                writer.WritePropertyName("latestVersion"u8);
                writer.WriteStringValue(LatestVersion);
            }
            if (Optional.IsDefined(State))
            {
                writer.WritePropertyName("state"u8);
                writer.WriteStringValue(State.Value.ToString());
            }
            if (Optional.IsDefined(IsExternalValidationEnabled))
            {
                writer.WritePropertyName("enableExternalValidation"u8);
                writer.WriteBooleanValue(IsExternalValidationEnabled.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        EdgeSolutionTemplateProperties IJsonModel<EdgeSolutionTemplateProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionTemplateProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeSolutionTemplateProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeSolutionTemplateProperties(document.RootElement, options);
        }

        internal static EdgeSolutionTemplateProperties DeserializeEdgeSolutionTemplateProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string description = default;
            IList<string> capabilities = default;
            string latestVersion = default;
            EdgeResourceState? state = default;
            bool? enableExternalValidation = default;
            WorkloadOrchestrationProvisioningState? provisioningState = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("description"u8))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("capabilities"u8))
                {
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    capabilities = array;
                    continue;
                }
                if (property.NameEquals("latestVersion"u8))
                {
                    latestVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("state"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    state = new EdgeResourceState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("enableExternalValidation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enableExternalValidation = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new WorkloadOrchestrationProvisioningState(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeSolutionTemplateProperties(
                description,
                capabilities,
                latestVersion,
                state,
                enableExternalValidation,
                provisioningState,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeSolutionTemplateProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionTemplateProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeSolutionTemplateProperties)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeSolutionTemplateProperties IPersistableModel<EdgeSolutionTemplateProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionTemplateProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeSolutionTemplateProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeSolutionTemplateProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeSolutionTemplateProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeSolutionTemplateVersionProperties.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Solution Template Version Properties. </summary>
    public partial class EdgeSolutionTemplateVersionProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeSolutionTemplateVersionProperties"/>. </summary>
        /// <param name="configurations"> Config expressions for this solution version. </param>
        /// <param name="specification"> App components spec. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="configurations"/> or <paramref name="specification"/> is null. </exception>
        public EdgeSolutionTemplateVersionProperties(string configurations, IDictionary<string, BinaryData> specification)
        {
            Argument.AssertNotNull(configurations, nameof(configurations));
            Argument.AssertNotNull(specification, nameof(specification));

            Configurations = configurations;
            Specification = specification;
        }

        /// <summary> Initializes a new instance of <see cref="EdgeSolutionTemplateVersionProperties"/>. </summary>
        /// <param name="configurations"> Config expressions for this solution version. </param>
        /// <param name="specification"> App components spec. </param>
        /// <param name="orchestratorType"> Orchestrator type. </param>
        /// <param name="provisioningState"> Provisioning state of resource. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeSolutionTemplateVersionProperties(string configurations, IDictionary<string, BinaryData> specification, SolutionVersionOrchestratorType? orchestratorType, WorkloadOrchestrationProvisioningState? provisioningState, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Configurations = configurations;
            Specification = specification;
            OrchestratorType = orchestratorType;
            ProvisioningState = provisioningState;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="EdgeSolutionTemplateVersionProperties"/> for deserialization. </summary>
        internal EdgeSolutionTemplateVersionProperties()
        {
        }

        /// <summary> Config expressions for this solution version. </summary>
        public string Configurations { get; set; }
        /// <summary>
        /// App components spec
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IDictionary<string, BinaryData> Specification { get; }
        /// <summary> Orchestrator type. </summary>
        public SolutionVersionOrchestratorType? OrchestratorType { get; set; }
        /// <summary> Provisioning state of resource. </summary>
        public WorkloadOrchestrationProvisioningState? ProvisioningState { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeSolutionTemplateVersionProperties.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class EdgeSolutionTemplateVersionProperties : IUtf8JsonSerializable, IJsonModel<EdgeSolutionTemplateVersionProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeSolutionTemplateVersionProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeSolutionTemplateVersionProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionTemplateVersionProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeSolutionTemplateVersionProperties)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("configurations"u8);
            writer.WriteStringValue(Configurations);
            writer.WritePropertyName("specification"u8);
            writer.WriteStartObject();
            foreach (var item in Specification)
            {
                writer.WritePropertyName(item.Key);
                if (item.Value == null)
                {
                    writer.WriteNullValue();
                    continue;
                }
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                {
                    JsonSerializer.Serialize(writer, document.RootElement);
                }
#endif
            }
            writer.WriteEndObject();
            if (Optional.IsDefined(OrchestratorType))
            {
                writer.WritePropertyName("orchestratorType"u8);
                writer.WriteStringValue(OrchestratorType.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        EdgeSolutionTemplateVersionProperties IJsonModel<EdgeSolutionTemplateVersionProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionTemplateVersionProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeSolutionTemplateVersionProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeSolutionTemplateVersionProperties(document.RootElement, options);
        }

        internal static EdgeSolutionTemplateVersionProperties DeserializeEdgeSolutionTemplateVersionProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string configurations = default;
            IDictionary<string, BinaryData> specification = default;
            SolutionVersionOrchestratorType? orchestratorType = default;
            WorkloadOrchestrationProvisioningState? provisioningState = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("configurations"u8))
                {
                    configurations = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("specification"u8))
                {
                    Dictionary<string, BinaryData> dictionary = new Dictionary<string, BinaryData>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.Value.ValueKind == JsonValueKind.Null)
                        {
                            dictionary.Add(property0.Name, null);
                        }
                        else
                        {
                            dictionary.Add(property0.Name, BinaryData.FromString(property0.Value.GetRawText()));
                        }
                    }
                    specification = dictionary;
                    continue;
                }
                if (property.NameEquals("orchestratorType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    orchestratorType = new SolutionVersionOrchestratorType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new WorkloadOrchestrationProvisioningState(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeSolutionTemplateVersionProperties(configurations, specification, orchestratorType, provisioningState, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeSolutionTemplateVersionProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionTemplateVersionProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeSolutionTemplateVersionProperties)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeSolutionTemplateVersionProperties IPersistableModel<EdgeSolutionTemplateVersionProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionTemplateVersionProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeSolutionTemplateVersionProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeSolutionTemplateVersionProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeSolutionTemplateVersionProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeSolutionTemplateVersionWithUpdateType.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Solution Template Version With Update Type. </summary>
    public partial class EdgeSolutionTemplateVersionWithUpdateType
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeSolutionTemplateVersionWithUpdateType"/>. </summary>
        /// <param name="solutionTemplateVersion"> Solution Template Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionTemplateVersion"/> is null. </exception>
        public EdgeSolutionTemplateVersionWithUpdateType(EdgeSolutionTemplateVersionData solutionTemplateVersion)
        {
            Argument.AssertNotNull(solutionTemplateVersion, nameof(solutionTemplateVersion));

            SolutionTemplateVersion = solutionTemplateVersion;
        }

        /// <summary> Initializes a new instance of <see cref="EdgeSolutionTemplateVersionWithUpdateType"/>. </summary>
        /// <param name="updateType"> Update type. </param>
        /// <param name="version"> Version to create. </param>
        /// <param name="solutionTemplateVersion"> Solution Template Version. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeSolutionTemplateVersionWithUpdateType(EdgeUpdateType? updateType, string version, EdgeSolutionTemplateVersionData solutionTemplateVersion, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            UpdateType = updateType;
            Version = version;
            SolutionTemplateVersion = solutionTemplateVersion;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="EdgeSolutionTemplateVersionWithUpdateType"/> for deserialization. </summary>
        internal EdgeSolutionTemplateVersionWithUpdateType()
        {
        }

        /// <summary> Update type. </summary>
        public EdgeUpdateType? UpdateType { get; set; }
        /// <summary> Version to create. </summary>
        public string Version { get; set; }
        /// <summary> Solution Template Version. </summary>
        public EdgeSolutionTemplateVersionData SolutionTemplateVersion { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeSolutionTemplateVersionWithUpdateType.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class EdgeSolutionTemplateVersionWithUpdateType : IUtf8JsonSerializable, IJsonModel<EdgeSolutionTemplateVersionWithUpdateType>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeSolutionTemplateVersionWithUpdateType>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeSolutionTemplateVersionWithUpdateType>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionTemplateVersionWithUpdateType>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeSolutionTemplateVersionWithUpdateType)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(UpdateType))
            {
                writer.WritePropertyName("updateType"u8);
                writer.WriteStringValue(UpdateType.Value.ToString());
            }
            if (Optional.IsDefined(Version))
            {
                writer.WritePropertyName("version"u8);
                writer.WriteStringValue(Version);
            }
            writer.WritePropertyName("solutionTemplateVersion"u8);
            writer.WriteObjectValue(SolutionTemplateVersion, options);
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        EdgeSolutionTemplateVersionWithUpdateType IJsonModel<EdgeSolutionTemplateVersionWithUpdateType>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionTemplateVersionWithUpdateType>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeSolutionTemplateVersionWithUpdateType)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeSolutionTemplateVersionWithUpdateType(document.RootElement, options);
        }

        internal static EdgeSolutionTemplateVersionWithUpdateType DeserializeEdgeSolutionTemplateVersionWithUpdateType(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            EdgeUpdateType? updateType = default;
            string version = default;
            EdgeSolutionTemplateVersionData solutionTemplateVersion = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("updateType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    updateType = new EdgeUpdateType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("version"u8))
                {
                    version = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("solutionTemplateVersion"u8))
                {
                    solutionTemplateVersion = EdgeSolutionTemplateVersionData.DeserializeEdgeSolutionTemplateVersionData(property.Value, options);
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeSolutionTemplateVersionWithUpdateType(updateType, version, solutionTemplateVersion, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeSolutionTemplateVersionWithUpdateType>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionTemplateVersionWithUpdateType>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeSolutionTemplateVersionWithUpdateType)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeSolutionTemplateVersionWithUpdateType IPersistableModel<EdgeSolutionTemplateVersionWithUpdateType>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionTemplateVersionWithUpdateType>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeSolutionTemplateVersionWithUpdateType(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeSolutionTemplateVersionWithUpdateType)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeSolutionTemplateVersionWithUpdateType>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeSolutionVersionContent.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Solution Version Parameter. </summary>
    public partial class EdgeSolutionVersionContent
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeSolutionVersionContent"/>. </summary>
        /// <param name="solutionVersionId"> Solution Version ARM Id. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionVersionId"/> is null. </exception>
        public EdgeSolutionVersionContent(ResourceIdentifier solutionVersionId)
        {
            Argument.AssertNotNull(solutionVersionId, nameof(solutionVersionId));

            SolutionVersionId = solutionVersionId;
        }

        /// <summary> Initializes a new instance of <see cref="EdgeSolutionVersionContent"/>. </summary>
        /// <param name="solutionVersionId"> Solution Version ARM Id. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeSolutionVersionContent(ResourceIdentifier solutionVersionId, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            SolutionVersionId = solutionVersionId;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="EdgeSolutionVersionContent"/> for deserialization. </summary>
        internal EdgeSolutionVersionContent()
        {
        }

        /// <summary> Solution Version ARM Id. </summary>
        public ResourceIdentifier SolutionVersionId { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeSolutionVersionContent.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class EdgeSolutionVersionContent : IUtf8JsonSerializable, IJsonModel<EdgeSolutionVersionContent>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeSolutionVersionContent>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeSolutionVersionContent>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionVersionContent>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeSolutionVersionContent)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("solutionVersionId"u8);
            writer.WriteStringValue(SolutionVersionId);
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        EdgeSolutionVersionContent IJsonModel<EdgeSolutionVersionContent>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionVersionContent>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeSolutionVersionContent)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeSolutionVersionContent(document.RootElement, options);
        }

        internal static EdgeSolutionVersionContent DeserializeEdgeSolutionVersionContent(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceIdentifier solutionVersionId = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("solutionVersionId"u8))
                {
                    solutionVersionId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeSolutionVersionContent(solutionVersionId, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeSolutionVersionContent>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionVersionContent>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeSolutionVersionContent)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeSolutionVersionContent IPersistableModel<EdgeSolutionVersionContent>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionVersionContent>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeSolutionVersionContent(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeSolutionVersionContent)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeSolutionVersionContent>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeSolutionVersionProperties.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Solution Version Properties. </summary>
    public partial class EdgeSolutionVersionProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeSolutionVersionProperties"/>. </summary>
        /// <param name="specification"> App components spec. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="specification"/> is null. </exception>
        public EdgeSolutionVersionProperties(IDictionary<string, BinaryData> specification)
        {
            Argument.AssertNotNull(specification, nameof(specification));

            Specification = specification;
            SolutionDependencies = new ChangeTrackingList<EdgeSolutionDependency>();
        }

        /// <summary> Initializes a new instance of <see cref="EdgeSolutionVersionProperties"/>. </summary>
        /// <param name="solutionTemplateVersionId"> Solution Template Version Id. </param>
        /// <param name="revision"> Revision number of resolved config for this solution version. </param>
        /// <param name="targetDisplayName"> Name of applicable target's display name. </param>
        /// <param name="configuration"> Resolved configuration values. </param>
        /// <param name="targetLevelConfiguration"> Configuration on the line level across all solution template versions. </param>
        /// <param name="specification"> App components spec. </param>
        /// <param name="reviewId"> Review id of resolved config for this solution version. </param>
        /// <param name="externalValidationId"> External validation id. </param>
        /// <param name="state"> State of solution instance. </param>
        /// <param name="solutionInstanceName"> Solution instance name. </param>
        /// <param name="solutionDependencies"> Solution Dependency Context. </param>
        /// <param name="errorDetails"> Error Details if any failure is there. </param>
        /// <param name="latestActionTrackingUri"> The URI for tracking the latest action performed on this solution version. </param>
        /// <param name="actionType"> The type of the latest action performed on this solution version. </param>
        /// <param name="provisioningState"> Provisioning state of resource. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeSolutionVersionProperties(string solutionTemplateVersionId, int? revision, string targetDisplayName, string configuration, string targetLevelConfiguration, IDictionary<string, BinaryData> specification, string reviewId, string externalValidationId, SolutionInstanceState? state, string solutionInstanceName, IReadOnlyList<EdgeSolutionDependency> solutionDependencies, ResponseError errorDetails, string latestActionTrackingUri, EdgeJobType? actionType, WorkloadOrchestrationProvisioningState? provisioningState, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            SolutionTemplateVersionId = solutionTemplateVersionId;
            Revision = revision;
            TargetDisplayName = targetDisplayName;
            Configuration = configuration;
            TargetLevelConfiguration = targetLevelConfiguration;
            Specification = specification;
            ReviewId = reviewId;
            ExternalValidationId = externalValidationId;
            State = state;
            SolutionInstanceName = solutionInstanceName;
            SolutionDependencies = solutionDependencies;
            ErrorDetails = errorDetails;
            LatestActionTrackingUri = latestActionTrackingUri;
            ActionType = actionType;
            ProvisioningState = provisioningState;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="EdgeSolutionVersionProperties"/> for deserialization. </summary>
        internal EdgeSolutionVersionProperties()
        {
        }

        /// <summary> Solution Template Version Id. </summary>
        public string SolutionTemplateVersionId { get; }
        /// <summary> Revision number of resolved config for this solution version. </summary>
        public int? Revision { get; }
        /// <summary> Name of applicable target's display name. </summary>
        public string TargetDisplayName { get; }
        /// <summary> Resolved configuration values. </summary>
        public string Configuration { get; }
        /// <summary> Configuration on the line level across all solution template versions. </summary>
        public string TargetLevelConfiguration { get; }
        /// <summary>
        /// App components spec
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IDictionary<string, BinaryData> Specification { get; }
        /// <summary> Review id of resolved config for this solution version. </summary>
        public string ReviewId { get; }
        /// <summary> External validation id. </summary>
        public string ExternalValidationId { get; }
        /// <summary> State of solution instance. </summary>
        public SolutionInstanceState? State { get; }
        /// <summary> Solution instance name. </summary>
        public string SolutionInstanceName { get; }
        /// <summary> Solution Dependency Context. </summary>
        public IReadOnlyList<EdgeSolutionDependency> SolutionDependencies { get; }
        /// <summary> Error Details if any failure is there. </summary>
        public ResponseError ErrorDetails { get; }
        /// <summary> The URI for tracking the latest action performed on this solution version. </summary>
        public string LatestActionTrackingUri { get; }
        /// <summary> The type of the latest action performed on this solution version. </summary>
        public EdgeJobType? ActionType { get; }
        /// <summary> Provisioning state of resource. </summary>
        public WorkloadOrchestrationProvisioningState? ProvisioningState { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeSolutionVersionProperties.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class EdgeSolutionVersionProperties : IUtf8JsonSerializable, IJsonModel<EdgeSolutionVersionProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeSolutionVersionProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeSolutionVersionProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionVersionProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeSolutionVersionProperties)} does not support writing '{format}' format.");
            }

            if (options.Format != "W" && Optional.IsDefined(SolutionTemplateVersionId))
            {
                writer.WritePropertyName("solutionTemplateVersionId"u8);
                writer.WriteStringValue(SolutionTemplateVersionId);
            }
            if (options.Format != "W" && Optional.IsDefined(Revision))
            {
                writer.WritePropertyName("revision"u8);
                writer.WriteNumberValue(Revision.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(TargetDisplayName))
            {
                writer.WritePropertyName("targetDisplayName"u8);
                writer.WriteStringValue(TargetDisplayName);
            }
            if (options.Format != "W" && Optional.IsDefined(Configuration))
            {
                writer.WritePropertyName("configuration"u8);
                writer.WriteStringValue(Configuration);
            }
            if (options.Format != "W" && Optional.IsDefined(TargetLevelConfiguration))
            {
                writer.WritePropertyName("targetLevelConfiguration"u8);
                writer.WriteStringValue(TargetLevelConfiguration);
            }
            writer.WritePropertyName("specification"u8);
            writer.WriteStartObject();
            foreach (var item in Specification)
            {
                writer.WritePropertyName(item.Key);
                if (item.Value == null)
                {
                    writer.WriteNullValue();
                    continue;
                }
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                {
                    JsonSerializer.Serialize(writer, document.RootElement);
                }
#endif
            }
            writer.WriteEndObject();
            if (options.Format != "W" && Optional.IsDefined(ReviewId))
            {
                writer.WritePropertyName("reviewId"u8);
                writer.WriteStringValue(ReviewId);
            }
            if (options.Format != "W" && Optional.IsDefined(ExternalValidationId))
            {
                writer.WritePropertyName("externalValidationId"u8);
                writer.WriteStringValue(ExternalValidationId);
            }
            if (options.Format != "W" && Optional.IsDefined(State))
            {
                writer.WritePropertyName("state"u8);
                writer.WriteStringValue(State.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(SolutionInstanceName))
            {
                writer.WritePropertyName("solutionInstanceName"u8);
                writer.WriteStringValue(SolutionInstanceName);
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(SolutionDependencies))
            {
                writer.WritePropertyName("solutionDependencies"u8);
                writer.WriteStartArray();
                foreach (var item in SolutionDependencies)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsDefined(ErrorDetails))
            {
                writer.WritePropertyName("errorDetails"u8);
                ((IJsonModel<ResponseError>)ErrorDetails).Write(writer, options);
            }
            if (options.Format != "W" && Optional.IsDefined(LatestActionTrackingUri))
            {
                writer.WritePropertyName("latestActionTrackingUri"u8);
                writer.WriteStringValue(LatestActionTrackingUri);
            }
            if (options.Format != "W" && Optional.IsDefined(ActionType))
            {
                writer.WritePropertyName("actionType"u8);
                writer.WriteStringValue(ActionType.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        EdgeSolutionVersionProperties IJsonModel<EdgeSolutionVersionProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionVersionProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeSolutionVersionProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeSolutionVersionProperties(document.RootElement, options);
        }

        internal static EdgeSolutionVersionProperties DeserializeEdgeSolutionVersionProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string solutionTemplateVersionId = default;
            int? revision = default;
            string targetDisplayName = default;
            string configuration = default;
            string targetLevelConfiguration = default;
            IDictionary<string, BinaryData> specification = default;
            string reviewId = default;
            string externalValidationId = default;
            SolutionInstanceState? state = default;
            string solutionInstanceName = default;
            IReadOnlyList<EdgeSolutionDependency> solutionDependencies = default;
            ResponseError errorDetails = default;
            string latestActionTrackingUri = default;
            EdgeJobType? actionType = default;
            WorkloadOrchestrationProvisioningState? provisioningState = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("solutionTemplateVersionId"u8))
                {
                    solutionTemplateVersionId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("revision"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    revision = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("targetDisplayName"u8))
                {
                    targetDisplayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("configuration"u8))
                {
                    configuration = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetLevelConfiguration"u8))
                {
                    targetLevelConfiguration = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("specification"u8))
                {
                    Dictionary<string, BinaryData> dictionary = new Dictionary<string, BinaryData>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.Value.ValueKind == JsonValueKind.Null)
                        {
                            dictionary.Add(property0.Name, null);
                        }
                        else
                        {
                            dictionary.Add(property0.Name, BinaryData.FromString(property0.Value.GetRawText()));
                        }
                    }
                    specification = dictionary;
                    continue;
                }
                if (property.NameEquals("reviewId"u8))
                {
                    reviewId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("externalValidationId"u8))
                {
                    externalValidationId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("state"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    state = new SolutionInstanceState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("solutionInstanceName"u8))
                {
                    solutionInstanceName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("solutionDependencies"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<EdgeSolutionDependency> array = new List<EdgeSolutionDependency>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(EdgeSolutionDependency.DeserializeEdgeSolutionDependency(item, options));
                    }
                    solutionDependencies = array;
                    continue;
                }
                if (property.NameEquals("errorDetails"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    errorDetails = ModelReaderWriter.Read<ResponseError>(new BinaryData(Encoding.UTF8.GetBytes(property.Value.GetRawText())), options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                    continue;
                }
                if (property.NameEquals("latestActionTrackingUri"u8))
                {
                    latestActionTrackingUri = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("actionType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    actionType = new EdgeJobType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new WorkloadOrchestrationProvisioningState(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeSolutionVersionProperties(
                solutionTemplateVersionId,
                revision,
                targetDisplayName,
                configuration,
                targetLevelConfiguration,
                specification,
                reviewId,
                externalValidationId,
                state,
                solutionInstanceName,
                solutionDependencies ?? new ChangeTrackingList<EdgeSolutionDependency>(),
                errorDetails,
                latestActionTrackingUri,
                actionType,
                provisioningState,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeSolutionVersionProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionVersionProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeSolutionVersionProperties)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeSolutionVersionProperties IPersistableModel<EdgeSolutionVersionProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionVersionProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeSolutionVersionProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeSolutionVersionProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeSolutionVersionProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeTargetPatch.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> The type used for update operations of the Target. </summary>
    public partial class EdgeTargetPatch
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeTargetPatch"/>. </summary>
        public EdgeTargetPatch()
        {
            Tags = new ChangeTrackingDictionary<string, string>();
        }

        /// <summary> Initializes a new instance of <see cref="EdgeTargetPatch"/>. </summary>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeTargetPatch(IDictionary<string, string> tags, EdgeTargetPatchProperties properties, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Tags = tags;
            Properties = properties;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Resource tags. </summary>
        public IDictionary<string, string> Tags { get; }
        /// <summary> The resource-specific properties for this resource. </summary>
        public EdgeTargetPatchProperties Properties { get; set; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeTargetPatch.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class EdgeTargetPatch : IUtf8JsonSerializable, IJsonModel<EdgeTargetPatch>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeTargetPatch>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeTargetPatch>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeTargetPatch>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeTargetPatch)} does not support writing '{format}' format.");
            }

            if (Optional.IsCollectionDefined(Tags))
            {
                writer.WritePropertyName("tags"u8);
                writer.WriteStartObject();
                foreach (var item in Tags)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(Properties))
            {
                writer.WritePropertyName("properties"u8);
                writer.WriteObjectValue(Properties, options);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        EdgeTargetPatch IJsonModel<EdgeTargetPatch>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeTargetPatch>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeTargetPatch)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeTargetPatch(document.RootElement, options);
        }

        internal static EdgeTargetPatch DeserializeEdgeTargetPatch(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IDictionary<string, string> tags = default;
            EdgeTargetPatchProperties properties = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("tags"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    properties = EdgeTargetPatchProperties.DeserializeEdgeTargetPatchProperties(property.Value, options);
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeTargetPatch(tags ?? new ChangeTrackingDictionary<string, string>(), properties, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeTargetPatch>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeTargetPatch>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeTargetPatch)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeTargetPatch IPersistableModel<EdgeTargetPatch>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeTargetPatch>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeTargetPatch(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeTargetPatch)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeTargetPatch>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeTargetPatchProperties.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> The updatable properties of the Target. </summary>
    public partial class EdgeTargetPatchProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeTargetPatchProperties"/>. </summary>
        public EdgeTargetPatchProperties()
        {
            TargetSpecification = new ChangeTrackingDictionary<string, BinaryData>();
            Capabilities = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="EdgeTargetPatchProperties"/>. </summary>
        /// <param name="description"> Description of target. </param>
        /// <param name="displayName"> Display name of target. </param>
        /// <param name="contextId"> ArmId of Context. </param>
        /// <param name="targetSpecification"> target spec. </param>
        /// <param name="capabilities"> List of capabilities. </param>
        /// <param name="hierarchyLevel"> Hierarchy Level. </param>
        /// <param name="solutionScope"> Scope of the target resource. </param>
        /// <param name="state"> State of resource. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeTargetPatchProperties(string description, string displayName, ResourceIdentifier contextId, IDictionary<string, BinaryData> targetSpecification, IList<string> capabilities, string hierarchyLevel, string solutionScope, EdgeResourceState? state, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Description = description;
            DisplayName = displayName;
            ContextId = contextId;
            TargetSpecification = targetSpecification;
            Capabilities = capabilities;
            HierarchyLevel = hierarchyLevel;
            SolutionScope = solutionScope;
            State = state;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Description of target. </summary>
        public string Description { get; set; }
        /// <summary> Display name of target. </summary>
        public string DisplayName { get; set; }
        /// <summary> ArmId of Context. </summary>
        public ResourceIdentifier ContextId { get; set; }
        /// <summary>
        /// target spec
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IDictionary<string, BinaryData> TargetSpecification { get; }
        /// <summary> List of capabilities. </summary>
        public IList<string> Capabilities { get; }
        /// <summary> Hierarchy Level. </summary>
        public string HierarchyLevel { get; set; }
        /// <summary> Scope of the target resource. </summary>
        public string SolutionScope { get; set; }
        /// <summary> State of resource. </summary>
        public EdgeResourceState? State { get; set; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeTargetPatchProperties.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class EdgeTargetPatchProperties : IUtf8JsonSerializable, IJsonModel<EdgeTargetPatchProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeTargetPatchProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeTargetPatchProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeTargetPatchProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeTargetPatchProperties)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description"u8);
                writer.WriteStringValue(Description);
            }
            if (Optional.IsDefined(DisplayName))
            {
                writer.WritePropertyName("displayName"u8);
                writer.WriteStringValue(DisplayName);
            }
            if (Optional.IsDefined(ContextId))
            {
                writer.WritePropertyName("contextId"u8);
                writer.WriteStringValue(ContextId);
            }
            if (Optional.IsCollectionDefined(TargetSpecification))
            {
                writer.WritePropertyName("targetSpecification"u8);
                writer.WriteStartObject();
                foreach (var item in TargetSpecification)
                {
                    writer.WritePropertyName(item.Key);
                    if (item.Value == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
                writer.WriteEndObject();
            }
            if (Optional.IsCollectionDefined(Capabilities))
            {
                writer.WritePropertyName("capabilities"u8);
                writer.WriteStartArray();
                foreach (var item in Capabilities)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(HierarchyLevel))
            {
                writer.WritePropertyName("hierarchyLevel"u8);
                writer.WriteStringValue(HierarchyLevel);
            }
            if (Optional.IsDefined(SolutionScope))
            {
                writer.WritePropertyName("solutionScope"u8);
                writer.WriteStringValue(SolutionScope);
            }
            if (Optional.IsDefined(State))
            {
                writer.WritePropertyName("state"u8);
                writer.WriteStringValue(State.Value.ToString());
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        EdgeTargetPatchProperties IJsonModel<EdgeTargetPatchProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeTargetPatchProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeTargetPatchProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeTargetPatchProperties(document.RootElement, options);
        }

        internal static EdgeTargetPatchProperties DeserializeEdgeTargetPatchProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string description = default;
            string displayName = default;
            ResourceIdentifier contextId = default;
            IDictionary<string, BinaryData> targetSpecification = default;
            IList<string> capabilities = default;
            string hierarchyLevel = default;
            string solutionScope = default;
            EdgeResourceState? state = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("description"u8))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("displayName"u8))
                {
                    displayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("contextId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    contextId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("targetSpecification"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, BinaryData> dictionary = new Dictionary<string, BinaryData>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.Value.ValueKind == JsonValueKind.Null)
                        {
                            dictionary.Add(property0.Name, null);
                        }
                        else
                        {
                            dictionary.Add(property0.Name, BinaryData.FromString(property0.Value.GetRawText()));
                        }
                    }
                    targetSpecification = dictionary;
                    continue;
                }
                if (property.NameEquals("capabilities"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    capabilities = array;
                    continue;
                }
                if (property.NameEquals("hierarchyLevel"u8))
                {
                    hierarchyLevel = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("solutionScope"u8))
                {
                    solutionScope = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("state"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    state = new EdgeResourceState(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeTargetPatchProperties(
                description,
                displayName,
                contextId,
                targetSpecification ?? new ChangeTrackingDictionary<string, BinaryData>(),
                capabilities ?? new ChangeTrackingList<string>(),
                hierarchyLevel,
                solutionScope,
                state,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeTargetPatchProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeTargetPatchProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeTargetPatchProperties)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeTargetPatchProperties IPersistableModel<EdgeTargetPatchProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeTargetPatchProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeTargetPatchProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeTargetPatchProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeTargetPatchProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeTargetProperties.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Target Properties. </summary>
    public partial class EdgeTargetProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeTargetProperties"/>. </summary>
        /// <param name="description"> Description of target. </param>
        /// <param name="displayName"> Display name of target. </param>
        /// <param name="contextId"> ArmId of Context. </param>
        /// <param name="targetSpecification"> target spec. </param>
        /// <param name="capabilities"> List of capabilities. </param>
        /// <param name="hierarchyLevel"> Hierarchy Level. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="description"/>, <paramref name="displayName"/>, <paramref name="contextId"/>, <paramref name="targetSpecification"/>, <paramref name="capabilities"/> or <paramref name="hierarchyLevel"/> is null. </exception>
        public EdgeTargetProperties(string description, string displayName, ResourceIdentifier contextId, IDictionary<string, BinaryData> targetSpecification, IEnumerable<string> capabilities, string hierarchyLevel)
        {
            Argument.AssertNotNull(description, nameof(description));
            Argument.AssertNotNull(displayName, nameof(displayName));
            Argument.AssertNotNull(contextId, nameof(contextId));
            Argument.AssertNotNull(targetSpecification, nameof(targetSpecification));
            Argument.AssertNotNull(capabilities, nameof(capabilities));
            Argument.AssertNotNull(hierarchyLevel, nameof(hierarchyLevel));

            Description = description;
            DisplayName = displayName;
            ContextId = contextId;
            TargetSpecification = targetSpecification;
            Capabilities = capabilities.ToList();
            HierarchyLevel = hierarchyLevel;
        }

        /// <summary> Initializes a new instance of <see cref="EdgeTargetProperties"/>. </summary>
        /// <param name="description"> Description of target. </param>
        /// <param name="displayName"> Display name of target. </param>
        /// <param name="contextId"> ArmId of Context. </param>
        /// <param name="targetSpecification"> target spec. </param>
        /// <param name="capabilities"> List of capabilities. </param>
        /// <param name="hierarchyLevel"> Hierarchy Level. </param>
        /// <param name="status"> Status of target. </param>
        /// <param name="solutionScope"> Scope of the target resource. </param>
        /// <param name="state"> State of resource. </param>
        /// <param name="provisioningState"> Provisioning state of resource. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeTargetProperties(string description, string displayName, ResourceIdentifier contextId, IDictionary<string, BinaryData> targetSpecification, IList<string> capabilities, string hierarchyLevel, EdgeDeploymentStatus status, string solutionScope, EdgeResourceState? state, WorkloadOrchestrationProvisioningState? provisioningState, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Description = description;
            DisplayName = displayName;
            ContextId = contextId;
            TargetSpecification = targetSpecification;
            Capabilities = capabilities;
            HierarchyLevel = hierarchyLevel;
            Status = status;
            SolutionScope = solutionScope;
            State = state;
            ProvisioningState = provisioningState;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="EdgeTargetProperties"/> for deserialization. </summary>
        internal EdgeTargetProperties()
        {
        }

        /// <summary> Description of target. </summary>
        public string Description { get; set; }
        /// <summary> Display name of target. </summary>
        public string DisplayName { get; set; }
        /// <summary> ArmId of Context. </summary>
        public ResourceIdentifier ContextId { get; set; }
        /// <summary>
        /// target spec
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IDictionary<string, BinaryData> TargetSpecification { get; }
        /// <summary> List of capabilities. </summary>
        public IList<string> Capabilities { get; }
        /// <summary> Hierarchy Level. </summary>
        public string HierarchyLevel { get; set; }
        /// <summary> Status of target. </summary>
        public EdgeDeploymentStatus Status { get; }
        /// <summary> Scope of the target resource. </summary>
        public string SolutionScope { get; set; }
        /// <summary> State of resource. </summary>
        public EdgeResourceState? State { get; set; }
        /// <summary> Provisioning state of resource. </summary>
        public WorkloadOrchestrationProvisioningState? ProvisioningState { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeTargetProperties.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class EdgeTargetProperties : IUtf8JsonSerializable, IJsonModel<EdgeTargetProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeTargetProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeTargetProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeTargetProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeTargetProperties)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("description"u8);
            writer.WriteStringValue(Description);
            writer.WritePropertyName("displayName"u8);
            writer.WriteStringValue(DisplayName);
            writer.WritePropertyName("contextId"u8);
            writer.WriteStringValue(ContextId);
            writer.WritePropertyName("targetSpecification"u8);
            writer.WriteStartObject();
            foreach (var item in TargetSpecification)
            {
                writer.WritePropertyName(item.Key);
                if (item.Value == null)
                {
                    writer.WriteNullValue();
                    continue;
                }
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                {
                    JsonSerializer.Serialize(writer, document.RootElement);
                }
#endif
            }
            writer.WriteEndObject();
            writer.WritePropertyName("capabilities"u8);
            writer.WriteStartArray();
            foreach (var item in Capabilities)
            {
                writer.WriteStringValue(item);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("hierarchyLevel"u8);
            writer.WriteStringValue(HierarchyLevel);
            if (options.Format != "W" && Optional.IsDefined(Status))
            {
                writer.WritePropertyName("status"u8);
                writer.WriteObjectValue(Status, options);
            }
            if (Optional.IsDefined(SolutionScope))
            {
                writer.WritePropertyName("solutionScope"u8);
                writer.WriteStringValue(SolutionScope);
            }
            if (Optional.IsDefined(State))
            {
                writer.WritePropertyName("state"u8);
                writer.WriteStringValue(State.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        EdgeTargetProperties IJsonModel<EdgeTargetProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeTargetProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeTargetProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeTargetProperties(document.RootElement, options);
        }

        internal static EdgeTargetProperties DeserializeEdgeTargetProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string description = default;
            string displayName = default;
            ResourceIdentifier contextId = default;
            IDictionary<string, BinaryData> targetSpecification = default;
            IList<string> capabilities = default;
            string hierarchyLevel = default;
            EdgeDeploymentStatus status = default;
            string solutionScope = default;
            EdgeResourceState? state = default;
            WorkloadOrchestrationProvisioningState? provisioningState = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("description"u8))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("displayName"u8))
                {
                    displayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("contextId"u8))
                {
                    contextId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("targetSpecification"u8))
                {
                    Dictionary<string, BinaryData> dictionary = new Dictionary<string, BinaryData>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.Value.ValueKind == JsonValueKind.Null)
                        {
                            dictionary.Add(property0.Name, null);
                        }
                        else
                        {
                            dictionary.Add(property0.Name, BinaryData.FromString(property0.Value.GetRawText()));
                        }
                    }
                    targetSpecification = dictionary;
                    continue;
                }
                if (property.NameEquals("capabilities"u8))
                {
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    capabilities = array;
                    continue;
                }
                if (property.NameEquals("hierarchyLevel"u8))
                {
                    hierarchyLevel = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("status"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    status = EdgeDeploymentStatus.DeserializeEdgeDeploymentStatus(property.Value, options);
                    continue;
                }
                if (property.NameEquals("solutionScope"u8))
                {
                    solutionScope = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("state"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    state = new EdgeResourceState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new WorkloadOrchestrationProvisioningState(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeTargetProperties(
                description,
                displayName,
                contextId,
                targetSpecification,
                capabilities,
                hierarchyLevel,
                status,
                solutionScope,
                state,
                provisioningState,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeTargetProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeTargetProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeTargetProperties)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeTargetProperties IPersistableModel<EdgeTargetProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeTargetProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeTargetProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeTargetProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeTargetProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeTargetSnapshot.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Target Snapshot. </summary>
    public partial class EdgeTargetSnapshot
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeTargetSnapshot"/>. </summary>
        internal EdgeTargetSnapshot()
        {
            TargetSpecification = new ChangeTrackingDictionary<string, BinaryData>();
        }

        /// <summary> Initializes a new instance of <see cref="EdgeTargetSnapshot"/>. </summary>
        /// <param name="targetId"> Target of instance. </param>
        /// <param name="targetSpecification"> target spec. </param>
        /// <param name="solutionScope"> Scope of the target resource. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeTargetSnapshot(ResourceIdentifier targetId, IReadOnlyDictionary<string, BinaryData> targetSpecification, string solutionScope, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            TargetId = targetId;
            TargetSpecification = targetSpecification;
            SolutionScope = solutionScope;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Target of instance. </summary>
        public ResourceIdentifier TargetId { get; }
        /// <summary>
        /// target spec
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IReadOnlyDictionary<string, BinaryData> TargetSpecification { get; }
        /// <summary> Scope of the target resource. </summary>
        public string SolutionScope { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeTargetSnapshot.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class EdgeTargetSnapshot : IUtf8JsonSerializable, IJsonModel<EdgeTargetSnapshot>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeTargetSnapshot>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeTargetSnapshot>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeTargetSnapshot>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeTargetSnapshot)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(TargetId))
            {
                writer.WritePropertyName("targetId"u8);
                writer.WriteStringValue(TargetId);
            }
            if (Optional.IsCollectionDefined(TargetSpecification))
            {
                writer.WritePropertyName("targetSpecification"u8);
                writer.WriteStartObject();
                foreach (var item in TargetSpecification)
                {
                    writer.WritePropertyName(item.Key);
                    if (item.Value == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(SolutionScope))
            {
                writer.WritePropertyName("solutionScope"u8);
                writer.WriteStringValue(SolutionScope);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        EdgeTargetSnapshot IJsonModel<EdgeTargetSnapshot>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeTargetSnapshot>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeTargetSnapshot)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeTargetSnapshot(document.RootElement, options);
        }

        internal static EdgeTargetSnapshot DeserializeEdgeTargetSnapshot(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceIdentifier targetId = default;
            IReadOnlyDictionary<string, BinaryData> targetSpecification = default;
            string solutionScope = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("targetId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    targetId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("targetSpecification"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, BinaryData> dictionary = new Dictionary<string, BinaryData>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.Value.ValueKind == JsonValueKind.Null)
                        {
                            dictionary.Add(property0.Name, null);
                        }
                        else
                        {
                            dictionary.Add(property0.Name, BinaryData.FromString(property0.Value.GetRawText()));
                        }
                    }
                    targetSpecification = dictionary;
                    continue;
                }
                if (property.NameEquals("solutionScope"u8))
                {
                    solutionScope = property.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeTargetSnapshot(targetId, targetSpecification ?? new ChangeTrackingDictionary<string, BinaryData>(), solutionScope, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeTargetSnapshot>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeTargetSnapshot>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeTargetSnapshot)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeTargetSnapshot IPersistableModel<EdgeTargetSnapshot>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeTargetSnapshot>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeTargetSnapshot(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeTargetSnapshot)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeTargetSnapshot>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeTargetStatus.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Target Status. </summary>
    public partial class EdgeTargetStatus
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeTargetStatus"/>. </summary>
        internal EdgeTargetStatus()
        {
            ComponentStatuses = new ChangeTrackingList<TargetComponentStatus>();
        }

        /// <summary> Initializes a new instance of <see cref="EdgeTargetStatus"/>. </summary>
        /// <param name="name"> Target name. </param>
        /// <param name="status"> Target status. </param>
        /// <param name="componentStatuses"> Component statuses. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeTargetStatus(string name, string status, IReadOnlyList<TargetComponentStatus> componentStatuses, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Name = name;
            Status = status;
            ComponentStatuses = componentStatuses;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Target name. </summary>
        public string Name { get; }
        /// <summary> Target status. </summary>
        public string Status { get; }
        /// <summary> Component statuses. </summary>
        public IReadOnlyList<TargetComponentStatus> ComponentStatuses { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeTargetStatus.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class EdgeTargetStatus : IUtf8JsonSerializable, IJsonModel<EdgeTargetStatus>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeTargetStatus>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeTargetStatus>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeTargetStatus>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeTargetStatus)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(Name))
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            if (Optional.IsDefined(Status))
            {
                writer.WritePropertyName("status"u8);
                writer.WriteStringValue(Status);
            }
            if (Optional.IsCollectionDefined(ComponentStatuses))
            {
                writer.WritePropertyName("componentStatuses"u8);
                writer.WriteStartArray();
                foreach (var item in ComponentStatuses)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        EdgeTargetStatus IJsonModel<EdgeTargetStatus>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeTargetStatus>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeTargetStatus)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeTargetStatus(document.RootElement, options);
        }

        internal static EdgeTargetStatus DeserializeEdgeTargetStatus(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string name = default;
            string status = default;
            IReadOnlyList<TargetComponentStatus> componentStatuses = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("status"u8))
                {
                    status = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("componentStatuses"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<TargetComponentStatus> array = new List<TargetComponentStatus>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(TargetComponentStatus.DeserializeTargetComponentStatus(item, options));
                    }
                    componentStatuses = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeTargetStatus(name, status, componentStatuses ?? new ChangeTrackingList<TargetComponentStatus>(), serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeTargetStatus>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeTargetStatus>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeTargetStatus)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeTargetStatus IPersistableModel<EdgeTargetStatus>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeTargetStatus>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeTargetStatus(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeTargetStatus)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeTargetStatus>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeUpdateType.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Denotes which part of the version number will be updated. </summary>
    public readonly partial struct EdgeUpdateType : IEquatable<EdgeUpdateType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="EdgeUpdateType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EdgeUpdateType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string MajorValue = "Major";
        private const string MinorValue = "Minor";
        private const string PatchValue = "Patch";

        /// <summary> Major version. </summary>
        public static EdgeUpdateType Major { get; } = new EdgeUpdateType(MajorValue);
        /// <summary> Minor version. </summary>
        public static EdgeUpdateType Minor { get; } = new EdgeUpdateType(MinorValue);
        /// <summary> Patch version. </summary>
        public static EdgeUpdateType Patch { get; } = new EdgeUpdateType(PatchValue);
        /// <summary> Determines if two <see cref="EdgeUpdateType"/> values are the same. </summary>
        public static bool operator ==(EdgeUpdateType left, EdgeUpdateType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EdgeUpdateType"/> values are not the same. </summary>
        public static bool operator !=(EdgeUpdateType left, EdgeUpdateType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="EdgeUpdateType"/>. </summary>
        public static implicit operator EdgeUpdateType(string value) => new EdgeUpdateType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EdgeUpdateType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EdgeUpdateType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeVersionContent.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Version Parameter. </summary>
    public partial class EdgeVersionContent
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeVersionContent"/>. </summary>
        /// <param name="version"> Version of the Resource. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> is null. </exception>
        public EdgeVersionContent(string version)
        {
            Argument.AssertNotNull(version, nameof(version));

            Version = version;
        }

        /// <summary> Initializes a new instance of <see cref="EdgeVersionContent"/>. </summary>
        /// <param name="version"> Version of the Resource. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeVersionContent(string version, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Version = version;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="EdgeVersionContent"/> for deserialization. </summary>
        internal EdgeVersionContent()
        {
        }

        /// <summary> Version of the Resource. </summary>
        public string Version { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeVersionContent.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class EdgeVersionContent : IUtf8JsonSerializable, IJsonModel<EdgeVersionContent>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeVersionContent>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeVersionContent>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeVersionContent>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeVersionContent)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("version"u8);
            writer.WriteStringValue(Version);
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        EdgeVersionContent IJsonModel<EdgeVersionContent>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeVersionContent>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeVersionContent)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeVersionContent(document.RootElement, options);
        }

        internal static EdgeVersionContent DeserializeEdgeVersionContent(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string version = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("version"u8))
                {
                    version = property.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeVersionContent(version, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeVersionContent>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeVersionContent>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeVersionContent)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeVersionContent IPersistableModel<EdgeVersionContent>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeVersionContent>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeVersionContent(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeVersionContent)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeVersionContent>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeWorkflowProperties.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Workflow Properties. </summary>
    public partial class EdgeWorkflowProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeWorkflowProperties"/>. </summary>
        public EdgeWorkflowProperties()
        {
        }

        /// <summary> Initializes a new instance of <see cref="EdgeWorkflowProperties"/>. </summary>
        /// <param name="workflowTemplateId"> Workflow template Id. </param>
        /// <param name="provisioningState"> Provisioning state of resource. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeWorkflowProperties(string workflowTemplateId, WorkloadOrchestrationProvisioningState? provisioningState, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            WorkflowTemplateId = workflowTemplateId;
            ProvisioningState = provisioningState;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Workflow template Id. </summary>
        public string WorkflowTemplateId { get; }
        /// <summary> Provisioning state of resource. </summary>
        public WorkloadOrchestrationProvisioningState? ProvisioningState { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeWorkflowProperties.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class EdgeWorkflowProperties : IUtf8JsonSerializable, IJsonModel<EdgeWorkflowProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeWorkflowProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeWorkflowProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeWorkflowProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeWorkflowProperties)} does not support writing '{format}' format.");
            }

            if (options.Format != "W" && Optional.IsDefined(WorkflowTemplateId))
            {
                writer.WritePropertyName("workflowTemplateId"u8);
                writer.WriteStringValue(WorkflowTemplateId);
            }
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        EdgeWorkflowProperties IJsonModel<EdgeWorkflowProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeWorkflowProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeWorkflowProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeWorkflowProperties(document.RootElement, options);
        }

        internal static EdgeWorkflowProperties DeserializeEdgeWorkflowProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string workflowTemplateId = default;
            WorkloadOrchestrationProvisioningState? provisioningState = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("workflowTemplateId"u8))
                {
                    workflowTemplateId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new WorkloadOrchestrationProvisioningState(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeWorkflowProperties(workflowTemplateId, provisioningState, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeWorkflowProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeWorkflowProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeWorkflowProperties)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeWorkflowProperties IPersistableModel<EdgeWorkflowProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeWorkflowProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeWorkflowProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeWorkflowProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeWorkflowProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeWorkflowStageSpec.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Stage Properties. </summary>
    public partial class EdgeWorkflowStageSpec
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeWorkflowStageSpec"/>. </summary>
        /// <param name="name"> Name of Stage. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        public EdgeWorkflowStageSpec(string name)
        {
            Argument.AssertNotNull(name, nameof(name));

            Name = name;
            Specification = new ChangeTrackingDictionary<string, BinaryData>();
            Tasks = new ChangeTrackingList<EdgeWorkflowTaskSpec>();
        }

        /// <summary> Initializes a new instance of <see cref="EdgeWorkflowStageSpec"/>. </summary>
        /// <param name="name"> Name of Stage. </param>
        /// <param name="specification"> Stage specification. </param>
        /// <param name="tasks"> List of tasks in the stage. </param>
        /// <param name="taskOption"> Task option for the stage. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeWorkflowStageSpec(string name, IDictionary<string, BinaryData> specification, IList<EdgeWorkflowTaskSpec> tasks, EdgeWorkflowTaskConfig taskOption, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Name = name;
            Specification = specification;
            Tasks = tasks;
            TaskOption = taskOption;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="EdgeWorkflowStageSpec"/> for deserialization. </summary>
        internal EdgeWorkflowStageSpec()
        {
        }

        /// <summary> Name of Stage. </summary>
        public string Name { get; set; }
        /// <summary>
        /// Stage specification
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IDictionary<string, BinaryData> Specification { get; }
        /// <summary> List of tasks in the stage. </summary>
        public IList<EdgeWorkflowTaskSpec> Tasks { get; }
        /// <summary> Task option for the stage. </summary>
        public EdgeWorkflowTaskConfig TaskOption { get; set; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeWorkflowStageSpec.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class EdgeWorkflowStageSpec : IUtf8JsonSerializable, IJsonModel<EdgeWorkflowStageSpec>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeWorkflowStageSpec>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeWorkflowStageSpec>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeWorkflowStageSpec>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeWorkflowStageSpec)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("name"u8);
            writer.WriteStringValue(Name);
            if (Optional.IsCollectionDefined(Specification))
            {
                writer.WritePropertyName("specification"u8);
                writer.WriteStartObject();
                foreach (var item in Specification)
                {
                    writer.WritePropertyName(item.Key);
                    if (item.Value == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
                writer.WriteEndObject();
            }
            if (Optional.IsCollectionDefined(Tasks))
            {
                writer.WritePropertyName("tasks"u8);
                writer.WriteStartArray();
                foreach (var item in Tasks)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(TaskOption))
            {
                writer.WritePropertyName("taskOption"u8);
                writer.WriteObjectValue(TaskOption, options);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        EdgeWorkflowStageSpec IJsonModel<EdgeWorkflowStageSpec>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeWorkflowStageSpec>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeWorkflowStageSpec)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeWorkflowStageSpec(document.RootElement, options);
        }

        internal static EdgeWorkflowStageSpec DeserializeEdgeWorkflowStageSpec(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string name = default;
            IDictionary<string, BinaryData> specification = default;
            IList<EdgeWorkflowTaskSpec> tasks = default;
            EdgeWorkflowTaskConfig taskOption = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("specification"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, BinaryData> dictionary = new Dictionary<string, BinaryData>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.Value.ValueKind == JsonValueKind.Null)
                        {
                            dictionary.Add(property0.Name, null);
                        }
                        else
                        {
                            dictionary.Add(property0.Name, BinaryData.FromString(property0.Value.GetRawText()));
                        }
                    }
                    specification = dictionary;
                    continue;
                }
                if (property.NameEquals("tasks"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<EdgeWorkflowTaskSpec> array = new List<EdgeWorkflowTaskSpec>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(EdgeWorkflowTaskSpec.DeserializeEdgeWorkflowTaskSpec(item, options));
                    }
                    tasks = array;
                    continue;
                }
                if (property.NameEquals("taskOption"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    taskOption = EdgeWorkflowTaskConfig.DeserializeEdgeWorkflowTaskConfig(property.Value, options);
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeWorkflowStageSpec(name, specification ?? new ChangeTrackingDictionary<string, BinaryData>(), tasks ?? new ChangeTrackingList<EdgeWorkflowTaskSpec>(), taskOption, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeWorkflowStageSpec>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeWorkflowStageSpec>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeWorkflowStageSpec)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeWorkflowStageSpec IPersistableModel<EdgeWorkflowStageSpec>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeWorkflowStageSpec>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeWorkflowStageSpec(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeWorkflowStageSpec)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeWorkflowStageSpec>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeWorkflowTaskConfig.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Task Option Properties. </summary>
    public partial class EdgeWorkflowTaskConfig
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeWorkflowTaskConfig"/>. </summary>
        public EdgeWorkflowTaskConfig()
        {
        }

        /// <summary> Initializes a new instance of <see cref="EdgeWorkflowTaskConfig"/>. </summary>
        /// <param name="concurrency"> Parallel worker numbers of the tasks. </param>
        /// <param name="errorAction"> Error action for the tasks. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeWorkflowTaskConfig(int? concurrency, TaskErrorAction errorAction, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Concurrency = concurrency;
            ErrorAction = errorAction;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Parallel worker numbers of the tasks. </summary>
        public int? Concurrency { get; set; }
        /// <summary> Error action for the tasks. </summary>
        public TaskErrorAction ErrorAction { get; set; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeWorkflowTaskConfig.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class EdgeWorkflowTaskConfig : IUtf8JsonSerializable, IJsonModel<EdgeWorkflowTaskConfig>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeWorkflowTaskConfig>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeWorkflowTaskConfig>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeWorkflowTaskConfig>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeWorkflowTaskConfig)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(Concurrency))
            {
                writer.WritePropertyName("concurrency"u8);
                writer.WriteNumberValue(Concurrency.Value);
            }
            if (Optional.IsDefined(ErrorAction))
            {
                writer.WritePropertyName("errorAction"u8);
                writer.WriteObjectValue(ErrorAction, options);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        EdgeWorkflowTaskConfig IJsonModel<EdgeWorkflowTaskConfig>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeWorkflowTaskConfig>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeWorkflowTaskConfig)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeWorkflowTaskConfig(document.RootElement, options);
        }

        internal static EdgeWorkflowTaskConfig DeserializeEdgeWorkflowTaskConfig(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            int? concurrency = default;
            TaskErrorAction errorAction = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("concurrency"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    concurrency = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("errorAction"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    errorAction = TaskErrorAction.DeserializeTaskErrorAction(property.Value, options);
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeWorkflowTaskConfig(concurrency, errorAction, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeWorkflowTaskConfig>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeWorkflowTaskConfig>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeWorkflowTaskConfig)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeWorkflowTaskConfig IPersistableModel<EdgeWorkflowTaskConfig>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeWorkflowTaskConfig>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeWorkflowTaskConfig(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeWorkflowTaskConfig)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeWorkflowTaskConfig>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeWorkflowTaskSpec.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Task Spec. </summary>
    public partial class EdgeWorkflowTaskSpec
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeWorkflowTaskSpec"/>. </summary>
        /// <param name="name"> Name of Task. </param>
        /// <param name="specification"> Task specification. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="specification"/> is null. </exception>
        public EdgeWorkflowTaskSpec(string name, IDictionary<string, BinaryData> specification)
        {
            Argument.AssertNotNull(name, nameof(name));
            Argument.AssertNotNull(specification, nameof(specification));

            Name = name;
            Specification = specification;
        }

        /// <summary> Initializes a new instance of <see cref="EdgeWorkflowTaskSpec"/>. </summary>
        /// <param name="name"> Name of Task. </param>
        /// <param name="targetId"> Target ARM id. </param>
        /// <param name="specification"> Task specification. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeWorkflowTaskSpec(string name, ResourceIdentifier targetId, IDictionary<string, BinaryData> specification, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Name = name;
            TargetId = targetId;
            Specification = specification;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="EdgeWorkflowTaskSpec"/> for deserialization. </summary>
        internal EdgeWorkflowTaskSpec()
        {
        }

        /// <summary> Name of Task. </summary>
        public string Name { get; set; }
        /// <summary> Target ARM id. </summary>
        public ResourceIdentifier TargetId { get; set; }
        /// <summary>
        /// Task specification
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IDictionary<string, BinaryData> Specification { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeWorkflowTaskSpec.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class EdgeWorkflowTaskSpec : IUtf8JsonSerializable, IJsonModel<EdgeWorkflowTaskSpec>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeWorkflowTaskSpec>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeWorkflowTaskSpec>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeWorkflowTaskSpec>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeWorkflowTaskSpec)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("name"u8);
            writer.WriteStringValue(Name);
            if (Optional.IsDefined(TargetId))
            {
                writer.WritePropertyName("targetId"u8);
                writer.WriteStringValue(TargetId);
            }
            writer.WritePropertyName("specification"u8);
            writer.WriteStartObject();
            foreach (var item in Specification)
            {
                writer.WritePropertyName(item.Key);
                if (item.Value == null)
                {
                    writer.WriteNullValue();
                    continue;
                }
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                {
                    JsonSerializer.Serialize(writer, document.RootElement);
                }
#endif
            }
            writer.WriteEndObject();
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        EdgeWorkflowTaskSpec IJsonModel<EdgeWorkflowTaskSpec>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeWorkflowTaskSpec>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeWorkflowTaskSpec)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeWorkflowTaskSpec(document.RootElement, options);
        }

        internal static EdgeWorkflowTaskSpec DeserializeEdgeWorkflowTaskSpec(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string name = default;
            ResourceIdentifier targetId = default;
            IDictionary<string, BinaryData> specification = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    targetId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("specification"u8))
                {
                    Dictionary<string, BinaryData> dictionary = new Dictionary<string, BinaryData>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.Value.ValueKind == JsonValueKind.Null)
                        {
                            dictionary.Add(property0.Name, null);
                        }
                        else
                        {
                            dictionary.Add(property0.Name, BinaryData.FromString(property0.Value.GetRawText()));
                        }
                    }
                    specification = dictionary;
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeWorkflowTaskSpec(name, targetId, specification, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeWorkflowTaskSpec>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeWorkflowTaskSpec>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeWorkflowTaskSpec)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeWorkflowTaskSpec IPersistableModel<EdgeWorkflowTaskSpec>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeWorkflowTaskSpec>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeWorkflowTaskSpec(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeWorkflowTaskSpec)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeWorkflowTaskSpec>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeWorkflowVersionProperties.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Workflow Version Properties. </summary>
    public partial class EdgeWorkflowVersionProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeWorkflowVersionProperties"/>. </summary>
        /// <param name="stageSpec"> A list of stage specs. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="stageSpec"/> is null. </exception>
        public EdgeWorkflowVersionProperties(IEnumerable<EdgeWorkflowStageSpec> stageSpec)
        {
            Argument.AssertNotNull(stageSpec, nameof(stageSpec));

            StageSpec = stageSpec.ToList();
            Specification = new ChangeTrackingDictionary<string, BinaryData>();
        }

        /// <summary> Initializes a new instance of <see cref="EdgeWorkflowVersionProperties"/>. </summary>
        /// <param name="revision"> Revision number of resolved config for this workflow version. </param>
        /// <param name="configuration"> Resolved configuration values. </param>
        /// <param name="stageSpec"> A list of stage specs. </param>
        /// <param name="reviewId"> Review id of resolved config for this workflow version. </param>
        /// <param name="state"> State of workflow version. </param>
        /// <param name="specification"> Execution specification. </param>
        /// <param name="provisioningState"> Provisioning state of resource. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeWorkflowVersionProperties(int? revision, string configuration, IList<EdgeWorkflowStageSpec> stageSpec, string reviewId, SolutionInstanceState? state, IDictionary<string, BinaryData> specification, WorkloadOrchestrationProvisioningState? provisioningState, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Revision = revision;
            Configuration = configuration;
            StageSpec = stageSpec;
            ReviewId = reviewId;
            State = state;
            Specification = specification;
            ProvisioningState = provisioningState;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="EdgeWorkflowVersionProperties"/> for deserialization. </summary>
        internal EdgeWorkflowVersionProperties()
        {
        }

        /// <summary> Revision number of resolved config for this workflow version. </summary>
        public int? Revision { get; }
        /// <summary> Resolved configuration values. </summary>
        public string Configuration { get; }
        /// <summary> A list of stage specs. </summary>
        public IList<EdgeWorkflowStageSpec> StageSpec { get; }
        /// <summary> Review id of resolved config for this workflow version. </summary>
        public string ReviewId { get; }
        /// <summary> State of workflow version. </summary>
        public SolutionInstanceState? State { get; }
        /// <summary>
        /// Execution specification
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IDictionary<string, BinaryData> Specification { get; }
        /// <summary> Provisioning state of resource. </summary>
        public WorkloadOrchestrationProvisioningState? ProvisioningState { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeWorkflowVersionProperties.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class EdgeWorkflowVersionProperties : IUtf8JsonSerializable, IJsonModel<EdgeWorkflowVersionProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeWorkflowVersionProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeWorkflowVersionProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeWorkflowVersionProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeWorkflowVersionProperties)} does not support writing '{format}' format.");
            }

            if (options.Format != "W" && Optional.IsDefined(Revision))
            {
                writer.WritePropertyName("revision"u8);
                writer.WriteNumberValue(Revision.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(Configuration))
            {
                writer.WritePropertyName("configuration"u8);
                writer.WriteStringValue(Configuration);
            }
            writer.WritePropertyName("stageSpec"u8);
            writer.WriteStartArray();
            foreach (var item in StageSpec)
            {
                writer.WriteObjectValue(item, options);
            }
            writer.WriteEndArray();
            if (options.Format != "W" && Optional.IsDefined(ReviewId))
            {
                writer.WritePropertyName("reviewId"u8);
                writer.WriteStringValue(ReviewId);
            }
            if (options.Format != "W" && Optional.IsDefined(State))
            {
                writer.WritePropertyName("state"u8);
                writer.WriteStringValue(State.Value.ToString());
            }
            if (Optional.IsCollectionDefined(Specification))
            {
                writer.WritePropertyName("specification"u8);
                writer.WriteStartObject();
                foreach (var item in Specification)
                {
                    writer.WritePropertyName(item.Key);
                    if (item.Value == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
                writer.WriteEndObject();
            }
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        EdgeWorkflowVersionProperties IJsonModel<EdgeWorkflowVersionProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeWorkflowVersionProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeWorkflowVersionProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeWorkflowVersionProperties(document.RootElement, options);
        }

        internal static EdgeWorkflowVersionProperties DeserializeEdgeWorkflowVersionProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            int? revision = default;
            string configuration = default;
            IList<EdgeWorkflowStageSpec> stageSpec = default;
            string reviewId = default;
            SolutionInstanceState? state = default;
            IDictionary<string, BinaryData> specification = default;
            WorkloadOrchestrationProvisioningState? provisioningState = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("revision"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    revision = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("configuration"u8))
                {
                    configuration = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("stageSpec"u8))
                {
                    List<EdgeWorkflowStageSpec> array = new List<EdgeWorkflowStageSpec>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(EdgeWorkflowStageSpec.DeserializeEdgeWorkflowStageSpec(item, options));
                    }
                    stageSpec = array;
                    continue;
                }
                if (property.NameEquals("reviewId"u8))
                {
                    reviewId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("state"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    state = new SolutionInstanceState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("specification"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, BinaryData> dictionary = new Dictionary<string, BinaryData>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.Value.ValueKind == JsonValueKind.Null)
                        {
                            dictionary.Add(property0.Name, null);
                        }
                        else
                        {
                            dictionary.Add(property0.Name, BinaryData.FromString(property0.Value.GetRawText()));
                        }
                    }
                    specification = dictionary;
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new WorkloadOrchestrationProvisioningState(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new EdgeWorkflowVersionProperties(
                revision,
                configuration,
                stageSpec,
                reviewId,
                state,
                specification ?? new ChangeTrackingDictionary<string, BinaryData>(),
                provisioningState,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeWorkflowVersionProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeWorkflowVersionProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeWorkflowVersionProperties)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeWorkflowVersionProperties IPersistableModel<EdgeWorkflowVersionProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeWorkflowVersionProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeWorkflowVersionProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeWorkflowVersionProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeWorkflowVersionProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/ExecutionListResult.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> The response of a Execution list operation. </summary>
    internal partial class ExecutionListResult
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ExecutionListResult"/>. </summary>
        /// <param name="value"> The Execution items on this page. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        internal ExecutionListResult(IEnumerable<EdgeExecutionData> value)
        {
            Argument.AssertNotNull(value, nameof(value));

            Value = value.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="ExecutionListResult"/>. </summary>
        /// <param name="value"> The Execution items on this page. </param>
        /// <param name="nextLink"> The link to the next page of items. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ExecutionListResult(IReadOnlyList<EdgeExecutionData> value, Uri nextLink, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Value = value;
            NextLink = nextLink;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="ExecutionListResult"/> for deserialization. </summary>
        internal ExecutionListResult()
        {
        }

        /// <summary> The Execution items on this page. </summary>
        public IReadOnlyList<EdgeExecutionData> Value { get; }
        /// <summary> The link to the next page of items. </summary>
        public Uri NextLink { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/ExecutionListResult.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    internal partial class ExecutionListResult : IUtf8JsonSerializable, IJsonModel<ExecutionListResult>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ExecutionListResult>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<ExecutionListResult>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ExecutionListResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ExecutionListResult)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("value"u8);
            writer.WriteStartArray();
            foreach (var item in Value)
            {
                writer.WriteObjectValue(item, options);
            }
            writer.WriteEndArray();
            if (Optional.IsDefined(NextLink))
            {
                writer.WritePropertyName("nextLink"u8);
                writer.WriteStringValue(NextLink.AbsoluteUri);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        ExecutionListResult IJsonModel<ExecutionListResult>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ExecutionListResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ExecutionListResult)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeExecutionListResult(document.RootElement, options);
        }

        internal static ExecutionListResult DeserializeExecutionListResult(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IReadOnlyList<EdgeExecutionData> value = default;
            Uri nextLink = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("value"u8))
                {
                    List<EdgeExecutionData> array = new List<EdgeExecutionData>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(EdgeExecutionData.DeserializeEdgeExecutionData(item, options));
                    }
                    value = array;
                    continue;
                }
                if (property.NameEquals("nextLink"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    nextLink = new Uri(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new ExecutionListResult(value, nextLink, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<ExecutionListResult>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ExecutionListResult>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(ExecutionListResult)} does not support writing '{options.Format}' format.");
            }
        }

        ExecutionListResult IPersistableModel<ExecutionListResult>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ExecutionListResult>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeExecutionListResult(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ExecutionListResult)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<ExecutionListResult>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/InstallSolutionContent.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Install Solution Parameter. </summary>
    public partial class InstallSolutionContent
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="InstallSolutionContent"/>. </summary>
        /// <param name="solutionVersionId"> Solution Version ARM Id. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionVersionId"/> is null. </exception>
        public InstallSolutionContent(ResourceIdentifier solutionVersionId)
        {
            Argument.AssertNotNull(solutionVersionId, nameof(solutionVersionId));

            SolutionVersionId = solutionVersionId;
        }

        /// <summary> Initializes a new instance of <see cref="InstallSolutionContent"/>. </summary>
        /// <param name="solutionVersionId"> Solution Version ARM Id. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal InstallSolutionContent(ResourceIdentifier solutionVersionId, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            SolutionVersionId = solutionVersionId;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="InstallSolutionContent"/> for deserialization. </summary>
        internal InstallSolutionContent()
        {
        }

        /// <summary> Solution Version ARM Id. </summary>
        public ResourceIdentifier SolutionVersionId { get; set; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/InstallSolutionContent.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class InstallSolutionContent : IUtf8JsonSerializable, IJsonModel<InstallSolutionContent>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<InstallSolutionContent>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<InstallSolutionContent>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<InstallSolutionContent>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(InstallSolutionContent)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("solutionVersionId"u8);
            writer.WriteStringValue(SolutionVersionId);
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        InstallSolutionContent IJsonModel<InstallSolutionContent>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<InstallSolutionContent>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(InstallSolutionContent)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeInstallSolutionContent(document.RootElement, options);
        }

        internal static InstallSolutionContent DeserializeInstallSolutionContent(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceIdentifier solutionVersionId = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("solutionVersionId"u8))
                {
                    solutionVersionId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new InstallSolutionContent(solutionVersionId, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<InstallSolutionContent>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<InstallSolutionContent>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(InstallSolutionContent)} does not support writing '{options.Format}' format.");
            }
        }

        InstallSolutionContent IPersistableModel<InstallSolutionContent>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<InstallSolutionContent>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeInstallSolutionContent(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(InstallSolutionContent)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<InstallSolutionContent>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/InstanceActiveState.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Instance State. </summary>
    public readonly partial struct InstanceActiveState : IEquatable<InstanceActiveState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="InstanceActiveState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public InstanceActiveState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ActiveValue = "active";
        private const string InactiveValue = "inactive";

        /// <summary> Instance is active. </summary>
        public static InstanceActiveState Active { get; } = new InstanceActiveState(ActiveValue);
        /// <summary> Instance is inactive. </summary>
        public static InstanceActiveState Inactive { get; } = new InstanceActiveState(InactiveValue);
        /// <summary> Determines if two <see cref="InstanceActiveState"/> values are the same. </summary>
        public static bool operator ==(InstanceActiveState left, InstanceActiveState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="InstanceActiveState"/> values are not the same. </summary>
        public static bool operator !=(InstanceActiveState left, InstanceActiveState right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="InstanceActiveState"/>. </summary>
        public static implicit operator InstanceActiveState(string value) => new InstanceActiveState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is InstanceActiveState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(InstanceActiveState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/InstanceHistoryListResult.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> The response of a InstanceHistory list operation. </summary>
    internal partial class InstanceHistoryListResult
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="InstanceHistoryListResult"/>. </summary>
        /// <param name="value"> The InstanceHistory items on this page. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        internal InstanceHistoryListResult(IEnumerable<EdgeDeploymentInstanceHistoryData> value)
        {
            Argument.AssertNotNull(value, nameof(value));

            Value = value.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="InstanceHistoryListResult"/>. </summary>
        /// <param name="value"> The InstanceHistory items on this page. </param>
        /// <param name="nextLink"> The link to the next page of items. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal InstanceHistoryListResult(IReadOnlyList<EdgeDeploymentInstanceHistoryData> value, Uri nextLink, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Value = value;
            NextLink = nextLink;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="InstanceHistoryListResult"/> for deserialization. </summary>
        internal InstanceHistoryListResult()
        {
        }

        /// <summary> The InstanceHistory items on this page. </summary>
        public IReadOnlyList<EdgeDeploymentInstanceHistoryData> Value { get; }
        /// <summary> The link to the next page of items. </summary>
        public Uri NextLink { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/InstanceHistoryListResult.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    internal partial class InstanceHistoryListResult : IUtf8JsonSerializable, IJsonModel<InstanceHistoryListResult>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<InstanceHistoryListResult>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<InstanceHistoryListResult>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<InstanceHistoryListResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(InstanceHistoryListResult)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("value"u8);
            writer.WriteStartArray();
            foreach (var item in Value)
            {
                writer.WriteObjectValue(item, options);
            }
            writer.WriteEndArray();
            if (Optional.IsDefined(NextLink))
            {
                writer.WritePropertyName("nextLink"u8);
                writer.WriteStringValue(NextLink.AbsoluteUri);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        InstanceHistoryListResult IJsonModel<InstanceHistoryListResult>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<InstanceHistoryListResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(InstanceHistoryListResult)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeInstanceHistoryListResult(document.RootElement, options);
        }

        internal static InstanceHistoryListResult DeserializeInstanceHistoryListResult(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IReadOnlyList<EdgeDeploymentInstanceHistoryData> value = default;
            Uri nextLink = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("value"u8))
                {
                    List<EdgeDeploymentInstanceHistoryData> array = new List<EdgeDeploymentInstanceHistoryData>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(EdgeDeploymentInstanceHistoryData.DeserializeEdgeDeploymentInstanceHistoryData(item, options));
                    }
                    value = array;
                    continue;
                }
                if (property.NameEquals("nextLink"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    nextLink = new Uri(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new InstanceHistoryListResult(value, nextLink, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<InstanceHistoryListResult>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<InstanceHistoryListResult>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(InstanceHistoryListResult)} does not support writing '{options.Format}' format.");
            }
        }

        InstanceHistoryListResult IPersistableModel<InstanceHistoryListResult>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<InstanceHistoryListResult>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeInstanceHistoryListResult(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(InstanceHistoryListResult)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<InstanceHistoryListResult>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/InstanceListResult.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> The response of a Instance list operation. </summary>
    internal partial class InstanceListResult
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="InstanceListResult"/>. </summary>
        /// <param name="value"> The Instance items on this page. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        internal InstanceListResult(IEnumerable<EdgeDeploymentInstanceData> value)
        {
            Argument.AssertNotNull(value, nameof(value));

            Value = value.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="InstanceListResult"/>. </summary>
        /// <param name="value"> The Instance items on this page. </param>
        /// <param name="nextLink"> The link to the next page of items. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal InstanceListResult(IReadOnlyList<EdgeDeploymentInstanceData> value, Uri nextLink, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Value = value;
            NextLink = nextLink;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="InstanceListResult"/> for deserialization. </summary>
        internal InstanceListResult()
        {
        }

        /// <summary> The Instance items on this page. </summary>
        public IReadOnlyList<EdgeDeploymentInstanceData> Value { get; }
        /// <summary> The link to the next page of items. </summary>
        public Uri NextLink { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/InstanceListResult.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    internal partial class InstanceListResult : IUtf8JsonSerializable, IJsonModel<InstanceListResult>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<InstanceListResult>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<InstanceListResult>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<InstanceListResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(InstanceListResult)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("value"u8);
            writer.WriteStartArray();
            foreach (var item in Value)
            {
                writer.WriteObjectValue(item, options);
            }
            writer.WriteEndArray();
            if (Optional.IsDefined(NextLink))
            {
                writer.WritePropertyName("nextLink"u8);
                writer.WriteStringValue(NextLink.AbsoluteUri);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        InstanceListResult IJsonModel<InstanceListResult>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<InstanceListResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(InstanceListResult)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeInstanceListResult(document.RootElement, options);
        }

        internal static InstanceListResult DeserializeInstanceListResult(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IReadOnlyList<EdgeDeploymentInstanceData> value = default;
            Uri nextLink = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("value"u8))
                {
                    List<EdgeDeploymentInstanceData> array = new List<EdgeDeploymentInstanceData>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(EdgeDeploymentInstanceData.DeserializeEdgeDeploymentInstanceData(item, options));
                    }
                    value = array;
                    continue;
                }
                if (property.NameEquals("nextLink"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    nextLink = new Uri(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new InstanceListResult(value, nextLink, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<InstanceListResult>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<InstanceListResult>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(InstanceListResult)} does not support writing '{options.Format}' format.");
            }
        }

        InstanceListResult IPersistableModel<InstanceListResult>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<InstanceListResult>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeInstanceListResult(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(InstanceListResult)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<InstanceListResult>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/InstanceReconciliationPolicy.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Defines a ReconciliationPolicy. </summary>
    public partial class InstanceReconciliationPolicy
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="InstanceReconciliationPolicy"/>. </summary>
        /// <param name="state"> The state of the ReconciliationPolicy. </param>
        /// <param name="interval"> Policy interval. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="interval"/> is null. </exception>
        public InstanceReconciliationPolicy(InstanceReconciliationState state, string interval)
        {
            Argument.AssertNotNull(interval, nameof(interval));

            State = state;
            Interval = interval;
        }

        /// <summary> Initializes a new instance of <see cref="InstanceReconciliationPolicy"/>. </summary>
        /// <param name="state"> The state of the ReconciliationPolicy. </param>
        /// <param name="interval"> Policy interval. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal InstanceReconciliationPolicy(InstanceReconciliationState state, string interval, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            State = state;
            Interval = interval;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="InstanceReconciliationPolicy"/> for deserialization. </summary>
        internal InstanceReconciliationPolicy()
        {
        }

        /// <summary> The state of the ReconciliationPolicy. </summary>
        public InstanceReconciliationState State { get; set; }
        /// <summary> Policy interval. </summary>
        public string Interval { get; set; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/InstanceReconciliationPolicy.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class InstanceReconciliationPolicy : IUtf8JsonSerializable, IJsonModel<InstanceReconciliationPolicy>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<InstanceReconciliationPolicy>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<InstanceReconciliationPolicy>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<InstanceReconciliationPolicy>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(InstanceReconciliationPolicy)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("state"u8);
            writer.WriteStringValue(State.ToString());
            writer.WritePropertyName("interval"u8);
            writer.WriteStringValue(Interval);
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        InstanceReconciliationPolicy IJsonModel<InstanceReconciliationPolicy>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<InstanceReconciliationPolicy>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(InstanceReconciliationPolicy)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeInstanceReconciliationPolicy(document.RootElement, options);
        }

        internal static InstanceReconciliationPolicy DeserializeInstanceReconciliationPolicy(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            InstanceReconciliationState state = default;
            string interval = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("state"u8))
                {
                    state = new InstanceReconciliationState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("interval"u8))
                {
                    interval = property.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new InstanceReconciliationPolicy(state, interval, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<InstanceReconciliationPolicy>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<InstanceReconciliationPolicy>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(InstanceReconciliationPolicy)} does not support writing '{options.Format}' format.");
            }
        }

        InstanceReconciliationPolicy IPersistableModel<InstanceReconciliationPolicy>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<InstanceReconciliationPolicy>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeInstanceReconciliationPolicy(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(InstanceReconciliationPolicy)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<InstanceReconciliationPolicy>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/InstanceReconciliationState.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Defines a state of the reconciliation policy. </summary>
    public readonly partial struct InstanceReconciliationState : IEquatable<InstanceReconciliationState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="InstanceReconciliationState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public InstanceReconciliationState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string InactiveValue = "inactive";
        private const string ActiveValue = "active";

        /// <summary> Reconciliation is inactive. </summary>
        public static InstanceReconciliationState Inactive { get; } = new InstanceReconciliationState(InactiveValue);
        /// <summary> Reconciliation is active. </summary>
        public static InstanceReconciliationState Active { get; } = new InstanceReconciliationState(ActiveValue);
        /// <summary> Determines if two <see cref="InstanceReconciliationState"/> values are the same. </summary>
        public static bool operator ==(InstanceReconciliationState left, InstanceReconciliationState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="InstanceReconciliationState"/> values are not the same. </summary>
        public static bool operator !=(InstanceReconciliationState left, InstanceReconciliationState right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="InstanceReconciliationState"/>. </summary>
        public static implicit operator InstanceReconciliationState(string value) => new InstanceReconciliationState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is InstanceReconciliationState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(InstanceReconciliationState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/JobListResult.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> The response of a Job list operation. </summary>
    internal partial class JobListResult
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="JobListResult"/>. </summary>
        /// <param name="value"> The Job items on this page. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        internal JobListResult(IEnumerable<EdgeJobData> value)
        {
            Argument.AssertNotNull(value, nameof(value));

            Value = value.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="JobListResult"/>. </summary>
        /// <param name="value"> The Job items on this page. </param>
        /// <param name="nextLink"> The link to the next page of items. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal JobListResult(IReadOnlyList<EdgeJobData> value, Uri nextLink, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Value = value;
            NextLink = nextLink;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="JobListResult"/> for deserialization. </summary>
        internal JobListResult()
        {
        }

        /// <summary> The Job items on this page. </summary>
        public IReadOnlyList<EdgeJobData> Value { get; }
        /// <summary> The link to the next page of items. </summary>
        public Uri NextLink { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/JobListResult.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    internal partial class JobListResult : IUtf8JsonSerializable, IJsonModel<JobListResult>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<JobListResult>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<JobListResult>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<JobListResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(JobListResult)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("value"u8);
            writer.WriteStartArray();
            foreach (var item in Value)
            {
                writer.WriteObjectValue(item, options);
            }
            writer.WriteEndArray();
            if (Optional.IsDefined(NextLink))
            {
                writer.WritePropertyName("nextLink"u8);
                writer.WriteStringValue(NextLink.AbsoluteUri);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        JobListResult IJsonModel<JobListResult>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<JobListResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(JobListResult)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeJobListResult(document.RootElement, options);
        }

        internal static JobListResult DeserializeJobListResult(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IReadOnlyList<EdgeJobData> value = default;
            Uri nextLink = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("value"u8))
                {
                    List<EdgeJobData> array = new List<EdgeJobData>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(EdgeJobData.DeserializeEdgeJobData(item, options));
                    }
                    value = array;
                    continue;
                }
                if (property.NameEquals("nextLink"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    nextLink = new Uri(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new JobListResult(value, nextLink, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<JobListResult>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<JobListResult>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(JobListResult)} does not support writing '{options.Format}' format.");
            }
        }

        JobListResult IPersistableModel<JobListResult>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<JobListResult>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeJobListResult(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(JobListResult)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<JobListResult>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/RemoveRevisionContent.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Install Solution Parameter. </summary>
    public partial class RemoveRevisionContent
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="RemoveRevisionContent"/>. </summary>
        /// <param name="solutionTemplateId"> Solution Template ARM Id. </param>
        /// <param name="solutionVersion"> Solution Version Name. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionTemplateId"/> or <paramref name="solutionVersion"/> is null. </exception>
        public RemoveRevisionContent(ResourceIdentifier solutionTemplateId, string solutionVersion)
        {
            Argument.AssertNotNull(solutionTemplateId, nameof(solutionTemplateId));
            Argument.AssertNotNull(solutionVersion, nameof(solutionVersion));

            SolutionTemplateId = solutionTemplateId;
            SolutionVersion = solutionVersion;
        }

        /// <summary> Initializes a new instance of <see cref="RemoveRevisionContent"/>. </summary>
        /// <param name="solutionTemplateId"> Solution Template ARM Id. </param>
        /// <param name="solutionVersion"> Solution Version Name. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal RemoveRevisionContent(ResourceIdentifier solutionTemplateId, string solutionVersion, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            SolutionTemplateId = solutionTemplateId;
            SolutionVersion = solutionVersion;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="RemoveRevisionContent"/> for deserialization. </summary>
        internal RemoveRevisionContent()
        {
        }

        /// <summary> Solution Template ARM Id. </summary>
        public ResourceIdentifier SolutionTemplateId { get; }
        /// <summary> Solution Version Name. </summary>
        public string SolutionVersion { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/RemoveRevisionContent.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class RemoveRevisionContent : IUtf8JsonSerializable, IJsonModel<RemoveRevisionContent>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<RemoveRevisionContent>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<RemoveRevisionContent>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<RemoveRevisionContent>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(RemoveRevisionContent)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("solutionTemplateId"u8);
            writer.WriteStringValue(SolutionTemplateId);
            writer.WritePropertyName("solutionVersion"u8);
            writer.WriteStringValue(SolutionVersion);
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        RemoveRevisionContent IJsonModel<RemoveRevisionContent>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<RemoveRevisionContent>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(RemoveRevisionContent)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeRemoveRevisionContent(document.RootElement, options);
        }

        internal static RemoveRevisionContent DeserializeRemoveRevisionContent(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceIdentifier solutionTemplateId = default;
            string solutionVersion = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("solutionTemplateId"u8))
                {
                    solutionTemplateId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("solutionVersion"u8))
                {
                    solutionVersion = property.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new RemoveRevisionContent(solutionTemplateId, solutionVersion, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<RemoveRevisionContent>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<RemoveRevisionContent>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(RemoveRevisionContent)} does not support writing '{options.Format}' format.");
            }
        }

        RemoveRevisionContent IPersistableModel<RemoveRevisionContent>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<RemoveRevisionContent>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeRemoveRevisionContent(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(RemoveRevisionContent)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<RemoveRevisionContent>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/RemoveVersionResult.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Remove Version response. </summary>
    public partial class RemoveVersionResult
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="RemoveVersionResult"/>. </summary>
        /// <param name="status"> Status for remove version response. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="status"/> is null. </exception>
        internal RemoveVersionResult(string status)
        {
            Argument.AssertNotNull(status, nameof(status));

            Status = status;
        }

        /// <summary> Initializes a new instance of <see cref="RemoveVersionResult"/>. </summary>
        /// <param name="status"> Status for remove version response. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal RemoveVersionResult(string status, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Status = status;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="RemoveVersionResult"/> for deserialization. </summary>
        internal RemoveVersionResult()
        {
        }

        /// <summary> Status for remove version response. </summary>
        public string Status { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/RemoveVersionResult.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class RemoveVersionResult : IUtf8JsonSerializable, IJsonModel<RemoveVersionResult>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<RemoveVersionResult>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<RemoveVersionResult>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<RemoveVersionResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(RemoveVersionResult)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("status"u8);
            writer.WriteStringValue(Status);
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        RemoveVersionResult IJsonModel<RemoveVersionResult>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<RemoveVersionResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(RemoveVersionResult)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeRemoveVersionResult(document.RootElement, options);
        }

        internal static RemoveVersionResult DeserializeRemoveVersionResult(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string status = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("status"u8))
                {
                    status = property.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new RemoveVersionResult(status, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<RemoveVersionResult>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<RemoveVersionResult>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(RemoveVersionResult)} does not support writing '{options.Format}' format.");
            }
        }

        RemoveVersionResult IPersistableModel<RemoveVersionResult>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<RemoveVersionResult>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeRemoveVersionResult(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(RemoveVersionResult)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<RemoveVersionResult>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/ResolvedConfiguration.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Resolved Configuration. </summary>
    public partial class ResolvedConfiguration
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ResolvedConfiguration"/>. </summary>
        /// <param name="configuration"> Resolved Configuration as string. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="configuration"/> is null. </exception>
        internal ResolvedConfiguration(string configuration)
        {
            Argument.AssertNotNull(configuration, nameof(configuration));

            Configuration = configuration;
        }

        /// <summary> Initializes a new instance of <see cref="ResolvedConfiguration"/>. </summary>
        /// <param name="configuration"> Resolved Configuration as string. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ResolvedConfiguration(string configuration, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Configuration = configuration;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="ResolvedConfiguration"/> for deserialization. </summary>
        internal ResolvedConfiguration()
        {
        }

        /// <summary> Resolved Configuration as string. </summary>
        public string Configuration { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/ResolvedConfiguration.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class ResolvedConfiguration : IUtf8JsonSerializable, IJsonModel<ResolvedConfiguration>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ResolvedConfiguration>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<ResolvedConfiguration>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ResolvedConfiguration>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ResolvedConfiguration)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("configuration"u8);
            writer.WriteStringValue(Configuration);
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        ResolvedConfiguration IJsonModel<ResolvedConfiguration>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ResolvedConfiguration>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ResolvedConfiguration)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeResolvedConfiguration(document.RootElement, options);
        }

        internal static ResolvedConfiguration DeserializeResolvedConfiguration(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string configuration = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("configuration"u8))
                {
                    configuration = property.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new ResolvedConfiguration(configuration, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<ResolvedConfiguration>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ResolvedConfiguration>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(ResolvedConfiguration)} does not support writing '{options.Format}' format.");
            }
        }

        ResolvedConfiguration IPersistableModel<ResolvedConfiguration>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ResolvedConfiguration>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeResolvedConfiguration(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ResolvedConfiguration)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<ResolvedConfiguration>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/SchemaListResult.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> The response of a Schema list operation. </summary>
    internal partial class SchemaListResult
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="SchemaListResult"/>. </summary>
        /// <param name="value"> The Schema items on this page. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        internal SchemaListResult(IEnumerable<EdgeSchemaData> value)
        {
            Argument.AssertNotNull(value, nameof(value));

            Value = value.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="SchemaListResult"/>. </summary>
        /// <param name="value"> The Schema items on this page. </param>
        /// <param name="nextLink"> The link to the next page of items. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal SchemaListResult(IReadOnlyList<EdgeSchemaData> value, Uri nextLink, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Value = value;
            NextLink = nextLink;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="SchemaListResult"/> for deserialization. </summary>
        internal SchemaListResult()
        {
        }

        /// <summary> The Schema items on this page. </summary>
        public IReadOnlyList<EdgeSchemaData> Value { get; }
        /// <summary> The link to the next page of items. </summary>
        public Uri NextLink { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/SchemaListResult.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    internal partial class SchemaListResult : IUtf8JsonSerializable, IJsonModel<SchemaListResult>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<SchemaListResult>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<SchemaListResult>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SchemaListResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SchemaListResult)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("value"u8);
            writer.WriteStartArray();
            foreach (var item in Value)
            {
                writer.WriteObjectValue(item, options);
            }
            writer.WriteEndArray();
            if (Optional.IsDefined(NextLink))
            {
                writer.WritePropertyName("nextLink"u8);
                writer.WriteStringValue(NextLink.AbsoluteUri);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        SchemaListResult IJsonModel<SchemaListResult>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SchemaListResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SchemaListResult)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeSchemaListResult(document.RootElement, options);
        }

        internal static SchemaListResult DeserializeSchemaListResult(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IReadOnlyList<EdgeSchemaData> value = default;
            Uri nextLink = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("value"u8))
                {
                    List<EdgeSchemaData> array = new List<EdgeSchemaData>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(EdgeSchemaData.DeserializeEdgeSchemaData(item, options));
                    }
                    value = array;
                    continue;
                }
                if (property.NameEquals("nextLink"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    nextLink = new Uri(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new SchemaListResult(value, nextLink, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<SchemaListResult>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SchemaListResult>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(SchemaListResult)} does not support writing '{options.Format}' format.");
            }
        }

        SchemaListResult IPersistableModel<SchemaListResult>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SchemaListResult>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeSchemaListResult(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(SchemaListResult)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<SchemaListResult>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/SchemaReferenceListResult.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> The response of a SchemaReference list operation. </summary>
    internal partial class SchemaReferenceListResult
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="SchemaReferenceListResult"/>. </summary>
        /// <param name="value"> The SchemaReference items on this page. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        internal SchemaReferenceListResult(IEnumerable<EdgeSchemaReferenceData> value)
        {
            Argument.AssertNotNull(value, nameof(value));

            Value = value.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="SchemaReferenceListResult"/>. </summary>
        /// <param name="value"> The SchemaReference items on this page. </param>
        /// <param name="nextLink"> The link to the next page of items. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal SchemaReferenceListResult(IReadOnlyList<EdgeSchemaReferenceData> value, Uri nextLink, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Value = value;
            NextLink = nextLink;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="SchemaReferenceListResult"/> for deserialization. </summary>
        internal SchemaReferenceListResult()
        {
        }

        /// <summary> The SchemaReference items on this page. </summary>
        public IReadOnlyList<EdgeSchemaReferenceData> Value { get; }
        /// <summary> The link to the next page of items. </summary>
        public Uri NextLink { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/SchemaReferenceListResult.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    internal partial class SchemaReferenceListResult : IUtf8JsonSerializable, IJsonModel<SchemaReferenceListResult>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<SchemaReferenceListResult>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<SchemaReferenceListResult>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SchemaReferenceListResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SchemaReferenceListResult)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("value"u8);
            writer.WriteStartArray();
            foreach (var item in Value)
            {
                writer.WriteObjectValue(item, options);
            }
            writer.WriteEndArray();
            if (Optional.IsDefined(NextLink))
            {
                writer.WritePropertyName("nextLink"u8);
                writer.WriteStringValue(NextLink.AbsoluteUri);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        SchemaReferenceListResult IJsonModel<SchemaReferenceListResult>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SchemaReferenceListResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SchemaReferenceListResult)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeSchemaReferenceListResult(document.RootElement, options);
        }

        internal static SchemaReferenceListResult DeserializeSchemaReferenceListResult(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IReadOnlyList<EdgeSchemaReferenceData> value = default;
            Uri nextLink = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("value"u8))
                {
                    List<EdgeSchemaReferenceData> array = new List<EdgeSchemaReferenceData>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(EdgeSchemaReferenceData.DeserializeEdgeSchemaReferenceData(item, options));
                    }
                    value = array;
                    continue;
                }
                if (property.NameEquals("nextLink"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    nextLink = new Uri(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new SchemaReferenceListResult(value, nextLink, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<SchemaReferenceListResult>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SchemaReferenceListResult>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(SchemaReferenceListResult)} does not support writing '{options.Format}' format.");
            }
        }

        SchemaReferenceListResult IPersistableModel<SchemaReferenceListResult>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SchemaReferenceListResult>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeSchemaReferenceListResult(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(SchemaReferenceListResult)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<SchemaReferenceListResult>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/SchemaVersionListResult.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> The response of a SchemaVersion list operation. </summary>
    internal partial class SchemaVersionListResult
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="SchemaVersionListResult"/>. </summary>
        /// <param name="value"> The SchemaVersion items on this page. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        internal SchemaVersionListResult(IEnumerable<EdgeSchemaVersionData> value)
        {
            Argument.AssertNotNull(value, nameof(value));

            Value = value.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="SchemaVersionListResult"/>. </summary>
        /// <param name="value"> The SchemaVersion items on this page. </param>
        /// <param name="nextLink"> The link to the next page of items. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal SchemaVersionListResult(IReadOnlyList<EdgeSchemaVersionData> value, Uri nextLink, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Value = value;
            NextLink = nextLink;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="SchemaVersionListResult"/> for deserialization. </summary>
        internal SchemaVersionListResult()
        {
        }

        /// <summary> The SchemaVersion items on this page. </summary>
        public IReadOnlyList<EdgeSchemaVersionData> Value { get; }
        /// <summary> The link to the next page of items. </summary>
        public Uri NextLink { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/SchemaVersionListResult.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    internal partial class SchemaVersionListResult : IUtf8JsonSerializable, IJsonModel<SchemaVersionListResult>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<SchemaVersionListResult>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<SchemaVersionListResult>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SchemaVersionListResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SchemaVersionListResult)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("value"u8);
            writer.WriteStartArray();
            foreach (var item in Value)
            {
                writer.WriteObjectValue(item, options);
            }
            writer.WriteEndArray();
            if (Optional.IsDefined(NextLink))
            {
                writer.WritePropertyName("nextLink"u8);
                writer.WriteStringValue(NextLink.AbsoluteUri);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        SchemaVersionListResult IJsonModel<SchemaVersionListResult>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SchemaVersionListResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SchemaVersionListResult)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeSchemaVersionListResult(document.RootElement, options);
        }

        internal static SchemaVersionListResult DeserializeSchemaVersionListResult(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IReadOnlyList<EdgeSchemaVersionData> value = default;
            Uri nextLink = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("value"u8))
                {
                    List<EdgeSchemaVersionData> array = new List<EdgeSchemaVersionData>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(EdgeSchemaVersionData.DeserializeEdgeSchemaVersionData(item, options));
                    }
                    value = array;
                    continue;
                }
                if (property.NameEquals("nextLink"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    nextLink = new Uri(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new SchemaVersionListResult(value, nextLink, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<SchemaVersionListResult>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SchemaVersionListResult>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(SchemaVersionListResult)} does not support writing '{options.Format}' format.");
            }
        }

        SchemaVersionListResult IPersistableModel<SchemaVersionListResult>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SchemaVersionListResult>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeSchemaVersionListResult(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(SchemaVersionListResult)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<SchemaVersionListResult>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/SiteReferenceListResult.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> The response of a SiteReference list operation. </summary>
    internal partial class SiteReferenceListResult
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="SiteReferenceListResult"/>. </summary>
        /// <param name="value"> The SiteReference items on this page. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        internal SiteReferenceListResult(IEnumerable<EdgeSiteReferenceData> value)
        {
            Argument.AssertNotNull(value, nameof(value));

            Value = value.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="SiteReferenceListResult"/>. </summary>
        /// <param name="value"> The SiteReference items on this page. </param>
        /// <param name="nextLink"> The link to the next page of items. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal SiteReferenceListResult(IReadOnlyList<EdgeSiteReferenceData> value, Uri nextLink, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Value = value;
            NextLink = nextLink;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="SiteReferenceListResult"/> for deserialization. </summary>
        internal SiteReferenceListResult()
        {
        }

        /// <summary> The SiteReference items on this page. </summary>
        public IReadOnlyList<EdgeSiteReferenceData> Value { get; }
        /// <summary> The link to the next page of items. </summary>
        public Uri NextLink { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/SiteReferenceListResult.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    internal partial class SiteReferenceListResult : IUtf8JsonSerializable, IJsonModel<SiteReferenceListResult>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<SiteReferenceListResult>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<SiteReferenceListResult>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SiteReferenceListResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SiteReferenceListResult)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("value"u8);
            writer.WriteStartArray();
            foreach (var item in Value)
            {
                writer.WriteObjectValue(item, options);
            }
            writer.WriteEndArray();
            if (Optional.IsDefined(NextLink))
            {
                writer.WritePropertyName("nextLink"u8);
                writer.WriteStringValue(NextLink.AbsoluteUri);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        SiteReferenceListResult IJsonModel<SiteReferenceListResult>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SiteReferenceListResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SiteReferenceListResult)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeSiteReferenceListResult(document.RootElement, options);
        }

        internal static SiteReferenceListResult DeserializeSiteReferenceListResult(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IReadOnlyList<EdgeSiteReferenceData> value = default;
            Uri nextLink = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("value"u8))
                {
                    List<EdgeSiteReferenceData> array = new List<EdgeSiteReferenceData>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(EdgeSiteReferenceData.DeserializeEdgeSiteReferenceData(item, options));
                    }
                    value = array;
                    continue;
                }
                if (property.NameEquals("nextLink"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    nextLink = new Uri(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new SiteReferenceListResult(value, nextLink, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<SiteReferenceListResult>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SiteReferenceListResult>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(SiteReferenceListResult)} does not support writing '{options.Format}' format.");
            }
        }

        SiteReferenceListResult IPersistableModel<SiteReferenceListResult>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SiteReferenceListResult>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeSiteReferenceListResult(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(SiteReferenceListResult)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<SiteReferenceListResult>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/SolutionInstanceState.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Solution Instance State. </summary>
    public readonly partial struct SolutionInstanceState : IEquatable<SolutionInstanceState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SolutionInstanceState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SolutionInstanceState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string InReviewValue = "InReview";
        private const string UpgradeInReviewValue = "UpgradeInReview";
        private const string ReadyToDeployValue = "ReadyToDeploy";
        private const string ReadyToUpgradeValue = "ReadyToUpgrade";
        private const string DeployingValue = "Deploying";
        private const string DeployedValue = "Deployed";
        private const string FailedValue = "Failed";
        private const string UndeployedValue = "Undeployed";
        private const string PendingExternalValidationValue = "PendingExternalValidation";
        private const string ExternalValidationFailedValue = "ExternalValidationFailed";
        private const string StagingValue = "Staging";

        /// <summary> Solution Instance is in review. </summary>
        public static SolutionInstanceState InReview { get; } = new SolutionInstanceState(InReviewValue);
        /// <summary> Solution Instance upgrade is in review. </summary>
        public static SolutionInstanceState UpgradeInReview { get; } = new SolutionInstanceState(UpgradeInReviewValue);
        /// <summary> Solution Instance is ready to deploy. </summary>
        public static SolutionInstanceState ReadyToDeploy { get; } = new SolutionInstanceState(ReadyToDeployValue);
        /// <summary> Solution Instance is ready to upgrade. </summary>
        public static SolutionInstanceState ReadyToUpgrade { get; } = new SolutionInstanceState(ReadyToUpgradeValue);
        /// <summary> Solution Instance is deploying. </summary>
        public static SolutionInstanceState Deploying { get; } = new SolutionInstanceState(DeployingValue);
        /// <summary> Solution Instance is deployed. </summary>
        public static SolutionInstanceState Deployed { get; } = new SolutionInstanceState(DeployedValue);
        /// <summary> Solution Instance failed to deploy. </summary>
        public static SolutionInstanceState Failed { get; } = new SolutionInstanceState(FailedValue);
        /// <summary> Solution Instance is undeployed. </summary>
        public static SolutionInstanceState Undeployed { get; } = new SolutionInstanceState(UndeployedValue);
        /// <summary> Solution Instance is pending external validation. </summary>
        public static SolutionInstanceState PendingExternalValidation { get; } = new SolutionInstanceState(PendingExternalValidationValue);
        /// <summary> Solution Instance failed external validation. </summary>
        public static SolutionInstanceState ExternalValidationFailed { get; } = new SolutionInstanceState(ExternalValidationFailedValue);
        /// <summary> Solution Instance is staging the images. </summary>
        public static SolutionInstanceState Staging { get; } = new SolutionInstanceState(StagingValue);
        /// <summary> Determines if two <see cref="SolutionInstanceState"/> values are the same. </summary>
        public static bool operator ==(SolutionInstanceState left, SolutionInstanceState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SolutionInstanceState"/> values are not the same. </summary>
        public static bool operator !=(SolutionInstanceState left, SolutionInstanceState right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="SolutionInstanceState"/>. </summary>
        public static implicit operator SolutionInstanceState(string value) => new SolutionInstanceState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SolutionInstanceState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SolutionInstanceState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/SolutionInstanceValidationStatus.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Solution Instance Validation Status. </summary>
    public readonly partial struct SolutionInstanceValidationStatus : IEquatable<SolutionInstanceValidationStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SolutionInstanceValidationStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SolutionInstanceValidationStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ValidValue = "Valid";
        private const string InvalidValue = "Invalid";

        /// <summary> Solution Instance is valid. </summary>
        public static SolutionInstanceValidationStatus Valid { get; } = new SolutionInstanceValidationStatus(ValidValue);
        /// <summary> Solution Instance is invalid. </summary>
        public static SolutionInstanceValidationStatus Invalid { get; } = new SolutionInstanceValidationStatus(InvalidValue);
        /// <summary> Determines if two <see cref="SolutionInstanceValidationStatus"/> values are the same. </summary>
        public static bool operator ==(SolutionInstanceValidationStatus left, SolutionInstanceValidationStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SolutionInstanceValidationStatus"/> values are not the same. </summary>
        public static bool operator !=(SolutionInstanceValidationStatus left, SolutionInstanceValidationStatus right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="SolutionInstanceValidationStatus"/>. </summary>
        public static implicit operator SolutionInstanceValidationStatus(string value) => new SolutionInstanceValidationStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SolutionInstanceValidationStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SolutionInstanceValidationStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/SolutionListResult.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> The response of a Solution list operation. </summary>
    internal partial class SolutionListResult
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="SolutionListResult"/>. </summary>
        /// <param name="value"> The Solution items on this page. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        internal SolutionListResult(IEnumerable<EdgeSolutionData> value)
        {
            Argument.AssertNotNull(value, nameof(value));

            Value = value.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="SolutionListResult"/>. </summary>
        /// <param name="value"> The Solution items on this page. </param>
        /// <param name="nextLink"> The link to the next page of items. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal SolutionListResult(IReadOnlyList<EdgeSolutionData> value, Uri nextLink, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Value = value;
            NextLink = nextLink;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="SolutionListResult"/> for deserialization. </summary>
        internal SolutionListResult()
        {
        }

        /// <summary> The Solution items on this page. </summary>
        public IReadOnlyList<EdgeSolutionData> Value { get; }
        /// <summary> The link to the next page of items. </summary>
        public Uri NextLink { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/SolutionListResult.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    internal partial class SolutionListResult : IUtf8JsonSerializable, IJsonModel<SolutionListResult>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<SolutionListResult>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<SolutionListResult>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SolutionListResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SolutionListResult)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("value"u8);
            writer.WriteStartArray();
            foreach (var item in Value)
            {
                writer.WriteObjectValue(item, options);
            }
            writer.WriteEndArray();
            if (Optional.IsDefined(NextLink))
            {
                writer.WritePropertyName("nextLink"u8);
                writer.WriteStringValue(NextLink.AbsoluteUri);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        SolutionListResult IJsonModel<SolutionListResult>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SolutionListResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SolutionListResult)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeSolutionListResult(document.RootElement, options);
        }

        internal static SolutionListResult DeserializeSolutionListResult(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IReadOnlyList<EdgeSolutionData> value = default;
            Uri nextLink = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("value"u8))
                {
                    List<EdgeSolutionData> array = new List<EdgeSolutionData>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(EdgeSolutionData.DeserializeEdgeSolutionData(item, options));
                    }
                    value = array;
                    continue;
                }
                if (property.NameEquals("nextLink"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    nextLink = new Uri(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new SolutionListResult(value, nextLink, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<SolutionListResult>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SolutionListResult>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(SolutionListResult)} does not support writing '{options.Format}' format.");
            }
        }

        SolutionListResult IPersistableModel<SolutionListResult>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SolutionListResult>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeSolutionListResult(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(SolutionListResult)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<SolutionListResult>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/SolutionTemplateListResult.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> The response of a SolutionTemplate list operation. </summary>
    internal partial class SolutionTemplateListResult
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="SolutionTemplateListResult"/>. </summary>
        /// <param name="value"> The SolutionTemplate items on this page. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        internal SolutionTemplateListResult(IEnumerable<EdgeSolutionTemplateData> value)
        {
            Argument.AssertNotNull(value, nameof(value));

            Value = value.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="SolutionTemplateListResult"/>. </summary>
        /// <param name="value"> The SolutionTemplate items on this page. </param>
        /// <param name="nextLink"> The link to the next page of items. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal SolutionTemplateListResult(IReadOnlyList<EdgeSolutionTemplateData> value, Uri nextLink, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Value = value;
            NextLink = nextLink;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="SolutionTemplateListResult"/> for deserialization. </summary>
        internal SolutionTemplateListResult()
        {
        }

        /// <summary> The SolutionTemplate items on this page. </summary>
        public IReadOnlyList<EdgeSolutionTemplateData> Value { get; }
        /// <summary> The link to the next page of items. </summary>
        public Uri NextLink { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/SolutionTemplateListResult.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    internal partial class SolutionTemplateListResult : IUtf8JsonSerializable, IJsonModel<SolutionTemplateListResult>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<SolutionTemplateListResult>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<SolutionTemplateListResult>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SolutionTemplateListResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SolutionTemplateListResult)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("value"u8);
            writer.WriteStartArray();
            foreach (var item in Value)
            {
                writer.WriteObjectValue(item, options);
            }
            writer.WriteEndArray();
            if (Optional.IsDefined(NextLink))
            {
                writer.WritePropertyName("nextLink"u8);
                writer.WriteStringValue(NextLink.AbsoluteUri);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        SolutionTemplateListResult IJsonModel<SolutionTemplateListResult>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SolutionTemplateListResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SolutionTemplateListResult)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeSolutionTemplateListResult(document.RootElement, options);
        }

        internal static SolutionTemplateListResult DeserializeSolutionTemplateListResult(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IReadOnlyList<EdgeSolutionTemplateData> value = default;
            Uri nextLink = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("value"u8))
                {
                    List<EdgeSolutionTemplateData> array = new List<EdgeSolutionTemplateData>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(EdgeSolutionTemplateData.DeserializeEdgeSolutionTemplateData(item, options));
                    }
                    value = array;
                    continue;
                }
                if (property.NameEquals("nextLink"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    nextLink = new Uri(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new SolutionTemplateListResult(value, nextLink, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<SolutionTemplateListResult>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SolutionTemplateListResult>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(SolutionTemplateListResult)} does not support writing '{options.Format}' format.");
            }
        }

        SolutionTemplateListResult IPersistableModel<SolutionTemplateListResult>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SolutionTemplateListResult>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeSolutionTemplateListResult(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(SolutionTemplateListResult)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<SolutionTemplateListResult>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/SolutionTemplateVersionListResult.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> The response of a SolutionTemplateVersion list operation. </summary>
    internal partial class SolutionTemplateVersionListResult
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="SolutionTemplateVersionListResult"/>. </summary>
        /// <param name="value"> The SolutionTemplateVersion items on this page. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        internal SolutionTemplateVersionListResult(IEnumerable<EdgeSolutionTemplateVersionData> value)
        {
            Argument.AssertNotNull(value, nameof(value));

            Value = value.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="SolutionTemplateVersionListResult"/>. </summary>
        /// <param name="value"> The SolutionTemplateVersion items on this page. </param>
        /// <param name="nextLink"> The link to the next page of items. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal SolutionTemplateVersionListResult(IReadOnlyList<EdgeSolutionTemplateVersionData> value, Uri nextLink, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Value = value;
            NextLink = nextLink;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="SolutionTemplateVersionListResult"/> for deserialization. </summary>
        internal SolutionTemplateVersionListResult()
        {
        }

        /// <summary> The SolutionTemplateVersion items on this page. </summary>
        public IReadOnlyList<EdgeSolutionTemplateVersionData> Value { get; }
        /// <summary> The link to the next page of items. </summary>
        public Uri NextLink { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/SolutionTemplateVersionListResult.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    internal partial class SolutionTemplateVersionListResult : IUtf8JsonSerializable, IJsonModel<SolutionTemplateVersionListResult>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<SolutionTemplateVersionListResult>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<SolutionTemplateVersionListResult>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SolutionTemplateVersionListResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SolutionTemplateVersionListResult)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("value"u8);
            writer.WriteStartArray();
            foreach (var item in Value)
            {
                writer.WriteObjectValue(item, options);
            }
            writer.WriteEndArray();
            if (Optional.IsDefined(NextLink))
            {
                writer.WritePropertyName("nextLink"u8);
                writer.WriteStringValue(NextLink.AbsoluteUri);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        SolutionTemplateVersionListResult IJsonModel<SolutionTemplateVersionListResult>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SolutionTemplateVersionListResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SolutionTemplateVersionListResult)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeSolutionTemplateVersionListResult(document.RootElement, options);
        }

        internal static SolutionTemplateVersionListResult DeserializeSolutionTemplateVersionListResult(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IReadOnlyList<EdgeSolutionTemplateVersionData> value = default;
            Uri nextLink = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("value"u8))
                {
                    List<EdgeSolutionTemplateVersionData> array = new List<EdgeSolutionTemplateVersionData>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(EdgeSolutionTemplateVersionData.DeserializeEdgeSolutionTemplateVersionData(item, options));
                    }
                    value = array;
                    continue;
                }
                if (property.NameEquals("nextLink"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    nextLink = new Uri(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new SolutionTemplateVersionListResult(value, nextLink, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<SolutionTemplateVersionListResult>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SolutionTemplateVersionListResult>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(SolutionTemplateVersionListResult)} does not support writing '{options.Format}' format.");
            }
        }

        SolutionTemplateVersionListResult IPersistableModel<SolutionTemplateVersionListResult>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SolutionTemplateVersionListResult>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeSolutionTemplateVersionListResult(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(SolutionTemplateVersionListResult)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<SolutionTemplateVersionListResult>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/SolutionVersionListResult.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> The response of a SolutionVersion list operation. </summary>
    internal partial class SolutionVersionListResult
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="SolutionVersionListResult"/>. </summary>
        /// <param name="value"> The SolutionVersion items on this page. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        internal SolutionVersionListResult(IEnumerable<EdgeSolutionVersionData> value)
        {
            Argument.AssertNotNull(value, nameof(value));

            Value = value.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="SolutionVersionListResult"/>. </summary>
        /// <param name="value"> The SolutionVersion items on this page. </param>
        /// <param name="nextLink"> The link to the next page of items. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal SolutionVersionListResult(IReadOnlyList<EdgeSolutionVersionData> value, Uri nextLink, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Value = value;
            NextLink = nextLink;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="SolutionVersionListResult"/> for deserialization. </summary>
        internal SolutionVersionListResult()
        {
        }

        /// <summary> The SolutionVersion items on this page. </summary>
        public IReadOnlyList<EdgeSolutionVersionData> Value { get; }
        /// <summary> The link to the next page of items. </summary>
        public Uri NextLink { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/SolutionVersionListResult.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    internal partial class SolutionVersionListResult : IUtf8JsonSerializable, IJsonModel<SolutionVersionListResult>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<SolutionVersionListResult>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<SolutionVersionListResult>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SolutionVersionListResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SolutionVersionListResult)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("value"u8);
            writer.WriteStartArray();
            foreach (var item in Value)
            {
                writer.WriteObjectValue(item, options);
            }
            writer.WriteEndArray();
            if (Optional.IsDefined(NextLink))
            {
                writer.WritePropertyName("nextLink"u8);
                writer.WriteStringValue(NextLink.AbsoluteUri);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        SolutionVersionListResult IJsonModel<SolutionVersionListResult>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SolutionVersionListResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SolutionVersionListResult)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeSolutionVersionListResult(document.RootElement, options);
        }

        internal static SolutionVersionListResult DeserializeSolutionVersionListResult(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IReadOnlyList<EdgeSolutionVersionData> value = default;
            Uri nextLink = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("value"u8))
                {
                    List<EdgeSolutionVersionData> array = new List<EdgeSolutionVersionData>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(EdgeSolutionVersionData.DeserializeEdgeSolutionVersionData(item, options));
                    }
                    value = array;
                    continue;
                }
                if (property.NameEquals("nextLink"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    nextLink = new Uri(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new SolutionVersionListResult(value, nextLink, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<SolutionVersionListResult>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SolutionVersionListResult>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(SolutionVersionListResult)} does not support writing '{options.Format}' format.");
            }
        }

        SolutionVersionListResult IPersistableModel<SolutionVersionListResult>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SolutionVersionListResult>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeSolutionVersionListResult(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(SolutionVersionListResult)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<SolutionVersionListResult>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/SolutionVersionOrchestratorType.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Available Orchestrator types. </summary>
    public readonly partial struct SolutionVersionOrchestratorType : IEquatable<SolutionVersionOrchestratorType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SolutionVersionOrchestratorType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SolutionVersionOrchestratorType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string TOValue = "TO";

        /// <summary> Default type. </summary>
        public static SolutionVersionOrchestratorType TO { get; } = new SolutionVersionOrchestratorType(TOValue);
        /// <summary> Determines if two <see cref="SolutionVersionOrchestratorType"/> values are the same. </summary>
        public static bool operator ==(SolutionVersionOrchestratorType left, SolutionVersionOrchestratorType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SolutionVersionOrchestratorType"/> values are not the same. </summary>
        public static bool operator !=(SolutionVersionOrchestratorType left, SolutionVersionOrchestratorType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="SolutionVersionOrchestratorType"/>. </summary>
        public static implicit operator SolutionVersionOrchestratorType(string value) => new SolutionVersionOrchestratorType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SolutionVersionOrchestratorType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SolutionVersionOrchestratorType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/SolutionVersionSnapshot.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Solution Version Snapshot. </summary>
    public partial class SolutionVersionSnapshot
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="SolutionVersionSnapshot"/>. </summary>
        internal SolutionVersionSnapshot()
        {
            Specification = new ChangeTrackingDictionary<string, BinaryData>();
        }

        /// <summary> Initializes a new instance of <see cref="SolutionVersionSnapshot"/>. </summary>
        /// <param name="solutionVersionId"> Solution version of instance. </param>
        /// <param name="specification"> App components spec. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal SolutionVersionSnapshot(ResourceIdentifier solutionVersionId, IReadOnlyDictionary<string, BinaryData> specification, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            SolutionVersionId = solutionVersionId;
            Specification = specification;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Solution version of instance. </summary>
        public ResourceIdentifier SolutionVersionId { get; }
        /// <summary>
        /// App components spec
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IReadOnlyDictionary<string, BinaryData> Specification { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/SolutionVersionSnapshot.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class SolutionVersionSnapshot : IUtf8JsonSerializable, IJsonModel<SolutionVersionSnapshot>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<SolutionVersionSnapshot>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<SolutionVersionSnapshot>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SolutionVersionSnapshot>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SolutionVersionSnapshot)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(SolutionVersionId))
            {
                writer.WritePropertyName("solutionVersionId"u8);
                writer.WriteStringValue(SolutionVersionId);
            }
            if (Optional.IsCollectionDefined(Specification))
            {
                writer.WritePropertyName("specification"u8);
                writer.WriteStartObject();
                foreach (var item in Specification)
                {
                    writer.WritePropertyName(item.Key);
                    if (item.Value == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
                writer.WriteEndObject();
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        SolutionVersionSnapshot IJsonModel<SolutionVersionSnapshot>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SolutionVersionSnapshot>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SolutionVersionSnapshot)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeSolutionVersionSnapshot(document.RootElement, options);
        }

        internal static SolutionVersionSnapshot DeserializeSolutionVersionSnapshot(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceIdentifier solutionVersionId = default;
            IReadOnlyDictionary<string, BinaryData> specification = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("solutionVersionId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    solutionVersionId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("specification"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, BinaryData> dictionary = new Dictionary<string, BinaryData>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.Value.ValueKind == JsonValueKind.Null)
                        {
                            dictionary.Add(property0.Name, null);
                        }
                        else
                        {
                            dictionary.Add(property0.Name, BinaryData.FromString(property0.Value.GetRawText()));
                        }
                    }
                    specification = dictionary;
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new SolutionVersionSnapshot(solutionVersionId, specification ?? new ChangeTrackingDictionary<string, BinaryData>(), serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<SolutionVersionSnapshot>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SolutionVersionSnapshot>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(SolutionVersionSnapshot)} does not support writing '{options.Format}' format.");
            }
        }

        SolutionVersionSnapshot IPersistableModel<SolutionVersionSnapshot>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SolutionVersionSnapshot>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeSolutionVersionSnapshot(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(SolutionVersionSnapshot)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<SolutionVersionSnapshot>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/TargetComponentStatus.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Component Status. </summary>
    public partial class TargetComponentStatus
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="TargetComponentStatus"/>. </summary>
        internal TargetComponentStatus()
        {
        }

        /// <summary> Initializes a new instance of <see cref="TargetComponentStatus"/>. </summary>
        /// <param name="name"> Component name. </param>
        /// <param name="status"> Component status. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal TargetComponentStatus(string name, string status, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Name = name;
            Status = status;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Component name. </summary>
        public string Name { get; }
        /// <summary> Component status. </summary>
        public string Status { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/TargetComponentStatus.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class TargetComponentStatus : IUtf8JsonSerializable, IJsonModel<TargetComponentStatus>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<TargetComponentStatus>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<TargetComponentStatus>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<TargetComponentStatus>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(TargetComponentStatus)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(Name))
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            if (Optional.IsDefined(Status))
            {
                writer.WritePropertyName("status"u8);
                writer.WriteStringValue(Status);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        TargetComponentStatus IJsonModel<TargetComponentStatus>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<TargetComponentStatus>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(TargetComponentStatus)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeTargetComponentStatus(document.RootElement, options);
        }

        internal static TargetComponentStatus DeserializeTargetComponentStatus(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string name = default;
            string status = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("status"u8))
                {
                    status = property.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new TargetComponentStatus(name, status, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<TargetComponentStatus>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<TargetComponentStatus>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(TargetComponentStatus)} does not support writing '{options.Format}' format.");
            }
        }

        TargetComponentStatus IPersistableModel<TargetComponentStatus>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<TargetComponentStatus>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeTargetComponentStatus(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(TargetComponentStatus)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<TargetComponentStatus>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/TargetListResult.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> The response of a Target list operation. </summary>
    internal partial class TargetListResult
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="TargetListResult"/>. </summary>
        /// <param name="value"> The Target items on this page. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        internal TargetListResult(IEnumerable<EdgeTargetData> value)
        {
            Argument.AssertNotNull(value, nameof(value));

            Value = value.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="TargetListResult"/>. </summary>
        /// <param name="value"> The Target items on this page. </param>
        /// <param name="nextLink"> The link to the next page of items. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal TargetListResult(IReadOnlyList<EdgeTargetData> value, Uri nextLink, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Value = value;
            NextLink = nextLink;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="TargetListResult"/> for deserialization. </summary>
        internal TargetListResult()
        {
        }

        /// <summary> The Target items on this page. </summary>
        public IReadOnlyList<EdgeTargetData> Value { get; }
        /// <summary> The link to the next page of items. </summary>
        public Uri NextLink { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/TargetListResult.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    internal partial class TargetListResult : IUtf8JsonSerializable, IJsonModel<TargetListResult>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<TargetListResult>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<TargetListResult>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<TargetListResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(TargetListResult)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("value"u8);
            writer.WriteStartArray();
            foreach (var item in Value)
            {
                writer.WriteObjectValue(item, options);
            }
            writer.WriteEndArray();
            if (Optional.IsDefined(NextLink))
            {
                writer.WritePropertyName("nextLink"u8);
                writer.WriteStringValue(NextLink.AbsoluteUri);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        TargetListResult IJsonModel<TargetListResult>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<TargetListResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(TargetListResult)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeTargetListResult(document.RootElement, options);
        }

        internal static TargetListResult DeserializeTargetListResult(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IReadOnlyList<EdgeTargetData> value = default;
            Uri nextLink = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("value"u8))
                {
                    List<EdgeTargetData> array = new List<EdgeTargetData>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(EdgeTargetData.DeserializeEdgeTargetData(item, options));
                    }
                    value = array;
                    continue;
                }
                if (property.NameEquals("nextLink"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    nextLink = new Uri(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new TargetListResult(value, nextLink, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<TargetListResult>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<TargetListResult>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(TargetListResult)} does not support writing '{options.Format}' format.");
            }
        }

        TargetListResult IPersistableModel<TargetListResult>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<TargetListResult>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeTargetListResult(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(TargetListResult)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<TargetListResult>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/TaskErrorAction.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Error Action Properties. </summary>
    public partial class TaskErrorAction
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="TaskErrorAction"/>. </summary>
        public TaskErrorAction()
        {
        }

        /// <summary> Initializes a new instance of <see cref="TaskErrorAction"/>. </summary>
        /// <param name="mode"> Error action mode. </param>
        /// <param name="maxToleratedFailures"> Max tolerated failures. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal TaskErrorAction(TaskErrorActionModeType? mode, int? maxToleratedFailures, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Mode = mode;
            MaxToleratedFailures = maxToleratedFailures;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Error action mode. </summary>
        public TaskErrorActionModeType? Mode { get; set; }
        /// <summary> Max tolerated failures. </summary>
        public int? MaxToleratedFailures { get; set; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/TaskErrorAction.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class TaskErrorAction : IUtf8JsonSerializable, IJsonModel<TaskErrorAction>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<TaskErrorAction>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<TaskErrorAction>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<TaskErrorAction>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(TaskErrorAction)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(Mode))
            {
                writer.WritePropertyName("mode"u8);
                writer.WriteStringValue(Mode.Value.ToString());
            }
            if (Optional.IsDefined(MaxToleratedFailures))
            {
                writer.WritePropertyName("maxToleratedFailures"u8);
                writer.WriteNumberValue(MaxToleratedFailures.Value);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        TaskErrorAction IJsonModel<TaskErrorAction>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<TaskErrorAction>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(TaskErrorAction)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeTaskErrorAction(document.RootElement, options);
        }

        internal static TaskErrorAction DeserializeTaskErrorAction(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            TaskErrorActionModeType? mode = default;
            int? maxToleratedFailures = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("mode"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    mode = new TaskErrorActionModeType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("maxToleratedFailures"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maxToleratedFailures = property.Value.GetInt32();
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new TaskErrorAction(mode, maxToleratedFailures, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<TaskErrorAction>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<TaskErrorAction>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(TaskErrorAction)} does not support writing '{options.Format}' format.");
            }
        }

        TaskErrorAction IPersistableModel<TaskErrorAction>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<TaskErrorAction>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeTaskErrorAction(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(TaskErrorAction)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<TaskErrorAction>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/TaskErrorActionModeType.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Error Action Mode. </summary>
    public readonly partial struct TaskErrorActionModeType : IEquatable<TaskErrorActionModeType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="TaskErrorActionModeType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TaskErrorActionModeType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string StopOnAnyFailureValue = "stopOnAnyFailure";
        private const string StopOnNFailuresValue = "stopOnNFailures";
        private const string SilentlyContinueValue = "silentlyContinue";

        /// <summary> Stop on any failure. </summary>
        public static TaskErrorActionModeType StopOnAnyFailure { get; } = new TaskErrorActionModeType(StopOnAnyFailureValue);
        /// <summary> Stop after N cumulative failures. </summary>
        public static TaskErrorActionModeType StopOnNFailures { get; } = new TaskErrorActionModeType(StopOnNFailuresValue);
        /// <summary> Continue silently despite errors. </summary>
        public static TaskErrorActionModeType SilentlyContinue { get; } = new TaskErrorActionModeType(SilentlyContinueValue);
        /// <summary> Determines if two <see cref="TaskErrorActionModeType"/> values are the same. </summary>
        public static bool operator ==(TaskErrorActionModeType left, TaskErrorActionModeType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="TaskErrorActionModeType"/> values are not the same. </summary>
        public static bool operator !=(TaskErrorActionModeType left, TaskErrorActionModeType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="TaskErrorActionModeType"/>. </summary>
        public static implicit operator TaskErrorActionModeType(string value) => new TaskErrorActionModeType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TaskErrorActionModeType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(TaskErrorActionModeType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/UninstallSolutionContent.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Uninstall Solution Parameter. </summary>
    public partial class UninstallSolutionContent
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="UninstallSolutionContent"/>. </summary>
        /// <param name="solutionTemplateId"> Solution Template ARM Id. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionTemplateId"/> is null. </exception>
        public UninstallSolutionContent(ResourceIdentifier solutionTemplateId)
        {
            Argument.AssertNotNull(solutionTemplateId, nameof(solutionTemplateId));

            SolutionTemplateId = solutionTemplateId;
        }

        /// <summary> Initializes a new instance of <see cref="UninstallSolutionContent"/>. </summary>
        /// <param name="solutionTemplateId"> Solution Template ARM Id. </param>
        /// <param name="solutionInstanceName"> Solution Instance Name. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal UninstallSolutionContent(ResourceIdentifier solutionTemplateId, string solutionInstanceName, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            SolutionTemplateId = solutionTemplateId;
            SolutionInstanceName = solutionInstanceName;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="UninstallSolutionContent"/> for deserialization. </summary>
        internal UninstallSolutionContent()
        {
        }

        /// <summary> Solution Template ARM Id. </summary>
        public ResourceIdentifier SolutionTemplateId { get; }
        /// <summary> Solution Instance Name. </summary>
        public string SolutionInstanceName { get; set; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/UninstallSolutionContent.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class UninstallSolutionContent : IUtf8JsonSerializable, IJsonModel<UninstallSolutionContent>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<UninstallSolutionContent>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<UninstallSolutionContent>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<UninstallSolutionContent>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(UninstallSolutionContent)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("solutionTemplateId"u8);
            writer.WriteStringValue(SolutionTemplateId);
            if (Optional.IsDefined(SolutionInstanceName))
            {
                writer.WritePropertyName("solutionInstanceName"u8);
                writer.WriteStringValue(SolutionInstanceName);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        UninstallSolutionContent IJsonModel<UninstallSolutionContent>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<UninstallSolutionContent>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(UninstallSolutionContent)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeUninstallSolutionContent(document.RootElement, options);
        }

        internal static UninstallSolutionContent DeserializeUninstallSolutionContent(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceIdentifier solutionTemplateId = default;
            string solutionInstanceName = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("solutionTemplateId"u8))
                {
                    solutionTemplateId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("solutionInstanceName"u8))
                {
                    solutionInstanceName = property.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new UninstallSolutionContent(solutionTemplateId, solutionInstanceName, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<UninstallSolutionContent>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<UninstallSolutionContent>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(UninstallSolutionContent)} does not support writing '{options.Format}' format.");
            }
        }

        UninstallSolutionContent IPersistableModel<UninstallSolutionContent>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<UninstallSolutionContent>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeUninstallSolutionContent(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(UninstallSolutionContent)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<UninstallSolutionContent>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/UnknownEdgeJobContent.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Unknown version of EdgeJobContent. </summary>
    internal partial class UnknownEdgeJobContent : EdgeJobContent
    {
        /// <summary> Initializes a new instance of <see cref="UnknownEdgeJobContent"/>. </summary>
        /// <param name="jobType"> Job type discriminator value. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal UnknownEdgeJobContent(EdgeJobType jobType, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(jobType, serializedAdditionalRawData)
        {
            JobType = jobType;
        }

        /// <summary> Initializes a new instance of <see cref="UnknownEdgeJobContent"/> for deserialization. </summary>
        internal UnknownEdgeJobContent()
        {
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/UnknownEdgeJobContent.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    internal partial class UnknownEdgeJobContent : IUtf8JsonSerializable, IJsonModel<EdgeJobContent>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeJobContent>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeJobContent>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeJobContent>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeJobContent)} does not support writing '{format}' format.");
            }

            base.JsonModelWriteCore(writer, options);
        }

        EdgeJobContent IJsonModel<EdgeJobContent>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeJobContent>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeJobContent)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeJobContent(document.RootElement, options);
        }

        internal static UnknownEdgeJobContent DeserializeUnknownEdgeJobContent(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            EdgeJobType jobType = "Unknown";
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("jobType"u8))
                {
                    jobType = new EdgeJobType(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new UnknownEdgeJobContent(jobType, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeJobContent>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeJobContent>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeJobContent)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeJobContent IPersistableModel<EdgeJobContent>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeJobContent>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeJobContent(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeJobContent)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeJobContent>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/UnknownEdgeJobStepStatistics.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Unknown version of EdgeJobStepStatistics. </summary>
    internal partial class UnknownEdgeJobStepStatistics : EdgeJobStepStatistics
    {
        /// <summary> Initializes a new instance of <see cref="UnknownEdgeJobStepStatistics"/>. </summary>
        /// <param name="statisticsType"> Statistics type discriminator value. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal UnknownEdgeJobStepStatistics(EdgeJobType statisticsType, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(statisticsType, serializedAdditionalRawData)
        {
            StatisticsType = statisticsType;
        }

        /// <summary> Initializes a new instance of <see cref="UnknownEdgeJobStepStatistics"/> for deserialization. </summary>
        internal UnknownEdgeJobStepStatistics()
        {
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/UnknownEdgeJobStepStatistics.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    internal partial class UnknownEdgeJobStepStatistics : IUtf8JsonSerializable, IJsonModel<EdgeJobStepStatistics>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeJobStepStatistics>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeJobStepStatistics>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeJobStepStatistics>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeJobStepStatistics)} does not support writing '{format}' format.");
            }

            base.JsonModelWriteCore(writer, options);
        }

        EdgeJobStepStatistics IJsonModel<EdgeJobStepStatistics>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeJobStepStatistics>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeJobStepStatistics)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeJobStepStatistics(document.RootElement, options);
        }

        internal static UnknownEdgeJobStepStatistics DeserializeUnknownEdgeJobStepStatistics(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            EdgeJobType statisticsType = "Unknown";
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("statisticsType"u8))
                {
                    statisticsType = new EdgeJobType(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new UnknownEdgeJobStepStatistics(statisticsType, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeJobStepStatistics>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeJobStepStatistics>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeJobStepStatistics)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeJobStepStatistics IPersistableModel<EdgeJobStepStatistics>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeJobStepStatistics>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeEdgeJobStepStatistics(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeJobStepStatistics)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeJobStepStatistics>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/UpdateExternalValidationStatusContent.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Update External Validation Status Parameter. </summary>
    public partial class UpdateExternalValidationStatusContent
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="UpdateExternalValidationStatusContent"/>. </summary>
        /// <param name="solutionVersionId"> Solution Version Id. </param>
        /// <param name="externalValidationId"> External validation id. </param>
        /// <param name="validationStatus"> Validation Status of external validation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionVersionId"/> or <paramref name="externalValidationId"/> is null. </exception>
        public UpdateExternalValidationStatusContent(ResourceIdentifier solutionVersionId, string externalValidationId, SolutionInstanceValidationStatus validationStatus)
        {
            Argument.AssertNotNull(solutionVersionId, nameof(solutionVersionId));
            Argument.AssertNotNull(externalValidationId, nameof(externalValidationId));

            SolutionVersionId = solutionVersionId;
            ExternalValidationId = externalValidationId;
            ValidationStatus = validationStatus;
        }

        /// <summary> Initializes a new instance of <see cref="UpdateExternalValidationStatusContent"/>. </summary>
        /// <param name="solutionVersionId"> Solution Version Id. </param>
        /// <param name="errorDetails"> Error Details if any failure is there. </param>
        /// <param name="externalValidationId"> External validation id. </param>
        /// <param name="validationStatus"> Validation Status of external validation. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal UpdateExternalValidationStatusContent(ResourceIdentifier solutionVersionId, ResponseError errorDetails, string externalValidationId, SolutionInstanceValidationStatus validationStatus, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            SolutionVersionId = solutionVersionId;
            ErrorDetails = errorDetails;
            ExternalValidationId = externalValidationId;
            ValidationStatus = validationStatus;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="UpdateExternalValidationStatusContent"/> for deserialization. </summary>
        internal UpdateExternalValidationStatusContent()
        {
        }

        /// <summary> Solution Version Id. </summary>
        public ResourceIdentifier SolutionVersionId { get; }
        /// <summary> Error Details if any failure is there. </summary>
        public ResponseError ErrorDetails { get; set; }
        /// <summary> External validation id. </summary>
        public string ExternalValidationId { get; }
        /// <summary> Validation Status of external validation. </summary>
        public SolutionInstanceValidationStatus ValidationStatus { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/UpdateExternalValidationStatusContent.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class UpdateExternalValidationStatusContent : IUtf8JsonSerializable, IJsonModel<UpdateExternalValidationStatusContent>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<UpdateExternalValidationStatusContent>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<UpdateExternalValidationStatusContent>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<UpdateExternalValidationStatusContent>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(UpdateExternalValidationStatusContent)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("solutionVersionId"u8);
            writer.WriteStringValue(SolutionVersionId);
            if (Optional.IsDefined(ErrorDetails))
            {
                writer.WritePropertyName("errorDetails"u8);
                ((IJsonModel<ResponseError>)ErrorDetails).Write(writer, options);
            }
            writer.WritePropertyName("externalValidationId"u8);
            writer.WriteStringValue(ExternalValidationId);
            writer.WritePropertyName("validationStatus"u8);
            writer.WriteStringValue(ValidationStatus.ToString());
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        UpdateExternalValidationStatusContent IJsonModel<UpdateExternalValidationStatusContent>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<UpdateExternalValidationStatusContent>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(UpdateExternalValidationStatusContent)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeUpdateExternalValidationStatusContent(document.RootElement, options);
        }

        internal static UpdateExternalValidationStatusContent DeserializeUpdateExternalValidationStatusContent(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceIdentifier solutionVersionId = default;
            ResponseError errorDetails = default;
            string externalValidationId = default;
            SolutionInstanceValidationStatus validationStatus = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("solutionVersionId"u8))
                {
                    solutionVersionId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("errorDetails"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    errorDetails = ModelReaderWriter.Read<ResponseError>(new BinaryData(Encoding.UTF8.GetBytes(property.Value.GetRawText())), options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                    continue;
                }
                if (property.NameEquals("externalValidationId"u8))
                {
                    externalValidationId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("validationStatus"u8))
                {
                    validationStatus = new SolutionInstanceValidationStatus(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new UpdateExternalValidationStatusContent(solutionVersionId, errorDetails, externalValidationId, validationStatus, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<UpdateExternalValidationStatusContent>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<UpdateExternalValidationStatusContent>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(UpdateExternalValidationStatusContent)} does not support writing '{options.Format}' format.");
            }
        }

        UpdateExternalValidationStatusContent IPersistableModel<UpdateExternalValidationStatusContent>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<UpdateExternalValidationStatusContent>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeUpdateExternalValidationStatusContent(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(UpdateExternalValidationStatusContent)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<UpdateExternalValidationStatusContent>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/WorkflowListResult.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> The response of a Workflow list operation. </summary>
    internal partial class WorkflowListResult
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="WorkflowListResult"/>. </summary>
        /// <param name="value"> The Workflow items on this page. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        internal WorkflowListResult(IEnumerable<EdgeWorkflowData> value)
        {
            Argument.AssertNotNull(value, nameof(value));

            Value = value.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="WorkflowListResult"/>. </summary>
        /// <param name="value"> The Workflow items on this page. </param>
        /// <param name="nextLink"> The link to the next page of items. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal WorkflowListResult(IReadOnlyList<EdgeWorkflowData> value, Uri nextLink, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Value = value;
            NextLink = nextLink;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="WorkflowListResult"/> for deserialization. </summary>
        internal WorkflowListResult()
        {
        }

        /// <summary> The Workflow items on this page. </summary>
        public IReadOnlyList<EdgeWorkflowData> Value { get; }
        /// <summary> The link to the next page of items. </summary>
        public Uri NextLink { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/WorkflowListResult.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    internal partial class WorkflowListResult : IUtf8JsonSerializable, IJsonModel<WorkflowListResult>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<WorkflowListResult>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<WorkflowListResult>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<WorkflowListResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(WorkflowListResult)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("value"u8);
            writer.WriteStartArray();
            foreach (var item in Value)
            {
                writer.WriteObjectValue(item, options);
            }
            writer.WriteEndArray();
            if (Optional.IsDefined(NextLink))
            {
                writer.WritePropertyName("nextLink"u8);
                writer.WriteStringValue(NextLink.AbsoluteUri);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        WorkflowListResult IJsonModel<WorkflowListResult>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<WorkflowListResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(WorkflowListResult)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeWorkflowListResult(document.RootElement, options);
        }

        internal static WorkflowListResult DeserializeWorkflowListResult(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IReadOnlyList<EdgeWorkflowData> value = default;
            Uri nextLink = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("value"u8))
                {
                    List<EdgeWorkflowData> array = new List<EdgeWorkflowData>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(EdgeWorkflowData.DeserializeEdgeWorkflowData(item, options));
                    }
                    value = array;
                    continue;
                }
                if (property.NameEquals("nextLink"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    nextLink = new Uri(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new WorkflowListResult(value, nextLink, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<WorkflowListResult>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<WorkflowListResult>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(WorkflowListResult)} does not support writing '{options.Format}' format.");
            }
        }

        WorkflowListResult IPersistableModel<WorkflowListResult>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<WorkflowListResult>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeWorkflowListResult(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(WorkflowListResult)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<WorkflowListResult>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/WorkflowVersionListResult.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> The response of a WorkflowVersion list operation. </summary>
    internal partial class WorkflowVersionListResult
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="WorkflowVersionListResult"/>. </summary>
        /// <param name="value"> The WorkflowVersion items on this page. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        internal WorkflowVersionListResult(IEnumerable<EdgeWorkflowVersionData> value)
        {
            Argument.AssertNotNull(value, nameof(value));

            Value = value.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="WorkflowVersionListResult"/>. </summary>
        /// <param name="value"> The WorkflowVersion items on this page. </param>
        /// <param name="nextLink"> The link to the next page of items. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal WorkflowVersionListResult(IReadOnlyList<EdgeWorkflowVersionData> value, Uri nextLink, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Value = value;
            NextLink = nextLink;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="WorkflowVersionListResult"/> for deserialization. </summary>
        internal WorkflowVersionListResult()
        {
        }

        /// <summary> The WorkflowVersion items on this page. </summary>
        public IReadOnlyList<EdgeWorkflowVersionData> Value { get; }
        /// <summary> The link to the next page of items. </summary>
        public Uri NextLink { get; }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/WorkflowVersionListResult.Serialization.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    internal partial class WorkflowVersionListResult : IUtf8JsonSerializable, IJsonModel<WorkflowVersionListResult>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<WorkflowVersionListResult>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<WorkflowVersionListResult>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<WorkflowVersionListResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(WorkflowVersionListResult)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("value"u8);
            writer.WriteStartArray();
            foreach (var item in Value)
            {
                writer.WriteObjectValue(item, options);
            }
            writer.WriteEndArray();
            if (Optional.IsDefined(NextLink))
            {
                writer.WritePropertyName("nextLink"u8);
                writer.WriteStringValue(NextLink.AbsoluteUri);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        WorkflowVersionListResult IJsonModel<WorkflowVersionListResult>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<WorkflowVersionListResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(WorkflowVersionListResult)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeWorkflowVersionListResult(document.RootElement, options);
        }

        internal static WorkflowVersionListResult DeserializeWorkflowVersionListResult(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IReadOnlyList<EdgeWorkflowVersionData> value = default;
            Uri nextLink = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("value"u8))
                {
                    List<EdgeWorkflowVersionData> array = new List<EdgeWorkflowVersionData>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(EdgeWorkflowVersionData.DeserializeEdgeWorkflowVersionData(item, options));
                    }
                    value = array;
                    continue;
                }
                if (property.NameEquals("nextLink"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    nextLink = new Uri(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new WorkflowVersionListResult(value, nextLink, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<WorkflowVersionListResult>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<WorkflowVersionListResult>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(WorkflowVersionListResult)} does not support writing '{options.Format}' format.");
            }
        }

        WorkflowVersionListResult IPersistableModel<WorkflowVersionListResult>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<WorkflowVersionListResult>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeWorkflowVersionListResult(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(WorkflowVersionListResult)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<WorkflowVersionListResult>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/WorkloadOrchestrationProvisioningState.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Provisioning state of resource. </summary>
    public readonly partial struct WorkloadOrchestrationProvisioningState : IEquatable<WorkloadOrchestrationProvisioningState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="WorkloadOrchestrationProvisioningState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public WorkloadOrchestrationProvisioningState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SucceededValue = "Succeeded";
        private const string FailedValue = "Failed";
        private const string CanceledValue = "Canceled";
        private const string InitializedValue = "Initialized";
        private const string InprogressValue = "InProgress";
        private const string DeletingValue = "Deleting";

        /// <summary> Resource has been created. </summary>
        public static WorkloadOrchestrationProvisioningState Succeeded { get; } = new WorkloadOrchestrationProvisioningState(SucceededValue);
        /// <summary> Resource creation failed. </summary>
        public static WorkloadOrchestrationProvisioningState Failed { get; } = new WorkloadOrchestrationProvisioningState(FailedValue);
        /// <summary> Resource creation was canceled. </summary>
        public static WorkloadOrchestrationProvisioningState Canceled { get; } = new WorkloadOrchestrationProvisioningState(CanceledValue);
        /// <summary> Resource Provisioning is initialized. </summary>
        public static WorkloadOrchestrationProvisioningState Initialized { get; } = new WorkloadOrchestrationProvisioningState(InitializedValue);
        /// <summary> Resource Provisioning is in progress. </summary>
        public static WorkloadOrchestrationProvisioningState Inprogress { get; } = new WorkloadOrchestrationProvisioningState(InprogressValue);
        /// <summary> Resource Provisioning is deleting. </summary>
        public static WorkloadOrchestrationProvisioningState Deleting { get; } = new WorkloadOrchestrationProvisioningState(DeletingValue);
        /// <summary> Determines if two <see cref="WorkloadOrchestrationProvisioningState"/> values are the same. </summary>
        public static bool operator ==(WorkloadOrchestrationProvisioningState left, WorkloadOrchestrationProvisioningState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="WorkloadOrchestrationProvisioningState"/> values are not the same. </summary>
        public static bool operator !=(WorkloadOrchestrationProvisioningState left, WorkloadOrchestrationProvisioningState right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="WorkloadOrchestrationProvisioningState"/>. </summary>
        public static implicit operator WorkloadOrchestrationProvisioningState(string value) => new WorkloadOrchestrationProvisioningState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is WorkloadOrchestrationProvisioningState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(WorkloadOrchestrationProvisioningState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/RestOperations/ConfigTemplateVersionsRestOperations.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    internal partial class ConfigTemplateVersionsRestOperations
    {
        private readonly TelemetryDetails _userAgent;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> Initializes a new instance of ConfigTemplateVersionsRestOperations. </summary>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="applicationId"> The application id to use for user agent. </param>
        /// <param name="endpoint"> Service host. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="pipeline"/> or <paramref name="apiVersion"/> is null. </exception>
        public ConfigTemplateVersionsRestOperations(HttpPipeline pipeline, string applicationId, Uri endpoint = null, string apiVersion = default)
        {
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _endpoint = endpoint ?? new Uri("https://management.azure.com");
            _apiVersion = apiVersion ?? "2025-06-01";
            _userAgent = new TelemetryDetails(GetType().Assembly, applicationId);
        }

        internal RequestUriBuilder CreateGetRequestUri(string subscriptionId, string resourceGroupName, string configTemplateName, string configTemplateVersionName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/configTemplates/", false);
            uri.AppendPath(configTemplateName, true);
            uri.AppendPath("/versions/", false);
            uri.AppendPath(configTemplateVersionName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateGetRequest(string subscriptionId, string resourceGroupName, string configTemplateName, string configTemplateVersionName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/configTemplates/", false);
            uri.AppendPath(configTemplateName, true);
            uri.AppendPath("/versions/", false);
            uri.AppendPath(configTemplateVersionName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Get a Config Template Version Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="configTemplateName"> The name of the ConfigTemplate. </param>
        /// <param name="configTemplateVersionName"> The name of the ConfigTemplateVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="configTemplateName"/> or <paramref name="configTemplateVersionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="configTemplateName"/> or <paramref name="configTemplateVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<EdgeConfigTemplateVersionData>> GetAsync(string subscriptionId, string resourceGroupName, string configTemplateName, string configTemplateVersionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(configTemplateName, nameof(configTemplateName));
            Argument.AssertNotNullOrEmpty(configTemplateVersionName, nameof(configTemplateVersionName));

            using var message = CreateGetRequest(subscriptionId, resourceGroupName, configTemplateName, configTemplateVersionName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EdgeConfigTemplateVersionData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = EdgeConfigTemplateVersionData.DeserializeEdgeConfigTemplateVersionData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((EdgeConfigTemplateVersionData)null, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Get a Config Template Version Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="configTemplateName"> The name of the ConfigTemplate. </param>
        /// <param name="configTemplateVersionName"> The name of the ConfigTemplateVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="configTemplateName"/> or <paramref name="configTemplateVersionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="configTemplateName"/> or <paramref name="configTemplateVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<EdgeConfigTemplateVersionData> Get(string subscriptionId, string resourceGroupName, string configTemplateName, string configTemplateVersionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(configTemplateName, nameof(configTemplateName));
            Argument.AssertNotNullOrEmpty(configTemplateVersionName, nameof(configTemplateVersionName));

            using var message = CreateGetRequest(subscriptionId, resourceGroupName, configTemplateName, configTemplateVersionName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EdgeConfigTemplateVersionData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = EdgeConfigTemplateVersionData.DeserializeEdgeConfigTemplateVersionData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((EdgeConfigTemplateVersionData)null, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateListByConfigTemplateRequestUri(string subscriptionId, string resourceGroupName, string configTemplateName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/configTemplates/", false);
            uri.AppendPath(configTemplateName, true);
            uri.AppendPath("/versions", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateListByConfigTemplateRequest(string subscriptionId, string resourceGroupName, string configTemplateName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/configTemplates/", false);
            uri.AppendPath(configTemplateName, true);
            uri.AppendPath("/versions", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> List Config Template Version Resources. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="configTemplateName"> The name of the ConfigTemplate. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="configTemplateName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="configTemplateName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<ConfigTemplateVersionListResult>> ListByConfigTemplateAsync(string subscriptionId, string resourceGroupName, string configTemplateName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(configTemplateName, nameof(configTemplateName));

            using var message = CreateListByConfigTemplateRequest(subscriptionId, resourceGroupName, configTemplateName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ConfigTemplateVersionListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = ConfigTemplateVersionListResult.DeserializeConfigTemplateVersionListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> List Config Template Version Resources. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="configTemplateName"> The name of the ConfigTemplate. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="configTemplateName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="configTemplateName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<ConfigTemplateVersionListResult> ListByConfigTemplate(string subscriptionId, string resourceGroupName, string configTemplateName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(configTemplateName, nameof(configTemplateName));

            using var message = CreateListByConfigTemplateRequest(subscriptionId, resourceGroupName, configTemplateName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ConfigTemplateVersionListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = ConfigTemplateVersionListResult.DeserializeConfigTemplateVersionListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateListByConfigTemplateNextPageRequestUri(string nextLink, string subscriptionId, string resourceGroupName, string configTemplateName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            return uri;
        }

        internal HttpMessage CreateListByConfigTemplateNextPageRequest(string nextLink, string subscriptionId, string resourceGroupName, string configTemplateName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> List Config Template Version Resources. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="configTemplateName"> The name of the ConfigTemplate. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="configTemplateName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="configTemplateName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<ConfigTemplateVersionListResult>> ListByConfigTemplateNextPageAsync(string nextLink, string subscriptionId, string resourceGroupName, string configTemplateName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(configTemplateName, nameof(configTemplateName));

            using var message = CreateListByConfigTemplateNextPageRequest(nextLink, subscriptionId, resourceGroupName, configTemplateName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ConfigTemplateVersionListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = ConfigTemplateVersionListResult.DeserializeConfigTemplateVersionListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> List Config Template Version Resources. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="configTemplateName"> The name of the ConfigTemplate. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="configTemplateName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="configTemplateName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<ConfigTemplateVersionListResult> ListByConfigTemplateNextPage(string nextLink, string subscriptionId, string resourceGroupName, string configTemplateName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(configTemplateName, nameof(configTemplateName));

            using var message = CreateListByConfigTemplateNextPageRequest(nextLink, subscriptionId, resourceGroupName, configTemplateName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ConfigTemplateVersionListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = ConfigTemplateVersionListResult.DeserializeConfigTemplateVersionListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/RestOperations/ContextsRestOperations.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    internal partial class ContextsRestOperations
    {
        private readonly TelemetryDetails _userAgent;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> Initializes a new instance of ContextsRestOperations. </summary>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="applicationId"> The application id to use for user agent. </param>
        /// <param name="endpoint"> Service host. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="pipeline"/> or <paramref name="apiVersion"/> is null. </exception>
        public ContextsRestOperations(HttpPipeline pipeline, string applicationId, Uri endpoint = null, string apiVersion = default)
        {
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _endpoint = endpoint ?? new Uri("https://management.azure.com");
            _apiVersion = apiVersion ?? "2025-06-01";
            _userAgent = new TelemetryDetails(GetType().Assembly, applicationId);
        }

        internal RequestUriBuilder CreateGetRequestUri(string subscriptionId, string resourceGroupName, string contextName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/contexts/", false);
            uri.AppendPath(contextName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateGetRequest(string subscriptionId, string resourceGroupName, string contextName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/contexts/", false);
            uri.AppendPath(contextName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Get Context Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="contextName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="contextName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<EdgeContextData>> GetAsync(string subscriptionId, string resourceGroupName, string contextName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));

            using var message = CreateGetRequest(subscriptionId, resourceGroupName, contextName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EdgeContextData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = EdgeContextData.DeserializeEdgeContextData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((EdgeContextData)null, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Get Context Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="contextName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="contextName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<EdgeContextData> Get(string subscriptionId, string resourceGroupName, string contextName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));

            using var message = CreateGetRequest(subscriptionId, resourceGroupName, contextName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EdgeContextData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = EdgeContextData.DeserializeEdgeContextData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((EdgeContextData)null, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateCreateOrUpdateRequestUri(string subscriptionId, string resourceGroupName, string contextName, EdgeContextData data)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/contexts/", false);
            uri.AppendPath(contextName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateCreateOrUpdateRequest(string subscriptionId, string resourceGroupName, string contextName, EdgeContextData data)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/contexts/", false);
            uri.AppendPath(contextName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(data, ModelSerializationExtensions.WireOptions);
            request.Content = content;
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Create or update Context Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="contextName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response> CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string contextName, EdgeContextData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));
            Argument.AssertNotNull(data, nameof(data));

            using var message = CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, contextName, data);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Create or update Context Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="contextName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response CreateOrUpdate(string subscriptionId, string resourceGroupName, string contextName, EdgeContextData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));
            Argument.AssertNotNull(data, nameof(data));

            using var message = CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, contextName, data);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateUpdateRequestUri(string subscriptionId, string resourceGroupName, string contextName, EdgeContextPatch patch)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/contexts/", false);
            uri.AppendPath(contextName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateUpdateRequest(string subscriptionId, string resourceGroupName, string contextName, EdgeContextPatch patch)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/contexts/", false);
            uri.AppendPath(contextName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(patch, ModelSerializationExtensions.WireOptions);
            request.Content = content;
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> update an Context Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="patch"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/> or <paramref name="patch"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="contextName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response> UpdateAsync(string subscriptionId, string resourceGroupName, string contextName, EdgeContextPatch patch, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));
            Argument.AssertNotNull(patch, nameof(patch));

            using var message = CreateUpdateRequest(subscriptionId, resourceGroupName, contextName, patch);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 202:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> update an Context Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="patch"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/> or <paramref name="patch"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="contextName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response Update(string subscriptionId, string resourceGroupName, string contextName, EdgeContextPatch patch, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));
            Argument.AssertNotNull(patch, nameof(patch));

            using var message = CreateUpdateRequest(subscriptionId, resourceGroupName, contextName, patch);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 202:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateListByResourceGroupRequestUri(string subscriptionId, string resourceGroupName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/contexts", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateListByResourceGroupRequest(string subscriptionId, string resourceGroupName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/contexts", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> List by specified resource group. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/> or <paramref name="resourceGroupName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> or <paramref name="resourceGroupName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<ContextListResult>> ListByResourceGroupAsync(string subscriptionId, string resourceGroupName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));

            using var message = CreateListByResourceGroupRequest(subscriptionId, resourceGroupName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ContextListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = ContextListResult.DeserializeContextListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> List by specified resource group. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/> or <paramref name="resourceGroupName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> or <paramref name="resourceGroupName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<ContextListResult> ListByResourceGroup(string subscriptionId, string resourceGroupName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));

            using var message = CreateListByResourceGroupRequest(subscriptionId, resourceGroupName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ContextListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = ContextListResult.DeserializeContextListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateListBySubscriptionRequestUri(string subscriptionId)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/providers/Microsoft.Edge/contexts", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateListBySubscriptionRequest(string subscriptionId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/providers/Microsoft.Edge/contexts", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> List by subscription. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<ContextListResult>> ListBySubscriptionAsync(string subscriptionId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));

            using var message = CreateListBySubscriptionRequest(subscriptionId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ContextListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = ContextListResult.DeserializeContextListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> List by subscription. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<ContextListResult> ListBySubscription(string subscriptionId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));

            using var message = CreateListBySubscriptionRequest(subscriptionId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ContextListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = ContextListResult.DeserializeContextListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateDeleteRequestUri(string subscriptionId, string resourceGroupName, string contextName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/contexts/", false);
            uri.AppendPath(contextName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateDeleteRequest(string subscriptionId, string resourceGroupName, string contextName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/contexts/", false);
            uri.AppendPath(contextName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Delete Context Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="contextName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="contextName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response> DeleteAsync(string subscriptionId, string resourceGroupName, string contextName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));

            using var message = CreateDeleteRequest(subscriptionId, resourceGroupName, contextName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                case 204:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Delete Context Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="contextName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="contextName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response Delete(string subscriptionId, string resourceGroupName, string contextName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));

            using var message = CreateDeleteRequest(subscriptionId, resourceGroupName, contextName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                case 204:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateListByResourceGroupNextPageRequestUri(string nextLink, string subscriptionId, string resourceGroupName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            return uri;
        }

        internal HttpMessage CreateListByResourceGroupNextPageRequest(string nextLink, string subscriptionId, string resourceGroupName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> List by specified resource group. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="subscriptionId"/> or <paramref name="resourceGroupName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> or <paramref name="resourceGroupName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<ContextListResult>> ListByResourceGroupNextPageAsync(string nextLink, string subscriptionId, string resourceGroupName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));

            using var message = CreateListByResourceGroupNextPageRequest(nextLink, subscriptionId, resourceGroupName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ContextListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = ContextListResult.DeserializeContextListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> List by specified resource group. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="subscriptionId"/> or <paramref name="resourceGroupName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> or <paramref name="resourceGroupName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<ContextListResult> ListByResourceGroupNextPage(string nextLink, string subscriptionId, string resourceGroupName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));

            using var message = CreateListByResourceGroupNextPageRequest(nextLink, subscriptionId, resourceGroupName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ContextListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = ContextListResult.DeserializeContextListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateListBySubscriptionNextPageRequestUri(string nextLink, string subscriptionId)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            return uri;
        }

        internal HttpMessage CreateListBySubscriptionNextPageRequest(string nextLink, string subscriptionId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> List by subscription. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="subscriptionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<ContextListResult>> ListBySubscriptionNextPageAsync(string nextLink, string subscriptionId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));

            using var message = CreateListBySubscriptionNextPageRequest(nextLink, subscriptionId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ContextListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = ContextListResult.DeserializeContextListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> List by subscription. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="subscriptionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<ContextListResult> ListBySubscriptionNextPage(string nextLink, string subscriptionId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));

            using var message = CreateListBySubscriptionNextPageRequest(nextLink, subscriptionId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ContextListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = ContextListResult.DeserializeContextListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/RestOperations/DiagnosticsRestOperations.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    internal partial class DiagnosticsRestOperations
    {
        private readonly TelemetryDetails _userAgent;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> Initializes a new instance of DiagnosticsRestOperations. </summary>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="applicationId"> The application id to use for user agent. </param>
        /// <param name="endpoint"> Service host. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="pipeline"/> or <paramref name="apiVersion"/> is null. </exception>
        public DiagnosticsRestOperations(HttpPipeline pipeline, string applicationId, Uri endpoint = null, string apiVersion = default)
        {
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _endpoint = endpoint ?? new Uri("https://management.azure.com");
            _apiVersion = apiVersion ?? "2025-06-01";
            _userAgent = new TelemetryDetails(GetType().Assembly, applicationId);
        }

        internal RequestUriBuilder CreateGetRequestUri(string subscriptionId, string resourceGroupName, string diagnosticName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/diagnostics/", false);
            uri.AppendPath(diagnosticName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateGetRequest(string subscriptionId, string resourceGroupName, string diagnosticName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/diagnostics/", false);
            uri.AppendPath(diagnosticName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Returns details of specified Diagnostic resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="diagnosticName"> Name of Diagnostic. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="diagnosticName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="diagnosticName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<EdgeDiagnosticData>> GetAsync(string subscriptionId, string resourceGroupName, string diagnosticName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(diagnosticName, nameof(diagnosticName));

            using var message = CreateGetRequest(subscriptionId, resourceGroupName, diagnosticName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EdgeDiagnosticData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = EdgeDiagnosticData.DeserializeEdgeDiagnosticData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((EdgeDiagnosticData)null, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns details of specified Diagnostic resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="diagnosticName"> Name of Diagnostic. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="diagnosticName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="diagnosticName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<EdgeDiagnosticData> Get(string subscriptionId, string resourceGroupName, string diagnosticName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(diagnosticName, nameof(diagnosticName));

            using var message = CreateGetRequest(subscriptionId, resourceGroupName, diagnosticName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EdgeDiagnosticData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = EdgeDiagnosticData.DeserializeEdgeDiagnosticData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((EdgeDiagnosticData)null, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateCreateOrUpdateRequestUri(string subscriptionId, string resourceGroupName, string diagnosticName, EdgeDiagnosticData data)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/diagnostics/", false);
            uri.AppendPath(diagnosticName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateCreateOrUpdateRequest(string subscriptionId, string resourceGroupName, string diagnosticName, EdgeDiagnosticData data)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/diagnostics/", false);
            uri.AppendPath(diagnosticName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(data, ModelSerializationExtensions.WireOptions);
            request.Content = content;
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Creates new or updates existing Diagnostic resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="diagnosticName"> Name of Diagnostic. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="diagnosticName"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="diagnosticName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response> CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string diagnosticName, EdgeDiagnosticData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(diagnosticName, nameof(diagnosticName));
            Argument.AssertNotNull(data, nameof(data));

            using var message = CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, diagnosticName, data);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Creates new or updates existing Diagnostic resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="diagnosticName"> Name of Diagnostic. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="diagnosticName"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="diagnosticName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response CreateOrUpdate(string subscriptionId, string resourceGroupName, string diagnosticName, EdgeDiagnosticData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(diagnosticName, nameof(diagnosticName));
            Argument.AssertNotNull(data, nameof(data));

            using var message = CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, diagnosticName, data);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateUpdateRequestUri(string subscriptionId, string resourceGroupName, string diagnosticName, EdgeDiagnosticPatch patch)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/diagnostics/", false);
            uri.AppendPath(diagnosticName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateUpdateRequest(string subscriptionId, string resourceGroupName, string diagnosticName, EdgeDiagnosticPatch patch)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/diagnostics/", false);
            uri.AppendPath(diagnosticName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(patch, ModelSerializationExtensions.WireOptions);
            request.Content = content;
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Updates existing Diagnostic resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="diagnosticName"> Name of Diagnostic. </param>
        /// <param name="patch"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="diagnosticName"/> or <paramref name="patch"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="diagnosticName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response> UpdateAsync(string subscriptionId, string resourceGroupName, string diagnosticName, EdgeDiagnosticPatch patch, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(diagnosticName, nameof(diagnosticName));
            Argument.AssertNotNull(patch, nameof(patch));

            using var message = CreateUpdateRequest(subscriptionId, resourceGroupName, diagnosticName, patch);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 202:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Updates existing Diagnostic resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="diagnosticName"> Name of Diagnostic. </param>
        /// <param name="patch"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="diagnosticName"/> or <paramref name="patch"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="diagnosticName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response Update(string subscriptionId, string resourceGroupName, string diagnosticName, EdgeDiagnosticPatch patch, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(diagnosticName, nameof(diagnosticName));
            Argument.AssertNotNull(patch, nameof(patch));

            using var message = CreateUpdateRequest(subscriptionId, resourceGroupName, diagnosticName, patch);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 202:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateDeleteRequestUri(string subscriptionId, string resourceGroupName, string diagnosticName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/diagnostics/", false);
            uri.AppendPath(diagnosticName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateDeleteRequest(string subscriptionId, string resourceGroupName, string diagnosticName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/diagnostics/", false);
            uri.AppendPath(diagnosticName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Deletes specified Diagnostic resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="diagnosticName"> Name of Diagnostic. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="diagnosticName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="diagnosticName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response> DeleteAsync(string subscriptionId, string resourceGroupName, string diagnosticName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(diagnosticName, nameof(diagnosticName));

            using var message = CreateDeleteRequest(subscriptionId, resourceGroupName, diagnosticName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                case 204:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Deletes specified Diagnostic resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="diagnosticName"> Name of Diagnostic. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="diagnosticName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="diagnosticName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response Delete(string subscriptionId, string resourceGroupName, string diagnosticName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(diagnosticName, nameof(diagnosticName));

            using var message = CreateDeleteRequest(subscriptionId, resourceGroupName, diagnosticName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                case 204:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateListByResourceGroupRequestUri(string subscriptionId, string resourceGroupName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/diagnostics", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateListByResourceGroupRequest(string subscriptionId, string resourceGroupName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/diagnostics", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Returns a collection of Diagnostic resources within the resource group. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/> or <paramref name="resourceGroupName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> or <paramref name="resourceGroupName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<DiagnosticListResult>> ListByResourceGroupAsync(string subscriptionId, string resourceGroupName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));

            using var message = CreateListByResourceGroupRequest(subscriptionId, resourceGroupName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DiagnosticListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = DiagnosticListResult.DeserializeDiagnosticListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a collection of Diagnostic resources within the resource group. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/> or <paramref name="resourceGroupName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> or <paramref name="resourceGroupName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<DiagnosticListResult> ListByResourceGroup(string subscriptionId, string resourceGroupName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));

            using var message = CreateListByResourceGroupRequest(subscriptionId, resourceGroupName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DiagnosticListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = DiagnosticListResult.DeserializeDiagnosticListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateListBySubscriptionRequestUri(string subscriptionId)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/providers/Microsoft.Edge/diagnostics", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateListBySubscriptionRequest(string subscriptionId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/providers/Microsoft.Edge/diagnostics", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Lists Diagnostics resources within an Azure subscription. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<DiagnosticListResult>> ListBySubscriptionAsync(string subscriptionId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));

            using var message = CreateListBySubscriptionRequest(subscriptionId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DiagnosticListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = DiagnosticListResult.DeserializeDiagnosticListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Lists Diagnostics resources within an Azure subscription. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<DiagnosticListResult> ListBySubscription(string subscriptionId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));

            using var message = CreateListBySubscriptionRequest(subscriptionId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DiagnosticListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = DiagnosticListResult.DeserializeDiagnosticListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateListByResourceGroupNextPageRequestUri(string nextLink, string subscriptionId, string resourceGroupName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            return uri;
        }

        internal HttpMessage CreateListByResourceGroupNextPageRequest(string nextLink, string subscriptionId, string resourceGroupName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Returns a collection of Diagnostic resources within the resource group. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="subscriptionId"/> or <paramref name="resourceGroupName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> or <paramref name="resourceGroupName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<DiagnosticListResult>> ListByResourceGroupNextPageAsync(string nextLink, string subscriptionId, string resourceGroupName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));

            using var message = CreateListByResourceGroupNextPageRequest(nextLink, subscriptionId, resourceGroupName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DiagnosticListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = DiagnosticListResult.DeserializeDiagnosticListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a collection of Diagnostic resources within the resource group. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="subscriptionId"/> or <paramref name="resourceGroupName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> or <paramref name="resourceGroupName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<DiagnosticListResult> ListByResourceGroupNextPage(string nextLink, string subscriptionId, string resourceGroupName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));

            using var message = CreateListByResourceGroupNextPageRequest(nextLink, subscriptionId, resourceGroupName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DiagnosticListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = DiagnosticListResult.DeserializeDiagnosticListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateListBySubscriptionNextPageRequestUri(string nextLink, string subscriptionId)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            return uri;
        }

        internal HttpMessage CreateListBySubscriptionNextPageRequest(string nextLink, string subscriptionId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Lists Diagnostics resources within an Azure subscription. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="subscriptionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<DiagnosticListResult>> ListBySubscriptionNextPageAsync(string nextLink, string subscriptionId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));

            using var message = CreateListBySubscriptionNextPageRequest(nextLink, subscriptionId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DiagnosticListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = DiagnosticListResult.DeserializeDiagnosticListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Lists Diagnostics resources within an Azure subscription. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="subscriptionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<DiagnosticListResult> ListBySubscriptionNextPage(string nextLink, string subscriptionId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));

            using var message = CreateListBySubscriptionNextPageRequest(nextLink, subscriptionId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DiagnosticListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = DiagnosticListResult.DeserializeDiagnosticListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/RestOperations/DynamicSchemasRestOperations.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    internal partial class DynamicSchemasRestOperations
    {
        private readonly TelemetryDetails _userAgent;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> Initializes a new instance of DynamicSchemasRestOperations. </summary>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="applicationId"> The application id to use for user agent. </param>
        /// <param name="endpoint"> Service host. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="pipeline"/> or <paramref name="apiVersion"/> is null. </exception>
        public DynamicSchemasRestOperations(HttpPipeline pipeline, string applicationId, Uri endpoint = null, string apiVersion = default)
        {
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _endpoint = endpoint ?? new Uri("https://management.azure.com");
            _apiVersion = apiVersion ?? "2025-06-01";
            _userAgent = new TelemetryDetails(GetType().Assembly, applicationId);
        }

        internal RequestUriBuilder CreateGetRequestUri(string subscriptionId, string resourceGroupName, string schemaName, string dynamicSchemaName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/schemas/", false);
            uri.AppendPath(schemaName, true);
            uri.AppendPath("/dynamicSchemas/", false);
            uri.AppendPath(dynamicSchemaName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateGetRequest(string subscriptionId, string resourceGroupName, string schemaName, string dynamicSchemaName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/schemas/", false);
            uri.AppendPath(schemaName, true);
            uri.AppendPath("/dynamicSchemas/", false);
            uri.AppendPath(dynamicSchemaName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Get a DynamicSchema Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="schemaName"> The name of the Schema. </param>
        /// <param name="dynamicSchemaName"> The name of the DynamicSchema. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="schemaName"/> or <paramref name="dynamicSchemaName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="schemaName"/> or <paramref name="dynamicSchemaName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<EdgeDynamicSchemaData>> GetAsync(string subscriptionId, string resourceGroupName, string schemaName, string dynamicSchemaName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(schemaName, nameof(schemaName));
            Argument.AssertNotNullOrEmpty(dynamicSchemaName, nameof(dynamicSchemaName));

            using var message = CreateGetRequest(subscriptionId, resourceGroupName, schemaName, dynamicSchemaName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EdgeDynamicSchemaData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = EdgeDynamicSchemaData.DeserializeEdgeDynamicSchemaData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((EdgeDynamicSchemaData)null, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Get a DynamicSchema Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="schemaName"> The name of the Schema. </param>
        /// <param name="dynamicSchemaName"> The name of the DynamicSchema. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="schemaName"/> or <paramref name="dynamicSchemaName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="schemaName"/> or <paramref name="dynamicSchemaName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<EdgeDynamicSchemaData> Get(string subscriptionId, string resourceGroupName, string schemaName, string dynamicSchemaName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(schemaName, nameof(schemaName));
            Argument.AssertNotNullOrEmpty(dynamicSchemaName, nameof(dynamicSchemaName));

            using var message = CreateGetRequest(subscriptionId, resourceGroupName, schemaName, dynamicSchemaName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EdgeDynamicSchemaData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = EdgeDynamicSchemaData.DeserializeEdgeDynamicSchemaData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((EdgeDynamicSchemaData)null, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateCreateOrUpdateRequestUri(string subscriptionId, string resourceGroupName, string schemaName, string dynamicSchemaName, EdgeDynamicSchemaData data)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/schemas/", false);
            uri.AppendPath(schemaName, true);
            uri.AppendPath("/dynamicSchemas/", false);
            uri.AppendPath(dynamicSchemaName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateCreateOrUpdateRequest(string subscriptionId, string resourceGroupName, string schemaName, string dynamicSchemaName, EdgeDynamicSchemaData data)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/schemas/", false);
            uri.AppendPath(schemaName, true);
            uri.AppendPath("/dynamicSchemas/", false);
            uri.AppendPath(dynamicSchemaName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(data, ModelSerializationExtensions.WireOptions);
            request.Content = content;
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Create or update a DynamicSchema Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="schemaName"> The name of the Schema. </param>
        /// <param name="dynamicSchemaName"> The name of the DynamicSchema. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="schemaName"/>, <paramref name="dynamicSchemaName"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="schemaName"/> or <paramref name="dynamicSchemaName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response> CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string schemaName, string dynamicSchemaName, EdgeDynamicSchemaData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(schemaName, nameof(schemaName));
            Argument.AssertNotNullOrEmpty(dynamicSchemaName, nameof(dynamicSchemaName));
            Argument.AssertNotNull(data, nameof(data));

            using var message = CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, schemaName, dynamicSchemaName, data);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Create or update a DynamicSchema Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="schemaName"> The name of the Schema. </param>
        /// <param name="dynamicSchemaName"> The name of the DynamicSchema. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="schemaName"/>, <paramref name="dynamicSchemaName"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="schemaName"/> or <paramref name="dynamicSchemaName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response CreateOrUpdate(string subscriptionId, string resourceGroupName, string schemaName, string dynamicSchemaName, EdgeDynamicSchemaData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(schemaName, nameof(schemaName));
            Argument.AssertNotNullOrEmpty(dynamicSchemaName, nameof(dynamicSchemaName));
            Argument.AssertNotNull(data, nameof(data));

            using var message = CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, schemaName, dynamicSchemaName, data);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateUpdateRequestUri(string subscriptionId, string resourceGroupName, string schemaName, string dynamicSchemaName, EdgeDynamicSchemaData data)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/schemas/", false);
            uri.AppendPath(schemaName, true);
            uri.AppendPath("/dynamicSchemas/", false);
            uri.AppendPath(dynamicSchemaName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateUpdateRequest(string subscriptionId, string resourceGroupName, string schemaName, string dynamicSchemaName, EdgeDynamicSchemaData data)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/schemas/", false);
            uri.AppendPath(schemaName, true);
            uri.AppendPath("/dynamicSchemas/", false);
            uri.AppendPath(dynamicSchemaName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(data, ModelSerializationExtensions.WireOptions);
            request.Content = content;
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> update a DynamicSchema Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="schemaName"> The name of the Schema. </param>
        /// <param name="dynamicSchemaName"> The name of the DynamicSchema. </param>
        /// <param name="data"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="schemaName"/>, <paramref name="dynamicSchemaName"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="schemaName"/> or <paramref name="dynamicSchemaName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<EdgeDynamicSchemaData>> UpdateAsync(string subscriptionId, string resourceGroupName, string schemaName, string dynamicSchemaName, EdgeDynamicSchemaData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(schemaName, nameof(schemaName));
            Argument.AssertNotNullOrEmpty(dynamicSchemaName, nameof(dynamicSchemaName));
            Argument.AssertNotNull(data, nameof(data));

            using var message = CreateUpdateRequest(subscriptionId, resourceGroupName, schemaName, dynamicSchemaName, data);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EdgeDynamicSchemaData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = EdgeDynamicSchemaData.DeserializeEdgeDynamicSchemaData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> update a DynamicSchema Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="schemaName"> The name of the Schema. </param>
        /// <param name="dynamicSchemaName"> The name of the DynamicSchema. </param>
        /// <param name="data"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="schemaName"/>, <paramref name="dynamicSchemaName"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="schemaName"/> or <paramref name="dynamicSchemaName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<EdgeDynamicSchemaData> Update(string subscriptionId, string resourceGroupName, string schemaName, string dynamicSchemaName, EdgeDynamicSchemaData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(schemaName, nameof(schemaName));
            Argument.AssertNotNullOrEmpty(dynamicSchemaName, nameof(dynamicSchemaName));
            Argument.AssertNotNull(data, nameof(data));

            using var message = CreateUpdateRequest(subscriptionId, resourceGroupName, schemaName, dynamicSchemaName, data);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EdgeDynamicSchemaData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = EdgeDynamicSchemaData.DeserializeEdgeDynamicSchemaData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateDeleteRequestUri(string subscriptionId, string resourceGroupName, string schemaName, string dynamicSchemaName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/schemas/", false);
            uri.AppendPath(schemaName, true);
            uri.AppendPath("/dynamicSchemas/", false);
            uri.AppendPath(dynamicSchemaName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateDeleteRequest(string subscriptionId, string resourceGroupName, string schemaName, string dynamicSchemaName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/schemas/", false);
            uri.AppendPath(schemaName, true);
            uri.AppendPath("/dynamicSchemas/", false);
            uri.AppendPath(dynamicSchemaName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Delete a DynamicSchema Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="schemaName"> The name of the Schema. </param>
        /// <param name="dynamicSchemaName"> The name of the DynamicSchema. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="schemaName"/> or <paramref name="dynamicSchemaName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="schemaName"/> or <paramref name="dynamicSchemaName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response> DeleteAsync(string subscriptionId, string resourceGroupName, string schemaName, string dynamicSchemaName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(schemaName, nameof(schemaName));
            Argument.AssertNotNullOrEmpty(dynamicSchemaName, nameof(dynamicSchemaName));

            using var message = CreateDeleteRequest(subscriptionId, resourceGroupName, schemaName, dynamicSchemaName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                case 204:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Delete a DynamicSchema Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="schemaName"> The name of the Schema. </param>
        /// <param name="dynamicSchemaName"> The name of the DynamicSchema. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="schemaName"/> or <paramref name="dynamicSchemaName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="schemaName"/> or <paramref name="dynamicSchemaName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response Delete(string subscriptionId, string resourceGroupName, string schemaName, string dynamicSchemaName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(schemaName, nameof(schemaName));
            Argument.AssertNotNullOrEmpty(dynamicSchemaName, nameof(dynamicSchemaName));

            using var message = CreateDeleteRequest(subscriptionId, resourceGroupName, schemaName, dynamicSchemaName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                case 204:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateListBySchemaRequestUri(string subscriptionId, string resourceGroupName, string schemaName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/schemas/", false);
            uri.AppendPath(schemaName, true);
            uri.AppendPath("/dynamicSchemas", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateListBySchemaRequest(string subscriptionId, string resourceGroupName, string schemaName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/schemas/", false);
            uri.AppendPath(schemaName, true);
            uri.AppendPath("/dynamicSchemas", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> List by Schema. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="schemaName"> The name of the Schema. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="schemaName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="schemaName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<DynamicSchemaListResult>> ListBySchemaAsync(string subscriptionId, string resourceGroupName, string schemaName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(schemaName, nameof(schemaName));

            using var message = CreateListBySchemaRequest(subscriptionId, resourceGroupName, schemaName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DynamicSchemaListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = DynamicSchemaListResult.DeserializeDynamicSchemaListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> List by Schema. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="schemaName"> The name of the Schema. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="schemaName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="schemaName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<DynamicSchemaListResult> ListBySchema(string subscriptionId, string resourceGroupName, string schemaName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(schemaName, nameof(schemaName));

            using var message = CreateListBySchemaRequest(subscriptionId, resourceGroupName, schemaName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DynamicSchemaListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = DynamicSchemaListResult.DeserializeDynamicSchemaListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateListBySchemaNextPageRequestUri(string nextLink, string subscriptionId, string resourceGroupName, string schemaName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            return uri;
        }

        internal HttpMessage CreateListBySchemaNextPageRequest(string nextLink, string subscriptionId, string resourceGroupName, string schemaName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> List by Schema. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="schemaName"> The name of the Schema. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="schemaName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="schemaName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<DynamicSchemaListResult>> ListBySchemaNextPageAsync(string nextLink, string subscriptionId, string resourceGroupName, string schemaName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(schemaName, nameof(schemaName));

            using var message = CreateListBySchemaNextPageRequest(nextLink, subscriptionId, resourceGroupName, schemaName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DynamicSchemaListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = DynamicSchemaListResult.DeserializeDynamicSchemaListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> List by Schema. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="schemaName"> The name of the Schema. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="schemaName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="schemaName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<DynamicSchemaListResult> ListBySchemaNextPage(string nextLink, string subscriptionId, string resourceGroupName, string schemaName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(schemaName, nameof(schemaName));

            using var message = CreateListBySchemaNextPageRequest(nextLink, subscriptionId, resourceGroupName, schemaName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DynamicSchemaListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = DynamicSchemaListResult.DeserializeDynamicSchemaListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/RestOperations/DynamicSchemaVersionsRestOperations.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    internal partial class DynamicSchemaVersionsRestOperations
    {
        private readonly TelemetryDetails _userAgent;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> Initializes a new instance of DynamicSchemaVersionsRestOperations. </summary>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="applicationId"> The application id to use for user agent. </param>
        /// <param name="endpoint"> Service host. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="pipeline"/> or <paramref name="apiVersion"/> is null. </exception>
        public DynamicSchemaVersionsRestOperations(HttpPipeline pipeline, string applicationId, Uri endpoint = null, string apiVersion = default)
        {
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _endpoint = endpoint ?? new Uri("https://management.azure.com");
            _apiVersion = apiVersion ?? "2025-06-01";
            _userAgent = new TelemetryDetails(GetType().Assembly, applicationId);
        }

        internal RequestUriBuilder CreateGetRequestUri(string subscriptionId, string resourceGroupName, string schemaName, string dynamicSchemaName, string dynamicSchemaVersionName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/schemas/", false);
            uri.AppendPath(schemaName, true);
            uri.AppendPath("/dynamicSchemas/", false);
            uri.AppendPath(dynamicSchemaName, true);
            uri.AppendPath("/versions/", false);
            uri.AppendPath(dynamicSchemaVersionName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateGetRequest(string subscriptionId, string resourceGroupName, string schemaName, string dynamicSchemaName, string dynamicSchemaVersionName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/schemas/", false);
            uri.AppendPath(schemaName, true);
            uri.AppendPath("/dynamicSchemas/", false);
            uri.AppendPath(dynamicSchemaName, true);
            uri.AppendPath("/versions/", false);
            uri.AppendPath(dynamicSchemaVersionName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Get a Dynamic Schema Version Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="schemaName"> The name of the Schema. </param>
        /// <param name="dynamicSchemaName"> The name of the DynamicSchema. </param>
        /// <param name="dynamicSchemaVersionName"> The name of the DynamicSchemaVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="schemaName"/>, <paramref name="dynamicSchemaName"/> or <paramref name="dynamicSchemaVersionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="schemaName"/>, <paramref name="dynamicSchemaName"/> or <paramref name="dynamicSchemaVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<EdgeDynamicSchemaVersionData>> GetAsync(string subscriptionId, string resourceGroupName, string schemaName, string dynamicSchemaName, string dynamicSchemaVersionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(schemaName, nameof(schemaName));
            Argument.AssertNotNullOrEmpty(dynamicSchemaName, nameof(dynamicSchemaName));
            Argument.AssertNotNullOrEmpty(dynamicSchemaVersionName, nameof(dynamicSchemaVersionName));

            using var message = CreateGetRequest(subscriptionId, resourceGroupName, schemaName, dynamicSchemaName, dynamicSchemaVersionName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EdgeDynamicSchemaVersionData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = EdgeDynamicSchemaVersionData.DeserializeEdgeDynamicSchemaVersionData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((EdgeDynamicSchemaVersionData)null, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Get a Dynamic Schema Version Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="schemaName"> The name of the Schema. </param>
        /// <param name="dynamicSchemaName"> The name of the DynamicSchema. </param>
        /// <param name="dynamicSchemaVersionName"> The name of the DynamicSchemaVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="schemaName"/>, <paramref name="dynamicSchemaName"/> or <paramref name="dynamicSchemaVersionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="schemaName"/>, <paramref name="dynamicSchemaName"/> or <paramref name="dynamicSchemaVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<EdgeDynamicSchemaVersionData> Get(string subscriptionId, string resourceGroupName, string schemaName, string dynamicSchemaName, string dynamicSchemaVersionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(schemaName, nameof(schemaName));
            Argument.AssertNotNullOrEmpty(dynamicSchemaName, nameof(dynamicSchemaName));
            Argument.AssertNotNullOrEmpty(dynamicSchemaVersionName, nameof(dynamicSchemaVersionName));

            using var message = CreateGetRequest(subscriptionId, resourceGroupName, schemaName, dynamicSchemaName, dynamicSchemaVersionName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EdgeDynamicSchemaVersionData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = EdgeDynamicSchemaVersionData.DeserializeEdgeDynamicSchemaVersionData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((EdgeDynamicSchemaVersionData)null, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateCreateOrUpdateRequestUri(string subscriptionId, string resourceGroupName, string schemaName, string dynamicSchemaName, string dynamicSchemaVersionName, EdgeDynamicSchemaVersionData data)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/schemas/", false);
            uri.AppendPath(schemaName, true);
            uri.AppendPath("/dynamicSchemas/", false);
            uri.AppendPath(dynamicSchemaName, true);
            uri.AppendPath("/versions/", false);
            uri.AppendPath(dynamicSchemaVersionName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateCreateOrUpdateRequest(string subscriptionId, string resourceGroupName, string schemaName, string dynamicSchemaName, string dynamicSchemaVersionName, EdgeDynamicSchemaVersionData data)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/schemas/", false);
            uri.AppendPath(schemaName, true);
            uri.AppendPath("/dynamicSchemas/", false);
            uri.AppendPath(dynamicSchemaName, true);
            uri.AppendPath("/versions/", false);
            uri.AppendPath(dynamicSchemaVersionName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(data, ModelSerializationExtensions.WireOptions);
            request.Content = content;
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Create or update a Dynamic Schema Version Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="schemaName"> The name of the Schema. </param>
        /// <param name="dynamicSchemaName"> The name of the DynamicSchema. </param>
        /// <param name="dynamicSchemaVersionName"> The name of the DynamicSchemaVersion. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="schemaName"/>, <paramref name="dynamicSchemaName"/>, <paramref name="dynamicSchemaVersionName"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="schemaName"/>, <paramref name="dynamicSchemaName"/> or <paramref name="dynamicSchemaVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response> CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string schemaName, string dynamicSchemaName, string dynamicSchemaVersionName, EdgeDynamicSchemaVersionData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(schemaName, nameof(schemaName));
            Argument.AssertNotNullOrEmpty(dynamicSchemaName, nameof(dynamicSchemaName));
            Argument.AssertNotNullOrEmpty(dynamicSchemaVersionName, nameof(dynamicSchemaVersionName));
            Argument.AssertNotNull(data, nameof(data));

            using var message = CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, schemaName, dynamicSchemaName, dynamicSchemaVersionName, data);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Create or update a Dynamic Schema Version Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="schemaName"> The name of the Schema. </param>
        /// <param name="dynamicSchemaName"> The name of the DynamicSchema. </param>
        /// <param name="dynamicSchemaVersionName"> The name of the DynamicSchemaVersion. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="schemaName"/>, <paramref name="dynamicSchemaName"/>, <paramref name="dynamicSchemaVersionName"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="schemaName"/>, <paramref name="dynamicSchemaName"/> or <paramref name="dynamicSchemaVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response CreateOrUpdate(string subscriptionId, string resourceGroupName, string schemaName, string dynamicSchemaName, string dynamicSchemaVersionName, EdgeDynamicSchemaVersionData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(schemaName, nameof(schemaName));
            Argument.AssertNotNullOrEmpty(dynamicSchemaName, nameof(dynamicSchemaName));
            Argument.AssertNotNullOrEmpty(dynamicSchemaVersionName, nameof(dynamicSchemaVersionName));
            Argument.AssertNotNull(data, nameof(data));

            using var message = CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, schemaName, dynamicSchemaName, dynamicSchemaVersionName, data);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateUpdateRequestUri(string subscriptionId, string resourceGroupName, string schemaName, string dynamicSchemaName, string dynamicSchemaVersionName, EdgeDynamicSchemaVersionData data)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/schemas/", false);
            uri.AppendPath(schemaName, true);
            uri.AppendPath("/dynamicSchemas/", false);
            uri.AppendPath(dynamicSchemaName, true);
            uri.AppendPath("/versions/", false);
            uri.AppendPath(dynamicSchemaVersionName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateUpdateRequest(string subscriptionId, string resourceGroupName, string schemaName, string dynamicSchemaName, string dynamicSchemaVersionName, EdgeDynamicSchemaVersionData data)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/schemas/", false);
            uri.AppendPath(schemaName, true);
            uri.AppendPath("/dynamicSchemas/", false);
            uri.AppendPath(dynamicSchemaName, true);
            uri.AppendPath("/versions/", false);
            uri.AppendPath(dynamicSchemaVersionName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(data, ModelSerializationExtensions.WireOptions);
            request.Content = content;
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> update a Dynamic Schema Version Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="schemaName"> The name of the Schema. </param>
        /// <param name="dynamicSchemaName"> The name of the DynamicSchema. </param>
        /// <param name="dynamicSchemaVersionName"> The name of the DynamicSchemaVersion. </param>
        /// <param name="data"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="schemaName"/>, <paramref name="dynamicSchemaName"/>, <paramref name="dynamicSchemaVersionName"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="schemaName"/>, <paramref name="dynamicSchemaName"/> or <paramref name="dynamicSchemaVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<EdgeDynamicSchemaVersionData>> UpdateAsync(string subscriptionId, string resourceGroupName, string schemaName, string dynamicSchemaName, string dynamicSchemaVersionName, EdgeDynamicSchemaVersionData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(schemaName, nameof(schemaName));
            Argument.AssertNotNullOrEmpty(dynamicSchemaName, nameof(dynamicSchemaName));
            Argument.AssertNotNullOrEmpty(dynamicSchemaVersionName, nameof(dynamicSchemaVersionName));
            Argument.AssertNotNull(data, nameof(data));

            using var message = CreateUpdateRequest(subscriptionId, resourceGroupName, schemaName, dynamicSchemaName, dynamicSchemaVersionName, data);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EdgeDynamicSchemaVersionData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = EdgeDynamicSchemaVersionData.DeserializeEdgeDynamicSchemaVersionData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> update a Dynamic Schema Version Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="schemaName"> The name of the Schema. </param>
        /// <param name="dynamicSchemaName"> The name of the DynamicSchema. </param>
        /// <param name="dynamicSchemaVersionName"> The name of the DynamicSchemaVersion. </param>
        /// <param name="data"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="schemaName"/>, <paramref name="dynamicSchemaName"/>, <paramref name="dynamicSchemaVersionName"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="schemaName"/>, <paramref name="dynamicSchemaName"/> or <paramref name="dynamicSchemaVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<EdgeDynamicSchemaVersionData> Update(string subscriptionId, string resourceGroupName, string schemaName, string dynamicSchemaName, string dynamicSchemaVersionName, EdgeDynamicSchemaVersionData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(schemaName, nameof(schemaName));
            Argument.AssertNotNullOrEmpty(dynamicSchemaName, nameof(dynamicSchemaName));
            Argument.AssertNotNullOrEmpty(dynamicSchemaVersionName, nameof(dynamicSchemaVersionName));
            Argument.AssertNotNull(data, nameof(data));

            using var message = CreateUpdateRequest(subscriptionId, resourceGroupName, schemaName, dynamicSchemaName, dynamicSchemaVersionName, data);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EdgeDynamicSchemaVersionData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = EdgeDynamicSchemaVersionData.DeserializeEdgeDynamicSchemaVersionData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateDeleteRequestUri(string subscriptionId, string resourceGroupName, string schemaName, string dynamicSchemaName, string dynamicSchemaVersionName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/schemas/", false);
            uri.AppendPath(schemaName, true);
            uri.AppendPath("/dynamicSchemas/", false);
            uri.AppendPath(dynamicSchemaName, true);
            uri.AppendPath("/versions/", false);
            uri.AppendPath(dynamicSchemaVersionName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateDeleteRequest(string subscriptionId, string resourceGroupName, string schemaName, string dynamicSchemaName, string dynamicSchemaVersionName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/schemas/", false);
            uri.AppendPath(schemaName, true);
            uri.AppendPath("/dynamicSchemas/", false);
            uri.AppendPath(dynamicSchemaName, true);
            uri.AppendPath("/versions/", false);
            uri.AppendPath(dynamicSchemaVersionName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Delete a Dynamic Schema Version Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="schemaName"> The name of the Schema. </param>
        /// <param name="dynamicSchemaName"> The name of the DynamicSchema. </param>
        /// <param name="dynamicSchemaVersionName"> The name of the DynamicSchemaVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="schemaName"/>, <paramref name="dynamicSchemaName"/> or <paramref name="dynamicSchemaVersionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="schemaName"/>, <paramref name="dynamicSchemaName"/> or <paramref name="dynamicSchemaVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response> DeleteAsync(string subscriptionId, string resourceGroupName, string schemaName, string dynamicSchemaName, string dynamicSchemaVersionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(schemaName, nameof(schemaName));
            Argument.AssertNotNullOrEmpty(dynamicSchemaName, nameof(dynamicSchemaName));
            Argument.AssertNotNullOrEmpty(dynamicSchemaVersionName, nameof(dynamicSchemaVersionName));

            using var message = CreateDeleteRequest(subscriptionId, resourceGroupName, schemaName, dynamicSchemaName, dynamicSchemaVersionName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                case 204:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Delete a Dynamic Schema Version Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="schemaName"> The name of the Schema. </param>
        /// <param name="dynamicSchemaName"> The name of the DynamicSchema. </param>
        /// <param name="dynamicSchemaVersionName"> The name of the DynamicSchemaVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="schemaName"/>, <paramref name="dynamicSchemaName"/> or <paramref name="dynamicSchemaVersionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="schemaName"/>, <paramref name="dynamicSchemaName"/> or <paramref name="dynamicSchemaVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response Delete(string subscriptionId, string resourceGroupName, string schemaName, string dynamicSchemaName, string dynamicSchemaVersionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(schemaName, nameof(schemaName));
            Argument.AssertNotNullOrEmpty(dynamicSchemaName, nameof(dynamicSchemaName));
            Argument.AssertNotNullOrEmpty(dynamicSchemaVersionName, nameof(dynamicSchemaVersionName));

            using var message = CreateDeleteRequest(subscriptionId, resourceGroupName, schemaName, dynamicSchemaName, dynamicSchemaVersionName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                case 204:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateListByDynamicSchemaRequestUri(string subscriptionId, string resourceGroupName, string schemaName, string dynamicSchemaName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/schemas/", false);
            uri.AppendPath(schemaName, true);
            uri.AppendPath("/dynamicSchemas/", false);
            uri.AppendPath(dynamicSchemaName, true);
            uri.AppendPath("/versions", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateListByDynamicSchemaRequest(string subscriptionId, string resourceGroupName, string schemaName, string dynamicSchemaName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/schemas/", false);
            uri.AppendPath(schemaName, true);
            uri.AppendPath("/dynamicSchemas/", false);
            uri.AppendPath(dynamicSchemaName, true);
            uri.AppendPath("/versions", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> List by Dynamic Schema. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="schemaName"> The name of the Schema. </param>
        /// <param name="dynamicSchemaName"> The name of the DynamicSchema. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="schemaName"/> or <paramref name="dynamicSchemaName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="schemaName"/> or <paramref name="dynamicSchemaName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<DynamicSchemaVersionListResult>> ListByDynamicSchemaAsync(string subscriptionId, string resourceGroupName, string schemaName, string dynamicSchemaName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(schemaName, nameof(schemaName));
            Argument.AssertNotNullOrEmpty(dynamicSchemaName, nameof(dynamicSchemaName));

            using var message = CreateListByDynamicSchemaRequest(subscriptionId, resourceGroupName, schemaName, dynamicSchemaName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DynamicSchemaVersionListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = DynamicSchemaVersionListResult.DeserializeDynamicSchemaVersionListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> List by Dynamic Schema. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="schemaName"> The name of the Schema. </param>
        /// <param name="dynamicSchemaName"> The name of the DynamicSchema. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="schemaName"/> or <paramref name="dynamicSchemaName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="schemaName"/> or <paramref name="dynamicSchemaName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<DynamicSchemaVersionListResult> ListByDynamicSchema(string subscriptionId, string resourceGroupName, string schemaName, string dynamicSchemaName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(schemaName, nameof(schemaName));
            Argument.AssertNotNullOrEmpty(dynamicSchemaName, nameof(dynamicSchemaName));

            using var message = CreateListByDynamicSchemaRequest(subscriptionId, resourceGroupName, schemaName, dynamicSchemaName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DynamicSchemaVersionListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = DynamicSchemaVersionListResult.DeserializeDynamicSchemaVersionListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateListByDynamicSchemaNextPageRequestUri(string nextLink, string subscriptionId, string resourceGroupName, string schemaName, string dynamicSchemaName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            return uri;
        }

        internal HttpMessage CreateListByDynamicSchemaNextPageRequest(string nextLink, string subscriptionId, string resourceGroupName, string schemaName, string dynamicSchemaName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> List by Dynamic Schema. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="schemaName"> The name of the Schema. </param>
        /// <param name="dynamicSchemaName"> The name of the DynamicSchema. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="schemaName"/> or <paramref name="dynamicSchemaName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="schemaName"/> or <paramref name="dynamicSchemaName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<DynamicSchemaVersionListResult>> ListByDynamicSchemaNextPageAsync(string nextLink, string subscriptionId, string resourceGroupName, string schemaName, string dynamicSchemaName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(schemaName, nameof(schemaName));
            Argument.AssertNotNullOrEmpty(dynamicSchemaName, nameof(dynamicSchemaName));

            using var message = CreateListByDynamicSchemaNextPageRequest(nextLink, subscriptionId, resourceGroupName, schemaName, dynamicSchemaName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DynamicSchemaVersionListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = DynamicSchemaVersionListResult.DeserializeDynamicSchemaVersionListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> List by Dynamic Schema. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="schemaName"> The name of the Schema. </param>
        /// <param name="dynamicSchemaName"> The name of the DynamicSchema. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="schemaName"/> or <paramref name="dynamicSchemaName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="schemaName"/> or <paramref name="dynamicSchemaName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<DynamicSchemaVersionListResult> ListByDynamicSchemaNextPage(string nextLink, string subscriptionId, string resourceGroupName, string schemaName, string dynamicSchemaName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(schemaName, nameof(schemaName));
            Argument.AssertNotNullOrEmpty(dynamicSchemaName, nameof(dynamicSchemaName));

            using var message = CreateListByDynamicSchemaNextPageRequest(nextLink, subscriptionId, resourceGroupName, schemaName, dynamicSchemaName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DynamicSchemaVersionListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = DynamicSchemaVersionListResult.DeserializeDynamicSchemaVersionListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/RestOperations/ExecutionsRestOperations.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    internal partial class ExecutionsRestOperations
    {
        private readonly TelemetryDetails _userAgent;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> Initializes a new instance of ExecutionsRestOperations. </summary>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="applicationId"> The application id to use for user agent. </param>
        /// <param name="endpoint"> Service host. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="pipeline"/> or <paramref name="apiVersion"/> is null. </exception>
        public ExecutionsRestOperations(HttpPipeline pipeline, string applicationId, Uri endpoint = null, string apiVersion = default)
        {
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _endpoint = endpoint ?? new Uri("https://management.azure.com");
            _apiVersion = apiVersion ?? "2025-06-01";
            _userAgent = new TelemetryDetails(GetType().Assembly, applicationId);
        }

        internal RequestUriBuilder CreateGetRequestUri(string subscriptionId, string resourceGroupName, string contextName, string workflowName, string versionName, string executionName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/contexts/", false);
            uri.AppendPath(contextName, true);
            uri.AppendPath("/workflows/", false);
            uri.AppendPath(workflowName, true);
            uri.AppendPath("/versions/", false);
            uri.AppendPath(versionName, true);
            uri.AppendPath("/executions/", false);
            uri.AppendPath(executionName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateGetRequest(string subscriptionId, string resourceGroupName, string contextName, string workflowName, string versionName, string executionName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/contexts/", false);
            uri.AppendPath(contextName, true);
            uri.AppendPath("/workflows/", false);
            uri.AppendPath(workflowName, true);
            uri.AppendPath("/versions/", false);
            uri.AppendPath(versionName, true);
            uri.AppendPath("/executions/", false);
            uri.AppendPath(executionName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Get Execution Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="workflowName"> Name of the workflow. </param>
        /// <param name="versionName"> The name of the workflowVersion. </param>
        /// <param name="executionName"> The name of the Execution. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/>, <paramref name="workflowName"/>, <paramref name="versionName"/> or <paramref name="executionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/>, <paramref name="workflowName"/>, <paramref name="versionName"/> or <paramref name="executionName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<EdgeExecutionData>> GetAsync(string subscriptionId, string resourceGroupName, string contextName, string workflowName, string versionName, string executionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));
            Argument.AssertNotNullOrEmpty(workflowName, nameof(workflowName));
            Argument.AssertNotNullOrEmpty(versionName, nameof(versionName));
            Argument.AssertNotNullOrEmpty(executionName, nameof(executionName));

            using var message = CreateGetRequest(subscriptionId, resourceGroupName, contextName, workflowName, versionName, executionName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EdgeExecutionData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = EdgeExecutionData.DeserializeEdgeExecutionData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((EdgeExecutionData)null, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Get Execution Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="workflowName"> Name of the workflow. </param>
        /// <param name="versionName"> The name of the workflowVersion. </param>
        /// <param name="executionName"> The name of the Execution. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/>, <paramref name="workflowName"/>, <paramref name="versionName"/> or <paramref name="executionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/>, <paramref name="workflowName"/>, <paramref name="versionName"/> or <paramref name="executionName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<EdgeExecutionData> Get(string subscriptionId, string resourceGroupName, string contextName, string workflowName, string versionName, string executionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));
            Argument.AssertNotNullOrEmpty(workflowName, nameof(workflowName));
            Argument.AssertNotNullOrEmpty(versionName, nameof(versionName));
            Argument.AssertNotNullOrEmpty(executionName, nameof(executionName));

            using var message = CreateGetRequest(subscriptionId, resourceGroupName, contextName, workflowName, versionName, executionName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EdgeExecutionData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = EdgeExecutionData.DeserializeEdgeExecutionData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((EdgeExecutionData)null, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateCreateOrUpdateRequestUri(string subscriptionId, string resourceGroupName, string contextName, string workflowName, string versionName, string executionName, EdgeExecutionData data)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/contexts/", false);
            uri.AppendPath(contextName, true);
            uri.AppendPath("/workflows/", false);
            uri.AppendPath(workflowName, true);
            uri.AppendPath("/versions/", false);
            uri.AppendPath(versionName, true);
            uri.AppendPath("/executions/", false);
            uri.AppendPath(executionName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateCreateOrUpdateRequest(string subscriptionId, string resourceGroupName, string contextName, string workflowName, string versionName, string executionName, EdgeExecutionData data)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/contexts/", false);
            uri.AppendPath(contextName, true);
            uri.AppendPath("/workflows/", false);
            uri.AppendPath(workflowName, true);
            uri.AppendPath("/versions/", false);
            uri.AppendPath(versionName, true);
            uri.AppendPath("/executions/", false);
            uri.AppendPath(executionName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(data, ModelSerializationExtensions.WireOptions);
            request.Content = content;
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Create or update Execution Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="workflowName"> Name of the workflow. </param>
        /// <param name="versionName"> The name of the workflowVersion. </param>
        /// <param name="executionName"> The name of the Execution. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/>, <paramref name="workflowName"/>, <paramref name="versionName"/>, <paramref name="executionName"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/>, <paramref name="workflowName"/>, <paramref name="versionName"/> or <paramref name="executionName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response> CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string contextName, string workflowName, string versionName, string executionName, EdgeExecutionData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));
            Argument.AssertNotNullOrEmpty(workflowName, nameof(workflowName));
            Argument.AssertNotNullOrEmpty(versionName, nameof(versionName));
            Argument.AssertNotNullOrEmpty(executionName, nameof(executionName));
            Argument.AssertNotNull(data, nameof(data));

            using var message = CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, contextName, workflowName, versionName, executionName, data);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Create or update Execution Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="workflowName"> Name of the workflow. </param>
        /// <param name="versionName"> The name of the workflowVersion. </param>
        /// <param name="executionName"> The name of the Execution. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/>, <paramref name="workflowName"/>, <paramref name="versionName"/>, <paramref name="executionName"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/>, <paramref name="workflowName"/>, <paramref name="versionName"/> or <paramref name="executionName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response CreateOrUpdate(string subscriptionId, string resourceGroupName, string contextName, string workflowName, string versionName, string executionName, EdgeExecutionData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));
            Argument.AssertNotNullOrEmpty(workflowName, nameof(workflowName));
            Argument.AssertNotNullOrEmpty(versionName, nameof(versionName));
            Argument.AssertNotNullOrEmpty(executionName, nameof(executionName));
            Argument.AssertNotNull(data, nameof(data));

            using var message = CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, contextName, workflowName, versionName, executionName, data);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateUpdateRequestUri(string subscriptionId, string resourceGroupName, string contextName, string workflowName, string versionName, string executionName, EdgeExecutionData data)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/contexts/", false);
            uri.AppendPath(contextName, true);
            uri.AppendPath("/workflows/", false);
            uri.AppendPath(workflowName, true);
            uri.AppendPath("/versions/", false);
            uri.AppendPath(versionName, true);
            uri.AppendPath("/executions/", false);
            uri.AppendPath(executionName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateUpdateRequest(string subscriptionId, string resourceGroupName, string contextName, string workflowName, string versionName, string executionName, EdgeExecutionData data)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/contexts/", false);
            uri.AppendPath(contextName, true);
            uri.AppendPath("/workflows/", false);
            uri.AppendPath(workflowName, true);
            uri.AppendPath("/versions/", false);
            uri.AppendPath(versionName, true);
            uri.AppendPath("/executions/", false);
            uri.AppendPath(executionName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(data, ModelSerializationExtensions.WireOptions);
            request.Content = content;
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> update an Execution Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="workflowName"> Name of the workflow. </param>
        /// <param name="versionName"> The name of the workflowVersion. </param>
        /// <param name="executionName"> The name of the Execution. </param>
        /// <param name="data"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/>, <paramref name="workflowName"/>, <paramref name="versionName"/>, <paramref name="executionName"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/>, <paramref name="workflowName"/>, <paramref name="versionName"/> or <paramref name="executionName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response> UpdateAsync(string subscriptionId, string resourceGroupName, string contextName, string workflowName, string versionName, string executionName, EdgeExecutionData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));
            Argument.AssertNotNullOrEmpty(workflowName, nameof(workflowName));
            Argument.AssertNotNullOrEmpty(versionName, nameof(versionName));
            Argument.AssertNotNullOrEmpty(executionName, nameof(executionName));
            Argument.AssertNotNull(data, nameof(data));

            using var message = CreateUpdateRequest(subscriptionId, resourceGroupName, contextName, workflowName, versionName, executionName, data);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 202:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> update an Execution Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="workflowName"> Name of the workflow. </param>
        /// <param name="versionName"> The name of the workflowVersion. </param>
        /// <param name="executionName"> The name of the Execution. </param>
        /// <param name="data"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/>, <paramref name="workflowName"/>, <paramref name="versionName"/>, <paramref name="executionName"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/>, <paramref name="workflowName"/>, <paramref name="versionName"/> or <paramref name="executionName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response Update(string subscriptionId, string resourceGroupName, string contextName, string workflowName, string versionName, string executionName, EdgeExecutionData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));
            Argument.AssertNotNullOrEmpty(workflowName, nameof(workflowName));
            Argument.AssertNotNullOrEmpty(versionName, nameof(versionName));
            Argument.AssertNotNullOrEmpty(executionName, nameof(executionName));
            Argument.AssertNotNull(data, nameof(data));

            using var message = CreateUpdateRequest(subscriptionId, resourceGroupName, contextName, workflowName, versionName, executionName, data);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 202:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateDeleteRequestUri(string subscriptionId, string resourceGroupName, string contextName, string workflowName, string versionName, string executionName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/contexts/", false);
            uri.AppendPath(contextName, true);
            uri.AppendPath("/workflows/", false);
            uri.AppendPath(workflowName, true);
            uri.AppendPath("/versions/", false);
            uri.AppendPath(versionName, true);
            uri.AppendPath("/executions/", false);
            uri.AppendPath(executionName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateDeleteRequest(string subscriptionId, string resourceGroupName, string contextName, string workflowName, string versionName, string executionName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/contexts/", false);
            uri.AppendPath(contextName, true);
            uri.AppendPath("/workflows/", false);
            uri.AppendPath(workflowName, true);
            uri.AppendPath("/versions/", false);
            uri.AppendPath(versionName, true);
            uri.AppendPath("/executions/", false);
            uri.AppendPath(executionName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Delete Execution Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="workflowName"> Name of the workflow. </param>
        /// <param name="versionName"> The name of the workflowVersion. </param>
        /// <param name="executionName"> The name of the Execution. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/>, <paramref name="workflowName"/>, <paramref name="versionName"/> or <paramref name="executionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/>, <paramref name="workflowName"/>, <paramref name="versionName"/> or <paramref name="executionName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response> DeleteAsync(string subscriptionId, string resourceGroupName, string contextName, string workflowName, string versionName, string executionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));
            Argument.AssertNotNullOrEmpty(workflowName, nameof(workflowName));
            Argument.AssertNotNullOrEmpty(versionName, nameof(versionName));
            Argument.AssertNotNullOrEmpty(executionName, nameof(executionName));

            using var message = CreateDeleteRequest(subscriptionId, resourceGroupName, contextName, workflowName, versionName, executionName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                case 204:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Delete Execution Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="workflowName"> Name of the workflow. </param>
        /// <param name="versionName"> The name of the workflowVersion. </param>
        /// <param name="executionName"> The name of the Execution. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/>, <paramref name="workflowName"/>, <paramref name="versionName"/> or <paramref name="executionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/>, <paramref name="workflowName"/>, <paramref name="versionName"/> or <paramref name="executionName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response Delete(string subscriptionId, string resourceGroupName, string contextName, string workflowName, string versionName, string executionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));
            Argument.AssertNotNullOrEmpty(workflowName, nameof(workflowName));
            Argument.AssertNotNullOrEmpty(versionName, nameof(versionName));
            Argument.AssertNotNullOrEmpty(executionName, nameof(executionName));

            using var message = CreateDeleteRequest(subscriptionId, resourceGroupName, contextName, workflowName, versionName, executionName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                case 204:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateListByWorkflowVersionRequestUri(string subscriptionId, string resourceGroupName, string contextName, string workflowName, string versionName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/contexts/", false);
            uri.AppendPath(contextName, true);
            uri.AppendPath("/workflows/", false);
            uri.AppendPath(workflowName, true);
            uri.AppendPath("/versions/", false);
            uri.AppendPath(versionName, true);
            uri.AppendPath("/executions", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateListByWorkflowVersionRequest(string subscriptionId, string resourceGroupName, string contextName, string workflowName, string versionName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/contexts/", false);
            uri.AppendPath(contextName, true);
            uri.AppendPath("/workflows/", false);
            uri.AppendPath(workflowName, true);
            uri.AppendPath("/versions/", false);
            uri.AppendPath(versionName, true);
            uri.AppendPath("/executions", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> List Execution Resources. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="workflowName"> Name of the workflow. </param>
        /// <param name="versionName"> The name of the workflowVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/>, <paramref name="workflowName"/> or <paramref name="versionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/>, <paramref name="workflowName"/> or <paramref name="versionName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<ExecutionListResult>> ListByWorkflowVersionAsync(string subscriptionId, string resourceGroupName, string contextName, string workflowName, string versionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));
            Argument.AssertNotNullOrEmpty(workflowName, nameof(workflowName));
            Argument.AssertNotNullOrEmpty(versionName, nameof(versionName));

            using var message = CreateListByWorkflowVersionRequest(subscriptionId, resourceGroupName, contextName, workflowName, versionName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ExecutionListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = ExecutionListResult.DeserializeExecutionListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> List Execution Resources. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="workflowName"> Name of the workflow. </param>
        /// <param name="versionName"> The name of the workflowVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/>, <paramref name="workflowName"/> or <paramref name="versionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/>, <paramref name="workflowName"/> or <paramref name="versionName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<ExecutionListResult> ListByWorkflowVersion(string subscriptionId, string resourceGroupName, string contextName, string workflowName, string versionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));
            Argument.AssertNotNullOrEmpty(workflowName, nameof(workflowName));
            Argument.AssertNotNullOrEmpty(versionName, nameof(versionName));

            using var message = CreateListByWorkflowVersionRequest(subscriptionId, resourceGroupName, contextName, workflowName, versionName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ExecutionListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = ExecutionListResult.DeserializeExecutionListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateListByWorkflowVersionNextPageRequestUri(string nextLink, string subscriptionId, string resourceGroupName, string contextName, string workflowName, string versionName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            return uri;
        }

        internal HttpMessage CreateListByWorkflowVersionNextPageRequest(string nextLink, string subscriptionId, string resourceGroupName, string contextName, string workflowName, string versionName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> List Execution Resources. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="workflowName"> Name of the workflow. </param>
        /// <param name="versionName"> The name of the workflowVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/>, <paramref name="workflowName"/> or <paramref name="versionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/>, <paramref name="workflowName"/> or <paramref name="versionName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<ExecutionListResult>> ListByWorkflowVersionNextPageAsync(string nextLink, string subscriptionId, string resourceGroupName, string contextName, string workflowName, string versionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));
            Argument.AssertNotNullOrEmpty(workflowName, nameof(workflowName));
            Argument.AssertNotNullOrEmpty(versionName, nameof(versionName));

            using var message = CreateListByWorkflowVersionNextPageRequest(nextLink, subscriptionId, resourceGroupName, contextName, workflowName, versionName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ExecutionListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = ExecutionListResult.DeserializeExecutionListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> List Execution Resources. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="workflowName"> Name of the workflow. </param>
        /// <param name="versionName"> The name of the workflowVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/>, <paramref name="workflowName"/> or <paramref name="versionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/>, <paramref name="workflowName"/> or <paramref name="versionName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<ExecutionListResult> ListByWorkflowVersionNextPage(string nextLink, string subscriptionId, string resourceGroupName, string contextName, string workflowName, string versionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));
            Argument.AssertNotNullOrEmpty(workflowName, nameof(workflowName));
            Argument.AssertNotNullOrEmpty(versionName, nameof(versionName));

            using var message = CreateListByWorkflowVersionNextPageRequest(nextLink, subscriptionId, resourceGroupName, contextName, workflowName, versionName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ExecutionListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = ExecutionListResult.DeserializeExecutionListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/RestOperations/InstanceHistoriesRestOperations.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    internal partial class InstanceHistoriesRestOperations
    {
        private readonly TelemetryDetails _userAgent;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> Initializes a new instance of InstanceHistoriesRestOperations. </summary>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="applicationId"> The application id to use for user agent. </param>
        /// <param name="endpoint"> Service host. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="pipeline"/> or <paramref name="apiVersion"/> is null. </exception>
        public InstanceHistoriesRestOperations(HttpPipeline pipeline, string applicationId, Uri endpoint = null, string apiVersion = default)
        {
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _endpoint = endpoint ?? new Uri("https://management.azure.com");
            _apiVersion = apiVersion ?? "2025-06-01";
            _userAgent = new TelemetryDetails(GetType().Assembly, applicationId);
        }

        internal RequestUriBuilder CreateGetRequestUri(string subscriptionId, string resourceGroupName, string targetName, string solutionName, string instanceName, string instanceHistoryName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/targets/", false);
            uri.AppendPath(targetName, true);
            uri.AppendPath("/solutions/", false);
            uri.AppendPath(solutionName, true);
            uri.AppendPath("/instances/", false);
            uri.AppendPath(instanceName, true);
            uri.AppendPath("/histories/", false);
            uri.AppendPath(instanceHistoryName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateGetRequest(string subscriptionId, string resourceGroupName, string targetName, string solutionName, string instanceName, string instanceHistoryName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/targets/", false);
            uri.AppendPath(targetName, true);
            uri.AppendPath("/solutions/", false);
            uri.AppendPath(solutionName, true);
            uri.AppendPath("/instances/", false);
            uri.AppendPath(instanceName, true);
            uri.AppendPath("/histories/", false);
            uri.AppendPath(instanceHistoryName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Get InstanceHistory Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="targetName"> Name of the target. </param>
        /// <param name="solutionName"> Name of the solution. </param>
        /// <param name="instanceName"> Name of the instance. </param>
        /// <param name="instanceHistoryName"> Name of the instance history. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/>, <paramref name="solutionName"/>, <paramref name="instanceName"/> or <paramref name="instanceHistoryName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/>, <paramref name="solutionName"/>, <paramref name="instanceName"/> or <paramref name="instanceHistoryName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<EdgeDeploymentInstanceHistoryData>> GetAsync(string subscriptionId, string resourceGroupName, string targetName, string solutionName, string instanceName, string instanceHistoryName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(targetName, nameof(targetName));
            Argument.AssertNotNullOrEmpty(solutionName, nameof(solutionName));
            Argument.AssertNotNullOrEmpty(instanceName, nameof(instanceName));
            Argument.AssertNotNullOrEmpty(instanceHistoryName, nameof(instanceHistoryName));

            using var message = CreateGetRequest(subscriptionId, resourceGroupName, targetName, solutionName, instanceName, instanceHistoryName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EdgeDeploymentInstanceHistoryData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = EdgeDeploymentInstanceHistoryData.DeserializeEdgeDeploymentInstanceHistoryData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((EdgeDeploymentInstanceHistoryData)null, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Get InstanceHistory Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="targetName"> Name of the target. </param>
        /// <param name="solutionName"> Name of the solution. </param>
        /// <param name="instanceName"> Name of the instance. </param>
        /// <param name="instanceHistoryName"> Name of the instance history. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/>, <paramref name="solutionName"/>, <paramref name="instanceName"/> or <paramref name="instanceHistoryName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/>, <paramref name="solutionName"/>, <paramref name="instanceName"/> or <paramref name="instanceHistoryName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<EdgeDeploymentInstanceHistoryData> Get(string subscriptionId, string resourceGroupName, string targetName, string solutionName, string instanceName, string instanceHistoryName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(targetName, nameof(targetName));
            Argument.AssertNotNullOrEmpty(solutionName, nameof(solutionName));
            Argument.AssertNotNullOrEmpty(instanceName, nameof(instanceName));
            Argument.AssertNotNullOrEmpty(instanceHistoryName, nameof(instanceHistoryName));

            using var message = CreateGetRequest(subscriptionId, resourceGroupName, targetName, solutionName, instanceName, instanceHistoryName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EdgeDeploymentInstanceHistoryData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = EdgeDeploymentInstanceHistoryData.DeserializeEdgeDeploymentInstanceHistoryData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((EdgeDeploymentInstanceHistoryData)null, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateListByInstanceRequestUri(string subscriptionId, string resourceGroupName, string targetName, string solutionName, string instanceName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/targets/", false);
            uri.AppendPath(targetName, true);
            uri.AppendPath("/solutions/", false);
            uri.AppendPath(solutionName, true);
            uri.AppendPath("/instances/", false);
            uri.AppendPath(instanceName, true);
            uri.AppendPath("/histories", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateListByInstanceRequest(string subscriptionId, string resourceGroupName, string targetName, string solutionName, string instanceName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/targets/", false);
            uri.AppendPath(targetName, true);
            uri.AppendPath("/solutions/", false);
            uri.AppendPath(solutionName, true);
            uri.AppendPath("/instances/", false);
            uri.AppendPath(instanceName, true);
            uri.AppendPath("/histories", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> List InstanceHistory Resources. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="targetName"> Name of the target. </param>
        /// <param name="solutionName"> Name of the solution. </param>
        /// <param name="instanceName"> Name of the instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/>, <paramref name="solutionName"/> or <paramref name="instanceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/>, <paramref name="solutionName"/> or <paramref name="instanceName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<InstanceHistoryListResult>> ListByInstanceAsync(string subscriptionId, string resourceGroupName, string targetName, string solutionName, string instanceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(targetName, nameof(targetName));
            Argument.AssertNotNullOrEmpty(solutionName, nameof(solutionName));
            Argument.AssertNotNullOrEmpty(instanceName, nameof(instanceName));

            using var message = CreateListByInstanceRequest(subscriptionId, resourceGroupName, targetName, solutionName, instanceName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        InstanceHistoryListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = InstanceHistoryListResult.DeserializeInstanceHistoryListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> List InstanceHistory Resources. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="targetName"> Name of the target. </param>
        /// <param name="solutionName"> Name of the solution. </param>
        /// <param name="instanceName"> Name of the instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/>, <paramref name="solutionName"/> or <paramref name="instanceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/>, <paramref name="solutionName"/> or <paramref name="instanceName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<InstanceHistoryListResult> ListByInstance(string subscriptionId, string resourceGroupName, string targetName, string solutionName, string instanceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(targetName, nameof(targetName));
            Argument.AssertNotNullOrEmpty(solutionName, nameof(solutionName));
            Argument.AssertNotNullOrEmpty(instanceName, nameof(instanceName));

            using var message = CreateListByInstanceRequest(subscriptionId, resourceGroupName, targetName, solutionName, instanceName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        InstanceHistoryListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = InstanceHistoryListResult.DeserializeInstanceHistoryListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateListByInstanceNextPageRequestUri(string nextLink, string subscriptionId, string resourceGroupName, string targetName, string solutionName, string instanceName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            return uri;
        }

        internal HttpMessage CreateListByInstanceNextPageRequest(string nextLink, string subscriptionId, string resourceGroupName, string targetName, string solutionName, string instanceName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> List InstanceHistory Resources. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="targetName"> Name of the target. </param>
        /// <param name="solutionName"> Name of the solution. </param>
        /// <param name="instanceName"> Name of the instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/>, <paramref name="solutionName"/> or <paramref name="instanceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/>, <paramref name="solutionName"/> or <paramref name="instanceName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<InstanceHistoryListResult>> ListByInstanceNextPageAsync(string nextLink, string subscriptionId, string resourceGroupName, string targetName, string solutionName, string instanceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(targetName, nameof(targetName));
            Argument.AssertNotNullOrEmpty(solutionName, nameof(solutionName));
            Argument.AssertNotNullOrEmpty(instanceName, nameof(instanceName));

            using var message = CreateListByInstanceNextPageRequest(nextLink, subscriptionId, resourceGroupName, targetName, solutionName, instanceName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        InstanceHistoryListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = InstanceHistoryListResult.DeserializeInstanceHistoryListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> List InstanceHistory Resources. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="targetName"> Name of the target. </param>
        /// <param name="solutionName"> Name of the solution. </param>
        /// <param name="instanceName"> Name of the instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/>, <paramref name="solutionName"/> or <paramref name="instanceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/>, <paramref name="solutionName"/> or <paramref name="instanceName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<InstanceHistoryListResult> ListByInstanceNextPage(string nextLink, string subscriptionId, string resourceGroupName, string targetName, string solutionName, string instanceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(targetName, nameof(targetName));
            Argument.AssertNotNullOrEmpty(solutionName, nameof(solutionName));
            Argument.AssertNotNullOrEmpty(instanceName, nameof(instanceName));

            using var message = CreateListByInstanceNextPageRequest(nextLink, subscriptionId, resourceGroupName, targetName, solutionName, instanceName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        InstanceHistoryListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = InstanceHistoryListResult.DeserializeInstanceHistoryListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/RestOperations/InstancesRestOperations.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    internal partial class InstancesRestOperations
    {
        private readonly TelemetryDetails _userAgent;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> Initializes a new instance of InstancesRestOperations. </summary>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="applicationId"> The application id to use for user agent. </param>
        /// <param name="endpoint"> Service host. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="pipeline"/> or <paramref name="apiVersion"/> is null. </exception>
        public InstancesRestOperations(HttpPipeline pipeline, string applicationId, Uri endpoint = null, string apiVersion = default)
        {
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _endpoint = endpoint ?? new Uri("https://management.azure.com");
            _apiVersion = apiVersion ?? "2025-06-01";
            _userAgent = new TelemetryDetails(GetType().Assembly, applicationId);
        }

        internal RequestUriBuilder CreateGetRequestUri(string subscriptionId, string resourceGroupName, string targetName, string solutionName, string instanceName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/targets/", false);
            uri.AppendPath(targetName, true);
            uri.AppendPath("/solutions/", false);
            uri.AppendPath(solutionName, true);
            uri.AppendPath("/instances/", false);
            uri.AppendPath(instanceName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateGetRequest(string subscriptionId, string resourceGroupName, string targetName, string solutionName, string instanceName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/targets/", false);
            uri.AppendPath(targetName, true);
            uri.AppendPath("/solutions/", false);
            uri.AppendPath(solutionName, true);
            uri.AppendPath("/instances/", false);
            uri.AppendPath(instanceName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Get Instance Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="targetName"> Name of the target. </param>
        /// <param name="solutionName"> Name of the solution. </param>
        /// <param name="instanceName"> Name of the instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/>, <paramref name="solutionName"/> or <paramref name="instanceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/>, <paramref name="solutionName"/> or <paramref name="instanceName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<EdgeDeploymentInstanceData>> GetAsync(string subscriptionId, string resourceGroupName, string targetName, string solutionName, string instanceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(targetName, nameof(targetName));
            Argument.AssertNotNullOrEmpty(solutionName, nameof(solutionName));
            Argument.AssertNotNullOrEmpty(instanceName, nameof(instanceName));

            using var message = CreateGetRequest(subscriptionId, resourceGroupName, targetName, solutionName, instanceName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EdgeDeploymentInstanceData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = EdgeDeploymentInstanceData.DeserializeEdgeDeploymentInstanceData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((EdgeDeploymentInstanceData)null, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Get Instance Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="targetName"> Name of the target. </param>
        /// <param name="solutionName"> Name of the solution. </param>
        /// <param name="instanceName"> Name of the instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/>, <paramref name="solutionName"/> or <paramref name="instanceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/>, <paramref name="solutionName"/> or <paramref name="instanceName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<EdgeDeploymentInstanceData> Get(string subscriptionId, string resourceGroupName, string targetName, string solutionName, string instanceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(targetName, nameof(targetName));
            Argument.AssertNotNullOrEmpty(solutionName, nameof(solutionName));
            Argument.AssertNotNullOrEmpty(instanceName, nameof(instanceName));

            using var message = CreateGetRequest(subscriptionId, resourceGroupName, targetName, solutionName, instanceName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EdgeDeploymentInstanceData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = EdgeDeploymentInstanceData.DeserializeEdgeDeploymentInstanceData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((EdgeDeploymentInstanceData)null, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateCreateOrUpdateRequestUri(string subscriptionId, string resourceGroupName, string targetName, string solutionName, string instanceName, EdgeDeploymentInstanceData data)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/targets/", false);
            uri.AppendPath(targetName, true);
            uri.AppendPath("/solutions/", false);
            uri.AppendPath(solutionName, true);
            uri.AppendPath("/instances/", false);
            uri.AppendPath(instanceName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateCreateOrUpdateRequest(string subscriptionId, string resourceGroupName, string targetName, string solutionName, string instanceName, EdgeDeploymentInstanceData data)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/targets/", false);
            uri.AppendPath(targetName, true);
            uri.AppendPath("/solutions/", false);
            uri.AppendPath(solutionName, true);
            uri.AppendPath("/instances/", false);
            uri.AppendPath(instanceName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(data, ModelSerializationExtensions.WireOptions);
            request.Content = content;
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Create or update Instance Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="targetName"> Name of the target. </param>
        /// <param name="solutionName"> Name of the solution. </param>
        /// <param name="instanceName"> Name of the instance. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/>, <paramref name="solutionName"/>, <paramref name="instanceName"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/>, <paramref name="solutionName"/> or <paramref name="instanceName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response> CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string targetName, string solutionName, string instanceName, EdgeDeploymentInstanceData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(targetName, nameof(targetName));
            Argument.AssertNotNullOrEmpty(solutionName, nameof(solutionName));
            Argument.AssertNotNullOrEmpty(instanceName, nameof(instanceName));
            Argument.AssertNotNull(data, nameof(data));

            using var message = CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, targetName, solutionName, instanceName, data);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Create or update Instance Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="targetName"> Name of the target. </param>
        /// <param name="solutionName"> Name of the solution. </param>
        /// <param name="instanceName"> Name of the instance. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/>, <paramref name="solutionName"/>, <paramref name="instanceName"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/>, <paramref name="solutionName"/> or <paramref name="instanceName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response CreateOrUpdate(string subscriptionId, string resourceGroupName, string targetName, string solutionName, string instanceName, EdgeDeploymentInstanceData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(targetName, nameof(targetName));
            Argument.AssertNotNullOrEmpty(solutionName, nameof(solutionName));
            Argument.AssertNotNullOrEmpty(instanceName, nameof(instanceName));
            Argument.AssertNotNull(data, nameof(data));

            using var message = CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, targetName, solutionName, instanceName, data);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateUpdateRequestUri(string subscriptionId, string resourceGroupName, string targetName, string solutionName, string instanceName, EdgeDeploymentInstanceData data)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/targets/", false);
            uri.AppendPath(targetName, true);
            uri.AppendPath("/solutions/", false);
            uri.AppendPath(solutionName, true);
            uri.AppendPath("/instances/", false);
            uri.AppendPath(instanceName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateUpdateRequest(string subscriptionId, string resourceGroupName, string targetName, string solutionName, string instanceName, EdgeDeploymentInstanceData data)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/targets/", false);
            uri.AppendPath(targetName, true);
            uri.AppendPath("/solutions/", false);
            uri.AppendPath(solutionName, true);
            uri.AppendPath("/instances/", false);
            uri.AppendPath(instanceName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(data, ModelSerializationExtensions.WireOptions);
            request.Content = content;
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Update an Instance Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="targetName"> Name of the target. </param>
        /// <param name="solutionName"> Name of the solution. </param>
        /// <param name="instanceName"> Name of the instance. </param>
        /// <param name="data"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/>, <paramref name="solutionName"/>, <paramref name="instanceName"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/>, <paramref name="solutionName"/> or <paramref name="instanceName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response> UpdateAsync(string subscriptionId, string resourceGroupName, string targetName, string solutionName, string instanceName, EdgeDeploymentInstanceData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(targetName, nameof(targetName));
            Argument.AssertNotNullOrEmpty(solutionName, nameof(solutionName));
            Argument.AssertNotNullOrEmpty(instanceName, nameof(instanceName));
            Argument.AssertNotNull(data, nameof(data));

            using var message = CreateUpdateRequest(subscriptionId, resourceGroupName, targetName, solutionName, instanceName, data);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 202:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Update an Instance Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="targetName"> Name of the target. </param>
        /// <param name="solutionName"> Name of the solution. </param>
        /// <param name="instanceName"> Name of the instance. </param>
        /// <param name="data"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/>, <paramref name="solutionName"/>, <paramref name="instanceName"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/>, <paramref name="solutionName"/> or <paramref name="instanceName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response Update(string subscriptionId, string resourceGroupName, string targetName, string solutionName, string instanceName, EdgeDeploymentInstanceData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(targetName, nameof(targetName));
            Argument.AssertNotNullOrEmpty(solutionName, nameof(solutionName));
            Argument.AssertNotNullOrEmpty(instanceName, nameof(instanceName));
            Argument.AssertNotNull(data, nameof(data));

            using var message = CreateUpdateRequest(subscriptionId, resourceGroupName, targetName, solutionName, instanceName, data);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 202:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateDeleteRequestUri(string subscriptionId, string resourceGroupName, string targetName, string solutionName, string instanceName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/targets/", false);
            uri.AppendPath(targetName, true);
            uri.AppendPath("/solutions/", false);
            uri.AppendPath(solutionName, true);
            uri.AppendPath("/instances/", false);
            uri.AppendPath(instanceName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateDeleteRequest(string subscriptionId, string resourceGroupName, string targetName, string solutionName, string instanceName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/targets/", false);
            uri.AppendPath(targetName, true);
            uri.AppendPath("/solutions/", false);
            uri.AppendPath(solutionName, true);
            uri.AppendPath("/instances/", false);
            uri.AppendPath(instanceName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Delete Instance Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="targetName"> Name of the target. </param>
        /// <param name="solutionName"> Name of the solution. </param>
        /// <param name="instanceName"> Name of the instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/>, <paramref name="solutionName"/> or <paramref name="instanceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/>, <paramref name="solutionName"/> or <paramref name="instanceName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response> DeleteAsync(string subscriptionId, string resourceGroupName, string targetName, string solutionName, string instanceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(targetName, nameof(targetName));
            Argument.AssertNotNullOrEmpty(solutionName, nameof(solutionName));
            Argument.AssertNotNullOrEmpty(instanceName, nameof(instanceName));

            using var message = CreateDeleteRequest(subscriptionId, resourceGroupName, targetName, solutionName, instanceName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                case 204:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Delete Instance Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="targetName"> Name of the target. </param>
        /// <param name="solutionName"> Name of the solution. </param>
        /// <param name="instanceName"> Name of the instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/>, <paramref name="solutionName"/> or <paramref name="instanceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/>, <paramref name="solutionName"/> or <paramref name="instanceName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response Delete(string subscriptionId, string resourceGroupName, string targetName, string solutionName, string instanceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(targetName, nameof(targetName));
            Argument.AssertNotNullOrEmpty(solutionName, nameof(solutionName));
            Argument.AssertNotNullOrEmpty(instanceName, nameof(instanceName));

            using var message = CreateDeleteRequest(subscriptionId, resourceGroupName, targetName, solutionName, instanceName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                case 204:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateListBySolutionRequestUri(string subscriptionId, string resourceGroupName, string targetName, string solutionName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/targets/", false);
            uri.AppendPath(targetName, true);
            uri.AppendPath("/solutions/", false);
            uri.AppendPath(solutionName, true);
            uri.AppendPath("/instances", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateListBySolutionRequest(string subscriptionId, string resourceGroupName, string targetName, string solutionName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/targets/", false);
            uri.AppendPath(targetName, true);
            uri.AppendPath("/solutions/", false);
            uri.AppendPath(solutionName, true);
            uri.AppendPath("/instances", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> List Instance Resources. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="targetName"> Name of the target. </param>
        /// <param name="solutionName"> Name of the solution. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/> or <paramref name="solutionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/> or <paramref name="solutionName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<InstanceListResult>> ListBySolutionAsync(string subscriptionId, string resourceGroupName, string targetName, string solutionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(targetName, nameof(targetName));
            Argument.AssertNotNullOrEmpty(solutionName, nameof(solutionName));

            using var message = CreateListBySolutionRequest(subscriptionId, resourceGroupName, targetName, solutionName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        InstanceListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = InstanceListResult.DeserializeInstanceListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> List Instance Resources. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="targetName"> Name of the target. </param>
        /// <param name="solutionName"> Name of the solution. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/> or <paramref name="solutionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/> or <paramref name="solutionName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<InstanceListResult> ListBySolution(string subscriptionId, string resourceGroupName, string targetName, string solutionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(targetName, nameof(targetName));
            Argument.AssertNotNullOrEmpty(solutionName, nameof(solutionName));

            using var message = CreateListBySolutionRequest(subscriptionId, resourceGroupName, targetName, solutionName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        InstanceListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = InstanceListResult.DeserializeInstanceListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateListBySolutionNextPageRequestUri(string nextLink, string subscriptionId, string resourceGroupName, string targetName, string solutionName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            return uri;
        }

        internal HttpMessage CreateListBySolutionNextPageRequest(string nextLink, string subscriptionId, string resourceGroupName, string targetName, string solutionName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> List Instance Resources. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="targetName"> Name of the target. </param>
        /// <param name="solutionName"> Name of the solution. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/> or <paramref name="solutionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/> or <paramref name="solutionName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<InstanceListResult>> ListBySolutionNextPageAsync(string nextLink, string subscriptionId, string resourceGroupName, string targetName, string solutionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(targetName, nameof(targetName));
            Argument.AssertNotNullOrEmpty(solutionName, nameof(solutionName));

            using var message = CreateListBySolutionNextPageRequest(nextLink, subscriptionId, resourceGroupName, targetName, solutionName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        InstanceListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = InstanceListResult.DeserializeInstanceListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> List Instance Resources. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="targetName"> Name of the target. </param>
        /// <param name="solutionName"> Name of the solution. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/> or <paramref name="solutionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/> or <paramref name="solutionName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<InstanceListResult> ListBySolutionNextPage(string nextLink, string subscriptionId, string resourceGroupName, string targetName, string solutionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(targetName, nameof(targetName));
            Argument.AssertNotNullOrEmpty(solutionName, nameof(solutionName));

            using var message = CreateListBySolutionNextPageRequest(nextLink, subscriptionId, resourceGroupName, targetName, solutionName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        InstanceListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = InstanceListResult.DeserializeInstanceListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/RestOperations/JobsRestOperations.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    internal partial class JobsRestOperations
    {
        private readonly TelemetryDetails _userAgent;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> Initializes a new instance of JobsRestOperations. </summary>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="applicationId"> The application id to use for user agent. </param>
        /// <param name="endpoint"> Service host. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="pipeline"/> or <paramref name="apiVersion"/> is null. </exception>
        public JobsRestOperations(HttpPipeline pipeline, string applicationId, Uri endpoint = null, string apiVersion = default)
        {
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _endpoint = endpoint ?? new Uri("https://management.azure.com");
            _apiVersion = apiVersion ?? "2025-06-01";
            _userAgent = new TelemetryDetails(GetType().Assembly, applicationId);
        }

        internal RequestUriBuilder CreateGetRequestUri(string resourceUri, string jobName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/", false);
            uri.AppendPath(resourceUri, false);
            uri.AppendPath("/providers/Microsoft.Edge/jobs/", false);
            uri.AppendPath(jobName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateGetRequest(string resourceUri, string jobName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/", false);
            uri.AppendPath(resourceUri, false);
            uri.AppendPath("/providers/Microsoft.Edge/jobs/", false);
            uri.AppendPath(jobName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Get a Job resource. </summary>
        /// <param name="resourceUri"> The fully qualified Azure Resource manager identifier of the resource. </param>
        /// <param name="jobName"> The name of the Job. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceUri"/> or <paramref name="jobName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<EdgeJobData>> GetAsync(string resourceUri, string jobName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceUri, nameof(resourceUri));
            Argument.AssertNotNullOrEmpty(jobName, nameof(jobName));

            using var message = CreateGetRequest(resourceUri, jobName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EdgeJobData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = EdgeJobData.DeserializeEdgeJobData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((EdgeJobData)null, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Get a Job resource. </summary>
        /// <param name="resourceUri"> The fully qualified Azure Resource manager identifier of the resource. </param>
        /// <param name="jobName"> The name of the Job. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceUri"/> or <paramref name="jobName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<EdgeJobData> Get(string resourceUri, string jobName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceUri, nameof(resourceUri));
            Argument.AssertNotNullOrEmpty(jobName, nameof(jobName));

            using var message = CreateGetRequest(resourceUri, jobName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EdgeJobData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = EdgeJobData.DeserializeEdgeJobData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((EdgeJobData)null, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateListByTargetRequestUri(string resourceUri)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/", false);
            uri.AppendPath(resourceUri, false);
            uri.AppendPath("/providers/Microsoft.Edge/jobs", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateListByTargetRequest(string resourceUri)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/", false);
            uri.AppendPath(resourceUri, false);
            uri.AppendPath("/providers/Microsoft.Edge/jobs", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> List Jobs by parent resource. </summary>
        /// <param name="resourceUri"> The fully qualified Azure Resource manager identifier of the resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceUri"/> is null. </exception>
        public async Task<Response<JobListResult>> ListByTargetAsync(string resourceUri, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceUri, nameof(resourceUri));

            using var message = CreateListByTargetRequest(resourceUri);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        JobListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = JobListResult.DeserializeJobListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> List Jobs by parent resource. </summary>
        /// <param name="resourceUri"> The fully qualified Azure Resource manager identifier of the resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceUri"/> is null. </exception>
        public Response<JobListResult> ListByTarget(string resourceUri, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceUri, nameof(resourceUri));

            using var message = CreateListByTargetRequest(resourceUri);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        JobListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = JobListResult.DeserializeJobListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateListByTargetNextPageRequestUri(string nextLink, string resourceUri)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            return uri;
        }

        internal HttpMessage CreateListByTargetNextPageRequest(string nextLink, string resourceUri)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> List Jobs by parent resource. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="resourceUri"> The fully qualified Azure Resource manager identifier of the resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="resourceUri"/> is null. </exception>
        public async Task<Response<JobListResult>> ListByTargetNextPageAsync(string nextLink, string resourceUri, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));
            Argument.AssertNotNull(resourceUri, nameof(resourceUri));

            using var message = CreateListByTargetNextPageRequest(nextLink, resourceUri);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        JobListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = JobListResult.DeserializeJobListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> List Jobs by parent resource. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="resourceUri"> The fully qualified Azure Resource manager identifier of the resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="resourceUri"/> is null. </exception>
        public Response<JobListResult> ListByTargetNextPage(string nextLink, string resourceUri, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));
            Argument.AssertNotNull(resourceUri, nameof(resourceUri));

            using var message = CreateListByTargetNextPageRequest(nextLink, resourceUri);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        JobListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = JobListResult.DeserializeJobListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/RestOperations/SchemaReferencesRestOperations.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    internal partial class SchemaReferencesRestOperations
    {
        private readonly TelemetryDetails _userAgent;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> Initializes a new instance of SchemaReferencesRestOperations. </summary>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="applicationId"> The application id to use for user agent. </param>
        /// <param name="endpoint"> Service host. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="pipeline"/> or <paramref name="apiVersion"/> is null. </exception>
        public SchemaReferencesRestOperations(HttpPipeline pipeline, string applicationId, Uri endpoint = null, string apiVersion = default)
        {
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _endpoint = endpoint ?? new Uri("https://management.azure.com");
            _apiVersion = apiVersion ?? "2025-06-01";
            _userAgent = new TelemetryDetails(GetType().Assembly, applicationId);
        }

        internal RequestUriBuilder CreateGetRequestUri(string resourceUri, string schemaReferenceName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/", false);
            uri.AppendPath(resourceUri, false);
            uri.AppendPath("/providers/Microsoft.Edge/schemaReferences/", false);
            uri.AppendPath(schemaReferenceName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateGetRequest(string resourceUri, string schemaReferenceName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/", false);
            uri.AppendPath(resourceUri, false);
            uri.AppendPath("/providers/Microsoft.Edge/schemaReferences/", false);
            uri.AppendPath(schemaReferenceName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Get a Schema Reference Resource. </summary>
        /// <param name="resourceUri"> The fully qualified Azure Resource manager identifier of the resource. </param>
        /// <param name="schemaReferenceName"> The name of the SchemaReference. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceUri"/> or <paramref name="schemaReferenceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="schemaReferenceName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<EdgeSchemaReferenceData>> GetAsync(string resourceUri, string schemaReferenceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceUri, nameof(resourceUri));
            Argument.AssertNotNullOrEmpty(schemaReferenceName, nameof(schemaReferenceName));

            using var message = CreateGetRequest(resourceUri, schemaReferenceName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EdgeSchemaReferenceData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = EdgeSchemaReferenceData.DeserializeEdgeSchemaReferenceData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((EdgeSchemaReferenceData)null, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Get a Schema Reference Resource. </summary>
        /// <param name="resourceUri"> The fully qualified Azure Resource manager identifier of the resource. </param>
        /// <param name="schemaReferenceName"> The name of the SchemaReference. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceUri"/> or <paramref name="schemaReferenceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="schemaReferenceName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<EdgeSchemaReferenceData> Get(string resourceUri, string schemaReferenceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceUri, nameof(resourceUri));
            Argument.AssertNotNullOrEmpty(schemaReferenceName, nameof(schemaReferenceName));

            using var message = CreateGetRequest(resourceUri, schemaReferenceName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EdgeSchemaReferenceData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = EdgeSchemaReferenceData.DeserializeEdgeSchemaReferenceData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((EdgeSchemaReferenceData)null, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateListByResourceGroupRequestUri(string resourceUri)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/", false);
            uri.AppendPath(resourceUri, false);
            uri.AppendPath("/providers/Microsoft.Edge/schemaReferences", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateListByResourceGroupRequest(string resourceUri)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/", false);
            uri.AppendPath(resourceUri, false);
            uri.AppendPath("/providers/Microsoft.Edge/schemaReferences", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> List by specified resource group. </summary>
        /// <param name="resourceUri"> The fully qualified Azure Resource manager identifier of the resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceUri"/> is null. </exception>
        public async Task<Response<SchemaReferenceListResult>> ListByResourceGroupAsync(string resourceUri, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceUri, nameof(resourceUri));

            using var message = CreateListByResourceGroupRequest(resourceUri);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SchemaReferenceListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = SchemaReferenceListResult.DeserializeSchemaReferenceListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> List by specified resource group. </summary>
        /// <param name="resourceUri"> The fully qualified Azure Resource manager identifier of the resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceUri"/> is null. </exception>
        public Response<SchemaReferenceListResult> ListByResourceGroup(string resourceUri, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceUri, nameof(resourceUri));

            using var message = CreateListByResourceGroupRequest(resourceUri);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SchemaReferenceListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = SchemaReferenceListResult.DeserializeSchemaReferenceListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateListByResourceGroupNextPageRequestUri(string nextLink, string resourceUri)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            return uri;
        }

        internal HttpMessage CreateListByResourceGroupNextPageRequest(string nextLink, string resourceUri)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> List by specified resource group. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="resourceUri"> The fully qualified Azure Resource manager identifier of the resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="resourceUri"/> is null. </exception>
        public async Task<Response<SchemaReferenceListResult>> ListByResourceGroupNextPageAsync(string nextLink, string resourceUri, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));
            Argument.AssertNotNull(resourceUri, nameof(resourceUri));

            using var message = CreateListByResourceGroupNextPageRequest(nextLink, resourceUri);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SchemaReferenceListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = SchemaReferenceListResult.DeserializeSchemaReferenceListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> List by specified resource group. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="resourceUri"> The fully qualified Azure Resource manager identifier of the resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="resourceUri"/> is null. </exception>
        public Response<SchemaReferenceListResult> ListByResourceGroupNextPage(string nextLink, string resourceUri, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));
            Argument.AssertNotNull(resourceUri, nameof(resourceUri));

            using var message = CreateListByResourceGroupNextPageRequest(nextLink, resourceUri);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SchemaReferenceListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = SchemaReferenceListResult.DeserializeSchemaReferenceListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/RestOperations/SchemaVersionsRestOperations.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    internal partial class SchemaVersionsRestOperations
    {
        private readonly TelemetryDetails _userAgent;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> Initializes a new instance of SchemaVersionsRestOperations. </summary>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="applicationId"> The application id to use for user agent. </param>
        /// <param name="endpoint"> Service host. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="pipeline"/> or <paramref name="apiVersion"/> is null. </exception>
        public SchemaVersionsRestOperations(HttpPipeline pipeline, string applicationId, Uri endpoint = null, string apiVersion = default)
        {
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _endpoint = endpoint ?? new Uri("https://management.azure.com");
            _apiVersion = apiVersion ?? "2025-06-01";
            _userAgent = new TelemetryDetails(GetType().Assembly, applicationId);
        }

        internal RequestUriBuilder CreateGetRequestUri(string subscriptionId, string resourceGroupName, string schemaName, string schemaVersionName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/schemas/", false);
            uri.AppendPath(schemaName, true);
            uri.AppendPath("/versions/", false);
            uri.AppendPath(schemaVersionName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateGetRequest(string subscriptionId, string resourceGroupName, string schemaName, string schemaVersionName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/schemas/", false);
            uri.AppendPath(schemaName, true);
            uri.AppendPath("/versions/", false);
            uri.AppendPath(schemaVersionName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Get a Schema Version Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="schemaName"> The name of the Schema. </param>
        /// <param name="schemaVersionName"> The name of the SchemaVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="schemaName"/> or <paramref name="schemaVersionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="schemaName"/> or <paramref name="schemaVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<EdgeSchemaVersionData>> GetAsync(string subscriptionId, string resourceGroupName, string schemaName, string schemaVersionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(schemaName, nameof(schemaName));
            Argument.AssertNotNullOrEmpty(schemaVersionName, nameof(schemaVersionName));

            using var message = CreateGetRequest(subscriptionId, resourceGroupName, schemaName, schemaVersionName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EdgeSchemaVersionData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = EdgeSchemaVersionData.DeserializeEdgeSchemaVersionData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((EdgeSchemaVersionData)null, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Get a Schema Version Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="schemaName"> The name of the Schema. </param>
        /// <param name="schemaVersionName"> The name of the SchemaVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="schemaName"/> or <paramref name="schemaVersionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="schemaName"/> or <paramref name="schemaVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<EdgeSchemaVersionData> Get(string subscriptionId, string resourceGroupName, string schemaName, string schemaVersionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(schemaName, nameof(schemaName));
            Argument.AssertNotNullOrEmpty(schemaVersionName, nameof(schemaVersionName));

            using var message = CreateGetRequest(subscriptionId, resourceGroupName, schemaName, schemaVersionName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EdgeSchemaVersionData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = EdgeSchemaVersionData.DeserializeEdgeSchemaVersionData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((EdgeSchemaVersionData)null, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateCreateOrUpdateRequestUri(string subscriptionId, string resourceGroupName, string schemaName, string schemaVersionName, EdgeSchemaVersionData data)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/schemas/", false);
            uri.AppendPath(schemaName, true);
            uri.AppendPath("/versions/", false);
            uri.AppendPath(schemaVersionName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateCreateOrUpdateRequest(string subscriptionId, string resourceGroupName, string schemaName, string schemaVersionName, EdgeSchemaVersionData data)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/schemas/", false);
            uri.AppendPath(schemaName, true);
            uri.AppendPath("/versions/", false);
            uri.AppendPath(schemaVersionName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(data, ModelSerializationExtensions.WireOptions);
            request.Content = content;
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Create or update a Schema Version Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="schemaName"> The name of the Schema. </param>
        /// <param name="schemaVersionName"> The name of the SchemaVersion. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="schemaName"/>, <paramref name="schemaVersionName"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="schemaName"/> or <paramref name="schemaVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response> CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string schemaName, string schemaVersionName, EdgeSchemaVersionData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(schemaName, nameof(schemaName));
            Argument.AssertNotNullOrEmpty(schemaVersionName, nameof(schemaVersionName));
            Argument.AssertNotNull(data, nameof(data));

            using var message = CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, schemaName, schemaVersionName, data);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Create or update a Schema Version Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="schemaName"> The name of the Schema. </param>
        /// <param name="schemaVersionName"> The name of the SchemaVersion. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="schemaName"/>, <paramref name="schemaVersionName"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="schemaName"/> or <paramref name="schemaVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response CreateOrUpdate(string subscriptionId, string resourceGroupName, string schemaName, string schemaVersionName, EdgeSchemaVersionData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(schemaName, nameof(schemaName));
            Argument.AssertNotNullOrEmpty(schemaVersionName, nameof(schemaVersionName));
            Argument.AssertNotNull(data, nameof(data));

            using var message = CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, schemaName, schemaVersionName, data);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateUpdateRequestUri(string subscriptionId, string resourceGroupName, string schemaName, string schemaVersionName, EdgeSchemaVersionData data)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/schemas/", false);
            uri.AppendPath(schemaName, true);
            uri.AppendPath("/versions/", false);
            uri.AppendPath(schemaVersionName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateUpdateRequest(string subscriptionId, string resourceGroupName, string schemaName, string schemaVersionName, EdgeSchemaVersionData data)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/schemas/", false);
            uri.AppendPath(schemaName, true);
            uri.AppendPath("/versions/", false);
            uri.AppendPath(schemaVersionName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(data, ModelSerializationExtensions.WireOptions);
            request.Content = content;
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> update a Schema Version Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="schemaName"> The name of the Schema. </param>
        /// <param name="schemaVersionName"> The name of the SchemaVersion. </param>
        /// <param name="data"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="schemaName"/>, <paramref name="schemaVersionName"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="schemaName"/> or <paramref name="schemaVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<EdgeSchemaVersionData>> UpdateAsync(string subscriptionId, string resourceGroupName, string schemaName, string schemaVersionName, EdgeSchemaVersionData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(schemaName, nameof(schemaName));
            Argument.AssertNotNullOrEmpty(schemaVersionName, nameof(schemaVersionName));
            Argument.AssertNotNull(data, nameof(data));

            using var message = CreateUpdateRequest(subscriptionId, resourceGroupName, schemaName, schemaVersionName, data);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EdgeSchemaVersionData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = EdgeSchemaVersionData.DeserializeEdgeSchemaVersionData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> update a Schema Version Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="schemaName"> The name of the Schema. </param>
        /// <param name="schemaVersionName"> The name of the SchemaVersion. </param>
        /// <param name="data"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="schemaName"/>, <paramref name="schemaVersionName"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="schemaName"/> or <paramref name="schemaVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<EdgeSchemaVersionData> Update(string subscriptionId, string resourceGroupName, string schemaName, string schemaVersionName, EdgeSchemaVersionData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(schemaName, nameof(schemaName));
            Argument.AssertNotNullOrEmpty(schemaVersionName, nameof(schemaVersionName));
            Argument.AssertNotNull(data, nameof(data));

            using var message = CreateUpdateRequest(subscriptionId, resourceGroupName, schemaName, schemaVersionName, data);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EdgeSchemaVersionData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = EdgeSchemaVersionData.DeserializeEdgeSchemaVersionData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateDeleteRequestUri(string subscriptionId, string resourceGroupName, string schemaName, string schemaVersionName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/schemas/", false);
            uri.AppendPath(schemaName, true);
            uri.AppendPath("/versions/", false);
            uri.AppendPath(schemaVersionName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateDeleteRequest(string subscriptionId, string resourceGroupName, string schemaName, string schemaVersionName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/schemas/", false);
            uri.AppendPath(schemaName, true);
            uri.AppendPath("/versions/", false);
            uri.AppendPath(schemaVersionName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Delete a Schema Version Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="schemaName"> The name of the Schema. </param>
        /// <param name="schemaVersionName"> The name of the SchemaVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="schemaName"/> or <paramref name="schemaVersionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="schemaName"/> or <paramref name="schemaVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response> DeleteAsync(string subscriptionId, string resourceGroupName, string schemaName, string schemaVersionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(schemaName, nameof(schemaName));
            Argument.AssertNotNullOrEmpty(schemaVersionName, nameof(schemaVersionName));

            using var message = CreateDeleteRequest(subscriptionId, resourceGroupName, schemaName, schemaVersionName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                case 204:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Delete a Schema Version Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="schemaName"> The name of the Schema. </param>
        /// <param name="schemaVersionName"> The name of the SchemaVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="schemaName"/> or <paramref name="schemaVersionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="schemaName"/> or <paramref name="schemaVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response Delete(string subscriptionId, string resourceGroupName, string schemaName, string schemaVersionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(schemaName, nameof(schemaName));
            Argument.AssertNotNullOrEmpty(schemaVersionName, nameof(schemaVersionName));

            using var message = CreateDeleteRequest(subscriptionId, resourceGroupName, schemaName, schemaVersionName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                case 204:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateListBySchemaRequestUri(string subscriptionId, string resourceGroupName, string schemaName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/schemas/", false);
            uri.AppendPath(schemaName, true);
            uri.AppendPath("/versions", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateListBySchemaRequest(string subscriptionId, string resourceGroupName, string schemaName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/schemas/", false);
            uri.AppendPath(schemaName, true);
            uri.AppendPath("/versions", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> List by specified resource group. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="schemaName"> The name of the Schema. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="schemaName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="schemaName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<SchemaVersionListResult>> ListBySchemaAsync(string subscriptionId, string resourceGroupName, string schemaName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(schemaName, nameof(schemaName));

            using var message = CreateListBySchemaRequest(subscriptionId, resourceGroupName, schemaName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SchemaVersionListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = SchemaVersionListResult.DeserializeSchemaVersionListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> List by specified resource group. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="schemaName"> The name of the Schema. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="schemaName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="schemaName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<SchemaVersionListResult> ListBySchema(string subscriptionId, string resourceGroupName, string schemaName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(schemaName, nameof(schemaName));

            using var message = CreateListBySchemaRequest(subscriptionId, resourceGroupName, schemaName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SchemaVersionListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = SchemaVersionListResult.DeserializeSchemaVersionListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateListBySchemaNextPageRequestUri(string nextLink, string subscriptionId, string resourceGroupName, string schemaName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            return uri;
        }

        internal HttpMessage CreateListBySchemaNextPageRequest(string nextLink, string subscriptionId, string resourceGroupName, string schemaName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> List by specified resource group. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="schemaName"> The name of the Schema. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="schemaName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="schemaName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<SchemaVersionListResult>> ListBySchemaNextPageAsync(string nextLink, string subscriptionId, string resourceGroupName, string schemaName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(schemaName, nameof(schemaName));

            using var message = CreateListBySchemaNextPageRequest(nextLink, subscriptionId, resourceGroupName, schemaName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SchemaVersionListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = SchemaVersionListResult.DeserializeSchemaVersionListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> List by specified resource group. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="schemaName"> The name of the Schema. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="schemaName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="schemaName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<SchemaVersionListResult> ListBySchemaNextPage(string nextLink, string subscriptionId, string resourceGroupName, string schemaName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(schemaName, nameof(schemaName));

            using var message = CreateListBySchemaNextPageRequest(nextLink, subscriptionId, resourceGroupName, schemaName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SchemaVersionListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = SchemaVersionListResult.DeserializeSchemaVersionListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/RestOperations/SiteReferencesRestOperations.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    internal partial class SiteReferencesRestOperations
    {
        private readonly TelemetryDetails _userAgent;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> Initializes a new instance of SiteReferencesRestOperations. </summary>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="applicationId"> The application id to use for user agent. </param>
        /// <param name="endpoint"> Service host. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="pipeline"/> or <paramref name="apiVersion"/> is null. </exception>
        public SiteReferencesRestOperations(HttpPipeline pipeline, string applicationId, Uri endpoint = null, string apiVersion = default)
        {
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _endpoint = endpoint ?? new Uri("https://management.azure.com");
            _apiVersion = apiVersion ?? "2025-06-01";
            _userAgent = new TelemetryDetails(GetType().Assembly, applicationId);
        }

        internal RequestUriBuilder CreateGetRequestUri(string subscriptionId, string resourceGroupName, string contextName, string siteReferenceName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/contexts/", false);
            uri.AppendPath(contextName, true);
            uri.AppendPath("/siteReferences/", false);
            uri.AppendPath(siteReferenceName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateGetRequest(string subscriptionId, string resourceGroupName, string contextName, string siteReferenceName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/contexts/", false);
            uri.AppendPath(contextName, true);
            uri.AppendPath("/siteReferences/", false);
            uri.AppendPath(siteReferenceName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Get Site Reference Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="siteReferenceName"> The name of the SiteReference. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/> or <paramref name="siteReferenceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/> or <paramref name="siteReferenceName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<EdgeSiteReferenceData>> GetAsync(string subscriptionId, string resourceGroupName, string contextName, string siteReferenceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));
            Argument.AssertNotNullOrEmpty(siteReferenceName, nameof(siteReferenceName));

            using var message = CreateGetRequest(subscriptionId, resourceGroupName, contextName, siteReferenceName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EdgeSiteReferenceData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = EdgeSiteReferenceData.DeserializeEdgeSiteReferenceData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((EdgeSiteReferenceData)null, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Get Site Reference Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="siteReferenceName"> The name of the SiteReference. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/> or <paramref name="siteReferenceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/> or <paramref name="siteReferenceName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<EdgeSiteReferenceData> Get(string subscriptionId, string resourceGroupName, string contextName, string siteReferenceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));
            Argument.AssertNotNullOrEmpty(siteReferenceName, nameof(siteReferenceName));

            using var message = CreateGetRequest(subscriptionId, resourceGroupName, contextName, siteReferenceName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EdgeSiteReferenceData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = EdgeSiteReferenceData.DeserializeEdgeSiteReferenceData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((EdgeSiteReferenceData)null, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateCreateOrUpdateRequestUri(string subscriptionId, string resourceGroupName, string contextName, string siteReferenceName, EdgeSiteReferenceData data)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/contexts/", false);
            uri.AppendPath(contextName, true);
            uri.AppendPath("/siteReferences/", false);
            uri.AppendPath(siteReferenceName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateCreateOrUpdateRequest(string subscriptionId, string resourceGroupName, string contextName, string siteReferenceName, EdgeSiteReferenceData data)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/contexts/", false);
            uri.AppendPath(contextName, true);
            uri.AppendPath("/siteReferences/", false);
            uri.AppendPath(siteReferenceName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(data, ModelSerializationExtensions.WireOptions);
            request.Content = content;
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Get Site Reference Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="siteReferenceName"> The name of the SiteReference. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/>, <paramref name="siteReferenceName"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/> or <paramref name="siteReferenceName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response> CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string contextName, string siteReferenceName, EdgeSiteReferenceData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));
            Argument.AssertNotNullOrEmpty(siteReferenceName, nameof(siteReferenceName));
            Argument.AssertNotNull(data, nameof(data));

            using var message = CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, contextName, siteReferenceName, data);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Get Site Reference Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="siteReferenceName"> The name of the SiteReference. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/>, <paramref name="siteReferenceName"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/> or <paramref name="siteReferenceName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response CreateOrUpdate(string subscriptionId, string resourceGroupName, string contextName, string siteReferenceName, EdgeSiteReferenceData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));
            Argument.AssertNotNullOrEmpty(siteReferenceName, nameof(siteReferenceName));
            Argument.AssertNotNull(data, nameof(data));

            using var message = CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, contextName, siteReferenceName, data);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateUpdateRequestUri(string subscriptionId, string resourceGroupName, string contextName, string siteReferenceName, EdgeSiteReferenceData data)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/contexts/", false);
            uri.AppendPath(contextName, true);
            uri.AppendPath("/siteReferences/", false);
            uri.AppendPath(siteReferenceName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateUpdateRequest(string subscriptionId, string resourceGroupName, string contextName, string siteReferenceName, EdgeSiteReferenceData data)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/contexts/", false);
            uri.AppendPath(contextName, true);
            uri.AppendPath("/siteReferences/", false);
            uri.AppendPath(siteReferenceName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(data, ModelSerializationExtensions.WireOptions);
            request.Content = content;
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Get Site Reference Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="siteReferenceName"> The name of the SiteReference. </param>
        /// <param name="data"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/>, <paramref name="siteReferenceName"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/> or <paramref name="siteReferenceName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response> UpdateAsync(string subscriptionId, string resourceGroupName, string contextName, string siteReferenceName, EdgeSiteReferenceData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));
            Argument.AssertNotNullOrEmpty(siteReferenceName, nameof(siteReferenceName));
            Argument.AssertNotNull(data, nameof(data));

            using var message = CreateUpdateRequest(subscriptionId, resourceGroupName, contextName, siteReferenceName, data);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 202:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Get Site Reference Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="siteReferenceName"> The name of the SiteReference. </param>
        /// <param name="data"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/>, <paramref name="siteReferenceName"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/> or <paramref name="siteReferenceName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response Update(string subscriptionId, string resourceGroupName, string contextName, string siteReferenceName, EdgeSiteReferenceData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));
            Argument.AssertNotNullOrEmpty(siteReferenceName, nameof(siteReferenceName));
            Argument.AssertNotNull(data, nameof(data));

            using var message = CreateUpdateRequest(subscriptionId, resourceGroupName, contextName, siteReferenceName, data);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 202:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateDeleteRequestUri(string subscriptionId, string resourceGroupName, string contextName, string siteReferenceName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/contexts/", false);
            uri.AppendPath(contextName, true);
            uri.AppendPath("/siteReferences/", false);
            uri.AppendPath(siteReferenceName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateDeleteRequest(string subscriptionId, string resourceGroupName, string contextName, string siteReferenceName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/contexts/", false);
            uri.AppendPath(contextName, true);
            uri.AppendPath("/siteReferences/", false);
            uri.AppendPath(siteReferenceName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Get Site Reference Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="siteReferenceName"> The name of the SiteReference. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/> or <paramref name="siteReferenceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/> or <paramref name="siteReferenceName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response> DeleteAsync(string subscriptionId, string resourceGroupName, string contextName, string siteReferenceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));
            Argument.AssertNotNullOrEmpty(siteReferenceName, nameof(siteReferenceName));

            using var message = CreateDeleteRequest(subscriptionId, resourceGroupName, contextName, siteReferenceName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                case 204:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Get Site Reference Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="siteReferenceName"> The name of the SiteReference. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/> or <paramref name="siteReferenceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/> or <paramref name="siteReferenceName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response Delete(string subscriptionId, string resourceGroupName, string contextName, string siteReferenceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));
            Argument.AssertNotNullOrEmpty(siteReferenceName, nameof(siteReferenceName));

            using var message = CreateDeleteRequest(subscriptionId, resourceGroupName, contextName, siteReferenceName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                case 204:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateListByContextRequestUri(string subscriptionId, string resourceGroupName, string contextName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/contexts/", false);
            uri.AppendPath(contextName, true);
            uri.AppendPath("/siteReferences", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateListByContextRequest(string subscriptionId, string resourceGroupName, string contextName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/contexts/", false);
            uri.AppendPath(contextName, true);
            uri.AppendPath("/siteReferences", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> List Site Reference Resources. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="contextName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="contextName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<SiteReferenceListResult>> ListByContextAsync(string subscriptionId, string resourceGroupName, string contextName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));

            using var message = CreateListByContextRequest(subscriptionId, resourceGroupName, contextName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SiteReferenceListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = SiteReferenceListResult.DeserializeSiteReferenceListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> List Site Reference Resources. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="contextName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="contextName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<SiteReferenceListResult> ListByContext(string subscriptionId, string resourceGroupName, string contextName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));

            using var message = CreateListByContextRequest(subscriptionId, resourceGroupName, contextName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SiteReferenceListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = SiteReferenceListResult.DeserializeSiteReferenceListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateListByContextNextPageRequestUri(string nextLink, string subscriptionId, string resourceGroupName, string contextName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            return uri;
        }

        internal HttpMessage CreateListByContextNextPageRequest(string nextLink, string subscriptionId, string resourceGroupName, string contextName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> List Site Reference Resources. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="contextName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="contextName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<SiteReferenceListResult>> ListByContextNextPageAsync(string nextLink, string subscriptionId, string resourceGroupName, string contextName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));

            using var message = CreateListByContextNextPageRequest(nextLink, subscriptionId, resourceGroupName, contextName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SiteReferenceListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = SiteReferenceListResult.DeserializeSiteReferenceListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> List Site Reference Resources. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="contextName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="contextName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<SiteReferenceListResult> ListByContextNextPage(string nextLink, string subscriptionId, string resourceGroupName, string contextName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));

            using var message = CreateListByContextNextPageRequest(nextLink, subscriptionId, resourceGroupName, contextName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SiteReferenceListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = SiteReferenceListResult.DeserializeSiteReferenceListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/RestOperations/SolutionsRestOperations.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    internal partial class SolutionsRestOperations
    {
        private readonly TelemetryDetails _userAgent;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> Initializes a new instance of SolutionsRestOperations. </summary>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="applicationId"> The application id to use for user agent. </param>
        /// <param name="endpoint"> Service host. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="pipeline"/> or <paramref name="apiVersion"/> is null. </exception>
        public SolutionsRestOperations(HttpPipeline pipeline, string applicationId, Uri endpoint = null, string apiVersion = default)
        {
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _endpoint = endpoint ?? new Uri("https://management.azure.com");
            _apiVersion = apiVersion ?? "2025-06-01";
            _userAgent = new TelemetryDetails(GetType().Assembly, applicationId);
        }

        internal RequestUriBuilder CreateGetRequestUri(string subscriptionId, string resourceGroupName, string targetName, string solutionName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/targets/", false);
            uri.AppendPath(targetName, true);
            uri.AppendPath("/solutions/", false);
            uri.AppendPath(solutionName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateGetRequest(string subscriptionId, string resourceGroupName, string targetName, string solutionName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/targets/", false);
            uri.AppendPath(targetName, true);
            uri.AppendPath("/solutions/", false);
            uri.AppendPath(solutionName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Get a Solution resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="targetName"> Name of the target. </param>
        /// <param name="solutionName"> Name of the solution. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/> or <paramref name="solutionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/> or <paramref name="solutionName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<EdgeSolutionData>> GetAsync(string subscriptionId, string resourceGroupName, string targetName, string solutionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(targetName, nameof(targetName));
            Argument.AssertNotNullOrEmpty(solutionName, nameof(solutionName));

            using var message = CreateGetRequest(subscriptionId, resourceGroupName, targetName, solutionName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EdgeSolutionData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = EdgeSolutionData.DeserializeEdgeSolutionData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((EdgeSolutionData)null, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Get a Solution resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="targetName"> Name of the target. </param>
        /// <param name="solutionName"> Name of the solution. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/> or <paramref name="solutionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/> or <paramref name="solutionName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<EdgeSolutionData> Get(string subscriptionId, string resourceGroupName, string targetName, string solutionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(targetName, nameof(targetName));
            Argument.AssertNotNullOrEmpty(solutionName, nameof(solutionName));

            using var message = CreateGetRequest(subscriptionId, resourceGroupName, targetName, solutionName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EdgeSolutionData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = EdgeSolutionData.DeserializeEdgeSolutionData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((EdgeSolutionData)null, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateCreateOrUpdateRequestUri(string subscriptionId, string resourceGroupName, string targetName, string solutionName, EdgeSolutionData data)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/targets/", false);
            uri.AppendPath(targetName, true);
            uri.AppendPath("/solutions/", false);
            uri.AppendPath(solutionName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateCreateOrUpdateRequest(string subscriptionId, string resourceGroupName, string targetName, string solutionName, EdgeSolutionData data)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/targets/", false);
            uri.AppendPath(targetName, true);
            uri.AppendPath("/solutions/", false);
            uri.AppendPath(solutionName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(data, ModelSerializationExtensions.WireOptions);
            request.Content = content;
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Create or update a Solution Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="targetName"> Name of the target. </param>
        /// <param name="solutionName"> Name of the solution. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/>, <paramref name="solutionName"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/> or <paramref name="solutionName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response> CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string targetName, string solutionName, EdgeSolutionData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(targetName, nameof(targetName));
            Argument.AssertNotNullOrEmpty(solutionName, nameof(solutionName));
            Argument.AssertNotNull(data, nameof(data));

            using var message = CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, targetName, solutionName, data);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Create or update a Solution Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="targetName"> Name of the target. </param>
        /// <param name="solutionName"> Name of the solution. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/>, <paramref name="solutionName"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/> or <paramref name="solutionName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response CreateOrUpdate(string subscriptionId, string resourceGroupName, string targetName, string solutionName, EdgeSolutionData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(targetName, nameof(targetName));
            Argument.AssertNotNullOrEmpty(solutionName, nameof(solutionName));
            Argument.AssertNotNull(data, nameof(data));

            using var message = CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, targetName, solutionName, data);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateUpdateRequestUri(string subscriptionId, string resourceGroupName, string targetName, string solutionName, EdgeSolutionPatch patch)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/targets/", false);
            uri.AppendPath(targetName, true);
            uri.AppendPath("/solutions/", false);
            uri.AppendPath(solutionName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateUpdateRequest(string subscriptionId, string resourceGroupName, string targetName, string solutionName, EdgeSolutionPatch patch)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/targets/", false);
            uri.AppendPath(targetName, true);
            uri.AppendPath("/solutions/", false);
            uri.AppendPath(solutionName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(patch, ModelSerializationExtensions.WireOptions);
            request.Content = content;
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Update a Solution Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="targetName"> Name of the target. </param>
        /// <param name="solutionName"> Name of the solution. </param>
        /// <param name="patch"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/>, <paramref name="solutionName"/> or <paramref name="patch"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/> or <paramref name="solutionName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response> UpdateAsync(string subscriptionId, string resourceGroupName, string targetName, string solutionName, EdgeSolutionPatch patch, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(targetName, nameof(targetName));
            Argument.AssertNotNullOrEmpty(solutionName, nameof(solutionName));
            Argument.AssertNotNull(patch, nameof(patch));

            using var message = CreateUpdateRequest(subscriptionId, resourceGroupName, targetName, solutionName, patch);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 202:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Update a Solution Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="targetName"> Name of the target. </param>
        /// <param name="solutionName"> Name of the solution. </param>
        /// <param name="patch"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/>, <paramref name="solutionName"/> or <paramref name="patch"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/> or <paramref name="solutionName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response Update(string subscriptionId, string resourceGroupName, string targetName, string solutionName, EdgeSolutionPatch patch, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(targetName, nameof(targetName));
            Argument.AssertNotNullOrEmpty(solutionName, nameof(solutionName));
            Argument.AssertNotNull(patch, nameof(patch));

            using var message = CreateUpdateRequest(subscriptionId, resourceGroupName, targetName, solutionName, patch);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 202:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateDeleteRequestUri(string subscriptionId, string resourceGroupName, string targetName, string solutionName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/targets/", false);
            uri.AppendPath(targetName, true);
            uri.AppendPath("/solutions/", false);
            uri.AppendPath(solutionName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateDeleteRequest(string subscriptionId, string resourceGroupName, string targetName, string solutionName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/targets/", false);
            uri.AppendPath(targetName, true);
            uri.AppendPath("/solutions/", false);
            uri.AppendPath(solutionName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Delete a Solution Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="targetName"> Name of the target. </param>
        /// <param name="solutionName"> Name of the solution. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/> or <paramref name="solutionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/> or <paramref name="solutionName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response> DeleteAsync(string subscriptionId, string resourceGroupName, string targetName, string solutionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(targetName, nameof(targetName));
            Argument.AssertNotNullOrEmpty(solutionName, nameof(solutionName));

            using var message = CreateDeleteRequest(subscriptionId, resourceGroupName, targetName, solutionName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                case 204:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Delete a Solution Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="targetName"> Name of the target. </param>
        /// <param name="solutionName"> Name of the solution. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/> or <paramref name="solutionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/> or <paramref name="solutionName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response Delete(string subscriptionId, string resourceGroupName, string targetName, string solutionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(targetName, nameof(targetName));
            Argument.AssertNotNullOrEmpty(solutionName, nameof(solutionName));

            using var message = CreateDeleteRequest(subscriptionId, resourceGroupName, targetName, solutionName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                case 204:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateListByTargetRequestUri(string subscriptionId, string resourceGroupName, string targetName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/targets/", false);
            uri.AppendPath(targetName, true);
            uri.AppendPath("/solutions", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateListByTargetRequest(string subscriptionId, string resourceGroupName, string targetName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/targets/", false);
            uri.AppendPath(targetName, true);
            uri.AppendPath("/solutions", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> List Solution resources. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="targetName"> Name of the target. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="targetName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="targetName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<SolutionListResult>> ListByTargetAsync(string subscriptionId, string resourceGroupName, string targetName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(targetName, nameof(targetName));

            using var message = CreateListByTargetRequest(subscriptionId, resourceGroupName, targetName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SolutionListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = SolutionListResult.DeserializeSolutionListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> List Solution resources. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="targetName"> Name of the target. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="targetName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="targetName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<SolutionListResult> ListByTarget(string subscriptionId, string resourceGroupName, string targetName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(targetName, nameof(targetName));

            using var message = CreateListByTargetRequest(subscriptionId, resourceGroupName, targetName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SolutionListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = SolutionListResult.DeserializeSolutionListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateListByTargetNextPageRequestUri(string nextLink, string subscriptionId, string resourceGroupName, string targetName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            return uri;
        }

        internal HttpMessage CreateListByTargetNextPageRequest(string nextLink, string subscriptionId, string resourceGroupName, string targetName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> List Solution resources. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="targetName"> Name of the target. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="targetName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="targetName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<SolutionListResult>> ListByTargetNextPageAsync(string nextLink, string subscriptionId, string resourceGroupName, string targetName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(targetName, nameof(targetName));

            using var message = CreateListByTargetNextPageRequest(nextLink, subscriptionId, resourceGroupName, targetName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SolutionListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = SolutionListResult.DeserializeSolutionListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> List Solution resources. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="targetName"> Name of the target. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="targetName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="targetName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<SolutionListResult> ListByTargetNextPage(string nextLink, string subscriptionId, string resourceGroupName, string targetName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(targetName, nameof(targetName));

            using var message = CreateListByTargetNextPageRequest(nextLink, subscriptionId, resourceGroupName, targetName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SolutionListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = SolutionListResult.DeserializeSolutionListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/RestOperations/SolutionTemplateVersionsRestOperations.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    internal partial class SolutionTemplateVersionsRestOperations
    {
        private readonly TelemetryDetails _userAgent;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> Initializes a new instance of SolutionTemplateVersionsRestOperations. </summary>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="applicationId"> The application id to use for user agent. </param>
        /// <param name="endpoint"> Service host. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="pipeline"/> or <paramref name="apiVersion"/> is null. </exception>
        public SolutionTemplateVersionsRestOperations(HttpPipeline pipeline, string applicationId, Uri endpoint = null, string apiVersion = default)
        {
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _endpoint = endpoint ?? new Uri("https://management.azure.com");
            _apiVersion = apiVersion ?? "2025-06-01";
            _userAgent = new TelemetryDetails(GetType().Assembly, applicationId);
        }

        internal RequestUriBuilder CreateGetRequestUri(string subscriptionId, string resourceGroupName, string solutionTemplateName, string solutionTemplateVersionName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/solutionTemplates/", false);
            uri.AppendPath(solutionTemplateName, true);
            uri.AppendPath("/versions/", false);
            uri.AppendPath(solutionTemplateVersionName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateGetRequest(string subscriptionId, string resourceGroupName, string solutionTemplateName, string solutionTemplateVersionName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/solutionTemplates/", false);
            uri.AppendPath(solutionTemplateName, true);
            uri.AppendPath("/versions/", false);
            uri.AppendPath(solutionTemplateVersionName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Get a Solution Template Version Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="solutionTemplateName"> The name of the SolutionTemplate. </param>
        /// <param name="solutionTemplateVersionName"> The name of the SolutionTemplateVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="solutionTemplateName"/> or <paramref name="solutionTemplateVersionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="solutionTemplateName"/> or <paramref name="solutionTemplateVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<EdgeSolutionTemplateVersionData>> GetAsync(string subscriptionId, string resourceGroupName, string solutionTemplateName, string solutionTemplateVersionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(solutionTemplateName, nameof(solutionTemplateName));
            Argument.AssertNotNullOrEmpty(solutionTemplateVersionName, nameof(solutionTemplateVersionName));

            using var message = CreateGetRequest(subscriptionId, resourceGroupName, solutionTemplateName, solutionTemplateVersionName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EdgeSolutionTemplateVersionData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = EdgeSolutionTemplateVersionData.DeserializeEdgeSolutionTemplateVersionData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((EdgeSolutionTemplateVersionData)null, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Get a Solution Template Version Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="solutionTemplateName"> The name of the SolutionTemplate. </param>
        /// <param name="solutionTemplateVersionName"> The name of the SolutionTemplateVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="solutionTemplateName"/> or <paramref name="solutionTemplateVersionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="solutionTemplateName"/> or <paramref name="solutionTemplateVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<EdgeSolutionTemplateVersionData> Get(string subscriptionId, string resourceGroupName, string solutionTemplateName, string solutionTemplateVersionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(solutionTemplateName, nameof(solutionTemplateName));
            Argument.AssertNotNullOrEmpty(solutionTemplateVersionName, nameof(solutionTemplateVersionName));

            using var message = CreateGetRequest(subscriptionId, resourceGroupName, solutionTemplateName, solutionTemplateVersionName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EdgeSolutionTemplateVersionData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = EdgeSolutionTemplateVersionData.DeserializeEdgeSolutionTemplateVersionData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((EdgeSolutionTemplateVersionData)null, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateListBySolutionTemplateRequestUri(string subscriptionId, string resourceGroupName, string solutionTemplateName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/solutionTemplates/", false);
            uri.AppendPath(solutionTemplateName, true);
            uri.AppendPath("/versions", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateListBySolutionTemplateRequest(string subscriptionId, string resourceGroupName, string solutionTemplateName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/solutionTemplates/", false);
            uri.AppendPath(solutionTemplateName, true);
            uri.AppendPath("/versions", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> List Solution Template Version Resources. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="solutionTemplateName"> The name of the SolutionTemplate. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="solutionTemplateName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="solutionTemplateName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<SolutionTemplateVersionListResult>> ListBySolutionTemplateAsync(string subscriptionId, string resourceGroupName, string solutionTemplateName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(solutionTemplateName, nameof(solutionTemplateName));

            using var message = CreateListBySolutionTemplateRequest(subscriptionId, resourceGroupName, solutionTemplateName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SolutionTemplateVersionListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = SolutionTemplateVersionListResult.DeserializeSolutionTemplateVersionListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> List Solution Template Version Resources. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="solutionTemplateName"> The name of the SolutionTemplate. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="solutionTemplateName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="solutionTemplateName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<SolutionTemplateVersionListResult> ListBySolutionTemplate(string subscriptionId, string resourceGroupName, string solutionTemplateName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(solutionTemplateName, nameof(solutionTemplateName));

            using var message = CreateListBySolutionTemplateRequest(subscriptionId, resourceGroupName, solutionTemplateName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SolutionTemplateVersionListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = SolutionTemplateVersionListResult.DeserializeSolutionTemplateVersionListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateBulkDeploySolutionRequestUri(string subscriptionId, string resourceGroupName, string solutionTemplateName, string solutionTemplateVersionName, BulkDeploySolutionContent content)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/solutionTemplates/", false);
            uri.AppendPath(solutionTemplateName, true);
            uri.AppendPath("/versions/", false);
            uri.AppendPath(solutionTemplateVersionName, true);
            uri.AppendPath("/bulkDeploySolution", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateBulkDeploySolutionRequest(string subscriptionId, string resourceGroupName, string solutionTemplateName, string solutionTemplateVersionName, BulkDeploySolutionContent content)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/solutionTemplates/", false);
            uri.AppendPath(solutionTemplateName, true);
            uri.AppendPath("/versions/", false);
            uri.AppendPath(solutionTemplateVersionName, true);
            uri.AppendPath("/bulkDeploySolution", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var content0 = new Utf8JsonRequestContent();
            content0.JsonWriter.WriteObjectValue(content, ModelSerializationExtensions.WireOptions);
            request.Content = content0;
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Post request for bulk deploy. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="solutionTemplateName"> The name of the SolutionTemplate. </param>
        /// <param name="solutionTemplateVersionName"> The name of the SolutionTemplateVersion. </param>
        /// <param name="content"> The content of the action request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="solutionTemplateName"/>, <paramref name="solutionTemplateVersionName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="solutionTemplateName"/> or <paramref name="solutionTemplateVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response> BulkDeploySolutionAsync(string subscriptionId, string resourceGroupName, string solutionTemplateName, string solutionTemplateVersionName, BulkDeploySolutionContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(solutionTemplateName, nameof(solutionTemplateName));
            Argument.AssertNotNullOrEmpty(solutionTemplateVersionName, nameof(solutionTemplateVersionName));
            Argument.AssertNotNull(content, nameof(content));

            using var message = CreateBulkDeploySolutionRequest(subscriptionId, resourceGroupName, solutionTemplateName, solutionTemplateVersionName, content);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Post request for bulk deploy. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="solutionTemplateName"> The name of the SolutionTemplate. </param>
        /// <param name="solutionTemplateVersionName"> The name of the SolutionTemplateVersion. </param>
        /// <param name="content"> The content of the action request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="solutionTemplateName"/>, <paramref name="solutionTemplateVersionName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="solutionTemplateName"/> or <paramref name="solutionTemplateVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response BulkDeploySolution(string subscriptionId, string resourceGroupName, string solutionTemplateName, string solutionTemplateVersionName, BulkDeploySolutionContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(solutionTemplateName, nameof(solutionTemplateName));
            Argument.AssertNotNullOrEmpty(solutionTemplateVersionName, nameof(solutionTemplateVersionName));
            Argument.AssertNotNull(content, nameof(content));

            using var message = CreateBulkDeploySolutionRequest(subscriptionId, resourceGroupName, solutionTemplateName, solutionTemplateVersionName, content);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateBulkPublishSolutionRequestUri(string subscriptionId, string resourceGroupName, string solutionTemplateName, string solutionTemplateVersionName, BulkPublishSolutionContent content)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/solutionTemplates/", false);
            uri.AppendPath(solutionTemplateName, true);
            uri.AppendPath("/versions/", false);
            uri.AppendPath(solutionTemplateVersionName, true);
            uri.AppendPath("/bulkPublishSolution", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateBulkPublishSolutionRequest(string subscriptionId, string resourceGroupName, string solutionTemplateName, string solutionTemplateVersionName, BulkPublishSolutionContent content)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/solutionTemplates/", false);
            uri.AppendPath(solutionTemplateName, true);
            uri.AppendPath("/versions/", false);
            uri.AppendPath(solutionTemplateVersionName, true);
            uri.AppendPath("/bulkPublishSolution", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var content0 = new Utf8JsonRequestContent();
            content0.JsonWriter.WriteObjectValue(content, ModelSerializationExtensions.WireOptions);
            request.Content = content0;
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Post request for bulk publish. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="solutionTemplateName"> The name of the SolutionTemplate. </param>
        /// <param name="solutionTemplateVersionName"> The name of the SolutionTemplateVersion. </param>
        /// <param name="content"> The content of the action request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="solutionTemplateName"/>, <paramref name="solutionTemplateVersionName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="solutionTemplateName"/> or <paramref name="solutionTemplateVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response> BulkPublishSolutionAsync(string subscriptionId, string resourceGroupName, string solutionTemplateName, string solutionTemplateVersionName, BulkPublishSolutionContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(solutionTemplateName, nameof(solutionTemplateName));
            Argument.AssertNotNullOrEmpty(solutionTemplateVersionName, nameof(solutionTemplateVersionName));
            Argument.AssertNotNull(content, nameof(content));

            using var message = CreateBulkPublishSolutionRequest(subscriptionId, resourceGroupName, solutionTemplateName, solutionTemplateVersionName, content);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Post request for bulk publish. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="solutionTemplateName"> The name of the SolutionTemplate. </param>
        /// <param name="solutionTemplateVersionName"> The name of the SolutionTemplateVersion. </param>
        /// <param name="content"> The content of the action request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="solutionTemplateName"/>, <paramref name="solutionTemplateVersionName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="solutionTemplateName"/> or <paramref name="solutionTemplateVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response BulkPublishSolution(string subscriptionId, string resourceGroupName, string solutionTemplateName, string solutionTemplateVersionName, BulkPublishSolutionContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(solutionTemplateName, nameof(solutionTemplateName));
            Argument.AssertNotNullOrEmpty(solutionTemplateVersionName, nameof(solutionTemplateVersionName));
            Argument.AssertNotNull(content, nameof(content));

            using var message = CreateBulkPublishSolutionRequest(subscriptionId, resourceGroupName, solutionTemplateName, solutionTemplateVersionName, content);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateListBySolutionTemplateNextPageRequestUri(string nextLink, string subscriptionId, string resourceGroupName, string solutionTemplateName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            return uri;
        }

        internal HttpMessage CreateListBySolutionTemplateNextPageRequest(string nextLink, string subscriptionId, string resourceGroupName, string solutionTemplateName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> List Solution Template Version Resources. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="solutionTemplateName"> The name of the SolutionTemplate. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="solutionTemplateName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="solutionTemplateName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<SolutionTemplateVersionListResult>> ListBySolutionTemplateNextPageAsync(string nextLink, string subscriptionId, string resourceGroupName, string solutionTemplateName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(solutionTemplateName, nameof(solutionTemplateName));

            using var message = CreateListBySolutionTemplateNextPageRequest(nextLink, subscriptionId, resourceGroupName, solutionTemplateName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SolutionTemplateVersionListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = SolutionTemplateVersionListResult.DeserializeSolutionTemplateVersionListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> List Solution Template Version Resources. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="solutionTemplateName"> The name of the SolutionTemplate. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="solutionTemplateName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="solutionTemplateName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<SolutionTemplateVersionListResult> ListBySolutionTemplateNextPage(string nextLink, string subscriptionId, string resourceGroupName, string solutionTemplateName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(solutionTemplateName, nameof(solutionTemplateName));

            using var message = CreateListBySolutionTemplateNextPageRequest(nextLink, subscriptionId, resourceGroupName, solutionTemplateName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SolutionTemplateVersionListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = SolutionTemplateVersionListResult.DeserializeSolutionTemplateVersionListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/RestOperations/SolutionVersionsRestOperations.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    internal partial class SolutionVersionsRestOperations
    {
        private readonly TelemetryDetails _userAgent;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> Initializes a new instance of SolutionVersionsRestOperations. </summary>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="applicationId"> The application id to use for user agent. </param>
        /// <param name="endpoint"> Service host. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="pipeline"/> or <paramref name="apiVersion"/> is null. </exception>
        public SolutionVersionsRestOperations(HttpPipeline pipeline, string applicationId, Uri endpoint = null, string apiVersion = default)
        {
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _endpoint = endpoint ?? new Uri("https://management.azure.com");
            _apiVersion = apiVersion ?? "2025-06-01";
            _userAgent = new TelemetryDetails(GetType().Assembly, applicationId);
        }

        internal RequestUriBuilder CreateGetRequestUri(string subscriptionId, string resourceGroupName, string targetName, string solutionName, string solutionVersionName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/targets/", false);
            uri.AppendPath(targetName, true);
            uri.AppendPath("/solutions/", false);
            uri.AppendPath(solutionName, true);
            uri.AppendPath("/versions/", false);
            uri.AppendPath(solutionVersionName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateGetRequest(string subscriptionId, string resourceGroupName, string targetName, string solutionName, string solutionVersionName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/targets/", false);
            uri.AppendPath(targetName, true);
            uri.AppendPath("/solutions/", false);
            uri.AppendPath(solutionName, true);
            uri.AppendPath("/versions/", false);
            uri.AppendPath(solutionVersionName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Get a Solution Version Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="targetName"> Name of the target. </param>
        /// <param name="solutionName"> Name of the solution. </param>
        /// <param name="solutionVersionName"> Name of the solution version. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/>, <paramref name="solutionName"/> or <paramref name="solutionVersionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/>, <paramref name="solutionName"/> or <paramref name="solutionVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<EdgeSolutionVersionData>> GetAsync(string subscriptionId, string resourceGroupName, string targetName, string solutionName, string solutionVersionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(targetName, nameof(targetName));
            Argument.AssertNotNullOrEmpty(solutionName, nameof(solutionName));
            Argument.AssertNotNullOrEmpty(solutionVersionName, nameof(solutionVersionName));

            using var message = CreateGetRequest(subscriptionId, resourceGroupName, targetName, solutionName, solutionVersionName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EdgeSolutionVersionData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = EdgeSolutionVersionData.DeserializeEdgeSolutionVersionData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((EdgeSolutionVersionData)null, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Get a Solution Version Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="targetName"> Name of the target. </param>
        /// <param name="solutionName"> Name of the solution. </param>
        /// <param name="solutionVersionName"> Name of the solution version. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/>, <paramref name="solutionName"/> or <paramref name="solutionVersionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/>, <paramref name="solutionName"/> or <paramref name="solutionVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<EdgeSolutionVersionData> Get(string subscriptionId, string resourceGroupName, string targetName, string solutionName, string solutionVersionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(targetName, nameof(targetName));
            Argument.AssertNotNullOrEmpty(solutionName, nameof(solutionName));
            Argument.AssertNotNullOrEmpty(solutionVersionName, nameof(solutionVersionName));

            using var message = CreateGetRequest(subscriptionId, resourceGroupName, targetName, solutionName, solutionVersionName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EdgeSolutionVersionData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = EdgeSolutionVersionData.DeserializeEdgeSolutionVersionData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((EdgeSolutionVersionData)null, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateCreateOrUpdateRequestUri(string subscriptionId, string resourceGroupName, string targetName, string solutionName, string solutionVersionName, EdgeSolutionVersionData data)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/targets/", false);
            uri.AppendPath(targetName, true);
            uri.AppendPath("/solutions/", false);
            uri.AppendPath(solutionName, true);
            uri.AppendPath("/versions/", false);
            uri.AppendPath(solutionVersionName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateCreateOrUpdateRequest(string subscriptionId, string resourceGroupName, string targetName, string solutionName, string solutionVersionName, EdgeSolutionVersionData data)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/targets/", false);
            uri.AppendPath(targetName, true);
            uri.AppendPath("/solutions/", false);
            uri.AppendPath(solutionName, true);
            uri.AppendPath("/versions/", false);
            uri.AppendPath(solutionVersionName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(data, ModelSerializationExtensions.WireOptions);
            request.Content = content;
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Create or update a Solution Version Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="targetName"> Name of the target. </param>
        /// <param name="solutionName"> Name of the solution. </param>
        /// <param name="solutionVersionName"> Name of the solution version. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/>, <paramref name="solutionName"/>, <paramref name="solutionVersionName"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/>, <paramref name="solutionName"/> or <paramref name="solutionVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response> CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string targetName, string solutionName, string solutionVersionName, EdgeSolutionVersionData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(targetName, nameof(targetName));
            Argument.AssertNotNullOrEmpty(solutionName, nameof(solutionName));
            Argument.AssertNotNullOrEmpty(solutionVersionName, nameof(solutionVersionName));
            Argument.AssertNotNull(data, nameof(data));

            using var message = CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, targetName, solutionName, solutionVersionName, data);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Create or update a Solution Version Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="targetName"> Name of the target. </param>
        /// <param name="solutionName"> Name of the solution. </param>
        /// <param name="solutionVersionName"> Name of the solution version. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/>, <paramref name="solutionName"/>, <paramref name="solutionVersionName"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/>, <paramref name="solutionName"/> or <paramref name="solutionVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response CreateOrUpdate(string subscriptionId, string resourceGroupName, string targetName, string solutionName, string solutionVersionName, EdgeSolutionVersionData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(targetName, nameof(targetName));
            Argument.AssertNotNullOrEmpty(solutionName, nameof(solutionName));
            Argument.AssertNotNullOrEmpty(solutionVersionName, nameof(solutionVersionName));
            Argument.AssertNotNull(data, nameof(data));

            using var message = CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, targetName, solutionName, solutionVersionName, data);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateUpdateRequestUri(string subscriptionId, string resourceGroupName, string targetName, string solutionName, string solutionVersionName, EdgeSolutionVersionData data)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/targets/", false);
            uri.AppendPath(targetName, true);
            uri.AppendPath("/solutions/", false);
            uri.AppendPath(solutionName, true);
            uri.AppendPath("/versions/", false);
            uri.AppendPath(solutionVersionName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateUpdateRequest(string subscriptionId, string resourceGroupName, string targetName, string solutionName, string solutionVersionName, EdgeSolutionVersionData data)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/targets/", false);
            uri.AppendPath(targetName, true);
            uri.AppendPath("/solutions/", false);
            uri.AppendPath(solutionName, true);
            uri.AppendPath("/versions/", false);
            uri.AppendPath(solutionVersionName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(data, ModelSerializationExtensions.WireOptions);
            request.Content = content;
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Update a Solution Version Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="targetName"> Name of the target. </param>
        /// <param name="solutionName"> Name of the solution. </param>
        /// <param name="solutionVersionName"> Name of the solution version. </param>
        /// <param name="data"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/>, <paramref name="solutionName"/>, <paramref name="solutionVersionName"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/>, <paramref name="solutionName"/> or <paramref name="solutionVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response> UpdateAsync(string subscriptionId, string resourceGroupName, string targetName, string solutionName, string solutionVersionName, EdgeSolutionVersionData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(targetName, nameof(targetName));
            Argument.AssertNotNullOrEmpty(solutionName, nameof(solutionName));
            Argument.AssertNotNullOrEmpty(solutionVersionName, nameof(solutionVersionName));
            Argument.AssertNotNull(data, nameof(data));

            using var message = CreateUpdateRequest(subscriptionId, resourceGroupName, targetName, solutionName, solutionVersionName, data);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 202:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Update a Solution Version Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="targetName"> Name of the target. </param>
        /// <param name="solutionName"> Name of the solution. </param>
        /// <param name="solutionVersionName"> Name of the solution version. </param>
        /// <param name="data"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/>, <paramref name="solutionName"/>, <paramref name="solutionVersionName"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/>, <paramref name="solutionName"/> or <paramref name="solutionVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response Update(string subscriptionId, string resourceGroupName, string targetName, string solutionName, string solutionVersionName, EdgeSolutionVersionData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(targetName, nameof(targetName));
            Argument.AssertNotNullOrEmpty(solutionName, nameof(solutionName));
            Argument.AssertNotNullOrEmpty(solutionVersionName, nameof(solutionVersionName));
            Argument.AssertNotNull(data, nameof(data));

            using var message = CreateUpdateRequest(subscriptionId, resourceGroupName, targetName, solutionName, solutionVersionName, data);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 202:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateDeleteRequestUri(string subscriptionId, string resourceGroupName, string targetName, string solutionName, string solutionVersionName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/targets/", false);
            uri.AppendPath(targetName, true);
            uri.AppendPath("/solutions/", false);
            uri.AppendPath(solutionName, true);
            uri.AppendPath("/versions/", false);
            uri.AppendPath(solutionVersionName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateDeleteRequest(string subscriptionId, string resourceGroupName, string targetName, string solutionName, string solutionVersionName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/targets/", false);
            uri.AppendPath(targetName, true);
            uri.AppendPath("/solutions/", false);
            uri.AppendPath(solutionName, true);
            uri.AppendPath("/versions/", false);
            uri.AppendPath(solutionVersionName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Delete a Solution Version Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="targetName"> Name of the target. </param>
        /// <param name="solutionName"> Name of the solution. </param>
        /// <param name="solutionVersionName"> Name of the solution version. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/>, <paramref name="solutionName"/> or <paramref name="solutionVersionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/>, <paramref name="solutionName"/> or <paramref name="solutionVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response> DeleteAsync(string subscriptionId, string resourceGroupName, string targetName, string solutionName, string solutionVersionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(targetName, nameof(targetName));
            Argument.AssertNotNullOrEmpty(solutionName, nameof(solutionName));
            Argument.AssertNotNullOrEmpty(solutionVersionName, nameof(solutionVersionName));

            using var message = CreateDeleteRequest(subscriptionId, resourceGroupName, targetName, solutionName, solutionVersionName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                case 204:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Delete a Solution Version Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="targetName"> Name of the target. </param>
        /// <param name="solutionName"> Name of the solution. </param>
        /// <param name="solutionVersionName"> Name of the solution version. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/>, <paramref name="solutionName"/> or <paramref name="solutionVersionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/>, <paramref name="solutionName"/> or <paramref name="solutionVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response Delete(string subscriptionId, string resourceGroupName, string targetName, string solutionName, string solutionVersionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(targetName, nameof(targetName));
            Argument.AssertNotNullOrEmpty(solutionName, nameof(solutionName));
            Argument.AssertNotNullOrEmpty(solutionVersionName, nameof(solutionVersionName));

            using var message = CreateDeleteRequest(subscriptionId, resourceGroupName, targetName, solutionName, solutionVersionName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                case 204:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateListBySolutionRequestUri(string subscriptionId, string resourceGroupName, string targetName, string solutionName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/targets/", false);
            uri.AppendPath(targetName, true);
            uri.AppendPath("/solutions/", false);
            uri.AppendPath(solutionName, true);
            uri.AppendPath("/versions", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateListBySolutionRequest(string subscriptionId, string resourceGroupName, string targetName, string solutionName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/targets/", false);
            uri.AppendPath(targetName, true);
            uri.AppendPath("/solutions/", false);
            uri.AppendPath(solutionName, true);
            uri.AppendPath("/versions", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> List Solution Version Resources. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="targetName"> Name of the target. </param>
        /// <param name="solutionName"> Name of the solution. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/> or <paramref name="solutionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/> or <paramref name="solutionName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<SolutionVersionListResult>> ListBySolutionAsync(string subscriptionId, string resourceGroupName, string targetName, string solutionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(targetName, nameof(targetName));
            Argument.AssertNotNullOrEmpty(solutionName, nameof(solutionName));

            using var message = CreateListBySolutionRequest(subscriptionId, resourceGroupName, targetName, solutionName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SolutionVersionListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = SolutionVersionListResult.DeserializeSolutionVersionListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> List Solution Version Resources. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="targetName"> Name of the target. </param>
        /// <param name="solutionName"> Name of the solution. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/> or <paramref name="solutionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/> or <paramref name="solutionName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<SolutionVersionListResult> ListBySolution(string subscriptionId, string resourceGroupName, string targetName, string solutionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(targetName, nameof(targetName));
            Argument.AssertNotNullOrEmpty(solutionName, nameof(solutionName));

            using var message = CreateListBySolutionRequest(subscriptionId, resourceGroupName, targetName, solutionName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SolutionVersionListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = SolutionVersionListResult.DeserializeSolutionVersionListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateListBySolutionNextPageRequestUri(string nextLink, string subscriptionId, string resourceGroupName, string targetName, string solutionName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            return uri;
        }

        internal HttpMessage CreateListBySolutionNextPageRequest(string nextLink, string subscriptionId, string resourceGroupName, string targetName, string solutionName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> List Solution Version Resources. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="targetName"> Name of the target. </param>
        /// <param name="solutionName"> Name of the solution. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/> or <paramref name="solutionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/> or <paramref name="solutionName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<SolutionVersionListResult>> ListBySolutionNextPageAsync(string nextLink, string subscriptionId, string resourceGroupName, string targetName, string solutionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(targetName, nameof(targetName));
            Argument.AssertNotNullOrEmpty(solutionName, nameof(solutionName));

            using var message = CreateListBySolutionNextPageRequest(nextLink, subscriptionId, resourceGroupName, targetName, solutionName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SolutionVersionListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = SolutionVersionListResult.DeserializeSolutionVersionListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> List Solution Version Resources. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="targetName"> Name of the target. </param>
        /// <param name="solutionName"> Name of the solution. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/> or <paramref name="solutionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="targetName"/> or <paramref name="solutionName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<SolutionVersionListResult> ListBySolutionNextPage(string nextLink, string subscriptionId, string resourceGroupName, string targetName, string solutionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(targetName, nameof(targetName));
            Argument.AssertNotNullOrEmpty(solutionName, nameof(solutionName));

            using var message = CreateListBySolutionNextPageRequest(nextLink, subscriptionId, resourceGroupName, targetName, solutionName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SolutionVersionListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = SolutionVersionListResult.DeserializeSolutionVersionListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/RestOperations/WorkflowsRestOperations.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    internal partial class WorkflowsRestOperations
    {
        private readonly TelemetryDetails _userAgent;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> Initializes a new instance of WorkflowsRestOperations. </summary>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="applicationId"> The application id to use for user agent. </param>
        /// <param name="endpoint"> Service host. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="pipeline"/> or <paramref name="apiVersion"/> is null. </exception>
        public WorkflowsRestOperations(HttpPipeline pipeline, string applicationId, Uri endpoint = null, string apiVersion = default)
        {
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _endpoint = endpoint ?? new Uri("https://management.azure.com");
            _apiVersion = apiVersion ?? "2025-06-01";
            _userAgent = new TelemetryDetails(GetType().Assembly, applicationId);
        }

        internal RequestUriBuilder CreateGetRequestUri(string subscriptionId, string resourceGroupName, string contextName, string workflowName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/contexts/", false);
            uri.AppendPath(contextName, true);
            uri.AppendPath("/workflows/", false);
            uri.AppendPath(workflowName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateGetRequest(string subscriptionId, string resourceGroupName, string contextName, string workflowName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/contexts/", false);
            uri.AppendPath(contextName, true);
            uri.AppendPath("/workflows/", false);
            uri.AppendPath(workflowName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Get a Workflow resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="workflowName"> Name of the workflow. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/> or <paramref name="workflowName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/> or <paramref name="workflowName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<EdgeWorkflowData>> GetAsync(string subscriptionId, string resourceGroupName, string contextName, string workflowName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));
            Argument.AssertNotNullOrEmpty(workflowName, nameof(workflowName));

            using var message = CreateGetRequest(subscriptionId, resourceGroupName, contextName, workflowName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EdgeWorkflowData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = EdgeWorkflowData.DeserializeEdgeWorkflowData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((EdgeWorkflowData)null, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Get a Workflow resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="workflowName"> Name of the workflow. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/> or <paramref name="workflowName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/> or <paramref name="workflowName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<EdgeWorkflowData> Get(string subscriptionId, string resourceGroupName, string contextName, string workflowName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));
            Argument.AssertNotNullOrEmpty(workflowName, nameof(workflowName));

            using var message = CreateGetRequest(subscriptionId, resourceGroupName, contextName, workflowName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EdgeWorkflowData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = EdgeWorkflowData.DeserializeEdgeWorkflowData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((EdgeWorkflowData)null, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateCreateOrUpdateRequestUri(string subscriptionId, string resourceGroupName, string contextName, string workflowName, EdgeWorkflowData data)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/contexts/", false);
            uri.AppendPath(contextName, true);
            uri.AppendPath("/workflows/", false);
            uri.AppendPath(workflowName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateCreateOrUpdateRequest(string subscriptionId, string resourceGroupName, string contextName, string workflowName, EdgeWorkflowData data)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/contexts/", false);
            uri.AppendPath(contextName, true);
            uri.AppendPath("/workflows/", false);
            uri.AppendPath(workflowName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(data, ModelSerializationExtensions.WireOptions);
            request.Content = content;
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Create or update a Workflow resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="workflowName"> Name of the workflow. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/>, <paramref name="workflowName"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/> or <paramref name="workflowName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response> CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string contextName, string workflowName, EdgeWorkflowData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));
            Argument.AssertNotNullOrEmpty(workflowName, nameof(workflowName));
            Argument.AssertNotNull(data, nameof(data));

            using var message = CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, contextName, workflowName, data);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Create or update a Workflow resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="workflowName"> Name of the workflow. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/>, <paramref name="workflowName"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/> or <paramref name="workflowName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response CreateOrUpdate(string subscriptionId, string resourceGroupName, string contextName, string workflowName, EdgeWorkflowData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));
            Argument.AssertNotNullOrEmpty(workflowName, nameof(workflowName));
            Argument.AssertNotNull(data, nameof(data));

            using var message = CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, contextName, workflowName, data);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateUpdateRequestUri(string subscriptionId, string resourceGroupName, string contextName, string workflowName, EdgeWorkflowData data)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/contexts/", false);
            uri.AppendPath(contextName, true);
            uri.AppendPath("/workflows/", false);
            uri.AppendPath(workflowName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateUpdateRequest(string subscriptionId, string resourceGroupName, string contextName, string workflowName, EdgeWorkflowData data)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/contexts/", false);
            uri.AppendPath(contextName, true);
            uri.AppendPath("/workflows/", false);
            uri.AppendPath(workflowName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(data, ModelSerializationExtensions.WireOptions);
            request.Content = content;
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> update a Workflow resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="workflowName"> Name of the workflow. </param>
        /// <param name="data"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/>, <paramref name="workflowName"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/> or <paramref name="workflowName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response> UpdateAsync(string subscriptionId, string resourceGroupName, string contextName, string workflowName, EdgeWorkflowData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));
            Argument.AssertNotNullOrEmpty(workflowName, nameof(workflowName));
            Argument.AssertNotNull(data, nameof(data));

            using var message = CreateUpdateRequest(subscriptionId, resourceGroupName, contextName, workflowName, data);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 202:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> update a Workflow resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="workflowName"> Name of the workflow. </param>
        /// <param name="data"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/>, <paramref name="workflowName"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/> or <paramref name="workflowName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response Update(string subscriptionId, string resourceGroupName, string contextName, string workflowName, EdgeWorkflowData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));
            Argument.AssertNotNullOrEmpty(workflowName, nameof(workflowName));
            Argument.AssertNotNull(data, nameof(data));

            using var message = CreateUpdateRequest(subscriptionId, resourceGroupName, contextName, workflowName, data);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 202:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateDeleteRequestUri(string subscriptionId, string resourceGroupName, string contextName, string workflowName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/contexts/", false);
            uri.AppendPath(contextName, true);
            uri.AppendPath("/workflows/", false);
            uri.AppendPath(workflowName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateDeleteRequest(string subscriptionId, string resourceGroupName, string contextName, string workflowName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/contexts/", false);
            uri.AppendPath(contextName, true);
            uri.AppendPath("/workflows/", false);
            uri.AppendPath(workflowName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Delete a Workflow resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="workflowName"> Name of the workflow. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/> or <paramref name="workflowName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/> or <paramref name="workflowName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response> DeleteAsync(string subscriptionId, string resourceGroupName, string contextName, string workflowName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));
            Argument.AssertNotNullOrEmpty(workflowName, nameof(workflowName));

            using var message = CreateDeleteRequest(subscriptionId, resourceGroupName, contextName, workflowName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                case 204:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Delete a Workflow resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="workflowName"> Name of the workflow. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/> or <paramref name="workflowName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/> or <paramref name="workflowName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response Delete(string subscriptionId, string resourceGroupName, string contextName, string workflowName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));
            Argument.AssertNotNullOrEmpty(workflowName, nameof(workflowName));

            using var message = CreateDeleteRequest(subscriptionId, resourceGroupName, contextName, workflowName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                case 204:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateListByContextRequestUri(string subscriptionId, string resourceGroupName, string contextName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/contexts/", false);
            uri.AppendPath(contextName, true);
            uri.AppendPath("/workflows", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateListByContextRequest(string subscriptionId, string resourceGroupName, string contextName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/contexts/", false);
            uri.AppendPath(contextName, true);
            uri.AppendPath("/workflows", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> List Workflow resources. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="contextName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="contextName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<WorkflowListResult>> ListByContextAsync(string subscriptionId, string resourceGroupName, string contextName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));

            using var message = CreateListByContextRequest(subscriptionId, resourceGroupName, contextName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        WorkflowListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = WorkflowListResult.DeserializeWorkflowListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> List Workflow resources. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="contextName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="contextName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<WorkflowListResult> ListByContext(string subscriptionId, string resourceGroupName, string contextName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));

            using var message = CreateListByContextRequest(subscriptionId, resourceGroupName, contextName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        WorkflowListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = WorkflowListResult.DeserializeWorkflowListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateListByContextNextPageRequestUri(string nextLink, string subscriptionId, string resourceGroupName, string contextName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            return uri;
        }

        internal HttpMessage CreateListByContextNextPageRequest(string nextLink, string subscriptionId, string resourceGroupName, string contextName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> List Workflow resources. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="contextName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="contextName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<WorkflowListResult>> ListByContextNextPageAsync(string nextLink, string subscriptionId, string resourceGroupName, string contextName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));

            using var message = CreateListByContextNextPageRequest(nextLink, subscriptionId, resourceGroupName, contextName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        WorkflowListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = WorkflowListResult.DeserializeWorkflowListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> List Workflow resources. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="contextName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="contextName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<WorkflowListResult> ListByContextNextPage(string nextLink, string subscriptionId, string resourceGroupName, string contextName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));

            using var message = CreateListByContextNextPageRequest(nextLink, subscriptionId, resourceGroupName, contextName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        WorkflowListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = WorkflowListResult.DeserializeWorkflowListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/RestOperations/WorkflowVersionsRestOperations.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.WorkloadOrchestration.Models;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    internal partial class WorkflowVersionsRestOperations
    {
        private readonly TelemetryDetails _userAgent;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> Initializes a new instance of WorkflowVersionsRestOperations. </summary>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="applicationId"> The application id to use for user agent. </param>
        /// <param name="endpoint"> Service host. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="pipeline"/> or <paramref name="apiVersion"/> is null. </exception>
        public WorkflowVersionsRestOperations(HttpPipeline pipeline, string applicationId, Uri endpoint = null, string apiVersion = default)
        {
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _endpoint = endpoint ?? new Uri("https://management.azure.com");
            _apiVersion = apiVersion ?? "2025-06-01";
            _userAgent = new TelemetryDetails(GetType().Assembly, applicationId);
        }

        internal RequestUriBuilder CreateGetRequestUri(string subscriptionId, string resourceGroupName, string contextName, string workflowName, string versionName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/contexts/", false);
            uri.AppendPath(contextName, true);
            uri.AppendPath("/workflows/", false);
            uri.AppendPath(workflowName, true);
            uri.AppendPath("/versions/", false);
            uri.AppendPath(versionName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateGetRequest(string subscriptionId, string resourceGroupName, string contextName, string workflowName, string versionName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/contexts/", false);
            uri.AppendPath(contextName, true);
            uri.AppendPath("/workflows/", false);
            uri.AppendPath(workflowName, true);
            uri.AppendPath("/versions/", false);
            uri.AppendPath(versionName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Get a Workflow Version Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="workflowName"> Name of the workflow. </param>
        /// <param name="versionName"> The name of the workflowVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/>, <paramref name="workflowName"/> or <paramref name="versionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/>, <paramref name="workflowName"/> or <paramref name="versionName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<EdgeWorkflowVersionData>> GetAsync(string subscriptionId, string resourceGroupName, string contextName, string workflowName, string versionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));
            Argument.AssertNotNullOrEmpty(workflowName, nameof(workflowName));
            Argument.AssertNotNullOrEmpty(versionName, nameof(versionName));

            using var message = CreateGetRequest(subscriptionId, resourceGroupName, contextName, workflowName, versionName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EdgeWorkflowVersionData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = EdgeWorkflowVersionData.DeserializeEdgeWorkflowVersionData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((EdgeWorkflowVersionData)null, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Get a Workflow Version Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="workflowName"> Name of the workflow. </param>
        /// <param name="versionName"> The name of the workflowVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/>, <paramref name="workflowName"/> or <paramref name="versionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/>, <paramref name="workflowName"/> or <paramref name="versionName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<EdgeWorkflowVersionData> Get(string subscriptionId, string resourceGroupName, string contextName, string workflowName, string versionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));
            Argument.AssertNotNullOrEmpty(workflowName, nameof(workflowName));
            Argument.AssertNotNullOrEmpty(versionName, nameof(versionName));

            using var message = CreateGetRequest(subscriptionId, resourceGroupName, contextName, workflowName, versionName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EdgeWorkflowVersionData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = EdgeWorkflowVersionData.DeserializeEdgeWorkflowVersionData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((EdgeWorkflowVersionData)null, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateCreateOrUpdateRequestUri(string subscriptionId, string resourceGroupName, string contextName, string workflowName, string versionName, EdgeWorkflowVersionData data)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/contexts/", false);
            uri.AppendPath(contextName, true);
            uri.AppendPath("/workflows/", false);
            uri.AppendPath(workflowName, true);
            uri.AppendPath("/versions/", false);
            uri.AppendPath(versionName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateCreateOrUpdateRequest(string subscriptionId, string resourceGroupName, string contextName, string workflowName, string versionName, EdgeWorkflowVersionData data)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/contexts/", false);
            uri.AppendPath(contextName, true);
            uri.AppendPath("/workflows/", false);
            uri.AppendPath(workflowName, true);
            uri.AppendPath("/versions/", false);
            uri.AppendPath(versionName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(data, ModelSerializationExtensions.WireOptions);
            request.Content = content;
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Create or update a Workflow Version Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="workflowName"> Name of the workflow. </param>
        /// <param name="versionName"> The name of the workflowVersion. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/>, <paramref name="workflowName"/>, <paramref name="versionName"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/>, <paramref name="workflowName"/> or <paramref name="versionName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response> CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string contextName, string workflowName, string versionName, EdgeWorkflowVersionData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));
            Argument.AssertNotNullOrEmpty(workflowName, nameof(workflowName));
            Argument.AssertNotNullOrEmpty(versionName, nameof(versionName));
            Argument.AssertNotNull(data, nameof(data));

            using var message = CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, contextName, workflowName, versionName, data);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Create or update a Workflow Version Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="workflowName"> Name of the workflow. </param>
        /// <param name="versionName"> The name of the workflowVersion. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/>, <paramref name="workflowName"/>, <paramref name="versionName"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/>, <paramref name="workflowName"/> or <paramref name="versionName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response CreateOrUpdate(string subscriptionId, string resourceGroupName, string contextName, string workflowName, string versionName, EdgeWorkflowVersionData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));
            Argument.AssertNotNullOrEmpty(workflowName, nameof(workflowName));
            Argument.AssertNotNullOrEmpty(versionName, nameof(versionName));
            Argument.AssertNotNull(data, nameof(data));

            using var message = CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, contextName, workflowName, versionName, data);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateUpdateRequestUri(string subscriptionId, string resourceGroupName, string contextName, string workflowName, string versionName, EdgeWorkflowVersionData data)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/contexts/", false);
            uri.AppendPath(contextName, true);
            uri.AppendPath("/workflows/", false);
            uri.AppendPath(workflowName, true);
            uri.AppendPath("/versions/", false);
            uri.AppendPath(versionName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateUpdateRequest(string subscriptionId, string resourceGroupName, string contextName, string workflowName, string versionName, EdgeWorkflowVersionData data)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/contexts/", false);
            uri.AppendPath(contextName, true);
            uri.AppendPath("/workflows/", false);
            uri.AppendPath(workflowName, true);
            uri.AppendPath("/versions/", false);
            uri.AppendPath(versionName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(data, ModelSerializationExtensions.WireOptions);
            request.Content = content;
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> update an WorkflowVersion Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="workflowName"> Name of the workflow. </param>
        /// <param name="versionName"> The name of the workflowVersion. </param>
        /// <param name="data"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/>, <paramref name="workflowName"/>, <paramref name="versionName"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/>, <paramref name="workflowName"/> or <paramref name="versionName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response> UpdateAsync(string subscriptionId, string resourceGroupName, string contextName, string workflowName, string versionName, EdgeWorkflowVersionData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));
            Argument.AssertNotNullOrEmpty(workflowName, nameof(workflowName));
            Argument.AssertNotNullOrEmpty(versionName, nameof(versionName));
            Argument.AssertNotNull(data, nameof(data));

            using var message = CreateUpdateRequest(subscriptionId, resourceGroupName, contextName, workflowName, versionName, data);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 202:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> update an WorkflowVersion Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="workflowName"> Name of the workflow. </param>
        /// <param name="versionName"> The name of the workflowVersion. </param>
        /// <param name="data"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/>, <paramref name="workflowName"/>, <paramref name="versionName"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/>, <paramref name="workflowName"/> or <paramref name="versionName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response Update(string subscriptionId, string resourceGroupName, string contextName, string workflowName, string versionName, EdgeWorkflowVersionData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));
            Argument.AssertNotNullOrEmpty(workflowName, nameof(workflowName));
            Argument.AssertNotNullOrEmpty(versionName, nameof(versionName));
            Argument.AssertNotNull(data, nameof(data));

            using var message = CreateUpdateRequest(subscriptionId, resourceGroupName, contextName, workflowName, versionName, data);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 202:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateDeleteRequestUri(string subscriptionId, string resourceGroupName, string contextName, string workflowName, string versionName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/contexts/", false);
            uri.AppendPath(contextName, true);
            uri.AppendPath("/workflows/", false);
            uri.AppendPath(workflowName, true);
            uri.AppendPath("/versions/", false);
            uri.AppendPath(versionName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateDeleteRequest(string subscriptionId, string resourceGroupName, string contextName, string workflowName, string versionName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/contexts/", false);
            uri.AppendPath(contextName, true);
            uri.AppendPath("/workflows/", false);
            uri.AppendPath(workflowName, true);
            uri.AppendPath("/versions/", false);
            uri.AppendPath(versionName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Delete a Workflow Version Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="workflowName"> Name of the workflow. </param>
        /// <param name="versionName"> The name of the workflowVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/>, <paramref name="workflowName"/> or <paramref name="versionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/>, <paramref name="workflowName"/> or <paramref name="versionName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response> DeleteAsync(string subscriptionId, string resourceGroupName, string contextName, string workflowName, string versionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));
            Argument.AssertNotNullOrEmpty(workflowName, nameof(workflowName));
            Argument.AssertNotNullOrEmpty(versionName, nameof(versionName));

            using var message = CreateDeleteRequest(subscriptionId, resourceGroupName, contextName, workflowName, versionName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                case 204:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Delete a Workflow Version Resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="workflowName"> Name of the workflow. </param>
        /// <param name="versionName"> The name of the workflowVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/>, <paramref name="workflowName"/> or <paramref name="versionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/>, <paramref name="workflowName"/> or <paramref name="versionName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response Delete(string subscriptionId, string resourceGroupName, string contextName, string workflowName, string versionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));
            Argument.AssertNotNullOrEmpty(workflowName, nameof(workflowName));
            Argument.AssertNotNullOrEmpty(versionName, nameof(versionName));

            using var message = CreateDeleteRequest(subscriptionId, resourceGroupName, contextName, workflowName, versionName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                case 204:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateListByWorkflowRequestUri(string subscriptionId, string resourceGroupName, string contextName, string workflowName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/contexts/", false);
            uri.AppendPath(contextName, true);
            uri.AppendPath("/workflows/", false);
            uri.AppendPath(workflowName, true);
            uri.AppendPath("/versions", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateListByWorkflowRequest(string subscriptionId, string resourceGroupName, string contextName, string workflowName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Edge/contexts/", false);
            uri.AppendPath(contextName, true);
            uri.AppendPath("/workflows/", false);
            uri.AppendPath(workflowName, true);
            uri.AppendPath("/versions", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> List Workflow Version Resources. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="workflowName"> Name of the workflow. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/> or <paramref name="workflowName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/> or <paramref name="workflowName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<WorkflowVersionListResult>> ListByWorkflowAsync(string subscriptionId, string resourceGroupName, string contextName, string workflowName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));
            Argument.AssertNotNullOrEmpty(workflowName, nameof(workflowName));

            using var message = CreateListByWorkflowRequest(subscriptionId, resourceGroupName, contextName, workflowName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        WorkflowVersionListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = WorkflowVersionListResult.DeserializeWorkflowVersionListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> List Workflow Version Resources. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="workflowName"> Name of the workflow. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/> or <paramref name="workflowName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/> or <paramref name="workflowName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<WorkflowVersionListResult> ListByWorkflow(string subscriptionId, string resourceGroupName, string contextName, string workflowName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));
            Argument.AssertNotNullOrEmpty(workflowName, nameof(workflowName));

            using var message = CreateListByWorkflowRequest(subscriptionId, resourceGroupName, contextName, workflowName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        WorkflowVersionListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = WorkflowVersionListResult.DeserializeWorkflowVersionListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateListByWorkflowNextPageRequestUri(string nextLink, string subscriptionId, string resourceGroupName, string contextName, string workflowName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            return uri;
        }

        internal HttpMessage CreateListByWorkflowNextPageRequest(string nextLink, string subscriptionId, string resourceGroupName, string contextName, string workflowName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> List Workflow Version Resources. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="workflowName"> Name of the workflow. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/> or <paramref name="workflowName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/> or <paramref name="workflowName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<WorkflowVersionListResult>> ListByWorkflowNextPageAsync(string nextLink, string subscriptionId, string resourceGroupName, string contextName, string workflowName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));
            Argument.AssertNotNullOrEmpty(workflowName, nameof(workflowName));

            using var message = CreateListByWorkflowNextPageRequest(nextLink, subscriptionId, resourceGroupName, contextName, workflowName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        WorkflowVersionListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = WorkflowVersionListResult.DeserializeWorkflowVersionListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> List Workflow Version Resources. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="contextName"> The name of the Context. </param>
        /// <param name="workflowName"> Name of the workflow. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/> or <paramref name="workflowName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="contextName"/> or <paramref name="workflowName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<WorkflowVersionListResult> ListByWorkflowNextPage(string nextLink, string subscriptionId, string resourceGroupName, string contextName, string workflowName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(contextName, nameof(contextName));
            Argument.AssertNotNullOrEmpty(workflowName, nameof(workflowName));

            using var message = CreateListByWorkflowNextPageRequest(nextLink, subscriptionId, resourceGroupName, contextName, workflowName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        WorkflowVersionListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = WorkflowVersionListResult.DeserializeWorkflowVersionListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Properties/AssemblyInfo.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

using System.Runtime.CompilerServices;

[assembly: Azure.Core.AzureResourceProviderNamespace("Microsoft.Edge")]

[assembly: InternalsVisibleTo("DynamicProxyGenAssembly2, PublicKey=0024000004800000940000000602000000240000525341310004000001000100c547cac37abd99c8db225ef2f6c8a3602f3b3606cc9891605d02baa56104f4cfc0734aa39b93bf7852f7d9266654753cc297e7d2edfe0bac1cdcf9f717241550e0a7b191195b7667bb4f64bcb8e2121380fd1d9d46ad2d92d2d15605093924cceaf74c4861eff62abf69b9291ed0a340e113be11e6a7d3113e92484cf7045cc7")]
[assembly: InternalsVisibleTo("Azure.ResourceManager.WorkloadOrchestration.Tests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100d15ddcb29688295338af4b7686603fe614abd555e09efba8fb88ee09e1f7b1ccaeed2e8f823fa9eef3fdd60217fc012ea67d2479751a0b8c087a4185541b851bd8b16f8d91b840e51b1cb0ba6fe647997e57429265e85ef62d565db50a69ae1647d54d7bd855e4db3d8a91510e5bcbd0edfbbecaa20a7bd9ae74593daa7b11b4")]



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/tests/Azure.ResourceManager.WorkloadOrchestration.Tests.csproj
================================================
﻿<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFrameworks>$(RequiredTargetFrameworks)</TargetFrameworks>
  </PropertyGroup>

  <ItemGroup>
    <ProjectReference Include="..\src\Azure.ResourceManager.WorkloadOrchestration.csproj" />
    <ProjectReference Include="$(AzureCoreTestFramework)" />
  </ItemGroup>

  <ItemGroup>
    <None Update="Resources\**\*.*">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Azure.ResourceManager.Resources" />
  </ItemGroup>
</Project>



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/tests/InformaticaDataManagementManagementTestBase.cs
================================================
﻿// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

using Azure.Core;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.TestFramework;
using NUnit.Framework;
using System.Threading.Tasks;

namespace Azure.ResourceManager.WorkloadOrchestration.Tests
{
    public class InformaticaDataManagementManagementTestBase : ManagementRecordedTestBase<InformaticaDataManagementManagementTestEnvironment>
    {
        protected ArmClient Client { get; private set; }
        protected SubscriptionResource DefaultSubscription { get; private set; }

        protected InformaticaDataManagementManagementTestBase(bool isAsync, RecordedTestMode mode)
        : base(isAsync, mode)
        {
        }

        protected InformaticaDataManagementManagementTestBase(bool isAsync)
            : base(isAsync)
        {
        }

        [SetUp]
        public async Task CreateCommonClient()
        {
            Client = GetArmClient();
            DefaultSubscription = await Client.GetDefaultSubscriptionAsync().ConfigureAwait(false);
        }

        protected async Task<ResourceGroupResource> CreateResourceGroup(SubscriptionResource subscription, string rgNamePrefix, AzureLocation location)
        {
            string rgName = Recording.GenerateAssetName(rgNamePrefix);
            ResourceGroupData input = new ResourceGroupData(location);
            var lro = await subscription.GetResourceGroups().CreateOrUpdateAsync(WaitUntil.Completed, rgName, input);
            return lro.Value;
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/tests/InformaticaDataManagementManagementTestEnvironment.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

using Azure.Core.TestFramework;

namespace Azure.ResourceManager.WorkloadOrchestration.Tests
{
    public class InformaticaDataManagementManagementTestEnvironment : TestEnvironment
    {
    }
}


================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/tests/WorkloadOrchestrationTestBase.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.WorkloadOrchestration.Tests
{
    public class WorkloadOrchestrationTestBase : RecordedTestBase<WorkloadOrchestrationTestEnvironment>
    {
        public WorkloadOrchestrationTestBase(bool isAsync) : base(isAsync)
        {
        }

        protected ArmClient GetArmClient()
        {
            var options = new ArmClientOptions();
            InstrumentClientOptions(options);
            return new ArmClient(TestEnvironment.Credential, null, options);
        }

        protected ResourceGroupResource GetResourceGroup()
        {
            var subscriptionId = "973d15c6-6c57-447e-b9c6-6d79b5b784ab"; // Use the subscription ID from your test environment
            var rgName = "audapurerg";
            var resourceGroupId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, rgName);
            return GetArmClient().GetResourceGroupResource(resourceGroupId);
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/tests/WorkloadOrchestrationTestEnvironment.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

using Azure.Core.TestFramework;

namespace Azure.ResourceManager.WorkloadOrchestration.Tests
{
    public class WorkloadOrchestrationTestEnvironment : TestEnvironment
    {
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/tests/Generated/Samples/Sample_EdgeConfigTemplateCollection.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.WorkloadOrchestration.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.WorkloadOrchestration.Samples
{
    public partial class Sample_EdgeConfigTemplateCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_ConfigTemplatesCreateOrUpdateMaximumSet()
        {
            // Generated from example definition: 2025-06-01/ConfigTemplates_CreateOrUpdate_MaximumSet_Gen.json
            // this example is just showing the usage of "ConfigTemplate_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this EdgeConfigTemplateResource
            EdgeConfigTemplateCollection collection = resourceGroupResource.GetEdgeConfigTemplates();

            // invoke the operation
            string configTemplateName = "testname";
            EdgeConfigTemplateData data = new EdgeConfigTemplateData(new AzureLocation("egqjo"))
            {
                Properties = new EdgeConfigTemplateProperties("ccdyggozwmhyvemlcwlsnhijwg"),
                Tags =
{
["key6936"] = "vnqujuvnbxonbsgb"
},
            };
            ArmOperation<EdgeConfigTemplateResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, configTemplateName, data);
            EdgeConfigTemplateResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeConfigTemplateData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_ConfigTemplatesGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/ConfigTemplates_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "ConfigTemplate_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this EdgeConfigTemplateResource
            EdgeConfigTemplateCollection collection = resourceGroupResource.GetEdgeConfigTemplates();

            // invoke the operation
            string configTemplateName = "testname";
            EdgeConfigTemplateResource result = await collection.GetAsync(configTemplateName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeConfigTemplateData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_ConfigTemplatesListByResourceGroupMaximumSet()
        {
            // Generated from example definition: 2025-06-01/ConfigTemplates_ListByResourceGroup_MaximumSet_Gen.json
            // this example is just showing the usage of "ConfigTemplate_ListByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this EdgeConfigTemplateResource
            EdgeConfigTemplateCollection collection = resourceGroupResource.GetEdgeConfigTemplates();

            // invoke the operation and iterate over the result
            await foreach (EdgeConfigTemplateResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                EdgeConfigTemplateData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_ConfigTemplatesGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/ConfigTemplates_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "ConfigTemplate_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this EdgeConfigTemplateResource
            EdgeConfigTemplateCollection collection = resourceGroupResource.GetEdgeConfigTemplates();

            // invoke the operation
            string configTemplateName = "testname";
            bool result = await collection.ExistsAsync(configTemplateName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_ConfigTemplatesGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/ConfigTemplates_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "ConfigTemplate_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this EdgeConfigTemplateResource
            EdgeConfigTemplateCollection collection = resourceGroupResource.GetEdgeConfigTemplates();

            // invoke the operation
            string configTemplateName = "testname";
            NullableResponse<EdgeConfigTemplateResource> response = await collection.GetIfExistsAsync(configTemplateName);
            EdgeConfigTemplateResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                EdgeConfigTemplateData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/tests/Generated/Samples/Sample_EdgeConfigTemplateResource.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.WorkloadOrchestration.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.WorkloadOrchestration.Samples
{
    public partial class Sample_EdgeConfigTemplateResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_ConfigTemplatesGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/ConfigTemplates_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "ConfigTemplate_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeConfigTemplateResource created on azure
            // for more information of creating EdgeConfigTemplateResource, please refer to the document of EdgeConfigTemplateResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string configTemplateName = "testname";
            ResourceIdentifier edgeConfigTemplateResourceId = EdgeConfigTemplateResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, configTemplateName);
            EdgeConfigTemplateResource edgeConfigTemplate = client.GetEdgeConfigTemplateResource(edgeConfigTemplateResourceId);

            // invoke the operation
            EdgeConfigTemplateResource result = await edgeConfigTemplate.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeConfigTemplateData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_ConfigTemplatesDeleteMaximumSet()
        {
            // Generated from example definition: 2025-06-01/ConfigTemplates_Delete_MaximumSet_Gen.json
            // this example is just showing the usage of "ConfigTemplate_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeConfigTemplateResource created on azure
            // for more information of creating EdgeConfigTemplateResource, please refer to the document of EdgeConfigTemplateResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string configTemplateName = "testname";
            ResourceIdentifier edgeConfigTemplateResourceId = EdgeConfigTemplateResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, configTemplateName);
            EdgeConfigTemplateResource edgeConfigTemplate = client.GetEdgeConfigTemplateResource(edgeConfigTemplateResourceId);

            // invoke the operation
            await edgeConfigTemplate.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_ConfigTemplatesUpdateMaximumSet()
        {
            // Generated from example definition: 2025-06-01/ConfigTemplates_Update_MaximumSet_Gen.json
            // this example is just showing the usage of "ConfigTemplate_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeConfigTemplateResource created on azure
            // for more information of creating EdgeConfigTemplateResource, please refer to the document of EdgeConfigTemplateResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string configTemplateName = "testname";
            ResourceIdentifier edgeConfigTemplateResourceId = EdgeConfigTemplateResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, configTemplateName);
            EdgeConfigTemplateResource edgeConfigTemplate = client.GetEdgeConfigTemplateResource(edgeConfigTemplateResourceId);

            // invoke the operation
            EdgeConfigTemplatePatch patch = new EdgeConfigTemplatePatch
            {
                Tags =
{
["key7701"] = "wrsv"
},
                ConfigTemplateUpdateDescription = "cavjiqnrbzsvedicrixhwnfj",
            };
            EdgeConfigTemplateResource result = await edgeConfigTemplate.UpdateAsync(patch);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeConfigTemplateData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateVersion_ConfigTemplatesCreateVersionMaximumSet()
        {
            // Generated from example definition: 2025-06-01/ConfigTemplates_CreateVersion_MaximumSet_Gen.json
            // this example is just showing the usage of "ConfigTemplates_CreateVersion" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeConfigTemplateResource created on azure
            // for more information of creating EdgeConfigTemplateResource, please refer to the document of EdgeConfigTemplateResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string configTemplateName = "testname";
            ResourceIdentifier edgeConfigTemplateResourceId = EdgeConfigTemplateResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, configTemplateName);
            EdgeConfigTemplateResource edgeConfigTemplate = client.GetEdgeConfigTemplateResource(edgeConfigTemplateResourceId);

            // invoke the operation
            ConfigTemplateVersionWithUpdateType body = new ConfigTemplateVersionWithUpdateType(new EdgeConfigTemplateVersionData
            {
                Properties = new EdgeConfigTemplateVersionProperties("rgricnhvcbqykc"),
            })
            {
                UpdateType = EdgeUpdateType.Major,
                Version = "1.0.0",
            };
            ArmOperation<EdgeConfigTemplateVersionResource> lro = await edgeConfigTemplate.CreateVersionAsync(WaitUntil.Completed, body);
            EdgeConfigTemplateVersionResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeConfigTemplateVersionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task RemoveVersion_ConfigTemplatesRemoveVersionMaximumSet()
        {
            // Generated from example definition: 2025-06-01/ConfigTemplates_RemoveVersion_MaximumSet_Gen.json
            // this example is just showing the usage of "ConfigTemplates_RemoveVersion" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeConfigTemplateResource created on azure
            // for more information of creating EdgeConfigTemplateResource, please refer to the document of EdgeConfigTemplateResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string configTemplateName = "testname";
            ResourceIdentifier edgeConfigTemplateResourceId = EdgeConfigTemplateResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, configTemplateName);
            EdgeConfigTemplateResource edgeConfigTemplate = client.GetEdgeConfigTemplateResource(edgeConfigTemplateResourceId);

            // invoke the operation
            EdgeVersionContent content = new EdgeVersionContent("ghtvdzgmzncaifrnuumg");
            RemoveVersionResult result = await edgeConfigTemplate.RemoveVersionAsync(content);

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/tests/Generated/Samples/Sample_EdgeConfigTemplateVersionCollection.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.ResourceManager.WorkloadOrchestration.Samples
{
    public partial class Sample_EdgeConfigTemplateVersionCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_ConfigTemplateVersionsGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/ConfigTemplateVersions_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "ConfigTemplateVersion_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeConfigTemplateResource created on azure
            // for more information of creating EdgeConfigTemplateResource, please refer to the document of EdgeConfigTemplateResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string configTemplateName = "testname";
            ResourceIdentifier edgeConfigTemplateResourceId = EdgeConfigTemplateResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, configTemplateName);
            EdgeConfigTemplateResource edgeConfigTemplate = client.GetEdgeConfigTemplateResource(edgeConfigTemplateResourceId);

            // get the collection of this EdgeConfigTemplateVersionResource
            EdgeConfigTemplateVersionCollection collection = edgeConfigTemplate.GetEdgeConfigTemplateVersions();

            // invoke the operation
            string configTemplateVersionName = "1.0.0";
            EdgeConfigTemplateVersionResource result = await collection.GetAsync(configTemplateVersionName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeConfigTemplateVersionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_ConfigTemplateVersionsListByConfigTemplateMaximumSet()
        {
            // Generated from example definition: 2025-06-01/ConfigTemplateVersions_ListByConfigTemplate_MaximumSet_Gen.json
            // this example is just showing the usage of "ConfigTemplateVersion_ListByConfigTemplate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeConfigTemplateResource created on azure
            // for more information of creating EdgeConfigTemplateResource, please refer to the document of EdgeConfigTemplateResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string configTemplateName = "testname";
            ResourceIdentifier edgeConfigTemplateResourceId = EdgeConfigTemplateResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, configTemplateName);
            EdgeConfigTemplateResource edgeConfigTemplate = client.GetEdgeConfigTemplateResource(edgeConfigTemplateResourceId);

            // get the collection of this EdgeConfigTemplateVersionResource
            EdgeConfigTemplateVersionCollection collection = edgeConfigTemplate.GetEdgeConfigTemplateVersions();

            // invoke the operation and iterate over the result
            await foreach (EdgeConfigTemplateVersionResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                EdgeConfigTemplateVersionData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_ConfigTemplateVersionsGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/ConfigTemplateVersions_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "ConfigTemplateVersion_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeConfigTemplateResource created on azure
            // for more information of creating EdgeConfigTemplateResource, please refer to the document of EdgeConfigTemplateResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string configTemplateName = "testname";
            ResourceIdentifier edgeConfigTemplateResourceId = EdgeConfigTemplateResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, configTemplateName);
            EdgeConfigTemplateResource edgeConfigTemplate = client.GetEdgeConfigTemplateResource(edgeConfigTemplateResourceId);

            // get the collection of this EdgeConfigTemplateVersionResource
            EdgeConfigTemplateVersionCollection collection = edgeConfigTemplate.GetEdgeConfigTemplateVersions();

            // invoke the operation
            string configTemplateVersionName = "1.0.0";
            bool result = await collection.ExistsAsync(configTemplateVersionName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_ConfigTemplateVersionsGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/ConfigTemplateVersions_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "ConfigTemplateVersion_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeConfigTemplateResource created on azure
            // for more information of creating EdgeConfigTemplateResource, please refer to the document of EdgeConfigTemplateResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string configTemplateName = "testname";
            ResourceIdentifier edgeConfigTemplateResourceId = EdgeConfigTemplateResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, configTemplateName);
            EdgeConfigTemplateResource edgeConfigTemplate = client.GetEdgeConfigTemplateResource(edgeConfigTemplateResourceId);

            // get the collection of this EdgeConfigTemplateVersionResource
            EdgeConfigTemplateVersionCollection collection = edgeConfigTemplate.GetEdgeConfigTemplateVersions();

            // invoke the operation
            string configTemplateVersionName = "1.0.0";
            NullableResponse<EdgeConfigTemplateVersionResource> response = await collection.GetIfExistsAsync(configTemplateVersionName);
            EdgeConfigTemplateVersionResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                EdgeConfigTemplateVersionData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/tests/Generated/Samples/Sample_EdgeConfigTemplateVersionResource.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.ResourceManager.WorkloadOrchestration.Samples
{
    public partial class Sample_EdgeConfigTemplateVersionResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_ConfigTemplateVersionsGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/ConfigTemplateVersions_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "ConfigTemplateVersion_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeConfigTemplateVersionResource created on azure
            // for more information of creating EdgeConfigTemplateVersionResource, please refer to the document of EdgeConfigTemplateVersionResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string configTemplateName = "testname";
            string configTemplateVersionName = "1.0.0";
            ResourceIdentifier edgeConfigTemplateVersionResourceId = EdgeConfigTemplateVersionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, configTemplateName, configTemplateVersionName);
            EdgeConfigTemplateVersionResource edgeConfigTemplateVersion = client.GetEdgeConfigTemplateVersionResource(edgeConfigTemplateVersionResourceId);

            // invoke the operation
            EdgeConfigTemplateVersionResource result = await edgeConfigTemplateVersion.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeConfigTemplateVersionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/tests/Generated/Samples/Sample_EdgeContextCollection.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.WorkloadOrchestration.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.WorkloadOrchestration.Samples
{
    public partial class Sample_EdgeContextCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_ContextsCreateOrUpdateMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Contexts_CreateOrUpdate_MaximumSet_Gen.json
            // this example is just showing the usage of "Context_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this EdgeContextResource
            EdgeContextCollection collection = resourceGroupResource.GetEdgeContexts();

            // invoke the operation
            string contextName = "testname";
            EdgeContextData data = new EdgeContextData(new AzureLocation("pkquwbplcp"))
            {
                Properties = new EdgeContextProperties(new ContextCapability[]
            {
new ContextCapability("tpylinjcmlnycfpofpxjtqmt", "banbenutsngwytoqh")
{
State = EdgeResourceState.Active,
}
            }, new ContextHierarchy[]
            {
new ContextHierarchy("upqe", "vg")
            }),
                Tags =
{
["key3046"] = "clcnhzwypk"
},
            };
            ArmOperation<EdgeContextResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, contextName, data);
            EdgeContextResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeContextData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_ContextsGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Contexts_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "Context_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this EdgeContextResource
            EdgeContextCollection collection = resourceGroupResource.GetEdgeContexts();

            // invoke the operation
            string contextName = "testname";
            EdgeContextResource result = await collection.GetAsync(contextName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeContextData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_ContextsListByResourceGroupMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Contexts_ListByResourceGroup_MaximumSet_Gen.json
            // this example is just showing the usage of "Context_ListByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this EdgeContextResource
            EdgeContextCollection collection = resourceGroupResource.GetEdgeContexts();

            // invoke the operation and iterate over the result
            await foreach (EdgeContextResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                EdgeContextData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_ContextsGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Contexts_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "Context_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this EdgeContextResource
            EdgeContextCollection collection = resourceGroupResource.GetEdgeContexts();

            // invoke the operation
            string contextName = "testname";
            bool result = await collection.ExistsAsync(contextName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_ContextsGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Contexts_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "Context_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this EdgeContextResource
            EdgeContextCollection collection = resourceGroupResource.GetEdgeContexts();

            // invoke the operation
            string contextName = "testname";
            NullableResponse<EdgeContextResource> response = await collection.GetIfExistsAsync(contextName);
            EdgeContextResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                EdgeContextData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/tests/Generated/Samples/Sample_EdgeContextResource.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.WorkloadOrchestration.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.WorkloadOrchestration.Samples
{
    public partial class Sample_EdgeContextResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_ContextsGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Contexts_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "Context_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeContextResource created on azure
            // for more information of creating EdgeContextResource, please refer to the document of EdgeContextResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string contextName = "testname";
            ResourceIdentifier edgeContextResourceId = EdgeContextResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, contextName);
            EdgeContextResource edgeContext = client.GetEdgeContextResource(edgeContextResourceId);

            // invoke the operation
            EdgeContextResource result = await edgeContext.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeContextData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_ContextsDeleteMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Contexts_Delete_MaximumSet_Gen.json
            // this example is just showing the usage of "Context_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeContextResource created on azure
            // for more information of creating EdgeContextResource, please refer to the document of EdgeContextResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string contextName = "testname";
            ResourceIdentifier edgeContextResourceId = EdgeContextResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, contextName);
            EdgeContextResource edgeContext = client.GetEdgeContextResource(edgeContextResourceId);

            // invoke the operation
            await edgeContext.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_ContextsUpdateMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Contexts_Update_MaximumSet_Gen.json
            // this example is just showing the usage of "Context_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeContextResource created on azure
            // for more information of creating EdgeContextResource, please refer to the document of EdgeContextResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string contextName = "testname";
            ResourceIdentifier edgeContextResourceId = EdgeContextResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, contextName);
            EdgeContextResource edgeContext = client.GetEdgeContextResource(edgeContextResourceId);

            // invoke the operation
            EdgeContextPatch patch = new EdgeContextPatch
            {
                Tags =
{
["key9545"] = "dhxykbzgliyqxxizttbjhuruhhv"
},
                Properties = new EdgeContextPatchProperties
                {
                    Capabilities = {new ContextCapability("tpylinjcmlnycfpofpxjtqmt", "banbenutsngwytoqh")
{
State = EdgeResourceState.Active,
}},
                    Hierarchies = { new ContextHierarchy("upqe", "vg") },
                },
            };
            ArmOperation<EdgeContextResource> lro = await edgeContext.UpdateAsync(WaitUntil.Completed, patch);
            EdgeContextResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeContextData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/tests/Generated/Samples/Sample_EdgeDeploymentInstanceCollection.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.WorkloadOrchestration.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.WorkloadOrchestration.Samples
{
    public partial class Sample_EdgeDeploymentInstanceCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_InstancesCreateOrUpdateMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Instances_CreateOrUpdate_MaximumSet_Gen.json
            // this example is just showing the usage of "Instance_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeSolutionResource created on azure
            // for more information of creating EdgeSolutionResource, please refer to the document of EdgeSolutionResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string targetName = "testname";
            string solutionName = "testname";
            ResourceIdentifier edgeSolutionResourceId = EdgeSolutionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, targetName, solutionName);
            EdgeSolutionResource edgeSolution = client.GetEdgeSolutionResource(edgeSolutionResourceId);

            // get the collection of this EdgeDeploymentInstanceResource
            EdgeDeploymentInstanceCollection collection = edgeSolution.GetEdgeDeploymentInstances();

            // invoke the operation
            string instanceName = "testname";
            EdgeDeploymentInstanceData data = new EdgeDeploymentInstanceData
            {
                Properties = new EdgeDeploymentInstanceProperties("acpddbkfclsgxg", "eguutiftuxrsavvckjrv")
                {
                    ActiveState = InstanceActiveState.Active,
                    ReconciliationPolicy = new InstanceReconciliationPolicy(InstanceReconciliationState.Inactive, "szucgzdbydcowvhprhx"),
                    SolutionScope = "testname",
                },
                ExtendedLocation = new ExtendedLocation
                {
                    Name = "szjrwimeqyiue",
                },
            };
            ArmOperation<EdgeDeploymentInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, instanceName, data);
            EdgeDeploymentInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeDeploymentInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_InstancesGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Instances_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "Instance_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeSolutionResource created on azure
            // for more information of creating EdgeSolutionResource, please refer to the document of EdgeSolutionResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string targetName = "testname";
            string solutionName = "testname";
            ResourceIdentifier edgeSolutionResourceId = EdgeSolutionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, targetName, solutionName);
            EdgeSolutionResource edgeSolution = client.GetEdgeSolutionResource(edgeSolutionResourceId);

            // get the collection of this EdgeDeploymentInstanceResource
            EdgeDeploymentInstanceCollection collection = edgeSolution.GetEdgeDeploymentInstances();

            // invoke the operation
            string instanceName = "testname";
            EdgeDeploymentInstanceResource result = await collection.GetAsync(instanceName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeDeploymentInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_InstancesListBySolutionMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Instances_ListBySolution_MaximumSet_Gen.json
            // this example is just showing the usage of "Instance_ListBySolution" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeSolutionResource created on azure
            // for more information of creating EdgeSolutionResource, please refer to the document of EdgeSolutionResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string targetName = "testname";
            string solutionName = "testname";
            ResourceIdentifier edgeSolutionResourceId = EdgeSolutionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, targetName, solutionName);
            EdgeSolutionResource edgeSolution = client.GetEdgeSolutionResource(edgeSolutionResourceId);

            // get the collection of this EdgeDeploymentInstanceResource
            EdgeDeploymentInstanceCollection collection = edgeSolution.GetEdgeDeploymentInstances();

            // invoke the operation and iterate over the result
            await foreach (EdgeDeploymentInstanceResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                EdgeDeploymentInstanceData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_InstancesGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Instances_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "Instance_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeSolutionResource created on azure
            // for more information of creating EdgeSolutionResource, please refer to the document of EdgeSolutionResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string targetName = "testname";
            string solutionName = "testname";
            ResourceIdentifier edgeSolutionResourceId = EdgeSolutionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, targetName, solutionName);
            EdgeSolutionResource edgeSolution = client.GetEdgeSolutionResource(edgeSolutionResourceId);

            // get the collection of this EdgeDeploymentInstanceResource
            EdgeDeploymentInstanceCollection collection = edgeSolution.GetEdgeDeploymentInstances();

            // invoke the operation
            string instanceName = "testname";
            bool result = await collection.ExistsAsync(instanceName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_InstancesGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Instances_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "Instance_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeSolutionResource created on azure
            // for more information of creating EdgeSolutionResource, please refer to the document of EdgeSolutionResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string targetName = "testname";
            string solutionName = "testname";
            ResourceIdentifier edgeSolutionResourceId = EdgeSolutionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, targetName, solutionName);
            EdgeSolutionResource edgeSolution = client.GetEdgeSolutionResource(edgeSolutionResourceId);

            // get the collection of this EdgeDeploymentInstanceResource
            EdgeDeploymentInstanceCollection collection = edgeSolution.GetEdgeDeploymentInstances();

            // invoke the operation
            string instanceName = "testname";
            NullableResponse<EdgeDeploymentInstanceResource> response = await collection.GetIfExistsAsync(instanceName);
            EdgeDeploymentInstanceResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                EdgeDeploymentInstanceData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/tests/Generated/Samples/Sample_EdgeDeploymentInstanceHistoryCollection.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.ResourceManager.WorkloadOrchestration.Samples
{
    public partial class Sample_EdgeDeploymentInstanceHistoryCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_InstanceHistoriesGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/InstanceHistories_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "InstanceHistory_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeDeploymentInstanceResource created on azure
            // for more information of creating EdgeDeploymentInstanceResource, please refer to the document of EdgeDeploymentInstanceResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string targetName = "testname";
            string solutionName = "testname";
            string instanceName = "testname";
            ResourceIdentifier edgeDeploymentInstanceResourceId = EdgeDeploymentInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, targetName, solutionName, instanceName);
            EdgeDeploymentInstanceResource edgeDeploymentInstance = client.GetEdgeDeploymentInstanceResource(edgeDeploymentInstanceResourceId);

            // get the collection of this EdgeDeploymentInstanceHistoryResource
            EdgeDeploymentInstanceHistoryCollection collection = edgeDeploymentInstance.GetEdgeDeploymentInstanceHistories();

            // invoke the operation
            string instanceHistoryName = "testname";
            EdgeDeploymentInstanceHistoryResource result = await collection.GetAsync(instanceHistoryName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeDeploymentInstanceHistoryData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_InstanceHistoriesListByInstanceMaximumSet()
        {
            // Generated from example definition: 2025-06-01/InstanceHistories_ListByInstance_MaximumSet_Gen.json
            // this example is just showing the usage of "InstanceHistory_ListByInstance" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeDeploymentInstanceResource created on azure
            // for more information of creating EdgeDeploymentInstanceResource, please refer to the document of EdgeDeploymentInstanceResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string targetName = "testname";
            string solutionName = "testname";
            string instanceName = "testname";
            ResourceIdentifier edgeDeploymentInstanceResourceId = EdgeDeploymentInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, targetName, solutionName, instanceName);
            EdgeDeploymentInstanceResource edgeDeploymentInstance = client.GetEdgeDeploymentInstanceResource(edgeDeploymentInstanceResourceId);

            // get the collection of this EdgeDeploymentInstanceHistoryResource
            EdgeDeploymentInstanceHistoryCollection collection = edgeDeploymentInstance.GetEdgeDeploymentInstanceHistories();

            // invoke the operation and iterate over the result
            await foreach (EdgeDeploymentInstanceHistoryResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                EdgeDeploymentInstanceHistoryData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_InstanceHistoriesGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/InstanceHistories_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "InstanceHistory_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeDeploymentInstanceResource created on azure
            // for more information of creating EdgeDeploymentInstanceResource, please refer to the document of EdgeDeploymentInstanceResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string targetName = "testname";
            string solutionName = "testname";
            string instanceName = "testname";
            ResourceIdentifier edgeDeploymentInstanceResourceId = EdgeDeploymentInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, targetName, solutionName, instanceName);
            EdgeDeploymentInstanceResource edgeDeploymentInstance = client.GetEdgeDeploymentInstanceResource(edgeDeploymentInstanceResourceId);

            // get the collection of this EdgeDeploymentInstanceHistoryResource
            EdgeDeploymentInstanceHistoryCollection collection = edgeDeploymentInstance.GetEdgeDeploymentInstanceHistories();

            // invoke the operation
            string instanceHistoryName = "testname";
            bool result = await collection.ExistsAsync(instanceHistoryName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_InstanceHistoriesGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/InstanceHistories_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "InstanceHistory_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeDeploymentInstanceResource created on azure
            // for more information of creating EdgeDeploymentInstanceResource, please refer to the document of EdgeDeploymentInstanceResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string targetName = "testname";
            string solutionName = "testname";
            string instanceName = "testname";
            ResourceIdentifier edgeDeploymentInstanceResourceId = EdgeDeploymentInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, targetName, solutionName, instanceName);
            EdgeDeploymentInstanceResource edgeDeploymentInstance = client.GetEdgeDeploymentInstanceResource(edgeDeploymentInstanceResourceId);

            // get the collection of this EdgeDeploymentInstanceHistoryResource
            EdgeDeploymentInstanceHistoryCollection collection = edgeDeploymentInstance.GetEdgeDeploymentInstanceHistories();

            // invoke the operation
            string instanceHistoryName = "testname";
            NullableResponse<EdgeDeploymentInstanceHistoryResource> response = await collection.GetIfExistsAsync(instanceHistoryName);
            EdgeDeploymentInstanceHistoryResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                EdgeDeploymentInstanceHistoryData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/tests/Generated/Samples/Sample_EdgeDeploymentInstanceHistoryResource.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.ResourceManager.WorkloadOrchestration.Samples
{
    public partial class Sample_EdgeDeploymentInstanceHistoryResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_InstanceHistoriesGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/InstanceHistories_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "InstanceHistory_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeDeploymentInstanceHistoryResource created on azure
            // for more information of creating EdgeDeploymentInstanceHistoryResource, please refer to the document of EdgeDeploymentInstanceHistoryResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string targetName = "testname";
            string solutionName = "testname";
            string instanceName = "testname";
            string instanceHistoryName = "testname";
            ResourceIdentifier edgeDeploymentInstanceHistoryResourceId = EdgeDeploymentInstanceHistoryResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, targetName, solutionName, instanceName, instanceHistoryName);
            EdgeDeploymentInstanceHistoryResource edgeDeploymentInstanceHistory = client.GetEdgeDeploymentInstanceHistoryResource(edgeDeploymentInstanceHistoryResourceId);

            // invoke the operation
            EdgeDeploymentInstanceHistoryResource result = await edgeDeploymentInstanceHistory.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeDeploymentInstanceHistoryData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/tests/Generated/Samples/Sample_EdgeDeploymentInstanceResource.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.WorkloadOrchestration.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.WorkloadOrchestration.Samples
{
    public partial class Sample_EdgeDeploymentInstanceResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_InstancesGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Instances_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "Instance_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeDeploymentInstanceResource created on azure
            // for more information of creating EdgeDeploymentInstanceResource, please refer to the document of EdgeDeploymentInstanceResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string targetName = "testname";
            string solutionName = "testname";
            string instanceName = "testname";
            ResourceIdentifier edgeDeploymentInstanceResourceId = EdgeDeploymentInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, targetName, solutionName, instanceName);
            EdgeDeploymentInstanceResource edgeDeploymentInstance = client.GetEdgeDeploymentInstanceResource(edgeDeploymentInstanceResourceId);

            // invoke the operation
            EdgeDeploymentInstanceResource result = await edgeDeploymentInstance.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeDeploymentInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_InstancesDeleteMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Instances_Delete_MaximumSet_Gen.json
            // this example is just showing the usage of "Instance_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeDeploymentInstanceResource created on azure
            // for more information of creating EdgeDeploymentInstanceResource, please refer to the document of EdgeDeploymentInstanceResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string targetName = "testname";
            string solutionName = "testname";
            string instanceName = "testname";
            ResourceIdentifier edgeDeploymentInstanceResourceId = EdgeDeploymentInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, targetName, solutionName, instanceName);
            EdgeDeploymentInstanceResource edgeDeploymentInstance = client.GetEdgeDeploymentInstanceResource(edgeDeploymentInstanceResourceId);

            // invoke the operation
            await edgeDeploymentInstance.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_InstancesUpdateMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Instances_Update_MaximumSet_Gen.json
            // this example is just showing the usage of "Instance_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeDeploymentInstanceResource created on azure
            // for more information of creating EdgeDeploymentInstanceResource, please refer to the document of EdgeDeploymentInstanceResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string targetName = "testname";
            string solutionName = "testname";
            string instanceName = "testname";
            ResourceIdentifier edgeDeploymentInstanceResourceId = EdgeDeploymentInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, targetName, solutionName, instanceName);
            EdgeDeploymentInstanceResource edgeDeploymentInstance = client.GetEdgeDeploymentInstanceResource(edgeDeploymentInstanceResourceId);

            // invoke the operation
            EdgeDeploymentInstanceData data = new EdgeDeploymentInstanceData
            {
                Properties = new EdgeDeploymentInstanceProperties("vrpzlamkvanqibtjarpxit", "tqkdvc")
                {
                    ActiveState = InstanceActiveState.Active,
                    ReconciliationPolicy = new InstanceReconciliationPolicy(InstanceReconciliationState.Inactive, "cmzlrjwnlshnkgv"),
                    SolutionScope = "testname",
                },
            };
            ArmOperation<EdgeDeploymentInstanceResource> lro = await edgeDeploymentInstance.UpdateAsync(WaitUntil.Completed, data);
            EdgeDeploymentInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeDeploymentInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/tests/Generated/Samples/Sample_EdgeDiagnosticCollection.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.WorkloadOrchestration.Samples
{
    public partial class Sample_EdgeDiagnosticCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_DiagnosticsCreateOrUpdateMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Diagnostics_CreateOrUpdate_MaximumSet_Gen.json
            // this example is just showing the usage of "Diagnostic_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this EdgeDiagnosticResource
            EdgeDiagnosticCollection collection = resourceGroupResource.GetEdgeDiagnostics();

            // invoke the operation
            string diagnosticName = "testname";
            EdgeDiagnosticData data = new EdgeDiagnosticData(new AzureLocation("ouwfvnokjvivmjzqpupwrbsmls"))
            {
                ExtendedLocation = new ExtendedLocation
                {
                    Name = "szjrwimeqyiue",
                },
                Tags =
{
["key4304"] = "mdrwpsdrcicagvximokxrrp"
},
            };
            ArmOperation<EdgeDiagnosticResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, diagnosticName, data);
            EdgeDiagnosticResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeDiagnosticData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_DiagnosticsGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Diagnostics_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "Diagnostic_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this EdgeDiagnosticResource
            EdgeDiagnosticCollection collection = resourceGroupResource.GetEdgeDiagnostics();

            // invoke the operation
            string diagnosticName = "testname";
            EdgeDiagnosticResource result = await collection.GetAsync(diagnosticName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeDiagnosticData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_DiagnosticsListByResourceGroupMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Diagnostics_ListByResourceGroup_MaximumSet_Gen.json
            // this example is just showing the usage of "Diagnostic_ListByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this EdgeDiagnosticResource
            EdgeDiagnosticCollection collection = resourceGroupResource.GetEdgeDiagnostics();

            // invoke the operation and iterate over the result
            await foreach (EdgeDiagnosticResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                EdgeDiagnosticData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_DiagnosticsGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Diagnostics_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "Diagnostic_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this EdgeDiagnosticResource
            EdgeDiagnosticCollection collection = resourceGroupResource.GetEdgeDiagnostics();

            // invoke the operation
            string diagnosticName = "testname";
            bool result = await collection.ExistsAsync(diagnosticName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_DiagnosticsGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Diagnostics_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "Diagnostic_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this EdgeDiagnosticResource
            EdgeDiagnosticCollection collection = resourceGroupResource.GetEdgeDiagnostics();

            // invoke the operation
            string diagnosticName = "testname";
            NullableResponse<EdgeDiagnosticResource> response = await collection.GetIfExistsAsync(diagnosticName);
            EdgeDiagnosticResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                EdgeDiagnosticData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/tests/Generated/Samples/Sample_EdgeDiagnosticResource.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.WorkloadOrchestration.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.WorkloadOrchestration.Samples
{
    public partial class Sample_EdgeDiagnosticResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_DiagnosticsGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Diagnostics_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "Diagnostic_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeDiagnosticResource created on azure
            // for more information of creating EdgeDiagnosticResource, please refer to the document of EdgeDiagnosticResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string diagnosticName = "testname";
            ResourceIdentifier edgeDiagnosticResourceId = EdgeDiagnosticResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, diagnosticName);
            EdgeDiagnosticResource edgeDiagnostic = client.GetEdgeDiagnosticResource(edgeDiagnosticResourceId);

            // invoke the operation
            EdgeDiagnosticResource result = await edgeDiagnostic.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeDiagnosticData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_DiagnosticsDeleteMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Diagnostics_Delete_MaximumSet_Gen.json
            // this example is just showing the usage of "Diagnostic_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeDiagnosticResource created on azure
            // for more information of creating EdgeDiagnosticResource, please refer to the document of EdgeDiagnosticResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string diagnosticName = "testname";
            ResourceIdentifier edgeDiagnosticResourceId = EdgeDiagnosticResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, diagnosticName);
            EdgeDiagnosticResource edgeDiagnostic = client.GetEdgeDiagnosticResource(edgeDiagnosticResourceId);

            // invoke the operation
            await edgeDiagnostic.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_DiagnosticsUpdateMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Diagnostics_Update_MaximumSet_Gen.json
            // this example is just showing the usage of "Diagnostic_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeDiagnosticResource created on azure
            // for more information of creating EdgeDiagnosticResource, please refer to the document of EdgeDiagnosticResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string diagnosticName = "testname";
            ResourceIdentifier edgeDiagnosticResourceId = EdgeDiagnosticResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, diagnosticName);
            EdgeDiagnosticResource edgeDiagnostic = client.GetEdgeDiagnosticResource(edgeDiagnosticResourceId);

            // invoke the operation
            EdgeDiagnosticPatch patch = new EdgeDiagnosticPatch
            {
                Properties = new EdgeDiagnosticPatchProperties(),
                Tags =
{
["key1922"] = "efraipifhmdfekwgunngrgvsc"
},
            };
            ArmOperation<EdgeDiagnosticResource> lro = await edgeDiagnostic.UpdateAsync(WaitUntil.Completed, patch);
            EdgeDiagnosticResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeDiagnosticData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/tests/Generated/Samples/Sample_EdgeDynamicSchemaCollection.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.WorkloadOrchestration.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.WorkloadOrchestration.Samples
{
    public partial class Sample_EdgeDynamicSchemaCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_DynamicSchemasCreateOrUpdateMaximumSet()
        {
            // Generated from example definition: 2025-06-01/DynamicSchemas_CreateOrUpdate_MaximumSet_Gen.json
            // this example is just showing the usage of "DynamicSchema_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeSchemaResource created on azure
            // for more information of creating EdgeSchemaResource, please refer to the document of EdgeSchemaResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string schemaName = "testname";
            ResourceIdentifier edgeSchemaResourceId = EdgeSchemaResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, schemaName);
            EdgeSchemaResource edgeSchema = client.GetEdgeSchemaResource(edgeSchemaResourceId);

            // get the collection of this EdgeDynamicSchemaResource
            EdgeDynamicSchemaCollection collection = edgeSchema.GetEdgeDynamicSchemas();

            // invoke the operation
            string dynamicSchemaName = "testname";
            EdgeDynamicSchemaData data = new EdgeDynamicSchemaData
            {
                Properties = new EdgeDynamicSchemaProperties(),
            };
            ArmOperation<EdgeDynamicSchemaResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, dynamicSchemaName, data);
            EdgeDynamicSchemaResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeDynamicSchemaData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_DynamicSchemasGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/DynamicSchemas_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "DynamicSchema_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeSchemaResource created on azure
            // for more information of creating EdgeSchemaResource, please refer to the document of EdgeSchemaResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string schemaName = "testname";
            ResourceIdentifier edgeSchemaResourceId = EdgeSchemaResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, schemaName);
            EdgeSchemaResource edgeSchema = client.GetEdgeSchemaResource(edgeSchemaResourceId);

            // get the collection of this EdgeDynamicSchemaResource
            EdgeDynamicSchemaCollection collection = edgeSchema.GetEdgeDynamicSchemas();

            // invoke the operation
            string dynamicSchemaName = "testname";
            EdgeDynamicSchemaResource result = await collection.GetAsync(dynamicSchemaName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeDynamicSchemaData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_DynamicSchemasListBySchemaMaximumSet()
        {
            // Generated from example definition: 2025-06-01/DynamicSchemas_ListBySchema_MaximumSet_Gen.json
            // this example is just showing the usage of "DynamicSchema_ListBySchema" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeSchemaResource created on azure
            // for more information of creating EdgeSchemaResource, please refer to the document of EdgeSchemaResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string schemaName = "testname";
            ResourceIdentifier edgeSchemaResourceId = EdgeSchemaResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, schemaName);
            EdgeSchemaResource edgeSchema = client.GetEdgeSchemaResource(edgeSchemaResourceId);

            // get the collection of this EdgeDynamicSchemaResource
            EdgeDynamicSchemaCollection collection = edgeSchema.GetEdgeDynamicSchemas();

            // invoke the operation and iterate over the result
            await foreach (EdgeDynamicSchemaResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                EdgeDynamicSchemaData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_DynamicSchemasGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/DynamicSchemas_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "DynamicSchema_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeSchemaResource created on azure
            // for more information of creating EdgeSchemaResource, please refer to the document of EdgeSchemaResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string schemaName = "testname";
            ResourceIdentifier edgeSchemaResourceId = EdgeSchemaResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, schemaName);
            EdgeSchemaResource edgeSchema = client.GetEdgeSchemaResource(edgeSchemaResourceId);

            // get the collection of this EdgeDynamicSchemaResource
            EdgeDynamicSchemaCollection collection = edgeSchema.GetEdgeDynamicSchemas();

            // invoke the operation
            string dynamicSchemaName = "testname";
            bool result = await collection.ExistsAsync(dynamicSchemaName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_DynamicSchemasGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/DynamicSchemas_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "DynamicSchema_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeSchemaResource created on azure
            // for more information of creating EdgeSchemaResource, please refer to the document of EdgeSchemaResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string schemaName = "testname";
            ResourceIdentifier edgeSchemaResourceId = EdgeSchemaResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, schemaName);
            EdgeSchemaResource edgeSchema = client.GetEdgeSchemaResource(edgeSchemaResourceId);

            // get the collection of this EdgeDynamicSchemaResource
            EdgeDynamicSchemaCollection collection = edgeSchema.GetEdgeDynamicSchemas();

            // invoke the operation
            string dynamicSchemaName = "testname";
            NullableResponse<EdgeDynamicSchemaResource> response = await collection.GetIfExistsAsync(dynamicSchemaName);
            EdgeDynamicSchemaResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                EdgeDynamicSchemaData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/tests/Generated/Samples/Sample_EdgeDynamicSchemaResource.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.WorkloadOrchestration.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.WorkloadOrchestration.Samples
{
    public partial class Sample_EdgeDynamicSchemaResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_DynamicSchemasGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/DynamicSchemas_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "DynamicSchema_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeDynamicSchemaResource created on azure
            // for more information of creating EdgeDynamicSchemaResource, please refer to the document of EdgeDynamicSchemaResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string schemaName = "testname";
            string dynamicSchemaName = "testname";
            ResourceIdentifier edgeDynamicSchemaResourceId = EdgeDynamicSchemaResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, schemaName, dynamicSchemaName);
            EdgeDynamicSchemaResource edgeDynamicSchema = client.GetEdgeDynamicSchemaResource(edgeDynamicSchemaResourceId);

            // invoke the operation
            EdgeDynamicSchemaResource result = await edgeDynamicSchema.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeDynamicSchemaData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_DynamicSchemasDeleteMaximumSet()
        {
            // Generated from example definition: 2025-06-01/DynamicSchemas_Delete_MaximumSet_Gen.json
            // this example is just showing the usage of "DynamicSchema_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeDynamicSchemaResource created on azure
            // for more information of creating EdgeDynamicSchemaResource, please refer to the document of EdgeDynamicSchemaResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string schemaName = "testname";
            string dynamicSchemaName = "testname";
            ResourceIdentifier edgeDynamicSchemaResourceId = EdgeDynamicSchemaResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, schemaName, dynamicSchemaName);
            EdgeDynamicSchemaResource edgeDynamicSchema = client.GetEdgeDynamicSchemaResource(edgeDynamicSchemaResourceId);

            // invoke the operation
            await edgeDynamicSchema.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_DynamicSchemasUpdateMaximumSet()
        {
            // Generated from example definition: 2025-06-01/DynamicSchemas_Update_MaximumSet_Gen.json
            // this example is just showing the usage of "DynamicSchema_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeDynamicSchemaResource created on azure
            // for more information of creating EdgeDynamicSchemaResource, please refer to the document of EdgeDynamicSchemaResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string schemaName = "testname";
            string dynamicSchemaName = "testname";
            ResourceIdentifier edgeDynamicSchemaResourceId = EdgeDynamicSchemaResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, schemaName, dynamicSchemaName);
            EdgeDynamicSchemaResource edgeDynamicSchema = client.GetEdgeDynamicSchemaResource(edgeDynamicSchemaResourceId);

            // invoke the operation
            EdgeDynamicSchemaData data = new EdgeDynamicSchemaData
            {
                Properties = new EdgeDynamicSchemaProperties(),
            };
            EdgeDynamicSchemaResource result = await edgeDynamicSchema.UpdateAsync(data);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeDynamicSchemaData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/tests/Generated/Samples/Sample_EdgeDynamicSchemaVersionCollection.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.WorkloadOrchestration.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.WorkloadOrchestration.Samples
{
    public partial class Sample_EdgeDynamicSchemaVersionCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_DynamicSchemaVersionsCreateOrUpdateMaximumSet()
        {
            // Generated from example definition: 2025-06-01/DynamicSchemaVersions_CreateOrUpdate_MaximumSet_Gen.json
            // this example is just showing the usage of "DynamicSchemaVersion_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeDynamicSchemaResource created on azure
            // for more information of creating EdgeDynamicSchemaResource, please refer to the document of EdgeDynamicSchemaResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string schemaName = "testname";
            string dynamicSchemaName = "testname";
            ResourceIdentifier edgeDynamicSchemaResourceId = EdgeDynamicSchemaResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, schemaName, dynamicSchemaName);
            EdgeDynamicSchemaResource edgeDynamicSchema = client.GetEdgeDynamicSchemaResource(edgeDynamicSchemaResourceId);

            // get the collection of this EdgeDynamicSchemaVersionResource
            EdgeDynamicSchemaVersionCollection collection = edgeDynamicSchema.GetEdgeDynamicSchemaVersions();

            // invoke the operation
            string dynamicSchemaVersionName = "1.0.0";
            EdgeDynamicSchemaVersionData data = new EdgeDynamicSchemaVersionData
            {
                Properties = new EdgeSchemaVersionProperties("uiaqdwsi"),
            };
            ArmOperation<EdgeDynamicSchemaVersionResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, dynamicSchemaVersionName, data);
            EdgeDynamicSchemaVersionResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeDynamicSchemaVersionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_DynamicSchemaVersionsGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/DynamicSchemaVersions_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "DynamicSchemaVersion_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeDynamicSchemaResource created on azure
            // for more information of creating EdgeDynamicSchemaResource, please refer to the document of EdgeDynamicSchemaResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string schemaName = "testname";
            string dynamicSchemaName = "testname";
            ResourceIdentifier edgeDynamicSchemaResourceId = EdgeDynamicSchemaResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, schemaName, dynamicSchemaName);
            EdgeDynamicSchemaResource edgeDynamicSchema = client.GetEdgeDynamicSchemaResource(edgeDynamicSchemaResourceId);

            // get the collection of this EdgeDynamicSchemaVersionResource
            EdgeDynamicSchemaVersionCollection collection = edgeDynamicSchema.GetEdgeDynamicSchemaVersions();

            // invoke the operation
            string dynamicSchemaVersionName = "1.0.0";
            EdgeDynamicSchemaVersionResource result = await collection.GetAsync(dynamicSchemaVersionName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeDynamicSchemaVersionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_DynamicSchemaVersionsListByDynamicSchemaMaximumSet()
        {
            // Generated from example definition: 2025-06-01/DynamicSchemaVersions_ListByDynamicSchema_MaximumSet_Gen.json
            // this example is just showing the usage of "DynamicSchemaVersion_ListByDynamicSchema" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeDynamicSchemaResource created on azure
            // for more information of creating EdgeDynamicSchemaResource, please refer to the document of EdgeDynamicSchemaResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string schemaName = "testname";
            string dynamicSchemaName = "testname";
            ResourceIdentifier edgeDynamicSchemaResourceId = EdgeDynamicSchemaResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, schemaName, dynamicSchemaName);
            EdgeDynamicSchemaResource edgeDynamicSchema = client.GetEdgeDynamicSchemaResource(edgeDynamicSchemaResourceId);

            // get the collection of this EdgeDynamicSchemaVersionResource
            EdgeDynamicSchemaVersionCollection collection = edgeDynamicSchema.GetEdgeDynamicSchemaVersions();

            // invoke the operation and iterate over the result
            await foreach (EdgeDynamicSchemaVersionResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                EdgeDynamicSchemaVersionData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_DynamicSchemaVersionsGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/DynamicSchemaVersions_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "DynamicSchemaVersion_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeDynamicSchemaResource created on azure
            // for more information of creating EdgeDynamicSchemaResource, please refer to the document of EdgeDynamicSchemaResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string schemaName = "testname";
            string dynamicSchemaName = "testname";
            ResourceIdentifier edgeDynamicSchemaResourceId = EdgeDynamicSchemaResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, schemaName, dynamicSchemaName);
            EdgeDynamicSchemaResource edgeDynamicSchema = client.GetEdgeDynamicSchemaResource(edgeDynamicSchemaResourceId);

            // get the collection of this EdgeDynamicSchemaVersionResource
            EdgeDynamicSchemaVersionCollection collection = edgeDynamicSchema.GetEdgeDynamicSchemaVersions();

            // invoke the operation
            string dynamicSchemaVersionName = "1.0.0";
            bool result = await collection.ExistsAsync(dynamicSchemaVersionName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_DynamicSchemaVersionsGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/DynamicSchemaVersions_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "DynamicSchemaVersion_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeDynamicSchemaResource created on azure
            // for more information of creating EdgeDynamicSchemaResource, please refer to the document of EdgeDynamicSchemaResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string schemaName = "testname";
            string dynamicSchemaName = "testname";
            ResourceIdentifier edgeDynamicSchemaResourceId = EdgeDynamicSchemaResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, schemaName, dynamicSchemaName);
            EdgeDynamicSchemaResource edgeDynamicSchema = client.GetEdgeDynamicSchemaResource(edgeDynamicSchemaResourceId);

            // get the collection of this EdgeDynamicSchemaVersionResource
            EdgeDynamicSchemaVersionCollection collection = edgeDynamicSchema.GetEdgeDynamicSchemaVersions();

            // invoke the operation
            string dynamicSchemaVersionName = "1.0.0";
            NullableResponse<EdgeDynamicSchemaVersionResource> response = await collection.GetIfExistsAsync(dynamicSchemaVersionName);
            EdgeDynamicSchemaVersionResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                EdgeDynamicSchemaVersionData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/tests/Generated/Samples/Sample_EdgeDynamicSchemaVersionResource.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.WorkloadOrchestration.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.WorkloadOrchestration.Samples
{
    public partial class Sample_EdgeDynamicSchemaVersionResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_DynamicSchemaVersionsGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/DynamicSchemaVersions_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "DynamicSchemaVersion_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeDynamicSchemaVersionResource created on azure
            // for more information of creating EdgeDynamicSchemaVersionResource, please refer to the document of EdgeDynamicSchemaVersionResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string schemaName = "testname";
            string dynamicSchemaName = "testname";
            string dynamicSchemaVersionName = "1.0.0";
            ResourceIdentifier edgeDynamicSchemaVersionResourceId = EdgeDynamicSchemaVersionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, schemaName, dynamicSchemaName, dynamicSchemaVersionName);
            EdgeDynamicSchemaVersionResource edgeDynamicSchemaVersion = client.GetEdgeDynamicSchemaVersionResource(edgeDynamicSchemaVersionResourceId);

            // invoke the operation
            EdgeDynamicSchemaVersionResource result = await edgeDynamicSchemaVersion.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeDynamicSchemaVersionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_DynamicSchemaVersionsDeleteMaximumSet()
        {
            // Generated from example definition: 2025-06-01/DynamicSchemaVersions_Delete_MaximumSet_Gen.json
            // this example is just showing the usage of "DynamicSchemaVersion_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeDynamicSchemaVersionResource created on azure
            // for more information of creating EdgeDynamicSchemaVersionResource, please refer to the document of EdgeDynamicSchemaVersionResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string schemaName = "testname";
            string dynamicSchemaName = "testname";
            string dynamicSchemaVersionName = "1.0.0";
            ResourceIdentifier edgeDynamicSchemaVersionResourceId = EdgeDynamicSchemaVersionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, schemaName, dynamicSchemaName, dynamicSchemaVersionName);
            EdgeDynamicSchemaVersionResource edgeDynamicSchemaVersion = client.GetEdgeDynamicSchemaVersionResource(edgeDynamicSchemaVersionResourceId);

            // invoke the operation
            await edgeDynamicSchemaVersion.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_DynamicSchemaVersionsUpdateMaximumSet()
        {
            // Generated from example definition: 2025-06-01/DynamicSchemaVersions_Update_MaximumSet_Gen.json
            // this example is just showing the usage of "DynamicSchemaVersion_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeDynamicSchemaVersionResource created on azure
            // for more information of creating EdgeDynamicSchemaVersionResource, please refer to the document of EdgeDynamicSchemaVersionResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string schemaName = "testname";
            string dynamicSchemaName = "testname";
            string dynamicSchemaVersionName = "1.0.0";
            ResourceIdentifier edgeDynamicSchemaVersionResourceId = EdgeDynamicSchemaVersionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, schemaName, dynamicSchemaName, dynamicSchemaVersionName);
            EdgeDynamicSchemaVersionResource edgeDynamicSchemaVersion = client.GetEdgeDynamicSchemaVersionResource(edgeDynamicSchemaVersionResourceId);

            // invoke the operation
            EdgeDynamicSchemaVersionData data = new EdgeDynamicSchemaVersionData
            {
                Properties = new EdgeSchemaVersionProperties("muezi"),
            };
            EdgeDynamicSchemaVersionResource result = await edgeDynamicSchemaVersion.UpdateAsync(data);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeDynamicSchemaVersionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/tests/Generated/Samples/Sample_EdgeExecutionCollection.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.WorkloadOrchestration.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.WorkloadOrchestration.Samples
{
    public partial class Sample_EdgeExecutionCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_ExecutionsCreateOrUpdateMaximumSetGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2025-06-01/Executions_CreateOrUpdate_MaximumSet_Gen.json
            // this example is just showing the usage of "Execution_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeWorkflowVersionResource created on azure
            // for more information of creating EdgeWorkflowVersionResource, please refer to the document of EdgeWorkflowVersionResource
            string subscriptionId = "EE6D9590-0D52-4B1C-935C-FE49DBF838EB";
            string resourceGroupName = "rgconfigurationmanager";
            string contextName = "abcde";
            string workflowName = "abcde";
            string versionName = "abcde";
            ResourceIdentifier edgeWorkflowVersionResourceId = EdgeWorkflowVersionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, contextName, workflowName, versionName);
            EdgeWorkflowVersionResource edgeWorkflowVersion = client.GetEdgeWorkflowVersionResource(edgeWorkflowVersionResourceId);

            // get the collection of this EdgeExecutionResource
            EdgeExecutionCollection collection = edgeWorkflowVersion.GetEdgeExecutions();

            // invoke the operation
            string executionName = "abcde";
            EdgeExecutionData data = new EdgeExecutionData
            {
                Properties = new EdgeExecutionProperties("souenlqwltljsojdcbpc")
                {
                    Specification = { },
                },
                ExtendedLocation = new ExtendedLocation
                {
                    Name = "ugf",
                },
            };
            ArmOperation<EdgeExecutionResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, executionName, data);
            EdgeExecutionResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeExecutionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_ExecutionsGetMaximumSetGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2025-06-01/Executions_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "Execution_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeWorkflowVersionResource created on azure
            // for more information of creating EdgeWorkflowVersionResource, please refer to the document of EdgeWorkflowVersionResource
            string subscriptionId = "EE6D9590-0D52-4B1C-935C-FE49DBF838EB";
            string resourceGroupName = "rgconfigurationmanager";
            string contextName = "abcde";
            string workflowName = "abcde";
            string versionName = "abcde";
            ResourceIdentifier edgeWorkflowVersionResourceId = EdgeWorkflowVersionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, contextName, workflowName, versionName);
            EdgeWorkflowVersionResource edgeWorkflowVersion = client.GetEdgeWorkflowVersionResource(edgeWorkflowVersionResourceId);

            // get the collection of this EdgeExecutionResource
            EdgeExecutionCollection collection = edgeWorkflowVersion.GetEdgeExecutions();

            // invoke the operation
            string executionName = "abcde";
            EdgeExecutionResource result = await collection.GetAsync(executionName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeExecutionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_ExecutionsListByWorkflowVersionMaximumSetGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2025-06-01/Executions_ListByWorkflowVersion_MaximumSet_Gen.json
            // this example is just showing the usage of "Execution_ListByWorkflowVersion" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeWorkflowVersionResource created on azure
            // for more information of creating EdgeWorkflowVersionResource, please refer to the document of EdgeWorkflowVersionResource
            string subscriptionId = "EE6D9590-0D52-4B1C-935C-FE49DBF838EB";
            string resourceGroupName = "rgconfigurationmanager";
            string contextName = "abcde";
            string workflowName = "abcde";
            string versionName = "abcde";
            ResourceIdentifier edgeWorkflowVersionResourceId = EdgeWorkflowVersionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, contextName, workflowName, versionName);
            EdgeWorkflowVersionResource edgeWorkflowVersion = client.GetEdgeWorkflowVersionResource(edgeWorkflowVersionResourceId);

            // get the collection of this EdgeExecutionResource
            EdgeExecutionCollection collection = edgeWorkflowVersion.GetEdgeExecutions();

            // invoke the operation and iterate over the result
            await foreach (EdgeExecutionResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                EdgeExecutionData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_ExecutionsGetMaximumSetGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2025-06-01/Executions_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "Execution_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeWorkflowVersionResource created on azure
            // for more information of creating EdgeWorkflowVersionResource, please refer to the document of EdgeWorkflowVersionResource
            string subscriptionId = "EE6D9590-0D52-4B1C-935C-FE49DBF838EB";
            string resourceGroupName = "rgconfigurationmanager";
            string contextName = "abcde";
            string workflowName = "abcde";
            string versionName = "abcde";
            ResourceIdentifier edgeWorkflowVersionResourceId = EdgeWorkflowVersionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, contextName, workflowName, versionName);
            EdgeWorkflowVersionResource edgeWorkflowVersion = client.GetEdgeWorkflowVersionResource(edgeWorkflowVersionResourceId);

            // get the collection of this EdgeExecutionResource
            EdgeExecutionCollection collection = edgeWorkflowVersion.GetEdgeExecutions();

            // invoke the operation
            string executionName = "abcde";
            bool result = await collection.ExistsAsync(executionName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_ExecutionsGetMaximumSetGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2025-06-01/Executions_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "Execution_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeWorkflowVersionResource created on azure
            // for more information of creating EdgeWorkflowVersionResource, please refer to the document of EdgeWorkflowVersionResource
            string subscriptionId = "EE6D9590-0D52-4B1C-935C-FE49DBF838EB";
            string resourceGroupName = "rgconfigurationmanager";
            string contextName = "abcde";
            string workflowName = "abcde";
            string versionName = "abcde";
            ResourceIdentifier edgeWorkflowVersionResourceId = EdgeWorkflowVersionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, contextName, workflowName, versionName);
            EdgeWorkflowVersionResource edgeWorkflowVersion = client.GetEdgeWorkflowVersionResource(edgeWorkflowVersionResourceId);

            // get the collection of this EdgeExecutionResource
            EdgeExecutionCollection collection = edgeWorkflowVersion.GetEdgeExecutions();

            // invoke the operation
            string executionName = "abcde";
            NullableResponse<EdgeExecutionResource> response = await collection.GetIfExistsAsync(executionName);
            EdgeExecutionResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                EdgeExecutionData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/tests/Generated/Samples/Sample_EdgeExecutionResource.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.WorkloadOrchestration.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.WorkloadOrchestration.Samples
{
    public partial class Sample_EdgeExecutionResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_ExecutionsGetMaximumSetGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2025-06-01/Executions_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "Execution_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeExecutionResource created on azure
            // for more information of creating EdgeExecutionResource, please refer to the document of EdgeExecutionResource
            string subscriptionId = "EE6D9590-0D52-4B1C-935C-FE49DBF838EB";
            string resourceGroupName = "rgconfigurationmanager";
            string contextName = "abcde";
            string workflowName = "abcde";
            string versionName = "abcde";
            string executionName = "abcde";
            ResourceIdentifier edgeExecutionResourceId = EdgeExecutionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, contextName, workflowName, versionName, executionName);
            EdgeExecutionResource edgeExecution = client.GetEdgeExecutionResource(edgeExecutionResourceId);

            // invoke the operation
            EdgeExecutionResource result = await edgeExecution.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeExecutionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_ExecutionsDeleteMaximumSetGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2025-06-01/Executions_Delete_MaximumSet_Gen.json
            // this example is just showing the usage of "Execution_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeExecutionResource created on azure
            // for more information of creating EdgeExecutionResource, please refer to the document of EdgeExecutionResource
            string subscriptionId = "EE6D9590-0D52-4B1C-935C-FE49DBF838EB";
            string resourceGroupName = "rgconfigurationmanager";
            string contextName = "abcde";
            string workflowName = "abcde";
            string versionName = "abcde";
            string executionName = "abcde";
            ResourceIdentifier edgeExecutionResourceId = EdgeExecutionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, contextName, workflowName, versionName, executionName);
            EdgeExecutionResource edgeExecution = client.GetEdgeExecutionResource(edgeExecutionResourceId);

            // invoke the operation
            await edgeExecution.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_ExecutionsUpdateMaximumSetGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2025-06-01/Executions_Update_MaximumSet_Gen.json
            // this example is just showing the usage of "Execution_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeExecutionResource created on azure
            // for more information of creating EdgeExecutionResource, please refer to the document of EdgeExecutionResource
            string subscriptionId = "FFA229AF-C1A3-4CB6-9E5D-62C25CFBE4D0";
            string resourceGroupName = "rgconfigurationmanager";
            string contextName = "abcde";
            string workflowName = "abcde";
            string versionName = "abcde";
            string executionName = "abcde";
            ResourceIdentifier edgeExecutionResourceId = EdgeExecutionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, contextName, workflowName, versionName, executionName);
            EdgeExecutionResource edgeExecution = client.GetEdgeExecutionResource(edgeExecutionResourceId);

            // invoke the operation
            EdgeExecutionData data = new EdgeExecutionData
            {
                Properties = new EdgeExecutionProperties("xjsxzbfltzvbuvn")
                {
                    Specification = { },
                },
            };
            ArmOperation<EdgeExecutionResource> lro = await edgeExecution.UpdateAsync(WaitUntil.Completed, data);
            EdgeExecutionResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeExecutionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/tests/Generated/Samples/Sample_EdgeJobCollection.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.ResourceManager.WorkloadOrchestration.Samples
{
    public partial class Sample_EdgeJobCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_JobsGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Jobs_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "Job_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // get the collection of this EdgeJobResource
            string resourceUri = "gt";
            EdgeJobCollection collection = client.GetEdgeJobs(new ResourceIdentifier(resourceUri));

            // invoke the operation
            string jobName = "jobsName";
            EdgeJobResource result = await collection.GetAsync(jobName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeJobData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_JobsListByTargetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Jobs_ListByTarget_MaximumSet_Gen.json
            // this example is just showing the usage of "Job_ListByTarget" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // get the collection of this EdgeJobResource
            string resourceUri = "gt";
            EdgeJobCollection collection = client.GetEdgeJobs(new ResourceIdentifier(resourceUri));

            // invoke the operation and iterate over the result
            await foreach (EdgeJobResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                EdgeJobData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_JobsGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Jobs_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "Job_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // get the collection of this EdgeJobResource
            string resourceUri = "gt";
            EdgeJobCollection collection = client.GetEdgeJobs(new ResourceIdentifier(resourceUri));

            // invoke the operation
            string jobName = "jobsName";
            bool result = await collection.ExistsAsync(jobName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_JobsGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Jobs_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "Job_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // get the collection of this EdgeJobResource
            string resourceUri = "gt";
            EdgeJobCollection collection = client.GetEdgeJobs(new ResourceIdentifier(resourceUri));

            // invoke the operation
            string jobName = "jobsName";
            NullableResponse<EdgeJobResource> response = await collection.GetIfExistsAsync(jobName);
            EdgeJobResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                EdgeJobData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/tests/Generated/Samples/Sample_EdgeJobResource.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.ResourceManager.WorkloadOrchestration.Samples
{
    public partial class Sample_EdgeJobResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_JobsGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Jobs_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "Job_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeJobResource created on azure
            // for more information of creating EdgeJobResource, please refer to the document of EdgeJobResource
            string resourceUri = "gt";
            string jobName = "jobsName";
            ResourceIdentifier edgeJobResourceId = EdgeJobResource.CreateResourceIdentifier(resourceUri, jobName);
            EdgeJobResource edgeJob = client.GetEdgeJobResource(edgeJobResourceId);

            // invoke the operation
            EdgeJobResource result = await edgeJob.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeJobData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/tests/Generated/Samples/Sample_EdgeSchemaCollection.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.WorkloadOrchestration.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.WorkloadOrchestration.Samples
{
    public partial class Sample_EdgeSchemaCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_SchemasCreateOrUpdateMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Schemas_CreateOrUpdate_MaximumSet_Gen.json
            // this example is just showing the usage of "Schema_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this EdgeSchemaResource
            EdgeSchemaCollection collection = resourceGroupResource.GetEdgeSchemas();

            // invoke the operation
            string schemaName = "testname";
            EdgeSchemaData data = new EdgeSchemaData(new AzureLocation("alvi"))
            {
                Properties = new EdgeSchemaProperties(),
                Tags =
{
["key7017"] = "rdynaxxagwjzubehiz"
},
            };
            ArmOperation<EdgeSchemaResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, schemaName, data);
            EdgeSchemaResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeSchemaData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_SchemasGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Schemas_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "Schema_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this EdgeSchemaResource
            EdgeSchemaCollection collection = resourceGroupResource.GetEdgeSchemas();

            // invoke the operation
            string schemaName = "testname";
            EdgeSchemaResource result = await collection.GetAsync(schemaName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeSchemaData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_SchemasListByResourceGroupMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Schemas_ListByResourceGroup_MaximumSet_Gen.json
            // this example is just showing the usage of "Schema_ListByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this EdgeSchemaResource
            EdgeSchemaCollection collection = resourceGroupResource.GetEdgeSchemas();

            // invoke the operation and iterate over the result
            await foreach (EdgeSchemaResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                EdgeSchemaData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_SchemasGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Schemas_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "Schema_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this EdgeSchemaResource
            EdgeSchemaCollection collection = resourceGroupResource.GetEdgeSchemas();

            // invoke the operation
            string schemaName = "testname";
            bool result = await collection.ExistsAsync(schemaName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_SchemasGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Schemas_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "Schema_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this EdgeSchemaResource
            EdgeSchemaCollection collection = resourceGroupResource.GetEdgeSchemas();

            // invoke the operation
            string schemaName = "testname";
            NullableResponse<EdgeSchemaResource> response = await collection.GetIfExistsAsync(schemaName);
            EdgeSchemaResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                EdgeSchemaData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/tests/Generated/Samples/Sample_EdgeSchemaReferenceCollection.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.ResourceManager.WorkloadOrchestration.Samples
{
    public partial class Sample_EdgeSchemaReferenceCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_SchemaReferencesGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/SchemaReferences_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "SchemaReference_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // get the collection of this EdgeSchemaReferenceResource
            string resourceUri = "jdvtghygpz";
            EdgeSchemaReferenceCollection collection = client.GetEdgeSchemaReferences(new ResourceIdentifier(resourceUri));

            // invoke the operation
            string schemaReferenceName = "testname";
            EdgeSchemaReferenceResource result = await collection.GetAsync(schemaReferenceName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeSchemaReferenceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_SchemaReferencesListByResourceGroupMaximumSet()
        {
            // Generated from example definition: 2025-06-01/SchemaReferences_ListByResourceGroup_MaximumSet_Gen.json
            // this example is just showing the usage of "SchemaReference_ListByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // get the collection of this EdgeSchemaReferenceResource
            string resourceUri = "jdvtghygpz";
            EdgeSchemaReferenceCollection collection = client.GetEdgeSchemaReferences(new ResourceIdentifier(resourceUri));

            // invoke the operation and iterate over the result
            await foreach (EdgeSchemaReferenceResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                EdgeSchemaReferenceData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_SchemaReferencesGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/SchemaReferences_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "SchemaReference_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // get the collection of this EdgeSchemaReferenceResource
            string resourceUri = "jdvtghygpz";
            EdgeSchemaReferenceCollection collection = client.GetEdgeSchemaReferences(new ResourceIdentifier(resourceUri));

            // invoke the operation
            string schemaReferenceName = "testname";
            bool result = await collection.ExistsAsync(schemaReferenceName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_SchemaReferencesGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/SchemaReferences_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "SchemaReference_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // get the collection of this EdgeSchemaReferenceResource
            string resourceUri = "jdvtghygpz";
            EdgeSchemaReferenceCollection collection = client.GetEdgeSchemaReferences(new ResourceIdentifier(resourceUri));

            // invoke the operation
            string schemaReferenceName = "testname";
            NullableResponse<EdgeSchemaReferenceResource> response = await collection.GetIfExistsAsync(schemaReferenceName);
            EdgeSchemaReferenceResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                EdgeSchemaReferenceData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/tests/Generated/Samples/Sample_EdgeSchemaReferenceResource.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.ResourceManager.WorkloadOrchestration.Samples
{
    public partial class Sample_EdgeSchemaReferenceResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_SchemaReferencesGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/SchemaReferences_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "SchemaReference_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeSchemaReferenceResource created on azure
            // for more information of creating EdgeSchemaReferenceResource, please refer to the document of EdgeSchemaReferenceResource
            string resourceUri = "jdvtghygpz";
            string schemaReferenceName = "testname";
            ResourceIdentifier edgeSchemaReferenceResourceId = EdgeSchemaReferenceResource.CreateResourceIdentifier(resourceUri, schemaReferenceName);
            EdgeSchemaReferenceResource edgeSchemaReference = client.GetEdgeSchemaReferenceResource(edgeSchemaReferenceResourceId);

            // invoke the operation
            EdgeSchemaReferenceResource result = await edgeSchemaReference.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeSchemaReferenceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/tests/Generated/Samples/Sample_EdgeSchemaResource.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.WorkloadOrchestration.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.WorkloadOrchestration.Samples
{
    public partial class Sample_EdgeSchemaResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_SchemasGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Schemas_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "Schema_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeSchemaResource created on azure
            // for more information of creating EdgeSchemaResource, please refer to the document of EdgeSchemaResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string schemaName = "testname";
            ResourceIdentifier edgeSchemaResourceId = EdgeSchemaResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, schemaName);
            EdgeSchemaResource edgeSchema = client.GetEdgeSchemaResource(edgeSchemaResourceId);

            // invoke the operation
            EdgeSchemaResource result = await edgeSchema.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeSchemaData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_SchemasDeleteMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Schemas_Delete_MaximumSet_Gen.json
            // this example is just showing the usage of "Schema_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeSchemaResource created on azure
            // for more information of creating EdgeSchemaResource, please refer to the document of EdgeSchemaResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string schemaName = "testname";
            ResourceIdentifier edgeSchemaResourceId = EdgeSchemaResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, schemaName);
            EdgeSchemaResource edgeSchema = client.GetEdgeSchemaResource(edgeSchemaResourceId);

            // invoke the operation
            await edgeSchema.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_SchemasUpdateMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Schemas_Update_MaximumSet_Gen.json
            // this example is just showing the usage of "Schema_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeSchemaResource created on azure
            // for more information of creating EdgeSchemaResource, please refer to the document of EdgeSchemaResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string schemaName = "testname";
            ResourceIdentifier edgeSchemaResourceId = EdgeSchemaResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, schemaName);
            EdgeSchemaResource edgeSchema = client.GetEdgeSchemaResource(edgeSchemaResourceId);

            // invoke the operation
            EdgeSchemaPatch patch = new EdgeSchemaPatch
            {
                Properties = new EdgeSchemaPatchProperties(),
                Tags =
{
["key6760"] = "lknwkzihsmzbzkezkartwgsv"
},
            };
            EdgeSchemaResource result = await edgeSchema.UpdateAsync(patch);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeSchemaData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateVersion_SchemasCreateVersionMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Schemas_CreateVersion_MaximumSet_Gen.json
            // this example is just showing the usage of "Schemas_CreateVersion" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeSchemaResource created on azure
            // for more information of creating EdgeSchemaResource, please refer to the document of EdgeSchemaResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string schemaName = "testname";
            ResourceIdentifier edgeSchemaResourceId = EdgeSchemaResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, schemaName);
            EdgeSchemaResource edgeSchema = client.GetEdgeSchemaResource(edgeSchemaResourceId);

            // invoke the operation
            EdgeSchemaVersionWithUpdateType body = new EdgeSchemaVersionWithUpdateType(new EdgeSchemaVersionData
            {
                Properties = new EdgeSchemaVersionProperties("uiaqdwsi"),
            })
            {
                UpdateType = EdgeUpdateType.Major,
                Version = "1.0.0",
            };
            ArmOperation<EdgeSchemaVersionResource> lro = await edgeSchema.CreateVersionAsync(WaitUntil.Completed, body);
            EdgeSchemaVersionResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeSchemaVersionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task RemoveVersion_SchemasRemoveVersionMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Schemas_RemoveVersion_MaximumSet_Gen.json
            // this example is just showing the usage of "Schemas_RemoveVersion" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeSchemaResource created on azure
            // for more information of creating EdgeSchemaResource, please refer to the document of EdgeSchemaResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string schemaName = "testname";
            ResourceIdentifier edgeSchemaResourceId = EdgeSchemaResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, schemaName);
            EdgeSchemaResource edgeSchema = client.GetEdgeSchemaResource(edgeSchemaResourceId);

            // invoke the operation
            EdgeVersionContent content = new EdgeVersionContent("ghtvdzgmzncaifrnuumg");
            RemoveVersionResult result = await edgeSchema.RemoveVersionAsync(content);

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/tests/Generated/Samples/Sample_EdgeSchemaVersionCollection.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.WorkloadOrchestration.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.WorkloadOrchestration.Samples
{
    public partial class Sample_EdgeSchemaVersionCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_SchemaVersionsCreateOrUpdateMaximumSet()
        {
            // Generated from example definition: 2025-06-01/SchemaVersions_CreateOrUpdate_MaximumSet_Gen.json
            // this example is just showing the usage of "SchemaVersion_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeSchemaResource created on azure
            // for more information of creating EdgeSchemaResource, please refer to the document of EdgeSchemaResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string schemaName = "testname";
            ResourceIdentifier edgeSchemaResourceId = EdgeSchemaResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, schemaName);
            EdgeSchemaResource edgeSchema = client.GetEdgeSchemaResource(edgeSchemaResourceId);

            // get the collection of this EdgeSchemaVersionResource
            EdgeSchemaVersionCollection collection = edgeSchema.GetEdgeSchemaVersions();

            // invoke the operation
            string schemaVersionName = "1.0.0";
            EdgeSchemaVersionData data = new EdgeSchemaVersionData
            {
                Properties = new EdgeSchemaVersionProperties("uiaqdwsi"),
            };
            ArmOperation<EdgeSchemaVersionResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, schemaVersionName, data);
            EdgeSchemaVersionResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeSchemaVersionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_SchemaVersionsGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/SchemaVersions_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "SchemaVersion_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeSchemaResource created on azure
            // for more information of creating EdgeSchemaResource, please refer to the document of EdgeSchemaResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string schemaName = "testname";
            ResourceIdentifier edgeSchemaResourceId = EdgeSchemaResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, schemaName);
            EdgeSchemaResource edgeSchema = client.GetEdgeSchemaResource(edgeSchemaResourceId);

            // get the collection of this EdgeSchemaVersionResource
            EdgeSchemaVersionCollection collection = edgeSchema.GetEdgeSchemaVersions();

            // invoke the operation
            string schemaVersionName = "1.0.0";
            EdgeSchemaVersionResource result = await collection.GetAsync(schemaVersionName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeSchemaVersionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_SchemaVersionsListBySchemaMaximumSet()
        {
            // Generated from example definition: 2025-06-01/SchemaVersions_ListBySchema_MaximumSet_Gen.json
            // this example is just showing the usage of "SchemaVersion_ListBySchema" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeSchemaResource created on azure
            // for more information of creating EdgeSchemaResource, please refer to the document of EdgeSchemaResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string schemaName = "testname";
            ResourceIdentifier edgeSchemaResourceId = EdgeSchemaResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, schemaName);
            EdgeSchemaResource edgeSchema = client.GetEdgeSchemaResource(edgeSchemaResourceId);

            // get the collection of this EdgeSchemaVersionResource
            EdgeSchemaVersionCollection collection = edgeSchema.GetEdgeSchemaVersions();

            // invoke the operation and iterate over the result
            await foreach (EdgeSchemaVersionResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                EdgeSchemaVersionData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_SchemaVersionsGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/SchemaVersions_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "SchemaVersion_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeSchemaResource created on azure
            // for more information of creating EdgeSchemaResource, please refer to the document of EdgeSchemaResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string schemaName = "testname";
            ResourceIdentifier edgeSchemaResourceId = EdgeSchemaResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, schemaName);
            EdgeSchemaResource edgeSchema = client.GetEdgeSchemaResource(edgeSchemaResourceId);

            // get the collection of this EdgeSchemaVersionResource
            EdgeSchemaVersionCollection collection = edgeSchema.GetEdgeSchemaVersions();

            // invoke the operation
            string schemaVersionName = "1.0.0";
            bool result = await collection.ExistsAsync(schemaVersionName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_SchemaVersionsGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/SchemaVersions_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "SchemaVersion_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeSchemaResource created on azure
            // for more information of creating EdgeSchemaResource, please refer to the document of EdgeSchemaResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string schemaName = "testname";
            ResourceIdentifier edgeSchemaResourceId = EdgeSchemaResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, schemaName);
            EdgeSchemaResource edgeSchema = client.GetEdgeSchemaResource(edgeSchemaResourceId);

            // get the collection of this EdgeSchemaVersionResource
            EdgeSchemaVersionCollection collection = edgeSchema.GetEdgeSchemaVersions();

            // invoke the operation
            string schemaVersionName = "1.0.0";
            NullableResponse<EdgeSchemaVersionResource> response = await collection.GetIfExistsAsync(schemaVersionName);
            EdgeSchemaVersionResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                EdgeSchemaVersionData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/tests/Generated/Samples/Sample_EdgeSchemaVersionResource.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.WorkloadOrchestration.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.WorkloadOrchestration.Samples
{
    public partial class Sample_EdgeSchemaVersionResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_SchemaVersionsGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/SchemaVersions_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "SchemaVersion_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeSchemaVersionResource created on azure
            // for more information of creating EdgeSchemaVersionResource, please refer to the document of EdgeSchemaVersionResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string schemaName = "testname";
            string schemaVersionName = "1.0.0";
            ResourceIdentifier edgeSchemaVersionResourceId = EdgeSchemaVersionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, schemaName, schemaVersionName);
            EdgeSchemaVersionResource edgeSchemaVersion = client.GetEdgeSchemaVersionResource(edgeSchemaVersionResourceId);

            // invoke the operation
            EdgeSchemaVersionResource result = await edgeSchemaVersion.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeSchemaVersionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_SchemaVersionsDeleteMaximumSet()
        {
            // Generated from example definition: 2025-06-01/SchemaVersions_Delete_MaximumSet_Gen.json
            // this example is just showing the usage of "SchemaVersion_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeSchemaVersionResource created on azure
            // for more information of creating EdgeSchemaVersionResource, please refer to the document of EdgeSchemaVersionResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string schemaName = "testname";
            string schemaVersionName = "1.0.0";
            ResourceIdentifier edgeSchemaVersionResourceId = EdgeSchemaVersionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, schemaName, schemaVersionName);
            EdgeSchemaVersionResource edgeSchemaVersion = client.GetEdgeSchemaVersionResource(edgeSchemaVersionResourceId);

            // invoke the operation
            await edgeSchemaVersion.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_SchemaVersionsUpdateMaximumSet()
        {
            // Generated from example definition: 2025-06-01/SchemaVersions_Update_MaximumSet_Gen.json
            // this example is just showing the usage of "SchemaVersion_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeSchemaVersionResource created on azure
            // for more information of creating EdgeSchemaVersionResource, please refer to the document of EdgeSchemaVersionResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string schemaName = "testname";
            string schemaVersionName = "1.0.0";
            ResourceIdentifier edgeSchemaVersionResourceId = EdgeSchemaVersionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, schemaName, schemaVersionName);
            EdgeSchemaVersionResource edgeSchemaVersion = client.GetEdgeSchemaVersionResource(edgeSchemaVersionResourceId);

            // invoke the operation
            EdgeSchemaVersionData data = new EdgeSchemaVersionData
            {
                Properties = new EdgeSchemaVersionProperties("muezi"),
            };
            EdgeSchemaVersionResource result = await edgeSchemaVersion.UpdateAsync(data);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeSchemaVersionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/tests/Generated/Samples/Sample_EdgeSiteReferenceCollection.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.WorkloadOrchestration.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.WorkloadOrchestration.Samples
{
    public partial class Sample_EdgeSiteReferenceCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_SiteReferencesCreateOrUpdateMaximumSet()
        {
            // Generated from example definition: 2025-06-01/SiteReferences_CreateOrUpdate_MaximumSet_Gen.json
            // this example is just showing the usage of "SiteReference_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeContextResource created on azure
            // for more information of creating EdgeContextResource, please refer to the document of EdgeContextResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string contextName = "testname";
            ResourceIdentifier edgeContextResourceId = EdgeContextResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, contextName);
            EdgeContextResource edgeContext = client.GetEdgeContextResource(edgeContextResourceId);

            // get the collection of this EdgeSiteReferenceResource
            EdgeSiteReferenceCollection collection = edgeContext.GetEdgeSiteReferences();

            // invoke the operation
            string siteReferenceName = "testname";
            EdgeSiteReferenceData data = new EdgeSiteReferenceData
            {
                Properties = new EdgeSiteReferenceProperties("xxjpxdcaumewwgpbwzkcrgrcw"),
            };
            ArmOperation<EdgeSiteReferenceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, siteReferenceName, data);
            EdgeSiteReferenceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeSiteReferenceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_SiteReferencesGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/SiteReferences_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "SiteReference_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeContextResource created on azure
            // for more information of creating EdgeContextResource, please refer to the document of EdgeContextResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string contextName = "testname";
            ResourceIdentifier edgeContextResourceId = EdgeContextResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, contextName);
            EdgeContextResource edgeContext = client.GetEdgeContextResource(edgeContextResourceId);

            // get the collection of this EdgeSiteReferenceResource
            EdgeSiteReferenceCollection collection = edgeContext.GetEdgeSiteReferences();

            // invoke the operation
            string siteReferenceName = "testname";
            EdgeSiteReferenceResource result = await collection.GetAsync(siteReferenceName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeSiteReferenceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_SiteReferencesListByContextMaximumSet()
        {
            // Generated from example definition: 2025-06-01/SiteReferences_ListByContext_MaximumSet_Gen.json
            // this example is just showing the usage of "SiteReference_ListByContext" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeContextResource created on azure
            // for more information of creating EdgeContextResource, please refer to the document of EdgeContextResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string contextName = "testname";
            ResourceIdentifier edgeContextResourceId = EdgeContextResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, contextName);
            EdgeContextResource edgeContext = client.GetEdgeContextResource(edgeContextResourceId);

            // get the collection of this EdgeSiteReferenceResource
            EdgeSiteReferenceCollection collection = edgeContext.GetEdgeSiteReferences();

            // invoke the operation and iterate over the result
            await foreach (EdgeSiteReferenceResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                EdgeSiteReferenceData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_SiteReferencesGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/SiteReferences_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "SiteReference_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeContextResource created on azure
            // for more information of creating EdgeContextResource, please refer to the document of EdgeContextResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string contextName = "testname";
            ResourceIdentifier edgeContextResourceId = EdgeContextResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, contextName);
            EdgeContextResource edgeContext = client.GetEdgeContextResource(edgeContextResourceId);

            // get the collection of this EdgeSiteReferenceResource
            EdgeSiteReferenceCollection collection = edgeContext.GetEdgeSiteReferences();

            // invoke the operation
            string siteReferenceName = "testname";
            bool result = await collection.ExistsAsync(siteReferenceName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_SiteReferencesGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/SiteReferences_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "SiteReference_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeContextResource created on azure
            // for more information of creating EdgeContextResource, please refer to the document of EdgeContextResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string contextName = "testname";
            ResourceIdentifier edgeContextResourceId = EdgeContextResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, contextName);
            EdgeContextResource edgeContext = client.GetEdgeContextResource(edgeContextResourceId);

            // get the collection of this EdgeSiteReferenceResource
            EdgeSiteReferenceCollection collection = edgeContext.GetEdgeSiteReferences();

            // invoke the operation
            string siteReferenceName = "testname";
            NullableResponse<EdgeSiteReferenceResource> response = await collection.GetIfExistsAsync(siteReferenceName);
            EdgeSiteReferenceResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                EdgeSiteReferenceData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/tests/Generated/Samples/Sample_EdgeSiteReferenceResource.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.WorkloadOrchestration.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.WorkloadOrchestration.Samples
{
    public partial class Sample_EdgeSiteReferenceResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_SiteReferencesGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/SiteReferences_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "SiteReference_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeSiteReferenceResource created on azure
            // for more information of creating EdgeSiteReferenceResource, please refer to the document of EdgeSiteReferenceResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string contextName = "testname";
            string siteReferenceName = "testname";
            ResourceIdentifier edgeSiteReferenceResourceId = EdgeSiteReferenceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, contextName, siteReferenceName);
            EdgeSiteReferenceResource edgeSiteReference = client.GetEdgeSiteReferenceResource(edgeSiteReferenceResourceId);

            // invoke the operation
            EdgeSiteReferenceResource result = await edgeSiteReference.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeSiteReferenceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_SiteReferencesDeleteMaximumSet()
        {
            // Generated from example definition: 2025-06-01/SiteReferences_Delete_MaximumSet_Gen.json
            // this example is just showing the usage of "SiteReference_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeSiteReferenceResource created on azure
            // for more information of creating EdgeSiteReferenceResource, please refer to the document of EdgeSiteReferenceResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string contextName = "testname";
            string siteReferenceName = "testname";
            ResourceIdentifier edgeSiteReferenceResourceId = EdgeSiteReferenceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, contextName, siteReferenceName);
            EdgeSiteReferenceResource edgeSiteReference = client.GetEdgeSiteReferenceResource(edgeSiteReferenceResourceId);

            // invoke the operation
            await edgeSiteReference.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_SiteReferencesUpdateMaximumSet()
        {
            // Generated from example definition: 2025-06-01/SiteReferences_Update_MaximumSet_Gen.json
            // this example is just showing the usage of "SiteReference_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeSiteReferenceResource created on azure
            // for more information of creating EdgeSiteReferenceResource, please refer to the document of EdgeSiteReferenceResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string contextName = "testname";
            string siteReferenceName = "testname";
            ResourceIdentifier edgeSiteReferenceResourceId = EdgeSiteReferenceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, contextName, siteReferenceName);
            EdgeSiteReferenceResource edgeSiteReference = client.GetEdgeSiteReferenceResource(edgeSiteReferenceResourceId);

            // invoke the operation
            EdgeSiteReferenceData data = new EdgeSiteReferenceData
            {
                Properties = new EdgeSiteReferenceProperties("nwiuyaro"),
            };
            ArmOperation<EdgeSiteReferenceResource> lro = await edgeSiteReference.UpdateAsync(WaitUntil.Completed, data);
            EdgeSiteReferenceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeSiteReferenceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/tests/Generated/Samples/Sample_EdgeSolutionCollection.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.WorkloadOrchestration.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.WorkloadOrchestration.Samples
{
    public partial class Sample_EdgeSolutionCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_SolutionsCreateOrUpdateMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Solutions_CreateOrUpdate_MaximumSet_Gen.json
            // this example is just showing the usage of "Solution_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeTargetResource created on azure
            // for more information of creating EdgeTargetResource, please refer to the document of EdgeTargetResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string targetName = "testname";
            ResourceIdentifier edgeTargetResourceId = EdgeTargetResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, targetName);
            EdgeTargetResource edgeTarget = client.GetEdgeTargetResource(edgeTargetResourceId);

            // get the collection of this EdgeSolutionResource
            EdgeSolutionCollection collection = edgeTarget.GetEdgeSolutions();

            // invoke the operation
            string solutionName = "testname";
            EdgeSolutionData data = new EdgeSolutionData
            {
                Properties = new EdgeSolutionProperties(),
                ExtendedLocation = new ExtendedLocation
                {
                    Name = "szjrwimeqyiue",
                },
            };
            ArmOperation<EdgeSolutionResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, solutionName, data);
            EdgeSolutionResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeSolutionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_SolutionsGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Solutions_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "Solution_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeTargetResource created on azure
            // for more information of creating EdgeTargetResource, please refer to the document of EdgeTargetResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string targetName = "testname";
            ResourceIdentifier edgeTargetResourceId = EdgeTargetResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, targetName);
            EdgeTargetResource edgeTarget = client.GetEdgeTargetResource(edgeTargetResourceId);

            // get the collection of this EdgeSolutionResource
            EdgeSolutionCollection collection = edgeTarget.GetEdgeSolutions();

            // invoke the operation
            string solutionName = "testname";
            EdgeSolutionResource result = await collection.GetAsync(solutionName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeSolutionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_SolutionsListByTargetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Solutions_ListByTarget_MaximumSet_Gen.json
            // this example is just showing the usage of "Solution_ListByTarget" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeTargetResource created on azure
            // for more information of creating EdgeTargetResource, please refer to the document of EdgeTargetResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string targetName = "testname";
            ResourceIdentifier edgeTargetResourceId = EdgeTargetResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, targetName);
            EdgeTargetResource edgeTarget = client.GetEdgeTargetResource(edgeTargetResourceId);

            // get the collection of this EdgeSolutionResource
            EdgeSolutionCollection collection = edgeTarget.GetEdgeSolutions();

            // invoke the operation and iterate over the result
            await foreach (EdgeSolutionResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                EdgeSolutionData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_SolutionsGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Solutions_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "Solution_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeTargetResource created on azure
            // for more information of creating EdgeTargetResource, please refer to the document of EdgeTargetResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string targetName = "testname";
            ResourceIdentifier edgeTargetResourceId = EdgeTargetResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, targetName);
            EdgeTargetResource edgeTarget = client.GetEdgeTargetResource(edgeTargetResourceId);

            // get the collection of this EdgeSolutionResource
            EdgeSolutionCollection collection = edgeTarget.GetEdgeSolutions();

            // invoke the operation
            string solutionName = "testname";
            bool result = await collection.ExistsAsync(solutionName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_SolutionsGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Solutions_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "Solution_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeTargetResource created on azure
            // for more information of creating EdgeTargetResource, please refer to the document of EdgeTargetResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string targetName = "testname";
            ResourceIdentifier edgeTargetResourceId = EdgeTargetResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, targetName);
            EdgeTargetResource edgeTarget = client.GetEdgeTargetResource(edgeTargetResourceId);

            // get the collection of this EdgeSolutionResource
            EdgeSolutionCollection collection = edgeTarget.GetEdgeSolutions();

            // invoke the operation
            string solutionName = "testname";
            NullableResponse<EdgeSolutionResource> response = await collection.GetIfExistsAsync(solutionName);
            EdgeSolutionResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                EdgeSolutionData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/tests/Generated/Samples/Sample_EdgeSolutionResource.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.WorkloadOrchestration.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.WorkloadOrchestration.Samples
{
    public partial class Sample_EdgeSolutionResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_SolutionsGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Solutions_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "Solution_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeSolutionResource created on azure
            // for more information of creating EdgeSolutionResource, please refer to the document of EdgeSolutionResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string targetName = "testname";
            string solutionName = "testname";
            ResourceIdentifier edgeSolutionResourceId = EdgeSolutionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, targetName, solutionName);
            EdgeSolutionResource edgeSolution = client.GetEdgeSolutionResource(edgeSolutionResourceId);

            // invoke the operation
            EdgeSolutionResource result = await edgeSolution.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeSolutionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_SolutionsDeleteMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Solutions_Delete_MaximumSet_Gen.json
            // this example is just showing the usage of "Solution_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeSolutionResource created on azure
            // for more information of creating EdgeSolutionResource, please refer to the document of EdgeSolutionResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string targetName = "testname";
            string solutionName = "testname";
            ResourceIdentifier edgeSolutionResourceId = EdgeSolutionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, targetName, solutionName);
            EdgeSolutionResource edgeSolution = client.GetEdgeSolutionResource(edgeSolutionResourceId);

            // invoke the operation
            await edgeSolution.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_SolutionsUpdateMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Solutions_Update_MaximumSet_Gen.json
            // this example is just showing the usage of "Solution_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeSolutionResource created on azure
            // for more information of creating EdgeSolutionResource, please refer to the document of EdgeSolutionResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string targetName = "testname";
            string solutionName = "testname";
            ResourceIdentifier edgeSolutionResourceId = EdgeSolutionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, targetName, solutionName);
            EdgeSolutionResource edgeSolution = client.GetEdgeSolutionResource(edgeSolutionResourceId);

            // invoke the operation
            EdgeSolutionPatch patch = new EdgeSolutionPatch
            {
                Properties = new EdgeSolutionPatchProperties(),
            };
            ArmOperation<EdgeSolutionResource> lro = await edgeSolution.UpdateAsync(WaitUntil.Completed, patch);
            EdgeSolutionResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeSolutionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/tests/Generated/Samples/Sample_EdgeSolutionTemplateCollection.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.WorkloadOrchestration.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.WorkloadOrchestration.Samples
{
    public partial class Sample_EdgeSolutionTemplateCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_SolutionTemplatesCreateOrUpdateMaximumSet()
        {
            // Generated from example definition: 2025-06-01/SolutionTemplates_CreateOrUpdate_MaximumSet_Gen.json
            // this example is just showing the usage of "SolutionTemplate_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this EdgeSolutionTemplateResource
            EdgeSolutionTemplateCollection collection = resourceGroupResource.GetEdgeSolutionTemplates();

            // invoke the operation
            string solutionTemplateName = "testname";
            EdgeSolutionTemplateData data = new EdgeSolutionTemplateData(new AzureLocation("zheaaqvadewftnctxzpinrgeproqs"))
            {
                Properties = new EdgeSolutionTemplateProperties("psrftehgzngcdlccivhjmwsmiz", new string[] { "dfoyxbbknrhvlunhmuyyt" })
                {
                    State = EdgeResourceState.Active,
                    IsExternalValidationEnabled = true,
                },
                Tags =
{
["key5091"] = "dov"
},
            };
            ArmOperation<EdgeSolutionTemplateResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, solutionTemplateName, data);
            EdgeSolutionTemplateResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeSolutionTemplateData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_SolutionTemplatesGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/SolutionTemplates_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "SolutionTemplate_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this EdgeSolutionTemplateResource
            EdgeSolutionTemplateCollection collection = resourceGroupResource.GetEdgeSolutionTemplates();

            // invoke the operation
            string solutionTemplateName = "testname";
            EdgeSolutionTemplateResource result = await collection.GetAsync(solutionTemplateName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeSolutionTemplateData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_SolutionTemplatesListByResourceGroupMaximumSet()
        {
            // Generated from example definition: 2025-06-01/SolutionTemplates_ListByResourceGroup_MaximumSet_Gen.json
            // this example is just showing the usage of "SolutionTemplate_ListByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this EdgeSolutionTemplateResource
            EdgeSolutionTemplateCollection collection = resourceGroupResource.GetEdgeSolutionTemplates();

            // invoke the operation and iterate over the result
            await foreach (EdgeSolutionTemplateResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                EdgeSolutionTemplateData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_SolutionTemplatesGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/SolutionTemplates_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "SolutionTemplate_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this EdgeSolutionTemplateResource
            EdgeSolutionTemplateCollection collection = resourceGroupResource.GetEdgeSolutionTemplates();

            // invoke the operation
            string solutionTemplateName = "testname";
            bool result = await collection.ExistsAsync(solutionTemplateName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_SolutionTemplatesGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/SolutionTemplates_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "SolutionTemplate_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this EdgeSolutionTemplateResource
            EdgeSolutionTemplateCollection collection = resourceGroupResource.GetEdgeSolutionTemplates();

            // invoke the operation
            string solutionTemplateName = "testname";
            NullableResponse<EdgeSolutionTemplateResource> response = await collection.GetIfExistsAsync(solutionTemplateName);
            EdgeSolutionTemplateResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                EdgeSolutionTemplateData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/tests/Generated/Samples/Sample_EdgeSolutionTemplateResource.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.WorkloadOrchestration.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.WorkloadOrchestration.Samples
{
    public partial class Sample_EdgeSolutionTemplateResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_SolutionTemplatesGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/SolutionTemplates_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "SolutionTemplate_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeSolutionTemplateResource created on azure
            // for more information of creating EdgeSolutionTemplateResource, please refer to the document of EdgeSolutionTemplateResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string solutionTemplateName = "testname";
            ResourceIdentifier edgeSolutionTemplateResourceId = EdgeSolutionTemplateResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, solutionTemplateName);
            EdgeSolutionTemplateResource edgeSolutionTemplate = client.GetEdgeSolutionTemplateResource(edgeSolutionTemplateResourceId);

            // invoke the operation
            EdgeSolutionTemplateResource result = await edgeSolutionTemplate.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeSolutionTemplateData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_SolutionTemplatesDeleteMaximumSet()
        {
            // Generated from example definition: 2025-06-01/SolutionTemplates_Delete_MaximumSet_Gen.json
            // this example is just showing the usage of "SolutionTemplate_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeSolutionTemplateResource created on azure
            // for more information of creating EdgeSolutionTemplateResource, please refer to the document of EdgeSolutionTemplateResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string solutionTemplateName = "testname";
            ResourceIdentifier edgeSolutionTemplateResourceId = EdgeSolutionTemplateResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, solutionTemplateName);
            EdgeSolutionTemplateResource edgeSolutionTemplate = client.GetEdgeSolutionTemplateResource(edgeSolutionTemplateResourceId);

            // invoke the operation
            await edgeSolutionTemplate.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_SolutionTemplatesUpdateMaximumSet()
        {
            // Generated from example definition: 2025-06-01/SolutionTemplates_Update_MaximumSet_Gen.json
            // this example is just showing the usage of "SolutionTemplate_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeSolutionTemplateResource created on azure
            // for more information of creating EdgeSolutionTemplateResource, please refer to the document of EdgeSolutionTemplateResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string solutionTemplateName = "testname";
            ResourceIdentifier edgeSolutionTemplateResourceId = EdgeSolutionTemplateResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, solutionTemplateName);
            EdgeSolutionTemplateResource edgeSolutionTemplate = client.GetEdgeSolutionTemplateResource(edgeSolutionTemplateResourceId);

            // invoke the operation
            EdgeSolutionTemplatePatch patch = new EdgeSolutionTemplatePatch
            {
                Tags =
{
["key8772"] = "vbdujmqklnwiepis"
},
                Properties = new EdgeSolutionTemplatePatchProperties
                {
                    Description = "onqlteg",
                    Capabilities = { "relsv" },
                    State = EdgeResourceState.Active,
                    IsExternalValidationEnabled = true,
                },
            };
            EdgeSolutionTemplateResource result = await edgeSolutionTemplate.UpdateAsync(patch);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeSolutionTemplateData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateVersion_SolutionTemplatesCreateVersionMaximumSet()
        {
            // Generated from example definition: 2025-06-01/SolutionTemplates_CreateVersion_MaximumSet_Gen.json
            // this example is just showing the usage of "SolutionTemplates_CreateVersion" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeSolutionTemplateResource created on azure
            // for more information of creating EdgeSolutionTemplateResource, please refer to the document of EdgeSolutionTemplateResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string solutionTemplateName = "testname";
            ResourceIdentifier edgeSolutionTemplateResourceId = EdgeSolutionTemplateResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, solutionTemplateName);
            EdgeSolutionTemplateResource edgeSolutionTemplate = client.GetEdgeSolutionTemplateResource(edgeSolutionTemplateResourceId);

            // invoke the operation
            EdgeSolutionTemplateVersionWithUpdateType body = new EdgeSolutionTemplateVersionWithUpdateType(new EdgeSolutionTemplateVersionData
            {
                Properties = new EdgeSolutionTemplateVersionProperties("ofqcsavwmeuwmvtjnqpoybtjvkmrlh", new Dictionary<string, BinaryData>())
                {
                    OrchestratorType = SolutionVersionOrchestratorType.TO,
                },
            })
            {
                UpdateType = EdgeUpdateType.Major,
                Version = "1.0.0",
            };
            ArmOperation<EdgeSolutionTemplateVersionResource> lro = await edgeSolutionTemplate.CreateVersionAsync(WaitUntil.Completed, body);
            EdgeSolutionTemplateVersionResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeSolutionTemplateVersionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task RemoveVersion_SolutionTemplatesRemoveVersionMaximumSet()
        {
            // Generated from example definition: 2025-06-01/SolutionTemplates_RemoveVersion_MaximumSet_Gen.json
            // this example is just showing the usage of "SolutionTemplates_RemoveVersion" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeSolutionTemplateResource created on azure
            // for more information of creating EdgeSolutionTemplateResource, please refer to the document of EdgeSolutionTemplateResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string solutionTemplateName = "testname";
            ResourceIdentifier edgeSolutionTemplateResourceId = EdgeSolutionTemplateResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, solutionTemplateName);
            EdgeSolutionTemplateResource edgeSolutionTemplate = client.GetEdgeSolutionTemplateResource(edgeSolutionTemplateResourceId);

            // invoke the operation
            EdgeVersionContent content = new EdgeVersionContent("ghtvdzgmzncaifrnuumg");
            await edgeSolutionTemplate.RemoveVersionAsync(WaitUntil.Completed, content);

            Console.WriteLine("Succeeded");
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/tests/Generated/Samples/Sample_EdgeSolutionTemplateVersionCollection.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.ResourceManager.WorkloadOrchestration.Samples
{
    public partial class Sample_EdgeSolutionTemplateVersionCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_SolutionTemplateVersionsGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/SolutionTemplateVersions_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "SolutionTemplateVersion_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeSolutionTemplateResource created on azure
            // for more information of creating EdgeSolutionTemplateResource, please refer to the document of EdgeSolutionTemplateResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string solutionTemplateName = "testname";
            ResourceIdentifier edgeSolutionTemplateResourceId = EdgeSolutionTemplateResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, solutionTemplateName);
            EdgeSolutionTemplateResource edgeSolutionTemplate = client.GetEdgeSolutionTemplateResource(edgeSolutionTemplateResourceId);

            // get the collection of this EdgeSolutionTemplateVersionResource
            EdgeSolutionTemplateVersionCollection collection = edgeSolutionTemplate.GetEdgeSolutionTemplateVersions();

            // invoke the operation
            string solutionTemplateVersionName = "1.0.0";
            EdgeSolutionTemplateVersionResource result = await collection.GetAsync(solutionTemplateVersionName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeSolutionTemplateVersionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_SolutionTemplateVersionsListBySolutionTemplateMaximumSet()
        {
            // Generated from example definition: 2025-06-01/SolutionTemplateVersions_ListBySolutionTemplate_MaximumSet_Gen.json
            // this example is just showing the usage of "SolutionTemplateVersion_ListBySolutionTemplate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeSolutionTemplateResource created on azure
            // for more information of creating EdgeSolutionTemplateResource, please refer to the document of EdgeSolutionTemplateResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string solutionTemplateName = "testname";
            ResourceIdentifier edgeSolutionTemplateResourceId = EdgeSolutionTemplateResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, solutionTemplateName);
            EdgeSolutionTemplateResource edgeSolutionTemplate = client.GetEdgeSolutionTemplateResource(edgeSolutionTemplateResourceId);

            // get the collection of this EdgeSolutionTemplateVersionResource
            EdgeSolutionTemplateVersionCollection collection = edgeSolutionTemplate.GetEdgeSolutionTemplateVersions();

            // invoke the operation and iterate over the result
            await foreach (EdgeSolutionTemplateVersionResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                EdgeSolutionTemplateVersionData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_SolutionTemplateVersionsGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/SolutionTemplateVersions_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "SolutionTemplateVersion_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeSolutionTemplateResource created on azure
            // for more information of creating EdgeSolutionTemplateResource, please refer to the document of EdgeSolutionTemplateResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string solutionTemplateName = "testname";
            ResourceIdentifier edgeSolutionTemplateResourceId = EdgeSolutionTemplateResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, solutionTemplateName);
            EdgeSolutionTemplateResource edgeSolutionTemplate = client.GetEdgeSolutionTemplateResource(edgeSolutionTemplateResourceId);

            // get the collection of this EdgeSolutionTemplateVersionResource
            EdgeSolutionTemplateVersionCollection collection = edgeSolutionTemplate.GetEdgeSolutionTemplateVersions();

            // invoke the operation
            string solutionTemplateVersionName = "1.0.0";
            bool result = await collection.ExistsAsync(solutionTemplateVersionName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_SolutionTemplateVersionsGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/SolutionTemplateVersions_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "SolutionTemplateVersion_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeSolutionTemplateResource created on azure
            // for more information of creating EdgeSolutionTemplateResource, please refer to the document of EdgeSolutionTemplateResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string solutionTemplateName = "testname";
            ResourceIdentifier edgeSolutionTemplateResourceId = EdgeSolutionTemplateResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, solutionTemplateName);
            EdgeSolutionTemplateResource edgeSolutionTemplate = client.GetEdgeSolutionTemplateResource(edgeSolutionTemplateResourceId);

            // get the collection of this EdgeSolutionTemplateVersionResource
            EdgeSolutionTemplateVersionCollection collection = edgeSolutionTemplate.GetEdgeSolutionTemplateVersions();

            // invoke the operation
            string solutionTemplateVersionName = "1.0.0";
            NullableResponse<EdgeSolutionTemplateVersionResource> response = await collection.GetIfExistsAsync(solutionTemplateVersionName);
            EdgeSolutionTemplateVersionResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                EdgeSolutionTemplateVersionData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/tests/Generated/Samples/Sample_EdgeSolutionTemplateVersionResource.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.WorkloadOrchestration.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.WorkloadOrchestration.Samples
{
    public partial class Sample_EdgeSolutionTemplateVersionResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_SolutionTemplateVersionsGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/SolutionTemplateVersions_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "SolutionTemplateVersion_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeSolutionTemplateVersionResource created on azure
            // for more information of creating EdgeSolutionTemplateVersionResource, please refer to the document of EdgeSolutionTemplateVersionResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string solutionTemplateName = "testname";
            string solutionTemplateVersionName = "1.0.0";
            ResourceIdentifier edgeSolutionTemplateVersionResourceId = EdgeSolutionTemplateVersionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, solutionTemplateName, solutionTemplateVersionName);
            EdgeSolutionTemplateVersionResource edgeSolutionTemplateVersion = client.GetEdgeSolutionTemplateVersionResource(edgeSolutionTemplateVersionResourceId);

            // invoke the operation
            EdgeSolutionTemplateVersionResource result = await edgeSolutionTemplateVersion.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeSolutionTemplateVersionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task BulkDeploySolution_SolutionTemplateVersionsBulkDeploySolutionMaximumSet()
        {
            // Generated from example definition: 2025-06-01/SolutionTemplateVersions_BulkDeploySolution_MaximumSet_Gen.json
            // this example is just showing the usage of "SolutionTemplateVersions_BulkDeploySolution" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeSolutionTemplateVersionResource created on azure
            // for more information of creating EdgeSolutionTemplateVersionResource, please refer to the document of EdgeSolutionTemplateVersionResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string solutionTemplateName = "testname";
            string solutionTemplateVersionName = "1.0.0";
            ResourceIdentifier edgeSolutionTemplateVersionResourceId = EdgeSolutionTemplateVersionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, solutionTemplateName, solutionTemplateVersionName);
            EdgeSolutionTemplateVersionResource edgeSolutionTemplateVersion = client.GetEdgeSolutionTemplateVersionResource(edgeSolutionTemplateVersionResourceId);

            // invoke the operation
            BulkDeploySolutionContent content = new BulkDeploySolutionContent(new BulkDeployTargetDetails[]
            {
new BulkDeployTargetDetails(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.Edge/Targets/target/Solutions/solution/Versions/solution-1.0.0.1"))
            });
            await edgeSolutionTemplateVersion.BulkDeploySolutionAsync(WaitUntil.Completed, content);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task BulkPublishSolution_SolutionTemplateVersionsBulkPublishSolutionMaximumSet()
        {
            // Generated from example definition: 2025-06-01/SolutionTemplateVersions_BulkPublishSolution_MaximumSet_Gen.json
            // this example is just showing the usage of "SolutionTemplateVersions_BulkPublishSolution" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeSolutionTemplateVersionResource created on azure
            // for more information of creating EdgeSolutionTemplateVersionResource, please refer to the document of EdgeSolutionTemplateVersionResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string solutionTemplateName = "testname";
            string solutionTemplateVersionName = "1.0.0";
            ResourceIdentifier edgeSolutionTemplateVersionResourceId = EdgeSolutionTemplateVersionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, solutionTemplateName, solutionTemplateVersionName);
            EdgeSolutionTemplateVersionResource edgeSolutionTemplateVersion = client.GetEdgeSolutionTemplateVersionResource(edgeSolutionTemplateVersionResourceId);

            // invoke the operation
            BulkPublishSolutionContent content = new BulkPublishSolutionContent(new BulkPublishTargetDetails[]
            {
new BulkPublishTargetDetails(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.Edge/Targets/target"))
{
SolutionInstanceName = "test-instance",
}
            })
            {
                SolutionInstanceName = "test-instance",
                SolutionDependencies = {new EdgeSolutionDependencyContent
{
SolutionVersionId = new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.Edge/Targets/target/Solutions/solution/Versions/solution-1.0.0.1"),
SolutionTemplateId = new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.Edge/SolutionTemplates/st"),
SolutionTemplateVersion = "1.0.0",
SolutionInstanceName = "test-instance",
TargetId = new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.Edge/Targets/target"),
Dependencies = {},
}},
            };
            await edgeSolutionTemplateVersion.BulkPublishSolutionAsync(WaitUntil.Completed, content);

            Console.WriteLine("Succeeded");
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/tests/Generated/Samples/Sample_EdgeSolutionVersionCollection.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.WorkloadOrchestration.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.WorkloadOrchestration.Samples
{
    public partial class Sample_EdgeSolutionVersionCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_SolutionVersionsCreateOrUpdateMaximumSet()
        {
            // Generated from example definition: 2025-06-01/SolutionVersions_CreateOrUpdate_MaximumSet_Gen.json
            // this example is just showing the usage of "SolutionVersion_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeSolutionResource created on azure
            // for more information of creating EdgeSolutionResource, please refer to the document of EdgeSolutionResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string targetName = "testname";
            string solutionName = "testname";
            ResourceIdentifier edgeSolutionResourceId = EdgeSolutionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, targetName, solutionName);
            EdgeSolutionResource edgeSolution = client.GetEdgeSolutionResource(edgeSolutionResourceId);

            // get the collection of this EdgeSolutionVersionResource
            EdgeSolutionVersionCollection collection = edgeSolution.GetEdgeSolutionVersions();

            // invoke the operation
            string solutionVersionName = "testname";
            EdgeSolutionVersionData data = new EdgeSolutionVersionData
            {
                Properties = new EdgeSolutionVersionProperties(new Dictionary<string, BinaryData>()),
                ExtendedLocation = new ExtendedLocation
                {
                    Name = "szjrwimeqyiue",
                },
            };
            ArmOperation<EdgeSolutionVersionResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, solutionVersionName, data);
            EdgeSolutionVersionResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeSolutionVersionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_SolutionVersionsGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/SolutionVersions_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "SolutionVersion_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeSolutionResource created on azure
            // for more information of creating EdgeSolutionResource, please refer to the document of EdgeSolutionResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string targetName = "testname";
            string solutionName = "testname";
            ResourceIdentifier edgeSolutionResourceId = EdgeSolutionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, targetName, solutionName);
            EdgeSolutionResource edgeSolution = client.GetEdgeSolutionResource(edgeSolutionResourceId);

            // get the collection of this EdgeSolutionVersionResource
            EdgeSolutionVersionCollection collection = edgeSolution.GetEdgeSolutionVersions();

            // invoke the operation
            string solutionVersionName = "testname";
            EdgeSolutionVersionResource result = await collection.GetAsync(solutionVersionName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeSolutionVersionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_SolutionVersionsListBySolutionMaximumSet()
        {
            // Generated from example definition: 2025-06-01/SolutionVersions_ListBySolution_MaximumSet_Gen.json
            // this example is just showing the usage of "SolutionVersion_ListBySolution" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeSolutionResource created on azure
            // for more information of creating EdgeSolutionResource, please refer to the document of EdgeSolutionResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string targetName = "testname";
            string solutionName = "testname";
            ResourceIdentifier edgeSolutionResourceId = EdgeSolutionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, targetName, solutionName);
            EdgeSolutionResource edgeSolution = client.GetEdgeSolutionResource(edgeSolutionResourceId);

            // get the collection of this EdgeSolutionVersionResource
            EdgeSolutionVersionCollection collection = edgeSolution.GetEdgeSolutionVersions();

            // invoke the operation and iterate over the result
            await foreach (EdgeSolutionVersionResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                EdgeSolutionVersionData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_SolutionVersionsGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/SolutionVersions_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "SolutionVersion_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeSolutionResource created on azure
            // for more information of creating EdgeSolutionResource, please refer to the document of EdgeSolutionResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string targetName = "testname";
            string solutionName = "testname";
            ResourceIdentifier edgeSolutionResourceId = EdgeSolutionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, targetName, solutionName);
            EdgeSolutionResource edgeSolution = client.GetEdgeSolutionResource(edgeSolutionResourceId);

            // get the collection of this EdgeSolutionVersionResource
            EdgeSolutionVersionCollection collection = edgeSolution.GetEdgeSolutionVersions();

            // invoke the operation
            string solutionVersionName = "testname";
            bool result = await collection.ExistsAsync(solutionVersionName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_SolutionVersionsGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/SolutionVersions_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "SolutionVersion_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeSolutionResource created on azure
            // for more information of creating EdgeSolutionResource, please refer to the document of EdgeSolutionResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string targetName = "testname";
            string solutionName = "testname";
            ResourceIdentifier edgeSolutionResourceId = EdgeSolutionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, targetName, solutionName);
            EdgeSolutionResource edgeSolution = client.GetEdgeSolutionResource(edgeSolutionResourceId);

            // get the collection of this EdgeSolutionVersionResource
            EdgeSolutionVersionCollection collection = edgeSolution.GetEdgeSolutionVersions();

            // invoke the operation
            string solutionVersionName = "testname";
            NullableResponse<EdgeSolutionVersionResource> response = await collection.GetIfExistsAsync(solutionVersionName);
            EdgeSolutionVersionResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                EdgeSolutionVersionData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/tests/Generated/Samples/Sample_EdgeSolutionVersionResource.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.WorkloadOrchestration.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.WorkloadOrchestration.Samples
{
    public partial class Sample_EdgeSolutionVersionResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_SolutionVersionsGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/SolutionVersions_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "SolutionVersion_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeSolutionVersionResource created on azure
            // for more information of creating EdgeSolutionVersionResource, please refer to the document of EdgeSolutionVersionResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string targetName = "testname";
            string solutionName = "testname";
            string solutionVersionName = "testname";
            ResourceIdentifier edgeSolutionVersionResourceId = EdgeSolutionVersionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, targetName, solutionName, solutionVersionName);
            EdgeSolutionVersionResource edgeSolutionVersion = client.GetEdgeSolutionVersionResource(edgeSolutionVersionResourceId);

            // invoke the operation
            EdgeSolutionVersionResource result = await edgeSolutionVersion.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeSolutionVersionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_SolutionVersionsDeleteMaximumSet()
        {
            // Generated from example definition: 2025-06-01/SolutionVersions_Delete_MaximumSet_Gen.json
            // this example is just showing the usage of "SolutionVersion_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeSolutionVersionResource created on azure
            // for more information of creating EdgeSolutionVersionResource, please refer to the document of EdgeSolutionVersionResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string targetName = "testname";
            string solutionName = "testname";
            string solutionVersionName = "testname";
            ResourceIdentifier edgeSolutionVersionResourceId = EdgeSolutionVersionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, targetName, solutionName, solutionVersionName);
            EdgeSolutionVersionResource edgeSolutionVersion = client.GetEdgeSolutionVersionResource(edgeSolutionVersionResourceId);

            // invoke the operation
            await edgeSolutionVersion.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_SolutionVersionsUpdateMaximumSet()
        {
            // Generated from example definition: 2025-06-01/SolutionVersions_Update_MaximumSet_Gen.json
            // this example is just showing the usage of "SolutionVersion_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeSolutionVersionResource created on azure
            // for more information of creating EdgeSolutionVersionResource, please refer to the document of EdgeSolutionVersionResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string targetName = "testname";
            string solutionName = "testname";
            string solutionVersionName = "testname";
            ResourceIdentifier edgeSolutionVersionResourceId = EdgeSolutionVersionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, targetName, solutionName, solutionVersionName);
            EdgeSolutionVersionResource edgeSolutionVersion = client.GetEdgeSolutionVersionResource(edgeSolutionVersionResourceId);

            // invoke the operation
            EdgeSolutionVersionData data = new EdgeSolutionVersionData
            {
                Properties = new EdgeSolutionVersionProperties(new Dictionary<string, BinaryData>()),
            };
            ArmOperation<EdgeSolutionVersionResource> lro = await edgeSolutionVersion.UpdateAsync(WaitUntil.Completed, data);
            EdgeSolutionVersionResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeSolutionVersionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/tests/Generated/Samples/Sample_EdgeTargetCollection.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.WorkloadOrchestration.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.WorkloadOrchestration.Samples
{
    public partial class Sample_EdgeTargetCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_TargetsCreateOrUpdateMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Targets_CreateOrUpdate_MaximumSet_Gen.json
            // this example is just showing the usage of "Target_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this EdgeTargetResource
            EdgeTargetCollection collection = resourceGroupResource.GetEdgeTargets();

            // invoke the operation
            string targetName = "testname";
            EdgeTargetData data = new EdgeTargetData(new AzureLocation("kckloegmwsjgwtcl"))
            {
                Properties = new EdgeTargetProperties(
                "riabrxtvhlmizyhffdpjeyhvw",
                "qjlbshhqzfmwxvvynibkoi",
                new ResourceIdentifier("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"),
                new Dictionary<string, BinaryData>(),
                new string[] { "grjapghdidoao" },
                "octqptfirejhjfavlnfqeiikqx")
                {
                    SolutionScope = "testname",
                    State = EdgeResourceState.Active,
                },
                ExtendedLocation = new ExtendedLocation
                {
                    Name = "szjrwimeqyiue",
                },
                Tags =
{
["key612"] = "vtqzrk"
},
            };
            ArmOperation<EdgeTargetResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, targetName, data);
            EdgeTargetResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeTargetData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_TargetsGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Targets_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "Target_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this EdgeTargetResource
            EdgeTargetCollection collection = resourceGroupResource.GetEdgeTargets();

            // invoke the operation
            string targetName = "testname";
            EdgeTargetResource result = await collection.GetAsync(targetName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeTargetData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_TargetsListByResourceGroupMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Targets_ListByResourceGroup_MaximumSet_Gen.json
            // this example is just showing the usage of "Target_ListByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this EdgeTargetResource
            EdgeTargetCollection collection = resourceGroupResource.GetEdgeTargets();

            // invoke the operation and iterate over the result
            await foreach (EdgeTargetResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                EdgeTargetData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_TargetsGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Targets_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "Target_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this EdgeTargetResource
            EdgeTargetCollection collection = resourceGroupResource.GetEdgeTargets();

            // invoke the operation
            string targetName = "testname";
            bool result = await collection.ExistsAsync(targetName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_TargetsGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Targets_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "Target_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this EdgeTargetResource
            EdgeTargetCollection collection = resourceGroupResource.GetEdgeTargets();

            // invoke the operation
            string targetName = "testname";
            NullableResponse<EdgeTargetResource> response = await collection.GetIfExistsAsync(targetName);
            EdgeTargetResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                EdgeTargetData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/tests/Generated/Samples/Sample_EdgeTargetResource.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.WorkloadOrchestration.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.WorkloadOrchestration.Samples
{
    public partial class Sample_EdgeTargetResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_TargetsGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Targets_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "Target_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeTargetResource created on azure
            // for more information of creating EdgeTargetResource, please refer to the document of EdgeTargetResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string targetName = "testname";
            ResourceIdentifier edgeTargetResourceId = EdgeTargetResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, targetName);
            EdgeTargetResource edgeTarget = client.GetEdgeTargetResource(edgeTargetResourceId);

            // invoke the operation
            EdgeTargetResource result = await edgeTarget.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeTargetData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_TargetsDeleteMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Targets_Delete_MaximumSet_Gen.json
            // this example is just showing the usage of "Target_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeTargetResource created on azure
            // for more information of creating EdgeTargetResource, please refer to the document of EdgeTargetResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string targetName = "testname";
            ResourceIdentifier edgeTargetResourceId = EdgeTargetResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, targetName);
            EdgeTargetResource edgeTarget = client.GetEdgeTargetResource(edgeTargetResourceId);

            // invoke the operation
            bool? forceDelete = true;
            await edgeTarget.DeleteAsync(WaitUntil.Completed, forceDelete: forceDelete);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_TargetsUpdateMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Targets_Update_MaximumSet_Gen.json
            // this example is just showing the usage of "Target_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeTargetResource created on azure
            // for more information of creating EdgeTargetResource, please refer to the document of EdgeTargetResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string targetName = "testname";
            ResourceIdentifier edgeTargetResourceId = EdgeTargetResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, targetName);
            EdgeTargetResource edgeTarget = client.GetEdgeTargetResource(edgeTargetResourceId);

            // invoke the operation
            EdgeTargetPatch patch = new EdgeTargetPatch
            {
                Tags =
{
["key8026"] = "yoosplotwgoquvpox"
},
                Properties = new EdgeTargetPatchProperties
                {
                    Description = "yhnhdpznncdvncmnvoeohqjx",
                    DisplayName = "pguujtzjjvixgjitugybrefp",
                    ContextId = new ResourceIdentifier("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"),
                    TargetSpecification = { },
                    Capabilities = { "dasqhyxfakivfzqb" },
                    HierarchyLevel = "hfyntwxetgsmnucbjvvphtyxu",
                    SolutionScope = "testname",
                    State = EdgeResourceState.Active,
                },
            };
            ArmOperation<EdgeTargetResource> lro = await edgeTarget.UpdateAsync(WaitUntil.Completed, patch);
            EdgeTargetResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeTargetData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task InstallSolution_TargetsInstallSolutionMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Targets_InstallSolution_MaximumSet_Gen.json
            // this example is just showing the usage of "Targets_InstallSolution" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeTargetResource created on azure
            // for more information of creating EdgeTargetResource, please refer to the document of EdgeTargetResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string targetName = "testname";
            ResourceIdentifier edgeTargetResourceId = EdgeTargetResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, targetName);
            EdgeTargetResource edgeTarget = client.GetEdgeTargetResource(edgeTargetResourceId);

            // invoke the operation
            InstallSolutionContent content = new InstallSolutionContent(new ResourceIdentifier("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"));
            await edgeTarget.InstallSolutionAsync(WaitUntil.Completed, content);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task UninstallSolution_TargetsUninstallSolutionMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Targets_UninstallSolution_MaximumSet_Gen.json
            // this example is just showing the usage of "Targets_UninstallSolution" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeTargetResource created on azure
            // for more information of creating EdgeTargetResource, please refer to the document of EdgeTargetResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string targetName = "testname";
            ResourceIdentifier edgeTargetResourceId = EdgeTargetResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, targetName);
            EdgeTargetResource edgeTarget = client.GetEdgeTargetResource(edgeTargetResourceId);

            // invoke the operation
            UninstallSolutionContent content = new UninstallSolutionContent(new ResourceIdentifier("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"))
            {
                SolutionInstanceName = "lzihiumrcxbolmkqktvtuqyhg",
            };
            await edgeTarget.UninstallSolutionAsync(WaitUntil.Completed, content);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task RemoveRevision_TargetsRemoveRevisionMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Targets_RemoveRevision_MaximumSet_Gen.json
            // this example is just showing the usage of "Targets_RemoveRevision" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeTargetResource created on azure
            // for more information of creating EdgeTargetResource, please refer to the document of EdgeTargetResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string targetName = "testname";
            ResourceIdentifier edgeTargetResourceId = EdgeTargetResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, targetName);
            EdgeTargetResource edgeTarget = client.GetEdgeTargetResource(edgeTargetResourceId);

            // invoke the operation
            RemoveRevisionContent content = new RemoveRevisionContent(new ResourceIdentifier("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"), "tomwmqybqomwkfaeukjneva");
            await edgeTarget.RemoveRevisionAsync(WaitUntil.Completed, content);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task ResolveConfiguration_TargetsResolveConfigurationMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Targets_ResolveConfiguration_MaximumSet_Gen.json
            // this example is just showing the usage of "Targets_ResolveConfiguration" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeTargetResource created on azure
            // for more information of creating EdgeTargetResource, please refer to the document of EdgeTargetResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string targetName = "testname";
            ResourceIdentifier edgeTargetResourceId = EdgeTargetResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, targetName);
            EdgeTargetResource edgeTarget = client.GetEdgeTargetResource(edgeTargetResourceId);

            // invoke the operation
            EdgeSolutionTemplateContent content = new EdgeSolutionTemplateContent(new ResourceIdentifier("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}/{resourceType}/{resourceName}"))
            {
                SolutionInstanceName = "testname",
                SolutionDependencies = {new EdgeSolutionDependencyContent
{
SolutionVersionId = new ResourceIdentifier("cydzqntmjlqtksbavjwteru"),
SolutionTemplateId = new ResourceIdentifier("liqauthxnscodbiwktwfwrrsg"),
SolutionTemplateVersion = "gordjasyxxrj",
SolutionInstanceName = "testname",
TargetId = new ResourceIdentifier("steadvphxtyhjokqicrtg"),
Dependencies = {},
}},
            };
            ArmOperation<ResolvedConfiguration> lro = await edgeTarget.ResolveConfigurationAsync(WaitUntil.Completed, content);
            ResolvedConfiguration result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task ReviewSolutionVersion_TargetsReviewSolutionVersionMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Targets_ReviewSolutionVersion_MaximumSet_Gen.json
            // this example is just showing the usage of "Targets_ReviewSolutionVersion" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeTargetResource created on azure
            // for more information of creating EdgeTargetResource, please refer to the document of EdgeTargetResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string targetName = "testname";
            ResourceIdentifier edgeTargetResourceId = EdgeTargetResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, targetName);
            EdgeTargetResource edgeTarget = client.GetEdgeTargetResource(edgeTargetResourceId);

            // invoke the operation
            EdgeSolutionTemplateContent content = new EdgeSolutionTemplateContent(new ResourceIdentifier("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}/{resourceType}/{resourceName}"))
            {
                SolutionInstanceName = "testname",
                SolutionDependencies = {new EdgeSolutionDependencyContent
{
SolutionVersionId = new ResourceIdentifier("cydzqntmjlqtksbavjwteru"),
SolutionTemplateId = new ResourceIdentifier("liqauthxnscodbiwktwfwrrsg"),
SolutionTemplateVersion = "gordjasyxxrj",
SolutionInstanceName = "testname",
TargetId = new ResourceIdentifier("steadvphxtyhjokqicrtg"),
Dependencies = {},
}},
            };
            ArmOperation<EdgeSolutionVersionResource> lro = await edgeTarget.ReviewSolutionVersionAsync(WaitUntil.Completed, content);
            EdgeSolutionVersionResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeSolutionVersionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task PublishSolutionVersion_TargetsPublishSolutionVersionMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Targets_PublishSolutionVersion_MaximumSet_Gen.json
            // this example is just showing the usage of "Targets_PublishSolutionVersion" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeTargetResource created on azure
            // for more information of creating EdgeTargetResource, please refer to the document of EdgeTargetResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string targetName = "testname";
            ResourceIdentifier edgeTargetResourceId = EdgeTargetResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, targetName);
            EdgeTargetResource edgeTarget = client.GetEdgeTargetResource(edgeTargetResourceId);

            // invoke the operation
            EdgeSolutionVersionContent content = new EdgeSolutionVersionContent(new ResourceIdentifier("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"));
            ArmOperation<EdgeSolutionVersionResource> lro = await edgeTarget.PublishSolutionVersionAsync(WaitUntil.Completed, content);
            EdgeSolutionVersionResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeSolutionVersionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task UpdateExternalValidationStatus_TargetsUpdateExternalValidationStatusMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Targets_UpdateExternalValidationStatus_MaximumSet_Gen.json
            // this example is just showing the usage of "Targets_UpdateExternalValidationStatus" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeTargetResource created on azure
            // for more information of creating EdgeTargetResource, please refer to the document of EdgeTargetResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string targetName = "testname";
            ResourceIdentifier edgeTargetResourceId = EdgeTargetResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, targetName);
            EdgeTargetResource edgeTarget = client.GetEdgeTargetResource(edgeTargetResourceId);

            // invoke the operation
            UpdateExternalValidationStatusContent content = new UpdateExternalValidationStatusContent(new ResourceIdentifier("shntcsuwlmpehmuqkrbf"), "ivsjzwy", SolutionInstanceValidationStatus.Valid)
            {
                ErrorDetails = new ResponseError(null, null),
            };
            ArmOperation<EdgeSolutionVersionResource> lro = await edgeTarget.UpdateExternalValidationStatusAsync(WaitUntil.Completed, content);
            EdgeSolutionVersionResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeSolutionVersionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/tests/Generated/Samples/Sample_EdgeWorkflowCollection.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.WorkloadOrchestration.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.WorkloadOrchestration.Samples
{
    public partial class Sample_EdgeWorkflowCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_WorkflowsCreateOrUpdateMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Workflows_CreateOrUpdate_MaximumSet_Gen.json
            // this example is just showing the usage of "Workflow_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeContextResource created on azure
            // for more information of creating EdgeContextResource, please refer to the document of EdgeContextResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string contextName = "testname";
            ResourceIdentifier edgeContextResourceId = EdgeContextResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, contextName);
            EdgeContextResource edgeContext = client.GetEdgeContextResource(edgeContextResourceId);

            // get the collection of this EdgeWorkflowResource
            EdgeWorkflowCollection collection = edgeContext.GetEdgeWorkflows();

            // invoke the operation
            string workflowName = "testname";
            EdgeWorkflowData data = new EdgeWorkflowData
            {
                Properties = new EdgeWorkflowProperties(),
                ExtendedLocation = new ExtendedLocation
                {
                    Name = "szjrwimeqyiue",
                },
            };
            ArmOperation<EdgeWorkflowResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, workflowName, data);
            EdgeWorkflowResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeWorkflowData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_WorkflowsGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Workflows_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "Workflow_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeContextResource created on azure
            // for more information of creating EdgeContextResource, please refer to the document of EdgeContextResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string contextName = "testname";
            ResourceIdentifier edgeContextResourceId = EdgeContextResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, contextName);
            EdgeContextResource edgeContext = client.GetEdgeContextResource(edgeContextResourceId);

            // get the collection of this EdgeWorkflowResource
            EdgeWorkflowCollection collection = edgeContext.GetEdgeWorkflows();

            // invoke the operation
            string workflowName = "testname";
            EdgeWorkflowResource result = await collection.GetAsync(workflowName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeWorkflowData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_WorkflowsListByContextMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Workflows_ListByContext_MaximumSet_Gen.json
            // this example is just showing the usage of "Workflow_ListByContext" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeContextResource created on azure
            // for more information of creating EdgeContextResource, please refer to the document of EdgeContextResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string contextName = "testname";
            ResourceIdentifier edgeContextResourceId = EdgeContextResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, contextName);
            EdgeContextResource edgeContext = client.GetEdgeContextResource(edgeContextResourceId);

            // get the collection of this EdgeWorkflowResource
            EdgeWorkflowCollection collection = edgeContext.GetEdgeWorkflows();

            // invoke the operation and iterate over the result
            await foreach (EdgeWorkflowResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                EdgeWorkflowData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_WorkflowsGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Workflows_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "Workflow_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeContextResource created on azure
            // for more information of creating EdgeContextResource, please refer to the document of EdgeContextResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string contextName = "testname";
            ResourceIdentifier edgeContextResourceId = EdgeContextResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, contextName);
            EdgeContextResource edgeContext = client.GetEdgeContextResource(edgeContextResourceId);

            // get the collection of this EdgeWorkflowResource
            EdgeWorkflowCollection collection = edgeContext.GetEdgeWorkflows();

            // invoke the operation
            string workflowName = "testname";
            bool result = await collection.ExistsAsync(workflowName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_WorkflowsGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Workflows_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "Workflow_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeContextResource created on azure
            // for more information of creating EdgeContextResource, please refer to the document of EdgeContextResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string contextName = "testname";
            ResourceIdentifier edgeContextResourceId = EdgeContextResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, contextName);
            EdgeContextResource edgeContext = client.GetEdgeContextResource(edgeContextResourceId);

            // get the collection of this EdgeWorkflowResource
            EdgeWorkflowCollection collection = edgeContext.GetEdgeWorkflows();

            // invoke the operation
            string workflowName = "testname";
            NullableResponse<EdgeWorkflowResource> response = await collection.GetIfExistsAsync(workflowName);
            EdgeWorkflowResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                EdgeWorkflowData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/tests/Generated/Samples/Sample_EdgeWorkflowResource.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.WorkloadOrchestration.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.WorkloadOrchestration.Samples
{
    public partial class Sample_EdgeWorkflowResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_WorkflowsGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Workflows_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "Workflow_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeWorkflowResource created on azure
            // for more information of creating EdgeWorkflowResource, please refer to the document of EdgeWorkflowResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string contextName = "testname";
            string workflowName = "testname";
            ResourceIdentifier edgeWorkflowResourceId = EdgeWorkflowResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, contextName, workflowName);
            EdgeWorkflowResource edgeWorkflow = client.GetEdgeWorkflowResource(edgeWorkflowResourceId);

            // invoke the operation
            EdgeWorkflowResource result = await edgeWorkflow.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeWorkflowData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_WorkflowsDeleteMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Workflows_Delete_MaximumSet_Gen.json
            // this example is just showing the usage of "Workflow_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeWorkflowResource created on azure
            // for more information of creating EdgeWorkflowResource, please refer to the document of EdgeWorkflowResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string contextName = "testname";
            string workflowName = "testname";
            ResourceIdentifier edgeWorkflowResourceId = EdgeWorkflowResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, contextName, workflowName);
            EdgeWorkflowResource edgeWorkflow = client.GetEdgeWorkflowResource(edgeWorkflowResourceId);

            // invoke the operation
            await edgeWorkflow.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_WorkflowsUpdateMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Workflows_Update_MaximumSet_Gen.json
            // this example is just showing the usage of "Workflow_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeWorkflowResource created on azure
            // for more information of creating EdgeWorkflowResource, please refer to the document of EdgeWorkflowResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string contextName = "testname";
            string workflowName = "testname";
            ResourceIdentifier edgeWorkflowResourceId = EdgeWorkflowResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, contextName, workflowName);
            EdgeWorkflowResource edgeWorkflow = client.GetEdgeWorkflowResource(edgeWorkflowResourceId);

            // invoke the operation
            EdgeWorkflowData data = new EdgeWorkflowData
            {
                Properties = new EdgeWorkflowProperties(),
            };
            ArmOperation<EdgeWorkflowResource> lro = await edgeWorkflow.UpdateAsync(WaitUntil.Completed, data);
            EdgeWorkflowResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeWorkflowData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/tests/Generated/Samples/Sample_EdgeWorkflowVersionCollection.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.WorkloadOrchestration.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.WorkloadOrchestration.Samples
{
    public partial class Sample_EdgeWorkflowVersionCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_WorkflowVersionsCreateOrUpdateMaximumSet()
        {
            // Generated from example definition: 2025-06-01/WorkflowVersions_CreateOrUpdate_MaximumSet_Gen.json
            // this example is just showing the usage of "WorkflowVersion_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeWorkflowResource created on azure
            // for more information of creating EdgeWorkflowResource, please refer to the document of EdgeWorkflowResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string contextName = "testname";
            string workflowName = "testname";
            ResourceIdentifier edgeWorkflowResourceId = EdgeWorkflowResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, contextName, workflowName);
            EdgeWorkflowResource edgeWorkflow = client.GetEdgeWorkflowResource(edgeWorkflowResourceId);

            // get the collection of this EdgeWorkflowVersionResource
            EdgeWorkflowVersionCollection collection = edgeWorkflow.GetEdgeWorkflowVersions();

            // invoke the operation
            string versionName = "testname";
            EdgeWorkflowVersionData data = new EdgeWorkflowVersionData
            {
                Properties = new EdgeWorkflowVersionProperties(new EdgeWorkflowStageSpec[]
            {
new EdgeWorkflowStageSpec("amrbjd")
{
Specification = {},
Tasks = {new EdgeWorkflowTaskSpec("xxmeyvmgydbcwxqwjhadjxjod", new Dictionary<string, BinaryData>())
{
TargetId = new ResourceIdentifier("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"),
}},
TaskOption = new EdgeWorkflowTaskConfig
{
Concurrency = 3,
ErrorAction = new TaskErrorAction
{
Mode = TaskErrorActionModeType.StopOnAnyFailure,
MaxToleratedFailures = 0,
},
},
}
            })
                {
                    Specification = { },
                },
                ExtendedLocation = new ExtendedLocation
                {
                    Name = "szjrwimeqyiue",
                },
            };
            ArmOperation<EdgeWorkflowVersionResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, versionName, data);
            EdgeWorkflowVersionResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeWorkflowVersionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_WorkflowVersionsGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/WorkflowVersions_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "WorkflowVersion_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeWorkflowResource created on azure
            // for more information of creating EdgeWorkflowResource, please refer to the document of EdgeWorkflowResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string contextName = "testname";
            string workflowName = "testname";
            ResourceIdentifier edgeWorkflowResourceId = EdgeWorkflowResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, contextName, workflowName);
            EdgeWorkflowResource edgeWorkflow = client.GetEdgeWorkflowResource(edgeWorkflowResourceId);

            // get the collection of this EdgeWorkflowVersionResource
            EdgeWorkflowVersionCollection collection = edgeWorkflow.GetEdgeWorkflowVersions();

            // invoke the operation
            string versionName = "testname";
            EdgeWorkflowVersionResource result = await collection.GetAsync(versionName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeWorkflowVersionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_WorkflowVersionsListByWorkflowMaximumSet()
        {
            // Generated from example definition: 2025-06-01/WorkflowVersions_ListByWorkflow_MaximumSet_Gen.json
            // this example is just showing the usage of "WorkflowVersion_ListByWorkflow" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeWorkflowResource created on azure
            // for more information of creating EdgeWorkflowResource, please refer to the document of EdgeWorkflowResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string contextName = "testname";
            string workflowName = "testname";
            ResourceIdentifier edgeWorkflowResourceId = EdgeWorkflowResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, contextName, workflowName);
            EdgeWorkflowResource edgeWorkflow = client.GetEdgeWorkflowResource(edgeWorkflowResourceId);

            // get the collection of this EdgeWorkflowVersionResource
            EdgeWorkflowVersionCollection collection = edgeWorkflow.GetEdgeWorkflowVersions();

            // invoke the operation and iterate over the result
            await foreach (EdgeWorkflowVersionResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                EdgeWorkflowVersionData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_WorkflowVersionsGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/WorkflowVersions_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "WorkflowVersion_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeWorkflowResource created on azure
            // for more information of creating EdgeWorkflowResource, please refer to the document of EdgeWorkflowResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string contextName = "testname";
            string workflowName = "testname";
            ResourceIdentifier edgeWorkflowResourceId = EdgeWorkflowResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, contextName, workflowName);
            EdgeWorkflowResource edgeWorkflow = client.GetEdgeWorkflowResource(edgeWorkflowResourceId);

            // get the collection of this EdgeWorkflowVersionResource
            EdgeWorkflowVersionCollection collection = edgeWorkflow.GetEdgeWorkflowVersions();

            // invoke the operation
            string versionName = "testname";
            bool result = await collection.ExistsAsync(versionName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_WorkflowVersionsGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/WorkflowVersions_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "WorkflowVersion_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeWorkflowResource created on azure
            // for more information of creating EdgeWorkflowResource, please refer to the document of EdgeWorkflowResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string contextName = "testname";
            string workflowName = "testname";
            ResourceIdentifier edgeWorkflowResourceId = EdgeWorkflowResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, contextName, workflowName);
            EdgeWorkflowResource edgeWorkflow = client.GetEdgeWorkflowResource(edgeWorkflowResourceId);

            // get the collection of this EdgeWorkflowVersionResource
            EdgeWorkflowVersionCollection collection = edgeWorkflow.GetEdgeWorkflowVersions();

            // invoke the operation
            string versionName = "testname";
            NullableResponse<EdgeWorkflowVersionResource> response = await collection.GetIfExistsAsync(versionName);
            EdgeWorkflowVersionResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                EdgeWorkflowVersionData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/tests/Generated/Samples/Sample_EdgeWorkflowVersionResource.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.WorkloadOrchestration.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.WorkloadOrchestration.Samples
{
    public partial class Sample_EdgeWorkflowVersionResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_WorkflowVersionsGetMaximumSet()
        {
            // Generated from example definition: 2025-06-01/WorkflowVersions_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "WorkflowVersion_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeWorkflowVersionResource created on azure
            // for more information of creating EdgeWorkflowVersionResource, please refer to the document of EdgeWorkflowVersionResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string contextName = "testname";
            string workflowName = "testname";
            string versionName = "testname";
            ResourceIdentifier edgeWorkflowVersionResourceId = EdgeWorkflowVersionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, contextName, workflowName, versionName);
            EdgeWorkflowVersionResource edgeWorkflowVersion = client.GetEdgeWorkflowVersionResource(edgeWorkflowVersionResourceId);

            // invoke the operation
            EdgeWorkflowVersionResource result = await edgeWorkflowVersion.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeWorkflowVersionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_WorkflowVersionsDeleteMaximumSet()
        {
            // Generated from example definition: 2025-06-01/WorkflowVersions_Delete_MaximumSet_Gen.json
            // this example is just showing the usage of "WorkflowVersion_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeWorkflowVersionResource created on azure
            // for more information of creating EdgeWorkflowVersionResource, please refer to the document of EdgeWorkflowVersionResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string contextName = "testname";
            string workflowName = "testname";
            string versionName = "testname";
            ResourceIdentifier edgeWorkflowVersionResourceId = EdgeWorkflowVersionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, contextName, workflowName, versionName);
            EdgeWorkflowVersionResource edgeWorkflowVersion = client.GetEdgeWorkflowVersionResource(edgeWorkflowVersionResourceId);

            // invoke the operation
            await edgeWorkflowVersion.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_WorkflowVersionsUpdateMaximumSet()
        {
            // Generated from example definition: 2025-06-01/WorkflowVersions_Update_MaximumSet_Gen.json
            // this example is just showing the usage of "WorkflowVersion_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EdgeWorkflowVersionResource created on azure
            // for more information of creating EdgeWorkflowVersionResource, please refer to the document of EdgeWorkflowVersionResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            string resourceGroupName = "rgconfigurationmanager";
            string contextName = "testname";
            string workflowName = "testname";
            string versionName = "testname";
            ResourceIdentifier edgeWorkflowVersionResourceId = EdgeWorkflowVersionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, contextName, workflowName, versionName);
            EdgeWorkflowVersionResource edgeWorkflowVersion = client.GetEdgeWorkflowVersionResource(edgeWorkflowVersionResourceId);

            // invoke the operation
            EdgeWorkflowVersionData data = new EdgeWorkflowVersionData
            {
                Properties = new EdgeWorkflowVersionProperties(new EdgeWorkflowStageSpec[]
            {
new EdgeWorkflowStageSpec("amrbjd")
{
Specification = {},
Tasks = {new EdgeWorkflowTaskSpec("xxmeyvmgydbcwxqwjhadjxjod", new Dictionary<string, BinaryData>())
{
TargetId = new ResourceIdentifier("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"),
}},
TaskOption = new EdgeWorkflowTaskConfig
{
Concurrency = 3,
ErrorAction = new TaskErrorAction
{
Mode = TaskErrorActionModeType.StopOnAnyFailure,
MaxToleratedFailures = 0,
},
},
}
            })
                {
                    Specification = { },
                },
            };
            ArmOperation<EdgeWorkflowVersionResource> lro = await edgeWorkflowVersion.UpdateAsync(WaitUntil.Completed, data);
            EdgeWorkflowVersionResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EdgeWorkflowVersionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/tests/Generated/Samples/Sample_SubscriptionResourceExtensions.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Resources;
using NUnit.Framework;

namespace Azure.ResourceManager.WorkloadOrchestration.Samples
{
    public partial class Sample_SubscriptionResourceExtensions
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetEdgeSchemas_SchemasListBySubscriptionMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Schemas_ListBySubscription_MaximumSet_Gen.json
            // this example is just showing the usage of "Schema_ListBySubscription" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SubscriptionResource created on azure
            // for more information of creating SubscriptionResource, please refer to the document of SubscriptionResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            ResourceIdentifier subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier(subscriptionId);
            SubscriptionResource subscriptionResource = client.GetSubscriptionResource(subscriptionResourceId);

            // invoke the operation and iterate over the result
            await foreach (EdgeSchemaResource item in subscriptionResource.GetEdgeSchemasAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                EdgeSchemaData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetEdgeTargets_TargetsListBySubscriptionMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Targets_ListBySubscription_MaximumSet_Gen.json
            // this example is just showing the usage of "Target_ListBySubscription" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SubscriptionResource created on azure
            // for more information of creating SubscriptionResource, please refer to the document of SubscriptionResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            ResourceIdentifier subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier(subscriptionId);
            SubscriptionResource subscriptionResource = client.GetSubscriptionResource(subscriptionResourceId);

            // invoke the operation and iterate over the result
            await foreach (EdgeTargetResource item in subscriptionResource.GetEdgeTargetsAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                EdgeTargetData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetEdgeSolutionTemplates_SolutionTemplatesListBySubscriptionMaximumSet()
        {
            // Generated from example definition: 2025-06-01/SolutionTemplates_ListBySubscription_MaximumSet_Gen.json
            // this example is just showing the usage of "SolutionTemplate_ListBySubscription" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SubscriptionResource created on azure
            // for more information of creating SubscriptionResource, please refer to the document of SubscriptionResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            ResourceIdentifier subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier(subscriptionId);
            SubscriptionResource subscriptionResource = client.GetSubscriptionResource(subscriptionResourceId);

            // invoke the operation and iterate over the result
            await foreach (EdgeSolutionTemplateResource item in subscriptionResource.GetEdgeSolutionTemplatesAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                EdgeSolutionTemplateData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetEdgeConfigTemplates_ConfigTemplatesListBySubscriptionMaximumSet()
        {
            // Generated from example definition: 2025-06-01/ConfigTemplates_ListBySubscription_MaximumSet_Gen.json
            // this example is just showing the usage of "ConfigTemplate_ListBySubscription" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SubscriptionResource created on azure
            // for more information of creating SubscriptionResource, please refer to the document of SubscriptionResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            ResourceIdentifier subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier(subscriptionId);
            SubscriptionResource subscriptionResource = client.GetSubscriptionResource(subscriptionResourceId);

            // invoke the operation and iterate over the result
            await foreach (EdgeConfigTemplateResource item in subscriptionResource.GetEdgeConfigTemplatesAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                EdgeConfigTemplateData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetEdgeDiagnostics_DiagnosticsListBySubscriptionMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Diagnostics_ListBySubscription_MaximumSet_Gen.json
            // this example is just showing the usage of "Diagnostic_ListBySubscription" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SubscriptionResource created on azure
            // for more information of creating SubscriptionResource, please refer to the document of SubscriptionResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            ResourceIdentifier subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier(subscriptionId);
            SubscriptionResource subscriptionResource = client.GetSubscriptionResource(subscriptionResourceId);

            // invoke the operation and iterate over the result
            await foreach (EdgeDiagnosticResource item in subscriptionResource.GetEdgeDiagnosticsAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                EdgeDiagnosticData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetEdgeContexts_ContextsListBySubscriptionMaximumSet()
        {
            // Generated from example definition: 2025-06-01/Contexts_ListBySubscription_MaximumSet_Gen.json
            // this example is just showing the usage of "Context_ListBySubscription" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SubscriptionResource created on azure
            // for more information of creating SubscriptionResource, please refer to the document of SubscriptionResource
            string subscriptionId = "9D54FE4C-00AF-4836-8F48-B6A9C4E47192";
            ResourceIdentifier subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier(subscriptionId);
            SubscriptionResource subscriptionResource = client.GetSubscriptionResource(subscriptionResourceId);

            // invoke the operation and iterate over the result
            await foreach (EdgeContextResource item in subscriptionResource.GetEdgeContextsAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                EdgeContextData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }
    }
}



================================================
FILE: sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/tests/Scenario/WorkloadOrchestrationScenarioTests.cs
================================================
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.WorkloadOrchestration.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.WorkloadOrchestration.Tests
{
  public class WorkloadOrchestrationScenarioTests : WorkloadOrchestrationTestBase
  {
    /// <summary>
    /// Initializes a new instance of the <see cref="WorkloadOrchestrationScenarioTests"/> class.
    /// </summary>
    /// <param name="isAsync">A flag indicating whether the test should run asynchronously.</param>
    /// <param name="mode">The recording mode for the test. If null, uses the default mode.</param>
    public WorkloadOrchestrationScenarioTests(bool isAsync) : base(isAsync)
    {
    }

    public static IEnumerable<object[]> TestData => new[] { new object[] { false }, new object[] { true } };

    [Test]
    [RecordedTest]
    public async Task Schema_LifecycleAsync()
    {
      string schemaName = Recording.GenerateAssetName("schema88");
      string schemaVersionName = Recording.GenerateAssetName("1.0.0");

      // Get client and resource group from test base
      ArmClient client = GetArmClient();
      ResourceGroupResource resourceGroupResource = GetResourceGroup();

      // Get schema collection and create new schema
      EdgeSchemaCollection collection = resourceGroupResource.GetEdgeSchemas();
      EdgeSchemaData data = new EdgeSchemaData(new AzureLocation("eastus2euap"))
      {
        Properties = new EdgeSchemaProperties()
      };

      // Create the schema
      ArmOperation<EdgeSchemaResource> createOperation = await collection.CreateOrUpdateAsync(WaitUntil.Completed, schemaName, data);
      EdgeSchemaResource createdSchema = createOperation.Value;
      Assert.NotNull(createdSchema, "Created schema should not be null");
      Assert.That(createdSchema.Data.Name, Is.EqualTo(schemaName));

      // Get the schema and verify
      EdgeSchemaResource retrievedSchema = await collection.GetAsync(schemaName);
      Assert.NotNull(retrievedSchema, "Retrieved schema should not be null");
      Assert.That(retrievedSchema.Data.Name, Is.EqualTo(schemaName));
      Assert.That(retrievedSchema.Data.Id, Is.EqualTo(createdSchema.Data.Id));

      // Now create a version for this schema
      EdgeSchemaVersionCollection versionCollection = retrievedSchema.GetEdgeSchemaVersions();

      EdgeSchemaVersionData versionData = new EdgeSchemaVersionData
      {
        Properties = new EdgeSchemaVersionProperties(
"rules:\r\n  configs:\r\n      ErrorThreshold:\r\n        type: float\r\n        required: true\r\n        editableAt:\r\n          - factory\r\n        editableBy:\r\n          - OT\r\n      HealthCheckEndpoint:\r\n        type: string\r\n        required: false\r\n        editableAt:\r\n          - line\r\n        editableBy:\r\n          - OT\r\n      EnableLocalLog:\r\n        type: boolean\r\n        required: true\r\n        editableAt:\r\n          - line\r\n        editableBy:\r\n          - OT\r\n      AgentEndpoint:\r\n        type: string\r\n        required: true\r\n        editableAt:\r\n          - line\r\n        editableBy:\r\n          - OT\r\n      HealthCheckEnabled:\r\n        type: boolean\r\n        required: false\r\n        editableAt:\r\n          - line\r\n        editableBy:\r\n          - OT\r\n      ApplicationEndpoint:\r\n        type: string\r\n        required: true\r\n        editableAt:\r\n          - line\r\n        editableBy:\r\n          - OT\r\n      TemperatureRangeMax:\r\n        type: float\r\n        required: true\r\n        editableAt:\r\n          - line\r\n        editableBy:\r\n          - OT\r\n"
          )
      };

      // Create the schema version
      ArmOperation<EdgeSchemaVersionResource> createVersionOperation = await versionCollection.CreateOrUpdateAsync(WaitUntil.Completed, schemaVersionName, versionData);
      EdgeSchemaVersionResource createdVersion = createVersionOperation.Value;
      Assert.NotNull(createdVersion, "Created schema version should not be null");
      Assert.That(createdVersion.Data.Name, Is.EqualTo(schemaVersionName));
    }
  }
}

